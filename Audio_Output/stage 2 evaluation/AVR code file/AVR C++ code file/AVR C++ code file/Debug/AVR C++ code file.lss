
AVR C++ code file.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000040c  00800100  00000c48  00000cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080050c  0080050c  000010e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e69  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074d  00000000  00000000  00001ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f8  00000000  00000000  00002746  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058d  00000000  00000000  00002e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e3  00000000  00000000  000033f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00003dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	15 e0       	ldi	r17, 0x05	; 5
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b5 e0       	ldi	r27, 0x05	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 29 03 	call	0x652	; 0x652 <main>
  9e:	0c 94 22 06 	jmp	0xc44	; 0xc44 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z11playthenoteff>:
#define STOPBUTTON_PIN 0
#define NEXTBUTTON_PIN 1

// function to generate sound using square waves
void playthenote(float frequency, float duration)
{
  a6:	4f 92       	push	r4
  a8:	5f 92       	push	r5
  aa:	6f 92       	push	r6
  ac:	7f 92       	push	r7
  ae:	8f 92       	push	r8
  b0:	9f 92       	push	r9
  b2:	af 92       	push	r10
  b4:	bf 92       	push	r11
  b6:	cf 92       	push	r12
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	00 d0       	rcall	.+0      	; 0xc4 <_Z11playthenoteff+0x1e>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <_Z11playthenoteff+0x20>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	6b 01       	movw	r12, r22
  cc:	7c 01       	movw	r14, r24
  ce:	49 01       	movw	r8, r18
  d0:	5a 01       	movw	r10, r20
	float period;
	
	// "period" is the wavelength calculated from frequency using the formula "period" = 1 / f.
	// We output 5 V for a length of time determined by half period (period/2), and then output 0 V, for the same length of time.
	
	if (frequency != 0){
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	a9 01       	movw	r20, r18
  d8:	0e 94 29 04 	call	0x852	; 0x852 <__cmpsf2>
  dc:	88 23       	and	r24, r24
  de:	09 f4       	brne	.+2      	; 0xe2 <_Z11playthenoteff+0x3c>
  e0:	b0 c0       	rjmp	.+352    	; 0x242 <_Z11playthenoteff+0x19c>
		period=(1/frequency)*1000;  // period in mile seconds
  e2:	a7 01       	movw	r20, r14
  e4:	96 01       	movw	r18, r12
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	9f e3       	ldi	r25, 0x3F	; 63
  ee:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	4a e7       	ldi	r20, 0x7A	; 122
  f8:	54 e4       	ldi	r21, 0x44	; 68
  fa:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
  fe:	6b 01       	movw	r12, r22
 100:	7c 01       	movw	r14, r24
		cycles=duration/period;
 102:	9b 01       	movw	r18, r22
 104:	ac 01       	movw	r20, r24
 106:	c5 01       	movw	r24, r10
 108:	b4 01       	movw	r22, r8
 10a:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
 10e:	0e 94 a0 04 	call	0x940	; 0x940 <__fixsfsi>
 112:	2b 01       	movw	r4, r22
 114:	3c 01       	movw	r6, r24
		half_period = period/2;
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	c7 01       	movw	r24, r14
 120:	b6 01       	movw	r22, r12
 122:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 126:	69 83       	std	Y+1, r22	; 0x01
 128:	7a 83       	std	Y+2, r23	; 0x02
 12a:	8b 83       	std	Y+3, r24	; 0x03
 12c:	9c 83       	std	Y+4, r25	; 0x04
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);
 12e:	87 b1       	in	r24, 0x07	; 7
 130:	81 60       	ori	r24, 0x01	; 1
 132:	87 b9       	out	0x07, r24	; 7

		for (i=0;i<cycles;i++)
 134:	81 2c       	mov	r8, r1
 136:	91 2c       	mov	r9, r1
 138:	54 01       	movw	r10, r8
 13a:	84 14       	cp	r8, r4
 13c:	95 04       	cpc	r9, r5
 13e:	a6 04       	cpc	r10, r6
 140:	b7 04       	cpc	r11, r7
 142:	0c f0       	brlt	.+2      	; 0x146 <_Z11playthenoteff+0xa0>
 144:	b8 c0       	rjmp	.+368    	; 0x2b6 <_Z11playthenoteff+0x210>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	4a ef       	ldi	r20, 0xFA	; 250
 14c:	54 e4       	ldi	r21, 0x44	; 68
 14e:	69 81       	ldd	r22, Y+1	; 0x01
 150:	7a 81       	ldd	r23, Y+2	; 0x02
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	9c 81       	ldd	r25, Y+4	; 0x04
 156:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 15a:	6b 01       	movw	r12, r22
 15c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	5f e3       	ldi	r21, 0x3F	; 63
 166:	0e 94 29 04 	call	0x852	; 0x852 <__cmpsf2>
 16a:	88 23       	and	r24, r24
 16c:	2c f1       	brlt	.+74     	; 0x1b8 <_Z11playthenoteff+0x112>
		__ticks = 1;
	else if (__tmp > 65535)
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	3f ef       	ldi	r19, 0xFF	; 255
 172:	4f e7       	ldi	r20, 0x7F	; 127
 174:	57 e4       	ldi	r21, 0x47	; 71
 176:	c7 01       	movw	r24, r14
 178:	b6 01       	movw	r22, r12
 17a:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 17e:	18 16       	cp	r1, r24
 180:	b4 f4       	brge	.+44     	; 0x1ae <_Z11playthenoteff+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e2       	ldi	r20, 0x20	; 32
 188:	51 e4       	ldi	r21, 0x41	; 65
 18a:	69 81       	ldd	r22, Y+1	; 0x01
 18c:	7a 81       	ldd	r23, Y+2	; 0x02
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	9c 81       	ldd	r25, Y+4	; 0x04
 192:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 196:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
		while(__ticks)
 19a:	61 15       	cp	r22, r1
 19c:	71 05       	cpc	r23, r1
 19e:	89 f0       	breq	.+34     	; 0x1c2 <_Z11playthenoteff+0x11c>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 1a0:	88 ec       	ldi	r24, 0xC8	; 200
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <_Z11playthenoteff+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a8:	61 50       	subi	r22, 0x01	; 1
 1aa:	71 09       	sbc	r23, r1
 1ac:	f6 cf       	rjmp	.-20     	; 0x19a <_Z11playthenoteff+0xf4>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ae:	c7 01       	movw	r24, r14
 1b0:	b6 01       	movw	r22, r12
 1b2:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <_Z11playthenoteff+0x116>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	cb 01       	movw	r24, r22
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <_Z11playthenoteff+0x118>
		{
			_delay_ms(half_period);
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
 1c2:	88 b1       	in	r24, 0x08	; 8
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	88 b9       	out	0x08, r24	; 8
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 e8       	ldi	r20, 0x80	; 128
 1ce:	5f e3       	ldi	r21, 0x3F	; 63
 1d0:	c7 01       	movw	r24, r14
 1d2:	b6 01       	movw	r22, r12
 1d4:	0e 94 29 04 	call	0x852	; 0x852 <__cmpsf2>
 1d8:	88 23       	and	r24, r24
 1da:	2c f1       	brlt	.+74     	; 0x226 <_Z11playthenoteff+0x180>
		__ticks = 1;
	else if (__tmp > 65535)
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	3f ef       	ldi	r19, 0xFF	; 255
 1e0:	4f e7       	ldi	r20, 0x7F	; 127
 1e2:	57 e4       	ldi	r21, 0x47	; 71
 1e4:	c7 01       	movw	r24, r14
 1e6:	b6 01       	movw	r22, r12
 1e8:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 1ec:	18 16       	cp	r1, r24
 1ee:	b4 f4       	brge	.+44     	; 0x21c <_Z11playthenoteff+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	40 e2       	ldi	r20, 0x20	; 32
 1f6:	51 e4       	ldi	r21, 0x41	; 65
 1f8:	69 81       	ldd	r22, Y+1	; 0x01
 1fa:	7a 81       	ldd	r23, Y+2	; 0x02
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 204:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
		while(__ticks)
 208:	61 15       	cp	r22, r1
 20a:	71 05       	cpc	r23, r1
 20c:	89 f0       	breq	.+34     	; 0x230 <_Z11playthenoteff+0x18a>
 20e:	88 ec       	ldi	r24, 0xC8	; 200
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <_Z11playthenoteff+0x16c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 216:	61 50       	subi	r22, 0x01	; 1
 218:	71 09       	sbc	r23, r1
 21a:	f6 cf       	rjmp	.-20     	; 0x208 <_Z11playthenoteff+0x162>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 21c:	c7 01       	movw	r24, r14
 21e:	b6 01       	movw	r22, r12
 220:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 224:	02 c0       	rjmp	.+4      	; 0x22a <_Z11playthenoteff+0x184>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	cb 01       	movw	r24, r22
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <_Z11playthenoteff+0x186>
			_delay_ms(half_period);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
 230:	88 b1       	in	r24, 0x08	; 8
 232:	8e 7f       	andi	r24, 0xFE	; 254
 234:	88 b9       	out	0x08, r24	; 8
		cycles=duration/period;
		half_period = period/2;
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);

		for (i=0;i<cycles;i++)
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	88 1a       	sub	r8, r24
 23a:	98 0a       	sbc	r9, r24
 23c:	a8 0a       	sbc	r10, r24
 23e:	b8 0a       	sbc	r11, r24
 240:	7c cf       	rjmp	.-264    	; 0x13a <_Z11playthenoteff+0x94>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	4a ef       	ldi	r20, 0xFA	; 250
 248:	54 e4       	ldi	r21, 0x44	; 68
 24a:	c5 01       	movw	r24, r10
 24c:	b4 01       	movw	r22, r8
 24e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 252:	6b 01       	movw	r12, r22
 254:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e8       	ldi	r20, 0x80	; 128
 25c:	5f e3       	ldi	r21, 0x3F	; 63
 25e:	0e 94 29 04 	call	0x852	; 0x852 <__cmpsf2>
 262:	88 23       	and	r24, r24
 264:	1c f1       	brlt	.+70     	; 0x2ac <_Z11playthenoteff+0x206>
		__ticks = 1;
	else if (__tmp > 65535)
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	3f ef       	ldi	r19, 0xFF	; 255
 26a:	4f e7       	ldi	r20, 0x7F	; 127
 26c:	57 e4       	ldi	r21, 0x47	; 71
 26e:	c7 01       	movw	r24, r14
 270:	b6 01       	movw	r22, r12
 272:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 276:	18 16       	cp	r1, r24
 278:	a4 f4       	brge	.+40     	; 0x2a2 <_Z11playthenoteff+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e2       	ldi	r20, 0x20	; 32
 280:	51 e4       	ldi	r21, 0x41	; 65
 282:	c5 01       	movw	r24, r10
 284:	b4 01       	movw	r22, r8
 286:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 28a:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
		while(__ticks)
 28e:	61 15       	cp	r22, r1
 290:	71 05       	cpc	r23, r1
 292:	89 f0       	breq	.+34     	; 0x2b6 <_Z11playthenoteff+0x210>
 294:	88 ec       	ldi	r24, 0xC8	; 200
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <_Z11playthenoteff+0x1f2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29c:	61 50       	subi	r22, 0x01	; 1
 29e:	71 09       	sbc	r23, r1
 2a0:	f6 cf       	rjmp	.-20     	; 0x28e <_Z11playthenoteff+0x1e8>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2a2:	c7 01       	movw	r24, r14
 2a4:	b6 01       	movw	r22, r12
 2a6:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <_Z11playthenoteff+0x20a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	cb 01       	movw	r24, r22
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <_Z11playthenoteff+0x20c>
	else {
		_delay_ms(duration);   // rest
	}

	return;
}
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	df 90       	pop	r13
 2c8:	cf 90       	pop	r12
 2ca:	bf 90       	pop	r11
 2cc:	af 90       	pop	r10
 2ce:	9f 90       	pop	r9
 2d0:	8f 90       	pop	r8
 2d2:	7f 90       	pop	r7
 2d4:	6f 90       	pop	r6
 2d6:	5f 90       	pop	r5
 2d8:	4f 90       	pop	r4
 2da:	08 95       	ret

000002dc <_Z10NextMelodyv>:

// function to select a melody
void NextMelody()
{
 2dc:	8f 92       	push	r8
 2de:	9f 92       	push	r9
 2e0:	af 92       	push	r10
 2e2:	bf 92       	push	r11
 2e4:	cf 92       	push	r12
 2e6:	df 92       	push	r13
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
	//         0                |   GOT
	//         1                |   Pirates of The Caribbean theme
	//         2                |   Star wars
	//         3                |   Coffin Dance
	//         4                |   Take On Me
	if ( BUTTON_PIN & (1<<NEXTBUTTON_PIN)){
 2ec:	19 9b       	sbis	0x03, 1	; 3
 2ee:	55 c0       	rjmp	.+170    	; 0x39a <_Z10NextMelodyv+0xbe>
		_delay_ms(debouncing_delay);
 2f0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <debouncing_delay>
 2f4:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <debouncing_delay+0x1>
 2f8:	07 2e       	mov	r0, r23
 2fa:	00 0c       	add	r0, r0
 2fc:	88 0b       	sbc	r24, r24
 2fe:	99 0b       	sbc	r25, r25
 300:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 304:	4b 01       	movw	r8, r22
 306:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	4a ef       	ldi	r20, 0xFA	; 250
 30e:	54 e4       	ldi	r21, 0x44	; 68
 310:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 314:	6b 01       	movw	r12, r22
 316:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	40 e8       	ldi	r20, 0x80	; 128
 31e:	5f e3       	ldi	r21, 0x3F	; 63
 320:	0e 94 29 04 	call	0x852	; 0x852 <__cmpsf2>
 324:	88 23       	and	r24, r24
 326:	1c f1       	brlt	.+70     	; 0x36e <_Z10NextMelodyv+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	3f ef       	ldi	r19, 0xFF	; 255
 32c:	4f e7       	ldi	r20, 0x7F	; 127
 32e:	57 e4       	ldi	r21, 0x47	; 71
 330:	c7 01       	movw	r24, r14
 332:	b6 01       	movw	r22, r12
 334:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 338:	18 16       	cp	r1, r24
 33a:	a4 f4       	brge	.+40     	; 0x364 <_Z10NextMelodyv+0x88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 e2       	ldi	r20, 0x20	; 32
 342:	51 e4       	ldi	r21, 0x41	; 65
 344:	c5 01       	movw	r24, r10
 346:	b4 01       	movw	r22, r8
 348:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 34c:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
		while(__ticks)
 350:	61 15       	cp	r22, r1
 352:	71 05       	cpc	r23, r1
 354:	89 f0       	breq	.+34     	; 0x378 <_Z10NextMelodyv+0x9c>
 356:	88 ec       	ldi	r24, 0xC8	; 200
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <_Z10NextMelodyv+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35e:	61 50       	subi	r22, 0x01	; 1
 360:	71 09       	sbc	r23, r1
 362:	f6 cf       	rjmp	.-20     	; 0x350 <_Z10NextMelodyv+0x74>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 364:	c7 01       	movw	r24, r14
 366:	b6 01       	movw	r22, r12
 368:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 36c:	02 c0       	rjmp	.+4      	; 0x372 <_Z10NextMelodyv+0x96>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	cb 01       	movw	r24, r22
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <_Z10NextMelodyv+0x98>
		playing += 1;
 378:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <playing>
 37c:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <playing+0x1>
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <playing+0x1>
 386:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <playing>
		selectedmelody = playing % 5;
 38a:	65 e0       	ldi	r22, 0x05	; 5
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__divmodhi4>
 392:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <__data_end+0x1>
 396:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <__data_end>
	}
}
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	bf 90       	pop	r11
 3a4:	af 90       	pop	r10
 3a6:	9f 90       	pop	r9
 3a8:	8f 90       	pop	r8
 3aa:	08 95       	ret

000003ac <_Z13playthemelodyPiS_i>:

// function to play the selected melody
void playthemelody(int Melody[], int MelodyDuration[], int size)
{
 3ac:	2f 92       	push	r2
 3ae:	3f 92       	push	r3
 3b0:	5f 92       	push	r5
 3b2:	6f 92       	push	r6
 3b4:	7f 92       	push	r7
 3b6:	8f 92       	push	r8
 3b8:	9f 92       	push	r9
 3ba:	af 92       	push	r10
 3bc:	bf 92       	push	r11
 3be:	cf 92       	push	r12
 3c0:	df 92       	push	r13
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	28 97       	sbiw	r28, 0x08	; 8
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	cd bf       	out	0x3d, r28	; 61
 3de:	1c 01       	movw	r2, r24
 3e0:	8b 01       	movw	r16, r22
 3e2:	3a 01       	movw	r6, r20
	// melody will play until the stop button is pressed.
	int still_playing = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	9e 83       	std	Y+6, r25	; 0x06
 3ea:	8d 83       	std	Y+5, r24	; 0x05
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <_Z13playthemelodyPiS_i+0x46>
 3ee:	9e 83       	std	Y+6, r25	; 0x06
 3f0:	8d 83       	std	Y+5, r24	; 0x05
	while(still_playing){
 3f2:	ed 81       	ldd	r30, Y+5	; 0x05
 3f4:	fe 81       	ldd	r31, Y+6	; 0x06
 3f6:	ef 2b       	or	r30, r31
 3f8:	09 f4       	brne	.+2      	; 0x3fc <_Z13playthemelodyPiS_i+0x50>
 3fa:	13 c1       	rjmp	.+550    	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	98 87       	std	Y+8, r25	; 0x08
 402:	8f 83       	std	Y+7, r24	; 0x07
		for (int x=0; x<size; x++){
 404:	ef 81       	ldd	r30, Y+7	; 0x07
 406:	f8 85       	ldd	r31, Y+8	; 0x08
 408:	e6 15       	cp	r30, r6
 40a:	f7 05       	cpc	r31, r7
 40c:	94 f7       	brge	.-28     	; 0x3f2 <_Z13playthemelodyPiS_i+0x46>
			playthenote(Melody[x],MelodyDuration[x]);
 40e:	7f 01       	movw	r14, r30
 410:	ee 0c       	add	r14, r14
 412:	ff 1c       	adc	r15, r15
 414:	68 01       	movw	r12, r16
 416:	ce 0c       	add	r12, r14
 418:	df 1c       	adc	r13, r15
 41a:	f6 01       	movw	r30, r12
 41c:	60 81       	ld	r22, Z
 41e:	71 81       	ldd	r23, Z+1	; 0x01
 420:	07 2e       	mov	r0, r23
 422:	00 0c       	add	r0, r0
 424:	88 0b       	sbc	r24, r24
 426:	99 0b       	sbc	r25, r25
 428:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 42c:	4b 01       	movw	r8, r22
 42e:	5c 01       	movw	r10, r24
 430:	f1 01       	movw	r30, r2
 432:	ee 0d       	add	r30, r14
 434:	ff 1d       	adc	r31, r15
 436:	60 81       	ld	r22, Z
 438:	71 81       	ldd	r23, Z+1	; 0x01
 43a:	07 2e       	mov	r0, r23
 43c:	00 0c       	add	r0, r0
 43e:	88 0b       	sbc	r24, r24
 440:	99 0b       	sbc	r25, r25
 442:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 446:	a5 01       	movw	r20, r10
 448:	94 01       	movw	r18, r8
 44a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11playthenoteff>
			_delay_us(MelodyDuration[x]);
 44e:	f6 01       	movw	r30, r12
 450:	60 81       	ld	r22, Z
 452:	71 81       	ldd	r23, Z+1	; 0x01
 454:	07 2e       	mov	r0, r23
 456:	00 0c       	add	r0, r0
 458:	88 0b       	sbc	r24, r24
 45a:	99 0b       	sbc	r25, r25
 45c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 460:	6b 01       	movw	r12, r22
 462:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 464:	2b ea       	ldi	r18, 0xAB	; 171
 466:	3a ea       	ldi	r19, 0xAA	; 170
 468:	4a e2       	ldi	r20, 0x2A	; 42
 46a:	50 e4       	ldi	r21, 0x40	; 64
 46c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 470:	4b 01       	movw	r8, r22
 472:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
 474:	a7 01       	movw	r20, r14
 476:	96 01       	movw	r18, r12
 478:	c7 01       	movw	r24, r14
 47a:	b6 01       	movw	r22, r12
 47c:	0e 94 bd 03 	call	0x77a	; 0x77a <__addsf3>
 480:	69 83       	std	Y+1, r22	; 0x01
 482:	7a 83       	std	Y+2, r23	; 0x02
 484:	8b 83       	std	Y+3, r24	; 0x03
 486:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	40 e8       	ldi	r20, 0x80	; 128
 48e:	5f e3       	ldi	r21, 0x3F	; 63
 490:	c5 01       	movw	r24, r10
 492:	b4 01       	movw	r22, r8
 494:	0e 94 29 04 	call	0x852	; 0x852 <__cmpsf2>
 498:	88 23       	and	r24, r24
 49a:	0c f4       	brge	.+2      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49c:	6a c0       	rjmp	.+212    	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
		__ticks = 1;
	else if (__tmp2 > 65535)
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	3f ef       	ldi	r19, 0xFF	; 255
 4a2:	4f e7       	ldi	r20, 0x7F	; 127
 4a4:	57 e4       	ldi	r21, 0x47	; 71
 4a6:	69 81       	ldd	r22, Y+1	; 0x01
 4a8:	7a 81       	ldd	r23, Y+2	; 0x02
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	9c 81       	ldd	r25, Y+4	; 0x04
 4ae:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 4b2:	18 16       	cp	r1, r24
 4b4:	0c f0       	brlt	.+2      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b6:	43 c0       	rjmp	.+134    	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
	{
		_delay_ms(__us / 1000.0);
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	4a e7       	ldi	r20, 0x7A	; 122
 4be:	54 e4       	ldi	r21, 0x44	; 68
 4c0:	c7 01       	movw	r24, r14
 4c2:	b6 01       	movw	r22, r12
 4c4:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3>
 4c8:	4b 01       	movw	r8, r22
 4ca:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4cc:	20 e0       	ldi	r18, 0x00	; 0
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	4a ef       	ldi	r20, 0xFA	; 250
 4d2:	54 e4       	ldi	r21, 0x44	; 68
 4d4:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 4d8:	6b 01       	movw	r12, r22
 4da:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	40 e8       	ldi	r20, 0x80	; 128
 4e2:	5f e3       	ldi	r21, 0x3F	; 63
 4e4:	0e 94 29 04 	call	0x852	; 0x852 <__cmpsf2>
 4e8:	88 23       	and	r24, r24
 4ea:	1c f1       	brlt	.+70     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
		__ticks = 1;
	else if (__tmp > 65535)
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	3f ef       	ldi	r19, 0xFF	; 255
 4f0:	4f e7       	ldi	r20, 0x7F	; 127
 4f2:	57 e4       	ldi	r21, 0x47	; 71
 4f4:	c7 01       	movw	r24, r14
 4f6:	b6 01       	movw	r22, r12
 4f8:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 4fc:	18 16       	cp	r1, r24
 4fe:	a4 f4       	brge	.+40     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	40 e2       	ldi	r20, 0x20	; 32
 506:	51 e4       	ldi	r21, 0x41	; 65
 508:	c5 01       	movw	r24, r10
 50a:	b4 01       	movw	r22, r8
 50c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 510:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
		while(__ticks)
 514:	61 15       	cp	r22, r1
 516:	71 05       	cpc	r23, r1
 518:	79 f1       	breq	.+94     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 51a:	88 ec       	ldi	r24, 0xC8	; 200
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 522:	61 50       	subi	r22, 0x01	; 1
 524:	71 09       	sbc	r23, r1
 526:	f6 cf       	rjmp	.-20     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 528:	c7 01       	movw	r24, r14
 52a:	b6 01       	movw	r22, r12
 52c:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 530:	02 c0       	rjmp	.+4      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	cb 01       	movw	r24, r22
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 53c:	1d c0       	rjmp	.+58     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	4f e7       	ldi	r20, 0x7F	; 127
 544:	53 e4       	ldi	r21, 0x43	; 67
 546:	c5 01       	movw	r24, r10
 548:	b4 01       	movw	r22, r8
 54a:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 54e:	18 16       	cp	r1, r24
 550:	54 f4       	brge	.+20     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 552:	69 81       	ldd	r22, Y+1	; 0x01
 554:	7a 81       	ldd	r23, Y+2	; 0x02
 556:	8b 81       	ldd	r24, Y+3	; 0x03
 558:	9c 81       	ldd	r25, Y+4	; 0x04
 55a:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 55e:	cb 01       	movw	r24, r22
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 564:	0c c0       	rjmp	.+24     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 566:	c5 01       	movw	r24, r10
 568:	b4 01       	movw	r22, r8
 56a:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 56e:	56 2e       	mov	r5, r22
 570:	03 c0       	rjmp	.+6      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 572:	55 24       	eor	r5, r5
 574:	53 94       	inc	r5
 576:	00 c0       	rjmp	.+0      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
 578:	85 2d       	mov	r24, r5
 57a:	8a 95       	dec	r24
 57c:	f1 f7       	brne	.-4      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
			// check whether the stop button is pressed. if so, stop the melody
			if ( BUTTON_PIN & (1<<STOPBUTTON_PIN)){
 57e:	18 9b       	sbis	0x03, 0	; 3
 580:	4a c0       	rjmp	.+148    	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
				_delay_ms(debouncing_delay);
 582:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <debouncing_delay>
 586:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <debouncing_delay+0x1>
 58a:	07 2e       	mov	r0, r23
 58c:	00 0c       	add	r0, r0
 58e:	88 0b       	sbc	r24, r24
 590:	99 0b       	sbc	r25, r25
 592:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 596:	4b 01       	movw	r8, r22
 598:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	4a ef       	ldi	r20, 0xFA	; 250
 5a0:	54 e4       	ldi	r21, 0x44	; 68
 5a2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 5a6:	6b 01       	movw	r12, r22
 5a8:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 5aa:	20 e0       	ldi	r18, 0x00	; 0
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	40 e8       	ldi	r20, 0x80	; 128
 5b0:	5f e3       	ldi	r21, 0x3F	; 63
 5b2:	0e 94 29 04 	call	0x852	; 0x852 <__cmpsf2>
 5b6:	88 23       	and	r24, r24
 5b8:	34 f1       	brlt	.+76     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		__ticks = 1;
	else if (__tmp > 65535)
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	3f ef       	ldi	r19, 0xFF	; 255
 5be:	4f e7       	ldi	r20, 0x7F	; 127
 5c0:	57 e4       	ldi	r21, 0x47	; 71
 5c2:	c7 01       	movw	r24, r14
 5c4:	b6 01       	movw	r22, r12
 5c6:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 5ca:	18 16       	cp	r1, r24
 5cc:	bc f4       	brge	.+46     	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	40 e2       	ldi	r20, 0x20	; 32
 5d4:	51 e4       	ldi	r21, 0x41	; 65
 5d6:	c5 01       	movw	r24, r10
 5d8:	b4 01       	movw	r22, r8
 5da:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 5de:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
		while(__ticks)
 5e6:	61 15       	cp	r22, r1
 5e8:	71 05       	cpc	r23, r1
 5ea:	09 f4       	brne	.+2      	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
 5ec:	00 cf       	rjmp	.-512    	; 0x3ee <_Z13playthemelodyPiS_i+0x42>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 5ee:	88 ec       	ldi	r24, 0xC8	; 200
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	01 97       	sbiw	r24, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5f6:	61 50       	subi	r22, 0x01	; 1
 5f8:	71 09       	sbc	r23, r1
 5fa:	f3 cf       	rjmp	.-26     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5fc:	c7 01       	movw	r24, r14
 5fe:	b6 01       	movw	r22, r12
 600:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 604:	02 c0       	rjmp	.+4      	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	cb 01       	movw	r24, r22
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	f1 f7       	brne	.-4      	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
 610:	1e 82       	std	Y+6, r1	; 0x06
 612:	1d 82       	std	Y+5, r1	; 0x05
 614:	ee ce       	rjmp	.-548    	; 0x3f2 <_Z13playthemelodyPiS_i+0x46>
void playthemelody(int Melody[], int MelodyDuration[], int size)
{
	// melody will play until the stop button is pressed.
	int still_playing = 1;
	while(still_playing){
		for (int x=0; x<size; x++){
 616:	8f 81       	ldd	r24, Y+7	; 0x07
 618:	98 85       	ldd	r25, Y+8	; 0x08
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	98 87       	std	Y+8, r25	; 0x08
 61e:	8f 83       	std	Y+7, r24	; 0x07
 620:	f1 ce       	rjmp	.-542    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
				still_playing = 0;
				break;
			}
		}
	}
}
 622:	28 96       	adiw	r28, 0x08	; 8
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	ff 90       	pop	r15
 638:	ef 90       	pop	r14
 63a:	df 90       	pop	r13
 63c:	cf 90       	pop	r12
 63e:	bf 90       	pop	r11
 640:	af 90       	pop	r10
 642:	9f 90       	pop	r9
 644:	8f 90       	pop	r8
 646:	7f 90       	pop	r7
 648:	6f 90       	pop	r6
 64a:	5f 90       	pop	r5
 64c:	3f 90       	pop	r3
 64e:	2f 90       	pop	r2
 650:	08 95       	ret

00000652 <main>:
int sizeoftakeonme = sizeof(TakeOnMe)/sizeof(TakeOnMe[0]);

int main(void)
{
	// declaring portB pin 6 & 7 as inputs
	DDRB= 0b11111100;
 652:	8c ef       	ldi	r24, 0xFC	; 252
 654:	84 b9       	out	0x04, r24	; 4
	
	
	while (1)
	{
		// selecting the melody that want to play
		NextMelody();
 656:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Z10NextMelodyv>
		// check whether the play button is pressed. if so, play the selected melody
		if ( BUTTON_PIN & (1<<PLAYBUTTON_PIN)){
 65a:	18 9b       	sbis	0x03, 0	; 3
 65c:	fc cf       	rjmp	.-8      	; 0x656 <main+0x4>
			_delay_ms(debouncing_delay);
 65e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <debouncing_delay>
 662:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <debouncing_delay+0x1>
 666:	07 2e       	mov	r0, r23
 668:	00 0c       	add	r0, r0
 66a:	88 0b       	sbc	r24, r24
 66c:	99 0b       	sbc	r25, r25
 66e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 672:	4b 01       	movw	r8, r22
 674:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 676:	20 e0       	ldi	r18, 0x00	; 0
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	4a ef       	ldi	r20, 0xFA	; 250
 67c:	54 e4       	ldi	r21, 0x44	; 68
 67e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 682:	6b 01       	movw	r12, r22
 684:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	40 e8       	ldi	r20, 0x80	; 128
 68c:	5f e3       	ldi	r21, 0x3F	; 63
 68e:	0e 94 29 04 	call	0x852	; 0x852 <__cmpsf2>
 692:	88 23       	and	r24, r24
 694:	1c f1       	brlt	.+70     	; 0x6dc <main+0x8a>
		__ticks = 1;
	else if (__tmp > 65535)
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	3f ef       	ldi	r19, 0xFF	; 255
 69a:	4f e7       	ldi	r20, 0x7F	; 127
 69c:	57 e4       	ldi	r21, 0x47	; 71
 69e:	c7 01       	movw	r24, r14
 6a0:	b6 01       	movw	r22, r12
 6a2:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 6a6:	18 16       	cp	r1, r24
 6a8:	a4 f4       	brge	.+40     	; 0x6d2 <main+0x80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	40 e2       	ldi	r20, 0x20	; 32
 6b0:	51 e4       	ldi	r21, 0x41	; 65
 6b2:	c5 01       	movw	r24, r10
 6b4:	b4 01       	movw	r22, r8
 6b6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__mulsf3>
 6ba:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
		while(__ticks)
 6be:	61 15       	cp	r22, r1
 6c0:	71 05       	cpc	r23, r1
 6c2:	89 f0       	breq	.+34     	; 0x6e6 <main+0x94>
 6c4:	88 ec       	ldi	r24, 0xC8	; 200
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <main+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6cc:	61 50       	subi	r22, 0x01	; 1
 6ce:	71 09       	sbc	r23, r1
 6d0:	f6 cf       	rjmp	.-20     	; 0x6be <main+0x6c>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6d2:	c7 01       	movw	r24, r14
 6d4:	b6 01       	movw	r22, r12
 6d6:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <main+0x8e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 6dc:	61 e0       	ldi	r22, 0x01	; 1
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	cb 01       	movw	r24, r22
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <main+0x90>
			if (selectedmelody == 0){
 6e6:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <__data_end>
 6ea:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <__data_end+0x1>
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	59 f4       	brne	.+22     	; 0x708 <main+0xb6>
				playthemelody(GOT, GOTDurations, sizeofgot);
 6f2:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <sizeofgot>
 6f6:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <sizeofgot+0x1>
 6fa:	64 ec       	ldi	r22, 0xC4	; 196
 6fc:	74 e0       	ldi	r23, 0x04	; 4
 6fe:	88 ee       	ldi	r24, 0xE8	; 232
 700:	94 e0       	ldi	r25, 0x04	; 4
 702:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z13playthemelodyPiS_i>
 706:	a7 cf       	rjmp	.-178    	; 0x656 <main+0x4>
			}
			else if (selectedmelody == 1){
 708:	81 30       	cpi	r24, 0x01	; 1
 70a:	91 05       	cpc	r25, r1
 70c:	59 f4       	brne	.+22     	; 0x724 <main+0xd2>
				playthemelody(Pirates, PiratesDurations, sizeofpirates);
 70e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <sizeofpirates>
 712:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <sizeofpirates+0x1>
 716:	64 e9       	ldi	r22, 0x94	; 148
 718:	73 e0       	ldi	r23, 0x03	; 3
 71a:	8c e2       	ldi	r24, 0x2C	; 44
 71c:	94 e0       	ldi	r25, 0x04	; 4
 71e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z13playthemelodyPiS_i>
 722:	99 cf       	rjmp	.-206    	; 0x656 <main+0x4>
			}
			else if (selectedmelody == 2){
 724:	82 30       	cpi	r24, 0x02	; 2
 726:	91 05       	cpc	r25, r1
 728:	59 f4       	brne	.+22     	; 0x740 <main+0xee>
				playthemelody(StarWars, StarWarsDurations, sizeofstarwars);
 72a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <sizeofstarwars>
 72e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <sizeofstarwars+0x1>
 732:	6c ef       	ldi	r22, 0xFC	; 252
 734:	72 e0       	ldi	r23, 0x02	; 2
 736:	88 e4       	ldi	r24, 0x48	; 72
 738:	93 e0       	ldi	r25, 0x03	; 3
 73a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z13playthemelodyPiS_i>
 73e:	8b cf       	rjmp	.-234    	; 0x656 <main+0x4>
			}
			else if (selectedmelody == 3){
 740:	83 30       	cpi	r24, 0x03	; 3
 742:	91 05       	cpc	r25, r1
 744:	59 f4       	brne	.+22     	; 0x75c <main+0x10a>
				playthemelody(CoffinDance, CoffinDanceDurations, sizeofcoffindance);
 746:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <sizeofcoffindance>
 74a:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <sizeofcoffindance+0x1>
 74e:	6c e6       	ldi	r22, 0x6C	; 108
 750:	71 e0       	ldi	r23, 0x01	; 1
 752:	84 e3       	ldi	r24, 0x34	; 52
 754:	92 e0       	ldi	r25, 0x02	; 2
 756:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z13playthemelodyPiS_i>
 75a:	7d cf       	rjmp	.-262    	; 0x656 <main+0x4>
			}
			else if (selectedmelody == 4){
 75c:	04 97       	sbiw	r24, 0x04	; 4
 75e:	09 f0       	breq	.+2      	; 0x762 <main+0x110>
 760:	7a cf       	rjmp	.-268    	; 0x656 <main+0x4>
				playthemelody(TakeOnMe, TakeOnMeDurations, sizeoftakeonme);
 762:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 766:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 76a:	6c e0       	ldi	r22, 0x0C	; 12
 76c:	71 e0       	ldi	r23, 0x01	; 1
 76e:	8c e3       	ldi	r24, 0x3C	; 60
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z13playthemelodyPiS_i>
 776:	6f cf       	rjmp	.-290    	; 0x656 <main+0x4>

00000778 <__subsf3>:
 778:	50 58       	subi	r21, 0x80	; 128

0000077a <__addsf3>:
 77a:	bb 27       	eor	r27, r27
 77c:	aa 27       	eor	r26, r26
 77e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__addsf3x>
 782:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_round>
 786:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_pscA>
 78a:	38 f0       	brcs	.+14     	; 0x79a <__addsf3+0x20>
 78c:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_pscB>
 790:	20 f0       	brcs	.+8      	; 0x79a <__addsf3+0x20>
 792:	39 f4       	brne	.+14     	; 0x7a2 <__addsf3+0x28>
 794:	9f 3f       	cpi	r25, 0xFF	; 255
 796:	19 f4       	brne	.+6      	; 0x79e <__addsf3+0x24>
 798:	26 f4       	brtc	.+8      	; 0x7a2 <__addsf3+0x28>
 79a:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_nan>
 79e:	0e f4       	brtc	.+2      	; 0x7a2 <__addsf3+0x28>
 7a0:	e0 95       	com	r30
 7a2:	e7 fb       	bst	r30, 7
 7a4:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>

000007a8 <__addsf3x>:
 7a8:	e9 2f       	mov	r30, r25
 7aa:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_split3>
 7ae:	58 f3       	brcs	.-42     	; 0x786 <__addsf3+0xc>
 7b0:	ba 17       	cp	r27, r26
 7b2:	62 07       	cpc	r22, r18
 7b4:	73 07       	cpc	r23, r19
 7b6:	84 07       	cpc	r24, r20
 7b8:	95 07       	cpc	r25, r21
 7ba:	20 f0       	brcs	.+8      	; 0x7c4 <__addsf3x+0x1c>
 7bc:	79 f4       	brne	.+30     	; 0x7dc <__addsf3x+0x34>
 7be:	a6 f5       	brtc	.+104    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7c0:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_zero>
 7c4:	0e f4       	brtc	.+2      	; 0x7c8 <__addsf3x+0x20>
 7c6:	e0 95       	com	r30
 7c8:	0b 2e       	mov	r0, r27
 7ca:	ba 2f       	mov	r27, r26
 7cc:	a0 2d       	mov	r26, r0
 7ce:	0b 01       	movw	r0, r22
 7d0:	b9 01       	movw	r22, r18
 7d2:	90 01       	movw	r18, r0
 7d4:	0c 01       	movw	r0, r24
 7d6:	ca 01       	movw	r24, r20
 7d8:	a0 01       	movw	r20, r0
 7da:	11 24       	eor	r1, r1
 7dc:	ff 27       	eor	r31, r31
 7de:	59 1b       	sub	r21, r25
 7e0:	99 f0       	breq	.+38     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e2:	59 3f       	cpi	r21, 0xF9	; 249
 7e4:	50 f4       	brcc	.+20     	; 0x7fa <__addsf3x+0x52>
 7e6:	50 3e       	cpi	r21, 0xE0	; 224
 7e8:	68 f1       	brcs	.+90     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 7ea:	1a 16       	cp	r1, r26
 7ec:	f0 40       	sbci	r31, 0x00	; 0
 7ee:	a2 2f       	mov	r26, r18
 7f0:	23 2f       	mov	r18, r19
 7f2:	34 2f       	mov	r19, r20
 7f4:	44 27       	eor	r20, r20
 7f6:	58 5f       	subi	r21, 0xF8	; 248
 7f8:	f3 cf       	rjmp	.-26     	; 0x7e0 <__addsf3x+0x38>
 7fa:	46 95       	lsr	r20
 7fc:	37 95       	ror	r19
 7fe:	27 95       	ror	r18
 800:	a7 95       	ror	r26
 802:	f0 40       	sbci	r31, 0x00	; 0
 804:	53 95       	inc	r21
 806:	c9 f7       	brne	.-14     	; 0x7fa <__addsf3x+0x52>
 808:	7e f4       	brtc	.+30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 80a:	1f 16       	cp	r1, r31
 80c:	ba 0b       	sbc	r27, r26
 80e:	62 0b       	sbc	r22, r18
 810:	73 0b       	sbc	r23, r19
 812:	84 0b       	sbc	r24, r20
 814:	ba f0       	brmi	.+46     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 816:	91 50       	subi	r25, 0x01	; 1
 818:	a1 f0       	breq	.+40     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 81a:	ff 0f       	add	r31, r31
 81c:	bb 1f       	adc	r27, r27
 81e:	66 1f       	adc	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	c2 f7       	brpl	.-16     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 826:	0e c0       	rjmp	.+28     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 828:	ba 0f       	add	r27, r26
 82a:	62 1f       	adc	r22, r18
 82c:	73 1f       	adc	r23, r19
 82e:	84 1f       	adc	r24, r20
 830:	48 f4       	brcc	.+18     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 832:	87 95       	ror	r24
 834:	77 95       	ror	r23
 836:	67 95       	ror	r22
 838:	b7 95       	ror	r27
 83a:	f7 95       	ror	r31
 83c:	9e 3f       	cpi	r25, 0xFE	; 254
 83e:	08 f0       	brcs	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 840:	b0 cf       	rjmp	.-160    	; 0x7a2 <__addsf3+0x28>
 842:	93 95       	inc	r25
 844:	88 0f       	add	r24, r24
 846:	08 f0       	brcs	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 848:	99 27       	eor	r25, r25
 84a:	ee 0f       	add	r30, r30
 84c:	97 95       	ror	r25
 84e:	87 95       	ror	r24
 850:	08 95       	ret

00000852 <__cmpsf2>:
 852:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_cmp>
 856:	08 f4       	brcc	.+2      	; 0x85a <__cmpsf2+0x8>
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	08 95       	ret

0000085c <__divsf3>:
 85c:	0e 94 42 04 	call	0x884	; 0x884 <__divsf3x>
 860:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_round>
 864:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_pscB>
 868:	58 f0       	brcs	.+22     	; 0x880 <__divsf3+0x24>
 86a:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_pscA>
 86e:	40 f0       	brcs	.+16     	; 0x880 <__divsf3+0x24>
 870:	29 f4       	brne	.+10     	; 0x87c <__divsf3+0x20>
 872:	5f 3f       	cpi	r21, 0xFF	; 255
 874:	29 f0       	breq	.+10     	; 0x880 <__divsf3+0x24>
 876:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
 87a:	51 11       	cpse	r21, r1
 87c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_szero>
 880:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_nan>

00000884 <__divsf3x>:
 884:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_split3>
 888:	68 f3       	brcs	.-38     	; 0x864 <__divsf3+0x8>

0000088a <__divsf3_pse>:
 88a:	99 23       	and	r25, r25
 88c:	b1 f3       	breq	.-20     	; 0x87a <__divsf3+0x1e>
 88e:	55 23       	and	r21, r21
 890:	91 f3       	breq	.-28     	; 0x876 <__divsf3+0x1a>
 892:	95 1b       	sub	r25, r21
 894:	55 0b       	sbc	r21, r21
 896:	bb 27       	eor	r27, r27
 898:	aa 27       	eor	r26, r26
 89a:	62 17       	cp	r22, r18
 89c:	73 07       	cpc	r23, r19
 89e:	84 07       	cpc	r24, r20
 8a0:	38 f0       	brcs	.+14     	; 0x8b0 <__divsf3_pse+0x26>
 8a2:	9f 5f       	subi	r25, 0xFF	; 255
 8a4:	5f 4f       	sbci	r21, 0xFF	; 255
 8a6:	22 0f       	add	r18, r18
 8a8:	33 1f       	adc	r19, r19
 8aa:	44 1f       	adc	r20, r20
 8ac:	aa 1f       	adc	r26, r26
 8ae:	a9 f3       	breq	.-22     	; 0x89a <__divsf3_pse+0x10>
 8b0:	35 d0       	rcall	.+106    	; 0x91c <__stack+0x1d>
 8b2:	0e 2e       	mov	r0, r30
 8b4:	3a f0       	brmi	.+14     	; 0x8c4 <__divsf3_pse+0x3a>
 8b6:	e0 e8       	ldi	r30, 0x80	; 128
 8b8:	32 d0       	rcall	.+100    	; 0x91e <__stack+0x1f>
 8ba:	91 50       	subi	r25, 0x01	; 1
 8bc:	50 40       	sbci	r21, 0x00	; 0
 8be:	e6 95       	lsr	r30
 8c0:	00 1c       	adc	r0, r0
 8c2:	ca f7       	brpl	.-14     	; 0x8b6 <__divsf3_pse+0x2c>
 8c4:	2b d0       	rcall	.+86     	; 0x91c <__stack+0x1d>
 8c6:	fe 2f       	mov	r31, r30
 8c8:	29 d0       	rcall	.+82     	; 0x91c <__stack+0x1d>
 8ca:	66 0f       	add	r22, r22
 8cc:	77 1f       	adc	r23, r23
 8ce:	88 1f       	adc	r24, r24
 8d0:	bb 1f       	adc	r27, r27
 8d2:	26 17       	cp	r18, r22
 8d4:	37 07       	cpc	r19, r23
 8d6:	48 07       	cpc	r20, r24
 8d8:	ab 07       	cpc	r26, r27
 8da:	b0 e8       	ldi	r27, 0x80	; 128
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <__divsf3_pse+0x56>
 8de:	bb 0b       	sbc	r27, r27
 8e0:	80 2d       	mov	r24, r0
 8e2:	bf 01       	movw	r22, r30
 8e4:	ff 27       	eor	r31, r31
 8e6:	93 58       	subi	r25, 0x83	; 131
 8e8:	5f 4f       	sbci	r21, 0xFF	; 255
 8ea:	3a f0       	brmi	.+14     	; 0x8fa <__divsf3_pse+0x70>
 8ec:	9e 3f       	cpi	r25, 0xFE	; 254
 8ee:	51 05       	cpc	r21, r1
 8f0:	78 f0       	brcs	.+30     	; 0x910 <__stack+0x11>
 8f2:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
 8f6:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_szero>
 8fa:	5f 3f       	cpi	r21, 0xFF	; 255
 8fc:	e4 f3       	brlt	.-8      	; 0x8f6 <__divsf3_pse+0x6c>
 8fe:	98 3e       	cpi	r25, 0xE8	; 232
 900:	d4 f3       	brlt	.-12     	; 0x8f6 <__divsf3_pse+0x6c>
 902:	86 95       	lsr	r24
 904:	77 95       	ror	r23
 906:	67 95       	ror	r22
 908:	b7 95       	ror	r27
 90a:	f7 95       	ror	r31
 90c:	9f 5f       	subi	r25, 0xFF	; 255
 90e:	c9 f7       	brne	.-14     	; 0x902 <__stack+0x3>
 910:	88 0f       	add	r24, r24
 912:	91 1d       	adc	r25, r1
 914:	96 95       	lsr	r25
 916:	87 95       	ror	r24
 918:	97 f9       	bld	r25, 7
 91a:	08 95       	ret
 91c:	e1 e0       	ldi	r30, 0x01	; 1
 91e:	66 0f       	add	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	bb 1f       	adc	r27, r27
 926:	62 17       	cp	r22, r18
 928:	73 07       	cpc	r23, r19
 92a:	84 07       	cpc	r24, r20
 92c:	ba 07       	cpc	r27, r26
 92e:	20 f0       	brcs	.+8      	; 0x938 <__stack+0x39>
 930:	62 1b       	sub	r22, r18
 932:	73 0b       	sbc	r23, r19
 934:	84 0b       	sbc	r24, r20
 936:	ba 0b       	sbc	r27, r26
 938:	ee 1f       	adc	r30, r30
 93a:	88 f7       	brcc	.-30     	; 0x91e <__stack+0x1f>
 93c:	e0 95       	com	r30
 93e:	08 95       	ret

00000940 <__fixsfsi>:
 940:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
 944:	68 94       	set
 946:	b1 11       	cpse	r27, r1
 948:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_szero>
 94c:	08 95       	ret

0000094e <__fixunssfsi>:
 94e:	0e 94 67 05 	call	0xace	; 0xace <__fp_splitA>
 952:	88 f0       	brcs	.+34     	; 0x976 <__fixunssfsi+0x28>
 954:	9f 57       	subi	r25, 0x7F	; 127
 956:	98 f0       	brcs	.+38     	; 0x97e <__fixunssfsi+0x30>
 958:	b9 2f       	mov	r27, r25
 95a:	99 27       	eor	r25, r25
 95c:	b7 51       	subi	r27, 0x17	; 23
 95e:	b0 f0       	brcs	.+44     	; 0x98c <__fixunssfsi+0x3e>
 960:	e1 f0       	breq	.+56     	; 0x99a <__fixunssfsi+0x4c>
 962:	66 0f       	add	r22, r22
 964:	77 1f       	adc	r23, r23
 966:	88 1f       	adc	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	1a f0       	brmi	.+6      	; 0x972 <__fixunssfsi+0x24>
 96c:	ba 95       	dec	r27
 96e:	c9 f7       	brne	.-14     	; 0x962 <__fixunssfsi+0x14>
 970:	14 c0       	rjmp	.+40     	; 0x99a <__fixunssfsi+0x4c>
 972:	b1 30       	cpi	r27, 0x01	; 1
 974:	91 f0       	breq	.+36     	; 0x99a <__fixunssfsi+0x4c>
 976:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_zero>
 97a:	b1 e0       	ldi	r27, 0x01	; 1
 97c:	08 95       	ret
 97e:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_zero>
 982:	67 2f       	mov	r22, r23
 984:	78 2f       	mov	r23, r24
 986:	88 27       	eor	r24, r24
 988:	b8 5f       	subi	r27, 0xF8	; 248
 98a:	39 f0       	breq	.+14     	; 0x99a <__fixunssfsi+0x4c>
 98c:	b9 3f       	cpi	r27, 0xF9	; 249
 98e:	cc f3       	brlt	.-14     	; 0x982 <__fixunssfsi+0x34>
 990:	86 95       	lsr	r24
 992:	77 95       	ror	r23
 994:	67 95       	ror	r22
 996:	b3 95       	inc	r27
 998:	d9 f7       	brne	.-10     	; 0x990 <__fixunssfsi+0x42>
 99a:	3e f4       	brtc	.+14     	; 0x9aa <__fixunssfsi+0x5c>
 99c:	90 95       	com	r25
 99e:	80 95       	com	r24
 9a0:	70 95       	com	r23
 9a2:	61 95       	neg	r22
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255
 9a6:	8f 4f       	sbci	r24, 0xFF	; 255
 9a8:	9f 4f       	sbci	r25, 0xFF	; 255
 9aa:	08 95       	ret

000009ac <__floatunsisf>:
 9ac:	e8 94       	clt
 9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <__floatsisf+0x12>

000009b0 <__floatsisf>:
 9b0:	97 fb       	bst	r25, 7
 9b2:	3e f4       	brtc	.+14     	; 0x9c2 <__floatsisf+0x12>
 9b4:	90 95       	com	r25
 9b6:	80 95       	com	r24
 9b8:	70 95       	com	r23
 9ba:	61 95       	neg	r22
 9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 9be:	8f 4f       	sbci	r24, 0xFF	; 255
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	99 23       	and	r25, r25
 9c4:	a9 f0       	breq	.+42     	; 0x9f0 <__floatsisf+0x40>
 9c6:	f9 2f       	mov	r31, r25
 9c8:	96 e9       	ldi	r25, 0x96	; 150
 9ca:	bb 27       	eor	r27, r27
 9cc:	93 95       	inc	r25
 9ce:	f6 95       	lsr	r31
 9d0:	87 95       	ror	r24
 9d2:	77 95       	ror	r23
 9d4:	67 95       	ror	r22
 9d6:	b7 95       	ror	r27
 9d8:	f1 11       	cpse	r31, r1
 9da:	f8 cf       	rjmp	.-16     	; 0x9cc <__floatsisf+0x1c>
 9dc:	fa f4       	brpl	.+62     	; 0xa1c <__floatsisf+0x6c>
 9de:	bb 0f       	add	r27, r27
 9e0:	11 f4       	brne	.+4      	; 0x9e6 <__floatsisf+0x36>
 9e2:	60 ff       	sbrs	r22, 0
 9e4:	1b c0       	rjmp	.+54     	; 0xa1c <__floatsisf+0x6c>
 9e6:	6f 5f       	subi	r22, 0xFF	; 255
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	8f 4f       	sbci	r24, 0xFF	; 255
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	16 c0       	rjmp	.+44     	; 0xa1c <__floatsisf+0x6c>
 9f0:	88 23       	and	r24, r24
 9f2:	11 f0       	breq	.+4      	; 0x9f8 <__floatsisf+0x48>
 9f4:	96 e9       	ldi	r25, 0x96	; 150
 9f6:	11 c0       	rjmp	.+34     	; 0xa1a <__floatsisf+0x6a>
 9f8:	77 23       	and	r23, r23
 9fa:	21 f0       	breq	.+8      	; 0xa04 <__floatsisf+0x54>
 9fc:	9e e8       	ldi	r25, 0x8E	; 142
 9fe:	87 2f       	mov	r24, r23
 a00:	76 2f       	mov	r23, r22
 a02:	05 c0       	rjmp	.+10     	; 0xa0e <__floatsisf+0x5e>
 a04:	66 23       	and	r22, r22
 a06:	71 f0       	breq	.+28     	; 0xa24 <__floatsisf+0x74>
 a08:	96 e8       	ldi	r25, 0x86	; 134
 a0a:	86 2f       	mov	r24, r22
 a0c:	70 e0       	ldi	r23, 0x00	; 0
 a0e:	60 e0       	ldi	r22, 0x00	; 0
 a10:	2a f0       	brmi	.+10     	; 0xa1c <__floatsisf+0x6c>
 a12:	9a 95       	dec	r25
 a14:	66 0f       	add	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	88 1f       	adc	r24, r24
 a1a:	da f7       	brpl	.-10     	; 0xa12 <__floatsisf+0x62>
 a1c:	88 0f       	add	r24, r24
 a1e:	96 95       	lsr	r25
 a20:	87 95       	ror	r24
 a22:	97 f9       	bld	r25, 7
 a24:	08 95       	ret

00000a26 <__fp_cmp>:
 a26:	99 0f       	add	r25, r25
 a28:	00 08       	sbc	r0, r0
 a2a:	55 0f       	add	r21, r21
 a2c:	aa 0b       	sbc	r26, r26
 a2e:	e0 e8       	ldi	r30, 0x80	; 128
 a30:	fe ef       	ldi	r31, 0xFE	; 254
 a32:	16 16       	cp	r1, r22
 a34:	17 06       	cpc	r1, r23
 a36:	e8 07       	cpc	r30, r24
 a38:	f9 07       	cpc	r31, r25
 a3a:	c0 f0       	brcs	.+48     	; 0xa6c <__fp_cmp+0x46>
 a3c:	12 16       	cp	r1, r18
 a3e:	13 06       	cpc	r1, r19
 a40:	e4 07       	cpc	r30, r20
 a42:	f5 07       	cpc	r31, r21
 a44:	98 f0       	brcs	.+38     	; 0xa6c <__fp_cmp+0x46>
 a46:	62 1b       	sub	r22, r18
 a48:	73 0b       	sbc	r23, r19
 a4a:	84 0b       	sbc	r24, r20
 a4c:	95 0b       	sbc	r25, r21
 a4e:	39 f4       	brne	.+14     	; 0xa5e <__fp_cmp+0x38>
 a50:	0a 26       	eor	r0, r26
 a52:	61 f0       	breq	.+24     	; 0xa6c <__fp_cmp+0x46>
 a54:	23 2b       	or	r18, r19
 a56:	24 2b       	or	r18, r20
 a58:	25 2b       	or	r18, r21
 a5a:	21 f4       	brne	.+8      	; 0xa64 <__fp_cmp+0x3e>
 a5c:	08 95       	ret
 a5e:	0a 26       	eor	r0, r26
 a60:	09 f4       	brne	.+2      	; 0xa64 <__fp_cmp+0x3e>
 a62:	a1 40       	sbci	r26, 0x01	; 1
 a64:	a6 95       	lsr	r26
 a66:	8f ef       	ldi	r24, 0xFF	; 255
 a68:	81 1d       	adc	r24, r1
 a6a:	81 1d       	adc	r24, r1
 a6c:	08 95       	ret

00000a6e <__fp_inf>:
 a6e:	97 f9       	bld	r25, 7
 a70:	9f 67       	ori	r25, 0x7F	; 127
 a72:	80 e8       	ldi	r24, 0x80	; 128
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	60 e0       	ldi	r22, 0x00	; 0
 a78:	08 95       	ret

00000a7a <__fp_nan>:
 a7a:	9f ef       	ldi	r25, 0xFF	; 255
 a7c:	80 ec       	ldi	r24, 0xC0	; 192
 a7e:	08 95       	ret

00000a80 <__fp_pscA>:
 a80:	00 24       	eor	r0, r0
 a82:	0a 94       	dec	r0
 a84:	16 16       	cp	r1, r22
 a86:	17 06       	cpc	r1, r23
 a88:	18 06       	cpc	r1, r24
 a8a:	09 06       	cpc	r0, r25
 a8c:	08 95       	ret

00000a8e <__fp_pscB>:
 a8e:	00 24       	eor	r0, r0
 a90:	0a 94       	dec	r0
 a92:	12 16       	cp	r1, r18
 a94:	13 06       	cpc	r1, r19
 a96:	14 06       	cpc	r1, r20
 a98:	05 06       	cpc	r0, r21
 a9a:	08 95       	ret

00000a9c <__fp_round>:
 a9c:	09 2e       	mov	r0, r25
 a9e:	03 94       	inc	r0
 aa0:	00 0c       	add	r0, r0
 aa2:	11 f4       	brne	.+4      	; 0xaa8 <__fp_round+0xc>
 aa4:	88 23       	and	r24, r24
 aa6:	52 f0       	brmi	.+20     	; 0xabc <__fp_round+0x20>
 aa8:	bb 0f       	add	r27, r27
 aaa:	40 f4       	brcc	.+16     	; 0xabc <__fp_round+0x20>
 aac:	bf 2b       	or	r27, r31
 aae:	11 f4       	brne	.+4      	; 0xab4 <__fp_round+0x18>
 ab0:	60 ff       	sbrs	r22, 0
 ab2:	04 c0       	rjmp	.+8      	; 0xabc <__fp_round+0x20>
 ab4:	6f 5f       	subi	r22, 0xFF	; 255
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	8f 4f       	sbci	r24, 0xFF	; 255
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	08 95       	ret

00000abe <__fp_split3>:
 abe:	57 fd       	sbrc	r21, 7
 ac0:	90 58       	subi	r25, 0x80	; 128
 ac2:	44 0f       	add	r20, r20
 ac4:	55 1f       	adc	r21, r21
 ac6:	59 f0       	breq	.+22     	; 0xade <__fp_splitA+0x10>
 ac8:	5f 3f       	cpi	r21, 0xFF	; 255
 aca:	71 f0       	breq	.+28     	; 0xae8 <__fp_splitA+0x1a>
 acc:	47 95       	ror	r20

00000ace <__fp_splitA>:
 ace:	88 0f       	add	r24, r24
 ad0:	97 fb       	bst	r25, 7
 ad2:	99 1f       	adc	r25, r25
 ad4:	61 f0       	breq	.+24     	; 0xaee <__fp_splitA+0x20>
 ad6:	9f 3f       	cpi	r25, 0xFF	; 255
 ad8:	79 f0       	breq	.+30     	; 0xaf8 <__fp_splitA+0x2a>
 ada:	87 95       	ror	r24
 adc:	08 95       	ret
 ade:	12 16       	cp	r1, r18
 ae0:	13 06       	cpc	r1, r19
 ae2:	14 06       	cpc	r1, r20
 ae4:	55 1f       	adc	r21, r21
 ae6:	f2 cf       	rjmp	.-28     	; 0xacc <__fp_split3+0xe>
 ae8:	46 95       	lsr	r20
 aea:	f1 df       	rcall	.-30     	; 0xace <__fp_splitA>
 aec:	08 c0       	rjmp	.+16     	; 0xafe <__fp_splitA+0x30>
 aee:	16 16       	cp	r1, r22
 af0:	17 06       	cpc	r1, r23
 af2:	18 06       	cpc	r1, r24
 af4:	99 1f       	adc	r25, r25
 af6:	f1 cf       	rjmp	.-30     	; 0xada <__fp_splitA+0xc>
 af8:	86 95       	lsr	r24
 afa:	71 05       	cpc	r23, r1
 afc:	61 05       	cpc	r22, r1
 afe:	08 94       	sec
 b00:	08 95       	ret

00000b02 <__fp_zero>:
 b02:	e8 94       	clt

00000b04 <__fp_szero>:
 b04:	bb 27       	eor	r27, r27
 b06:	66 27       	eor	r22, r22
 b08:	77 27       	eor	r23, r23
 b0a:	cb 01       	movw	r24, r22
 b0c:	97 f9       	bld	r25, 7
 b0e:	08 95       	ret

00000b10 <__gesf2>:
 b10:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_cmp>
 b14:	08 f4       	brcc	.+2      	; 0xb18 <__gesf2+0x8>
 b16:	8f ef       	ldi	r24, 0xFF	; 255
 b18:	08 95       	ret

00000b1a <__mulsf3>:
 b1a:	0e 94 a0 05 	call	0xb40	; 0xb40 <__mulsf3x>
 b1e:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_round>
 b22:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_pscA>
 b26:	38 f0       	brcs	.+14     	; 0xb36 <__mulsf3+0x1c>
 b28:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_pscB>
 b2c:	20 f0       	brcs	.+8      	; 0xb36 <__mulsf3+0x1c>
 b2e:	95 23       	and	r25, r21
 b30:	11 f0       	breq	.+4      	; 0xb36 <__mulsf3+0x1c>
 b32:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
 b36:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_nan>
 b3a:	11 24       	eor	r1, r1
 b3c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_szero>

00000b40 <__mulsf3x>:
 b40:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_split3>
 b44:	70 f3       	brcs	.-36     	; 0xb22 <__mulsf3+0x8>

00000b46 <__mulsf3_pse>:
 b46:	95 9f       	mul	r25, r21
 b48:	c1 f3       	breq	.-16     	; 0xb3a <__mulsf3+0x20>
 b4a:	95 0f       	add	r25, r21
 b4c:	50 e0       	ldi	r21, 0x00	; 0
 b4e:	55 1f       	adc	r21, r21
 b50:	62 9f       	mul	r22, r18
 b52:	f0 01       	movw	r30, r0
 b54:	72 9f       	mul	r23, r18
 b56:	bb 27       	eor	r27, r27
 b58:	f0 0d       	add	r31, r0
 b5a:	b1 1d       	adc	r27, r1
 b5c:	63 9f       	mul	r22, r19
 b5e:	aa 27       	eor	r26, r26
 b60:	f0 0d       	add	r31, r0
 b62:	b1 1d       	adc	r27, r1
 b64:	aa 1f       	adc	r26, r26
 b66:	64 9f       	mul	r22, r20
 b68:	66 27       	eor	r22, r22
 b6a:	b0 0d       	add	r27, r0
 b6c:	a1 1d       	adc	r26, r1
 b6e:	66 1f       	adc	r22, r22
 b70:	82 9f       	mul	r24, r18
 b72:	22 27       	eor	r18, r18
 b74:	b0 0d       	add	r27, r0
 b76:	a1 1d       	adc	r26, r1
 b78:	62 1f       	adc	r22, r18
 b7a:	73 9f       	mul	r23, r19
 b7c:	b0 0d       	add	r27, r0
 b7e:	a1 1d       	adc	r26, r1
 b80:	62 1f       	adc	r22, r18
 b82:	83 9f       	mul	r24, r19
 b84:	a0 0d       	add	r26, r0
 b86:	61 1d       	adc	r22, r1
 b88:	22 1f       	adc	r18, r18
 b8a:	74 9f       	mul	r23, r20
 b8c:	33 27       	eor	r19, r19
 b8e:	a0 0d       	add	r26, r0
 b90:	61 1d       	adc	r22, r1
 b92:	23 1f       	adc	r18, r19
 b94:	84 9f       	mul	r24, r20
 b96:	60 0d       	add	r22, r0
 b98:	21 1d       	adc	r18, r1
 b9a:	82 2f       	mov	r24, r18
 b9c:	76 2f       	mov	r23, r22
 b9e:	6a 2f       	mov	r22, r26
 ba0:	11 24       	eor	r1, r1
 ba2:	9f 57       	subi	r25, 0x7F	; 127
 ba4:	50 40       	sbci	r21, 0x00	; 0
 ba6:	9a f0       	brmi	.+38     	; 0xbce <__mulsf3_pse+0x88>
 ba8:	f1 f0       	breq	.+60     	; 0xbe6 <__mulsf3_pse+0xa0>
 baa:	88 23       	and	r24, r24
 bac:	4a f0       	brmi	.+18     	; 0xbc0 <__mulsf3_pse+0x7a>
 bae:	ee 0f       	add	r30, r30
 bb0:	ff 1f       	adc	r31, r31
 bb2:	bb 1f       	adc	r27, r27
 bb4:	66 1f       	adc	r22, r22
 bb6:	77 1f       	adc	r23, r23
 bb8:	88 1f       	adc	r24, r24
 bba:	91 50       	subi	r25, 0x01	; 1
 bbc:	50 40       	sbci	r21, 0x00	; 0
 bbe:	a9 f7       	brne	.-22     	; 0xbaa <__mulsf3_pse+0x64>
 bc0:	9e 3f       	cpi	r25, 0xFE	; 254
 bc2:	51 05       	cpc	r21, r1
 bc4:	80 f0       	brcs	.+32     	; 0xbe6 <__mulsf3_pse+0xa0>
 bc6:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
 bca:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_szero>
 bce:	5f 3f       	cpi	r21, 0xFF	; 255
 bd0:	e4 f3       	brlt	.-8      	; 0xbca <__mulsf3_pse+0x84>
 bd2:	98 3e       	cpi	r25, 0xE8	; 232
 bd4:	d4 f3       	brlt	.-12     	; 0xbca <__mulsf3_pse+0x84>
 bd6:	86 95       	lsr	r24
 bd8:	77 95       	ror	r23
 bda:	67 95       	ror	r22
 bdc:	b7 95       	ror	r27
 bde:	f7 95       	ror	r31
 be0:	e7 95       	ror	r30
 be2:	9f 5f       	subi	r25, 0xFF	; 255
 be4:	c1 f7       	brne	.-16     	; 0xbd6 <__mulsf3_pse+0x90>
 be6:	fe 2b       	or	r31, r30
 be8:	88 0f       	add	r24, r24
 bea:	91 1d       	adc	r25, r1
 bec:	96 95       	lsr	r25
 bee:	87 95       	ror	r24
 bf0:	97 f9       	bld	r25, 7
 bf2:	08 95       	ret

00000bf4 <__divmodhi4>:
 bf4:	97 fb       	bst	r25, 7
 bf6:	07 2e       	mov	r0, r23
 bf8:	16 f4       	brtc	.+4      	; 0xbfe <__divmodhi4+0xa>
 bfa:	00 94       	com	r0
 bfc:	07 d0       	rcall	.+14     	; 0xc0c <__divmodhi4_neg1>
 bfe:	77 fd       	sbrc	r23, 7
 c00:	09 d0       	rcall	.+18     	; 0xc14 <__divmodhi4_neg2>
 c02:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__udivmodhi4>
 c06:	07 fc       	sbrc	r0, 7
 c08:	05 d0       	rcall	.+10     	; 0xc14 <__divmodhi4_neg2>
 c0a:	3e f4       	brtc	.+14     	; 0xc1a <__divmodhi4_exit>

00000c0c <__divmodhi4_neg1>:
 c0c:	90 95       	com	r25
 c0e:	81 95       	neg	r24
 c10:	9f 4f       	sbci	r25, 0xFF	; 255
 c12:	08 95       	ret

00000c14 <__divmodhi4_neg2>:
 c14:	70 95       	com	r23
 c16:	61 95       	neg	r22
 c18:	7f 4f       	sbci	r23, 0xFF	; 255

00000c1a <__divmodhi4_exit>:
 c1a:	08 95       	ret

00000c1c <__udivmodhi4>:
 c1c:	aa 1b       	sub	r26, r26
 c1e:	bb 1b       	sub	r27, r27
 c20:	51 e1       	ldi	r21, 0x11	; 17
 c22:	07 c0       	rjmp	.+14     	; 0xc32 <__udivmodhi4_ep>

00000c24 <__udivmodhi4_loop>:
 c24:	aa 1f       	adc	r26, r26
 c26:	bb 1f       	adc	r27, r27
 c28:	a6 17       	cp	r26, r22
 c2a:	b7 07       	cpc	r27, r23
 c2c:	10 f0       	brcs	.+4      	; 0xc32 <__udivmodhi4_ep>
 c2e:	a6 1b       	sub	r26, r22
 c30:	b7 0b       	sbc	r27, r23

00000c32 <__udivmodhi4_ep>:
 c32:	88 1f       	adc	r24, r24
 c34:	99 1f       	adc	r25, r25
 c36:	5a 95       	dec	r21
 c38:	a9 f7       	brne	.-22     	; 0xc24 <__udivmodhi4_loop>
 c3a:	80 95       	com	r24
 c3c:	90 95       	com	r25
 c3e:	bc 01       	movw	r22, r24
 c40:	cd 01       	movw	r24, r26
 c42:	08 95       	ret

00000c44 <_exit>:
 c44:	f8 94       	cli

00000c46 <__stop_program>:
 c46:	ff cf       	rjmp	.-2      	; 0xc46 <__stop_program>
