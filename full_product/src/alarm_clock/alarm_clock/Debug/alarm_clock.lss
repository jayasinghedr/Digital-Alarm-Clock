
alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000698  00800100  000021be  00002252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  00800798  00800798  000028ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000291c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000439f  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b1  00000000  00000000  00006e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018d9  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  00009920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cde  00000000  00000000  00009df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002394  00000000  00000000  0000aad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000ce6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	17 e0       	ldi	r17, 0x07	; 7
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee eb       	ldi	r30, 0xBE	; 190
      7c:	f1 e2       	ldi	r31, 0x21	; 33
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 39       	cpi	r26, 0x98	; 152
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a8 e9       	ldi	r26, 0x98	; 152
      8e:	b7 e0       	ldi	r27, 0x07	; 7
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3f       	cpi	r26, 0xF5	; 245
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <main>
      9e:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN10AlarmClock11int_to_charEi>:
 
 ds1307 ds1307_1;
 LCD_Display lcd_1;
 Get_key keypad_1;

 char* AlarmClock::int_to_char(int num){
      a6:	9b 01       	movw	r18, r22
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
      a8:	6a 30       	cpi	r22, 0x0A	; 10
      aa:	71 05       	cpc	r23, r1
      ac:	ec f0       	brlt	.+58     	; 0xe8 <_ZN10AlarmClock11int_to_charEi+0x42>
		 chArr = "__";
		 x = num / 10;
      ae:	cb 01       	movw	r24, r22
      b0:	6a e0       	ldi	r22, 0x0A	; 10
      b2:	70 e0       	ldi	r23, 0x00	; 0
      b4:	0e 94 b5 10 	call	0x216a	; 0x216a <__divmodhi4>
		 div = x + 48;
      b8:	ab 01       	movw	r20, r22
      ba:	40 5d       	subi	r20, 0xD0	; 208
      bc:	5f 4f       	sbci	r21, 0xFF	; 255
		 rem = (num % (10 * x)) + 48;
      be:	cb 01       	movw	r24, r22
      c0:	88 0f       	add	r24, r24
      c2:	99 1f       	adc	r25, r25
      c4:	66 0f       	add	r22, r22
      c6:	77 1f       	adc	r23, r23
      c8:	66 0f       	add	r22, r22
      ca:	77 1f       	adc	r23, r23
      cc:	66 0f       	add	r22, r22
      ce:	77 1f       	adc	r23, r23
      d0:	68 0f       	add	r22, r24
      d2:	79 1f       	adc	r23, r25
      d4:	c9 01       	movw	r24, r18
      d6:	0e 94 b5 10 	call	0x216a	; 0x216a <__divmodhi4>
      da:	c0 96       	adiw	r24, 0x30	; 48
		 char ch1 = div;
		 char ch2 = rem;
		 chArr[0] = ch1;
      dc:	e6 e0       	ldi	r30, 0x06	; 6
      de:	f7 e0       	ldi	r31, 0x07	; 7
      e0:	40 83       	st	Z, r20
		 chArr[1] = ch2;
      e2:	81 83       	std	Z+1, r24	; 0x01

 char* AlarmClock::int_to_char(int num){
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
		 chArr = "__";
      e4:	cf 01       	movw	r24, r30
      e6:	08 95       	ret
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
		 temp = num + 48;
      e8:	20 5d       	subi	r18, 0xD0	; 208
      ea:	3f 4f       	sbci	r19, 0xFF	; 255
		 char ch = temp;
		 chArr[1] = ch;
      ec:	20 93 0a 07 	sts	0x070A, r18	; 0x80070a <GOT+0x34>
		 char ch2 = rem;
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
      f0:	89 e0       	ldi	r24, 0x09	; 9
      f2:	97 e0       	ldi	r25, 0x07	; 7
		 temp = num + 48;
		 char ch = temp;
		 chArr[1] = ch;
	 }
	 return chArr;
 }
      f4:	08 95       	ret

000000f6 <_ZN10AlarmClock11displayTimeEv>:

 void AlarmClock::displayTime(){
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	8c 01       	movw	r16, r24

	 char* time1 = "    00:00:00     ";
	 int sec, min, hr;
	 //uint8_t sec_bcd, min_bcd, hr_bcd;

	 sec = ds1307_1.read_time(0x00);	//read from seconds reg
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	83 ea       	ldi	r24, 0xA3	; 163
     10c:	97 e0       	ldi	r25, 0x07	; 7
     10e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN6ds13079read_timeEh>
     112:	7c 01       	movw	r14, r24
	 min = ds1307_1.read_time(0x01);	//read from minutes reg
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	83 ea       	ldi	r24, 0xA3	; 163
     118:	97 e0       	ldi	r25, 0x07	; 7
     11a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN6ds13079read_timeEh>
     11e:	6c 01       	movw	r12, r24
	 hr = ds1307_1.read_time(0x02);		//read from hours reg
     120:	62 e0       	ldi	r22, 0x02	; 2
     122:	83 ea       	ldi	r24, 0xA3	; 163
     124:	97 e0       	ldi	r25, 0x07	; 7
     126:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN6ds13079read_timeEh>
	 
	 str_hr = int_to_char(hr);
     12a:	bc 01       	movw	r22, r24
     12c:	c8 01       	movw	r24, r16
     12e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[4] = str_hr[0];
     132:	fc 01       	movw	r30, r24
     134:	20 81       	ld	r18, Z
     136:	cc e0       	ldi	r28, 0x0C	; 12
     138:	d7 e0       	ldi	r29, 0x07	; 7
     13a:	2c 83       	std	Y+4, r18	; 0x04
	 time1[5] = str_hr[1];
     13c:	81 81       	ldd	r24, Z+1	; 0x01
     13e:	8d 83       	std	Y+5, r24	; 0x05
	 
	 str_min = int_to_char(min);
     140:	b6 01       	movw	r22, r12
     142:	c8 01       	movw	r24, r16
     144:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[7] = str_min[0];
     148:	fc 01       	movw	r30, r24
     14a:	20 81       	ld	r18, Z
     14c:	2f 83       	std	Y+7, r18	; 0x07
	 time1[8] = str_min[1];
     14e:	81 81       	ldd	r24, Z+1	; 0x01
     150:	88 87       	std	Y+8, r24	; 0x08
	 
	 str_sec = int_to_char(sec);
     152:	b7 01       	movw	r22, r14
     154:	c8 01       	movw	r24, r16
     156:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[10] = str_sec[0];
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	2a 87       	std	Y+10, r18	; 0x0a
	 time1[11] = str_sec[1];
     160:	81 81       	ldd	r24, Z+1	; 0x01
     162:	8b 87       	std	Y+11, r24	; 0x0b
	 
	 lcd_1.LCD_String_xy(0, 0, time1);       //Write string on 1st line of LCD
     164:	9e 01       	movw	r18, r28
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	8d e9       	ldi	r24, 0x9D	; 157
     16c:	97 e0       	ldi	r25, 0x07	; 7
     16e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
	 lcd_1.LCD_String_xy(1, 0, "MENU            ");		//Write string on 2nd line
     172:	2e e1       	ldi	r18, 0x1E	; 30
     174:	37 e0       	ldi	r19, 0x07	; 7
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	8d e9       	ldi	r24, 0x9D	; 157
     17c:	97 e0       	ldi	r25, 0x07	; 7
     17e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     182:	ff ef       	ldi	r31, 0xFF	; 255
     184:	29 e6       	ldi	r18, 0x69	; 105
     186:	88 e1       	ldi	r24, 0x18	; 24
     188:	f1 50       	subi	r31, 0x01	; 1
     18a:	20 40       	sbci	r18, 0x00	; 0
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	e1 f7       	brne	.-8      	; 0x188 <_ZN10AlarmClock11displayTimeEv+0x92>
     190:	00 c0       	rjmp	.+0      	; 0x192 <_ZN10AlarmClock11displayTimeEv+0x9c>
     192:	00 00       	nop
	 _delay_ms(1000);
}
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	cf 90       	pop	r12
     1a4:	08 95       	ret

000001a6 <_ZN10AlarmClock12setTimetoRTCEv>:

 void AlarmClock::setTimetoRTC(){
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	63 97       	sbiw	r28, 0x13	; 19
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
	int n[6] = {4, 5, 7, 8, 10, 11};
     1ca:	8c e0       	ldi	r24, 0x0C	; 12
     1cc:	ea ef       	ldi	r30, 0xFA	; 250
     1ce:	f6 e0       	ldi	r31, 0x06	; 6
     1d0:	de 01       	movw	r26, r28
     1d2:	18 96       	adiw	r26, 0x08	; 8
     1d4:	01 90       	ld	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	8a 95       	dec	r24
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <_ZN10AlarmClock12setTimetoRTCEv+0x2e>
	lcd_1.LCD_Clear();
     1dc:	8d e9       	ldi	r24, 0x9D	; 157
     1de:	97 e0       	ldi	r25, 0x07	; 7
     1e0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
	lcd_1.LCD_String_xy(0, 4, time);
     1e4:	2f e2       	ldi	r18, 0x2F	; 47
     1e6:	37 e0       	ldi	r19, 0x07	; 7
     1e8:	44 e0       	ldi	r20, 0x04	; 4
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	8d e9       	ldi	r24, 0x9D	; 157
     1ee:	97 e0       	ldi	r25, 0x07	; 7
     1f0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     1f4:	2f ef       	ldi	r18, 0xFF	; 255
     1f6:	84 e3       	ldi	r24, 0x34	; 52
     1f8:	9c e0       	ldi	r25, 0x0C	; 12
     1fa:	21 50       	subi	r18, 0x01	; 1
     1fc:	80 40       	sbci	r24, 0x00	; 0
     1fe:	90 40       	sbci	r25, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <_ZN10AlarmClock12setTimetoRTCEv+0x54>
     202:	00 c0       	rjmp	.+0      	; 0x204 <_ZN10AlarmClock12setTimetoRTCEv+0x5e>
     204:	00 00       	nop
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     206:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
     208:	e1 2c       	mov	r14, r1
     20a:	f1 2c       	mov	r15, r1
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
     20c:	a1 2c       	mov	r10, r1
     20e:	b1 2c       	mov	r11, r1
	
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
     210:	c1 2c       	mov	r12, r1
     212:	d1 2c       	mov	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     214:	07 30       	cpi	r16, 0x07	; 7
     216:	08 f0       	brcs	.+2      	; 0x21a <_ZN10AlarmClock12setTimetoRTCEv+0x74>
     218:	26 c1       	rjmp	.+588    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
	{
		while(1){
			key = keypad_1.GetKey();
     21a:	8c e9       	ldi	r24, 0x9C	; 156
     21c:	97 e0       	ldi	r25, 0x07	; 7
     21e:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN7Get_key6GetKeyEv>
     222:	18 2f       	mov	r17, r24
			if (key == 1) {lcd_1.LCD_String_xy(0,n[i],"1");break;}
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	99 f4       	brne	.+38     	; 0x24e <_ZN10AlarmClock12setTimetoRTCEv+0xa8>
     228:	e0 2f       	mov	r30, r16
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	ee 0f       	add	r30, r30
     22e:	ff 1f       	adc	r31, r31
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	8c 0f       	add	r24, r28
     236:	9d 1f       	adc	r25, r29
     238:	e8 0f       	add	r30, r24
     23a:	f9 1f       	adc	r31, r25
     23c:	47 81       	ldd	r20, Z+7	; 0x07
     23e:	28 e3       	ldi	r18, 0x38	; 56
     240:	37 e0       	ldi	r19, 0x07	; 7
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	8d e9       	ldi	r24, 0x9D	; 157
     246:	97 e0       	ldi	r25, 0x07	; 7
     248:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     24c:	cb c0       	rjmp	.+406    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
			if (key == 2) {lcd_1.LCD_String_xy(0,n[i],"2");break;}
     24e:	82 30       	cpi	r24, 0x02	; 2
     250:	99 f4       	brne	.+38     	; 0x278 <_ZN10AlarmClock12setTimetoRTCEv+0xd2>
     252:	e0 2f       	mov	r30, r16
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	8c 0f       	add	r24, r28
     260:	9d 1f       	adc	r25, r29
     262:	e8 0f       	add	r30, r24
     264:	f9 1f       	adc	r31, r25
     266:	47 81       	ldd	r20, Z+7	; 0x07
     268:	2a e3       	ldi	r18, 0x3A	; 58
     26a:	37 e0       	ldi	r19, 0x07	; 7
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	8d e9       	ldi	r24, 0x9D	; 157
     270:	97 e0       	ldi	r25, 0x07	; 7
     272:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     276:	b6 c0       	rjmp	.+364    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
			if (key == 3) {lcd_1.LCD_String_xy(0,n[i],"3");break;}
     278:	83 30       	cpi	r24, 0x03	; 3
     27a:	99 f4       	brne	.+38     	; 0x2a2 <_ZN10AlarmClock12setTimetoRTCEv+0xfc>
     27c:	e0 2f       	mov	r30, r16
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	8c 0f       	add	r24, r28
     28a:	9d 1f       	adc	r25, r29
     28c:	e8 0f       	add	r30, r24
     28e:	f9 1f       	adc	r31, r25
     290:	47 81       	ldd	r20, Z+7	; 0x07
     292:	2c e3       	ldi	r18, 0x3C	; 60
     294:	37 e0       	ldi	r19, 0x07	; 7
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	8d e9       	ldi	r24, 0x9D	; 157
     29a:	97 e0       	ldi	r25, 0x07	; 7
     29c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     2a0:	a1 c0       	rjmp	.+322    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
			if (key == 4) {lcd_1.LCD_String_xy(0,n[i],"4");break;}
     2a2:	84 30       	cpi	r24, 0x04	; 4
     2a4:	99 f4       	brne	.+38     	; 0x2cc <_ZN10AlarmClock12setTimetoRTCEv+0x126>
     2a6:	e0 2f       	mov	r30, r16
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	ee 0f       	add	r30, r30
     2ac:	ff 1f       	adc	r31, r31
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	8c 0f       	add	r24, r28
     2b4:	9d 1f       	adc	r25, r29
     2b6:	e8 0f       	add	r30, r24
     2b8:	f9 1f       	adc	r31, r25
     2ba:	47 81       	ldd	r20, Z+7	; 0x07
     2bc:	2e e3       	ldi	r18, 0x3E	; 62
     2be:	37 e0       	ldi	r19, 0x07	; 7
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	8d e9       	ldi	r24, 0x9D	; 157
     2c4:	97 e0       	ldi	r25, 0x07	; 7
     2c6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     2ca:	8c c0       	rjmp	.+280    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
			if (key == 5) {lcd_1.LCD_String_xy(0,n[i],"5");break;}
     2cc:	85 30       	cpi	r24, 0x05	; 5
     2ce:	99 f4       	brne	.+38     	; 0x2f6 <_ZN10AlarmClock12setTimetoRTCEv+0x150>
     2d0:	e0 2f       	mov	r30, r16
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	ee 0f       	add	r30, r30
     2d6:	ff 1f       	adc	r31, r31
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	8c 0f       	add	r24, r28
     2de:	9d 1f       	adc	r25, r29
     2e0:	e8 0f       	add	r30, r24
     2e2:	f9 1f       	adc	r31, r25
     2e4:	47 81       	ldd	r20, Z+7	; 0x07
     2e6:	20 e4       	ldi	r18, 0x40	; 64
     2e8:	37 e0       	ldi	r19, 0x07	; 7
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	8d e9       	ldi	r24, 0x9D	; 157
     2ee:	97 e0       	ldi	r25, 0x07	; 7
     2f0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     2f4:	77 c0       	rjmp	.+238    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
     2f6:	86 30       	cpi	r24, 0x06	; 6
     2f8:	99 f4       	brne	.+38     	; 0x320 <_ZN10AlarmClock12setTimetoRTCEv+0x17a>
     2fa:	e0 2f       	mov	r30, r16
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	8c 0f       	add	r24, r28
     308:	9d 1f       	adc	r25, r29
     30a:	e8 0f       	add	r30, r24
     30c:	f9 1f       	adc	r31, r25
     30e:	47 81       	ldd	r20, Z+7	; 0x07
     310:	22 e4       	ldi	r18, 0x42	; 66
     312:	37 e0       	ldi	r19, 0x07	; 7
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	8d e9       	ldi	r24, 0x9D	; 157
     318:	97 e0       	ldi	r25, 0x07	; 7
     31a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     31e:	62 c0       	rjmp	.+196    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
     320:	87 30       	cpi	r24, 0x07	; 7
     322:	99 f4       	brne	.+38     	; 0x34a <_ZN10AlarmClock12setTimetoRTCEv+0x1a4>
     324:	e0 2f       	mov	r30, r16
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	8c 0f       	add	r24, r28
     332:	9d 1f       	adc	r25, r29
     334:	e8 0f       	add	r30, r24
     336:	f9 1f       	adc	r31, r25
     338:	47 81       	ldd	r20, Z+7	; 0x07
     33a:	24 e4       	ldi	r18, 0x44	; 68
     33c:	37 e0       	ldi	r19, 0x07	; 7
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	8d e9       	ldi	r24, 0x9D	; 157
     342:	97 e0       	ldi	r25, 0x07	; 7
     344:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     348:	4d c0       	rjmp	.+154    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
     34a:	88 30       	cpi	r24, 0x08	; 8
     34c:	99 f4       	brne	.+38     	; 0x374 <_ZN10AlarmClock12setTimetoRTCEv+0x1ce>
     34e:	e0 2f       	mov	r30, r16
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	8c 0f       	add	r24, r28
     35c:	9d 1f       	adc	r25, r29
     35e:	e8 0f       	add	r30, r24
     360:	f9 1f       	adc	r31, r25
     362:	47 81       	ldd	r20, Z+7	; 0x07
     364:	26 e4       	ldi	r18, 0x46	; 70
     366:	37 e0       	ldi	r19, 0x07	; 7
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	8d e9       	ldi	r24, 0x9D	; 157
     36c:	97 e0       	ldi	r25, 0x07	; 7
     36e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     372:	38 c0       	rjmp	.+112    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
     374:	89 30       	cpi	r24, 0x09	; 9
     376:	99 f4       	brne	.+38     	; 0x39e <_ZN10AlarmClock12setTimetoRTCEv+0x1f8>
     378:	e0 2f       	mov	r30, r16
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	8c 0f       	add	r24, r28
     386:	9d 1f       	adc	r25, r29
     388:	e8 0f       	add	r30, r24
     38a:	f9 1f       	adc	r31, r25
     38c:	47 81       	ldd	r20, Z+7	; 0x07
     38e:	28 e4       	ldi	r18, 0x48	; 72
     390:	37 e0       	ldi	r19, 0x07	; 7
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	8d e9       	ldi	r24, 0x9D	; 157
     396:	97 e0       	ldi	r25, 0x07	; 7
     398:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     39c:	23 c0       	rjmp	.+70     	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
     39e:	8b 30       	cpi	r24, 0x0B	; 11
     3a0:	a1 f4       	brne	.+40     	; 0x3ca <_ZN10AlarmClock12setTimetoRTCEv+0x224>
     3a2:	e0 2f       	mov	r30, r16
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	8c 0f       	add	r24, r28
     3b0:	9d 1f       	adc	r25, r29
     3b2:	e8 0f       	add	r30, r24
     3b4:	f9 1f       	adc	r31, r25
     3b6:	47 81       	ldd	r20, Z+7	; 0x07
     3b8:	26 e3       	ldi	r18, 0x36	; 54
     3ba:	37 e0       	ldi	r19, 0x07	; 7
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	8d e9       	ldi	r24, 0x9D	; 157
     3c0:	97 e0       	ldi	r25, 0x07	; 7
     3c2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
			if (!(PINC & (1<<Ok))){i=8; break;}
     3ca:	32 9b       	sbis	0x06, 2	; 6
     3cc:	0a c0       	rjmp	.+20     	; 0x3e2 <_ZN10AlarmClock12setTimetoRTCEv+0x23c>
     3ce:	9f ef       	ldi	r25, 0xFF	; 255
     3d0:	21 ee       	ldi	r18, 0xE1	; 225
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	91 50       	subi	r25, 0x01	; 1
     3d6:	20 40       	sbci	r18, 0x00	; 0
     3d8:	80 40       	sbci	r24, 0x00	; 0
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22e>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <_ZN10AlarmClock12setTimetoRTCEv+0x238>
     3de:	00 00       	nop
     3e0:	1c cf       	rjmp	.-456    	; 0x21a <_ZN10AlarmClock12setTimetoRTCEv+0x74>
     3e2:	08 e0       	ldi	r16, 0x08	; 8
			_delay_ms(200);
		}

		if (i == 0){hr+=key*10;}
     3e4:	01 11       	cpse	r16, r1
     3e6:	0f c0       	rjmp	.+30     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3e8:	81 2f       	mov	r24, r17
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	9c 01       	movw	r18, r24
     3ee:	22 0f       	add	r18, r18
     3f0:	33 1f       	adc	r19, r19
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	82 0f       	add	r24, r18
     400:	93 1f       	adc	r25, r19
     402:	e8 0e       	add	r14, r24
     404:	f9 1e       	adc	r15, r25
		if (i == 1){hr+=key;}
     406:	01 30       	cpi	r16, 0x01	; 1
     408:	11 f4       	brne	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40a:	e1 0e       	add	r14, r17
     40c:	f1 1c       	adc	r15, r1
		if (i == 2){min+=key*10;}
     40e:	02 30       	cpi	r16, 0x02	; 2
     410:	79 f4       	brne	.+30     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     412:	81 2f       	mov	r24, r17
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9c 01       	movw	r18, r24
     418:	22 0f       	add	r18, r18
     41a:	33 1f       	adc	r19, r19
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	82 0f       	add	r24, r18
     42a:	93 1f       	adc	r25, r19
     42c:	a8 0e       	add	r10, r24
     42e:	b9 1e       	adc	r11, r25
		if (i == 3){min+=key;}
     430:	03 30       	cpi	r16, 0x03	; 3
     432:	11 f4       	brne	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     434:	a1 0e       	add	r10, r17
     436:	b1 1c       	adc	r11, r1
		if (i == 4){sec+=key*10;}
     438:	04 30       	cpi	r16, 0x04	; 4
     43a:	79 f4       	brne	.+30     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     43c:	81 2f       	mov	r24, r17
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	9c 01       	movw	r18, r24
     442:	22 0f       	add	r18, r18
     444:	33 1f       	adc	r19, r19
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	88 0f       	add	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	82 0f       	add	r24, r18
     454:	93 1f       	adc	r25, r19
     456:	c8 0e       	add	r12, r24
     458:	d9 1e       	adc	r13, r25
		if (i == 5){sec+=key;}
     45a:	05 30       	cpi	r16, 0x05	; 5
     45c:	11 f4       	brne	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     45e:	c1 0e       	add	r12, r17
     460:	d1 1c       	adc	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     462:	0f 5f       	subi	r16, 0xFF	; 255
     464:	d7 ce       	rjmp	.-594    	; 0x214 <_ZN10AlarmClock12setTimetoRTCEv+0x6e>
		if (i == 4){sec+=key*10;}
		if (i == 5){sec+=key;}

	}
	
	hour = ds1307_1.dec_to_bcd(hr);
     466:	b7 01       	movw	r22, r14
     468:	83 ea       	ldi	r24, 0xA3	; 163
     46a:	97 e0       	ldi	r25, 0x07	; 7
     46c:	0e 94 94 04 	call	0x928	; 0x928 <_ZN6ds130710dec_to_bcdEi>
     470:	18 2f       	mov	r17, r24
	minutes = ds1307_1.dec_to_bcd(min);
     472:	b5 01       	movw	r22, r10
     474:	83 ea       	ldi	r24, 0xA3	; 163
     476:	97 e0       	ldi	r25, 0x07	; 7
     478:	0e 94 94 04 	call	0x928	; 0x928 <_ZN6ds130710dec_to_bcdEi>
     47c:	08 2f       	mov	r16, r24
	seconds = ds1307_1.dec_to_bcd(sec);
     47e:	b6 01       	movw	r22, r12
     480:	83 ea       	ldi	r24, 0xA3	; 163
     482:	97 e0       	ldi	r25, 0x07	; 7
     484:	0e 94 94 04 	call	0x928	; 0x928 <_ZN6ds130710dec_to_bcdEi>

	// Setting time to the RTC
	rtc.seconds =  seconds;
     488:	89 83       	std	Y+1, r24	; 0x01
	rtc.minute =  minutes;
     48a:	0a 83       	std	Y+2, r16	; 0x02
	rtc.hour = hour;
     48c:	1b 83       	std	Y+3, r17	; 0x03
	rtc.weekDay = 0x07;
     48e:	87 e0       	ldi	r24, 0x07	; 7
     490:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x20;
     492:	80 e2       	ldi	r24, 0x20	; 32
     494:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x06;
     496:	86 e0       	ldi	r24, 0x06	; 6
     498:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21;
     49a:	81 e2       	ldi	r24, 0x21	; 33
     49c:	8f 83       	std	Y+7, r24	; 0x07
	lcd_1.LCD_Clear();
     49e:	8d e9       	ldi	r24, 0x9D	; 157
     4a0:	97 e0       	ldi	r25, 0x07	; 7
     4a2:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
	ds1307_1.set_time(&rtc);
     4a6:	be 01       	movw	r22, r28
     4a8:	6f 5f       	subi	r22, 0xFF	; 255
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
     4ac:	83 ea       	ldi	r24, 0xA3	; 163
     4ae:	97 e0       	ldi	r25, 0x07	; 7
     4b0:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN6ds13078set_timeEPNS_5rtc_tE>
	lcd_1.LCD_String_xy(0, 4, "Time Set");
     4b4:	2a e4       	ldi	r18, 0x4A	; 74
     4b6:	37 e0       	ldi	r19, 0x07	; 7
     4b8:	44 e0       	ldi	r20, 0x04	; 4
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	8d e9       	ldi	r24, 0x9D	; 157
     4be:	97 e0       	ldi	r25, 0x07	; 7
     4c0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
	lcd_1.LCD_String_xy(1, 0, "OK");
     4c4:	23 e5       	ldi	r18, 0x53	; 83
     4c6:	37 e0       	ldi	r19, 0x07	; 7
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	8d e9       	ldi	r24, 0x9D	; 157
     4ce:	97 e0       	ldi	r25, 0x07	; 7
     4d0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
	//_delay_ms(500);
	//lcd_1.LCD_Clear();
 }
     4d4:	63 96       	adiw	r28, 0x13	; 19
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	bf 90       	pop	r11
     4f2:	af 90       	pop	r10
     4f4:	08 95       	ret

000004f6 <_ZN10AlarmClock11setNewAlarmEv>:

 int* AlarmClock::setNewAlarm(){
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	2c 97       	sbiw	r28, 0x0c	; 12
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
	uint8_t key;
	char* alarmTime = "00:00";
	int min_al=0, hr_al=0;
	int n[6] = {6, 7, 9, 10};
     516:	fe 01       	movw	r30, r28
     518:	31 96       	adiw	r30, 0x01	; 1
     51a:	8c e0       	ldi	r24, 0x0C	; 12
     51c:	df 01       	movw	r26, r30
     51e:	1d 92       	st	X+, r1
     520:	8a 95       	dec	r24
     522:	e9 f7       	brne	.-6      	; 0x51e <_ZN10AlarmClock11setNewAlarmEv+0x28>
     524:	86 e0       	ldi	r24, 0x06	; 6
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	9a 83       	std	Y+2, r25	; 0x02
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	87 e0       	ldi	r24, 0x07	; 7
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	9c 83       	std	Y+4, r25	; 0x04
     532:	8b 83       	std	Y+3, r24	; 0x03
     534:	89 e0       	ldi	r24, 0x09	; 9
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	9e 83       	std	Y+6, r25	; 0x06
     53a:	8d 83       	std	Y+5, r24	; 0x05
     53c:	8a e0       	ldi	r24, 0x0A	; 10
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	98 87       	std	Y+8, r25	; 0x08
     542:	8f 83       	std	Y+7, r24	; 0x07
	static int alarm[2];
			
	lcd_1.LCD_Clear();
     544:	8d e9       	ldi	r24, 0x9D	; 157
     546:	97 e0       	ldi	r25, 0x07	; 7
     548:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
	lcd_1.LCD_String_xy(0, 6, alarmTime);
     54c:	22 e3       	ldi	r18, 0x32	; 50
     54e:	37 e0       	ldi	r19, 0x07	; 7
     550:	46 e0       	ldi	r20, 0x06	; 6
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	8d e9       	ldi	r24, 0x9D	; 157
     556:	97 e0       	ldi	r25, 0x07	; 7
     558:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     55c:	bf ef       	ldi	r27, 0xFF	; 255
     55e:	21 ee       	ldi	r18, 0xE1	; 225
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	b1 50       	subi	r27, 0x01	; 1
     564:	20 40       	sbci	r18, 0x00	; 0
     566:	80 40       	sbci	r24, 0x00	; 0
     568:	e1 f7       	brne	.-8      	; 0x562 <_ZN10AlarmClock11setNewAlarmEv+0x6c>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <_ZN10AlarmClock11setNewAlarmEv+0x76>
     56c:	00 00       	nop
	_delay_ms(200);	
	for(uint8_t i=0;i<5;i++)
     56e:	00 e0       	ldi	r16, 0x00	; 0
 }

 int* AlarmClock::setNewAlarm(){
	uint8_t key;
	char* alarmTime = "00:00";
	int min_al=0, hr_al=0;
     570:	e1 2c       	mov	r14, r1
     572:	f1 2c       	mov	r15, r1
     574:	c1 2c       	mov	r12, r1
     576:	d1 2c       	mov	r13, r1
	static int alarm[2];
			
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 6, alarmTime);
	_delay_ms(200);	
	for(uint8_t i=0;i<5;i++)
     578:	05 30       	cpi	r16, 0x05	; 5
     57a:	08 f0       	brcs	.+2      	; 0x57e <_ZN10AlarmClock11setNewAlarmEv+0x88>
     57c:	11 c1       	rjmp	.+546    	; 0x7a0 <_ZN10AlarmClock11setNewAlarmEv+0x2aa>
	{
		while(1){
			key = keypad_1.GetKey();
     57e:	8c e9       	ldi	r24, 0x9C	; 156
     580:	97 e0       	ldi	r25, 0x07	; 7
     582:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN7Get_key6GetKeyEv>
     586:	18 2f       	mov	r17, r24
			if (key == 1) {lcd_1.LCD_String_xy(0,n[i],"1");break;}
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	99 f4       	brne	.+38     	; 0x5b2 <_ZN10AlarmClock11setNewAlarmEv+0xbc>
     58c:	e0 2f       	mov	r30, r16
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	ee 0f       	add	r30, r30
     592:	ff 1f       	adc	r31, r31
     594:	a1 e0       	ldi	r26, 0x01	; 1
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	ac 0f       	add	r26, r28
     59a:	bd 1f       	adc	r27, r29
     59c:	ea 0f       	add	r30, r26
     59e:	fb 1f       	adc	r31, r27
     5a0:	40 81       	ld	r20, Z
     5a2:	28 e3       	ldi	r18, 0x38	; 56
     5a4:	37 e0       	ldi	r19, 0x07	; 7
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	8d e9       	ldi	r24, 0x9D	; 157
     5aa:	97 e0       	ldi	r25, 0x07	; 7
     5ac:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     5b0:	cb c0       	rjmp	.+406    	; 0x748 <_ZN10AlarmClock11setNewAlarmEv+0x252>
			if (key == 2) {lcd_1.LCD_String_xy(0,n[i],"2");break;}
     5b2:	82 30       	cpi	r24, 0x02	; 2
     5b4:	99 f4       	brne	.+38     	; 0x5dc <_ZN10AlarmClock11setNewAlarmEv+0xe6>
     5b6:	e0 2f       	mov	r30, r16
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	8c 0f       	add	r24, r28
     5c4:	9d 1f       	adc	r25, r29
     5c6:	e8 0f       	add	r30, r24
     5c8:	f9 1f       	adc	r31, r25
     5ca:	40 81       	ld	r20, Z
     5cc:	2a e3       	ldi	r18, 0x3A	; 58
     5ce:	37 e0       	ldi	r19, 0x07	; 7
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	8d e9       	ldi	r24, 0x9D	; 157
     5d4:	97 e0       	ldi	r25, 0x07	; 7
     5d6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     5da:	b6 c0       	rjmp	.+364    	; 0x748 <_ZN10AlarmClock11setNewAlarmEv+0x252>
			if (key == 3) {lcd_1.LCD_String_xy(0,n[i],"3");break;}
     5dc:	83 30       	cpi	r24, 0x03	; 3
     5de:	99 f4       	brne	.+38     	; 0x606 <_ZN10AlarmClock11setNewAlarmEv+0x110>
     5e0:	e0 2f       	mov	r30, r16
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	a1 e0       	ldi	r26, 0x01	; 1
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	ac 0f       	add	r26, r28
     5ee:	bd 1f       	adc	r27, r29
     5f0:	ea 0f       	add	r30, r26
     5f2:	fb 1f       	adc	r31, r27
     5f4:	40 81       	ld	r20, Z
     5f6:	2c e3       	ldi	r18, 0x3C	; 60
     5f8:	37 e0       	ldi	r19, 0x07	; 7
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	8d e9       	ldi	r24, 0x9D	; 157
     5fe:	97 e0       	ldi	r25, 0x07	; 7
     600:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     604:	a1 c0       	rjmp	.+322    	; 0x748 <_ZN10AlarmClock11setNewAlarmEv+0x252>
			if (key == 4) {lcd_1.LCD_String_xy(0,n[i],"4");break;}
     606:	84 30       	cpi	r24, 0x04	; 4
     608:	99 f4       	brne	.+38     	; 0x630 <_ZN10AlarmClock11setNewAlarmEv+0x13a>
     60a:	e0 2f       	mov	r30, r16
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	8c 0f       	add	r24, r28
     618:	9d 1f       	adc	r25, r29
     61a:	e8 0f       	add	r30, r24
     61c:	f9 1f       	adc	r31, r25
     61e:	40 81       	ld	r20, Z
     620:	2e e3       	ldi	r18, 0x3E	; 62
     622:	37 e0       	ldi	r19, 0x07	; 7
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	8d e9       	ldi	r24, 0x9D	; 157
     628:	97 e0       	ldi	r25, 0x07	; 7
     62a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     62e:	8c c0       	rjmp	.+280    	; 0x748 <_ZN10AlarmClock11setNewAlarmEv+0x252>
			if (key == 5) {lcd_1.LCD_String_xy(0,n[i],"5");break;}
     630:	85 30       	cpi	r24, 0x05	; 5
     632:	99 f4       	brne	.+38     	; 0x65a <_ZN10AlarmClock11setNewAlarmEv+0x164>
     634:	e0 2f       	mov	r30, r16
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	a1 e0       	ldi	r26, 0x01	; 1
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	ac 0f       	add	r26, r28
     642:	bd 1f       	adc	r27, r29
     644:	ea 0f       	add	r30, r26
     646:	fb 1f       	adc	r31, r27
     648:	40 81       	ld	r20, Z
     64a:	20 e4       	ldi	r18, 0x40	; 64
     64c:	37 e0       	ldi	r19, 0x07	; 7
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	8d e9       	ldi	r24, 0x9D	; 157
     652:	97 e0       	ldi	r25, 0x07	; 7
     654:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     658:	77 c0       	rjmp	.+238    	; 0x748 <_ZN10AlarmClock11setNewAlarmEv+0x252>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
     65a:	86 30       	cpi	r24, 0x06	; 6
     65c:	99 f4       	brne	.+38     	; 0x684 <_ZN10AlarmClock11setNewAlarmEv+0x18e>
     65e:	e0 2f       	mov	r30, r16
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	8c 0f       	add	r24, r28
     66c:	9d 1f       	adc	r25, r29
     66e:	e8 0f       	add	r30, r24
     670:	f9 1f       	adc	r31, r25
     672:	40 81       	ld	r20, Z
     674:	22 e4       	ldi	r18, 0x42	; 66
     676:	37 e0       	ldi	r19, 0x07	; 7
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	8d e9       	ldi	r24, 0x9D	; 157
     67c:	97 e0       	ldi	r25, 0x07	; 7
     67e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     682:	62 c0       	rjmp	.+196    	; 0x748 <_ZN10AlarmClock11setNewAlarmEv+0x252>
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
     684:	87 30       	cpi	r24, 0x07	; 7
     686:	99 f4       	brne	.+38     	; 0x6ae <_ZN10AlarmClock11setNewAlarmEv+0x1b8>
     688:	e0 2f       	mov	r30, r16
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	a1 e0       	ldi	r26, 0x01	; 1
     692:	b0 e0       	ldi	r27, 0x00	; 0
     694:	ac 0f       	add	r26, r28
     696:	bd 1f       	adc	r27, r29
     698:	ea 0f       	add	r30, r26
     69a:	fb 1f       	adc	r31, r27
     69c:	40 81       	ld	r20, Z
     69e:	24 e4       	ldi	r18, 0x44	; 68
     6a0:	37 e0       	ldi	r19, 0x07	; 7
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	8d e9       	ldi	r24, 0x9D	; 157
     6a6:	97 e0       	ldi	r25, 0x07	; 7
     6a8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     6ac:	4d c0       	rjmp	.+154    	; 0x748 <_ZN10AlarmClock11setNewAlarmEv+0x252>
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
     6ae:	88 30       	cpi	r24, 0x08	; 8
     6b0:	99 f4       	brne	.+38     	; 0x6d8 <_ZN10AlarmClock11setNewAlarmEv+0x1e2>
     6b2:	e0 2f       	mov	r30, r16
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	8c 0f       	add	r24, r28
     6c0:	9d 1f       	adc	r25, r29
     6c2:	e8 0f       	add	r30, r24
     6c4:	f9 1f       	adc	r31, r25
     6c6:	40 81       	ld	r20, Z
     6c8:	26 e4       	ldi	r18, 0x46	; 70
     6ca:	37 e0       	ldi	r19, 0x07	; 7
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	8d e9       	ldi	r24, 0x9D	; 157
     6d0:	97 e0       	ldi	r25, 0x07	; 7
     6d2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     6d6:	38 c0       	rjmp	.+112    	; 0x748 <_ZN10AlarmClock11setNewAlarmEv+0x252>
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
     6d8:	89 30       	cpi	r24, 0x09	; 9
     6da:	99 f4       	brne	.+38     	; 0x702 <_ZN10AlarmClock11setNewAlarmEv+0x20c>
     6dc:	e0 2f       	mov	r30, r16
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	a1 e0       	ldi	r26, 0x01	; 1
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	ac 0f       	add	r26, r28
     6ea:	bd 1f       	adc	r27, r29
     6ec:	ea 0f       	add	r30, r26
     6ee:	fb 1f       	adc	r31, r27
     6f0:	40 81       	ld	r20, Z
     6f2:	28 e4       	ldi	r18, 0x48	; 72
     6f4:	37 e0       	ldi	r19, 0x07	; 7
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	8d e9       	ldi	r24, 0x9D	; 157
     6fa:	97 e0       	ldi	r25, 0x07	; 7
     6fc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     700:	23 c0       	rjmp	.+70     	; 0x748 <_ZN10AlarmClock11setNewAlarmEv+0x252>
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
     702:	8b 30       	cpi	r24, 0x0B	; 11
     704:	a1 f4       	brne	.+40     	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x238>
     706:	e0 2f       	mov	r30, r16
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	8c 0f       	add	r24, r28
     714:	9d 1f       	adc	r25, r29
     716:	e8 0f       	add	r30, r24
     718:	f9 1f       	adc	r31, r25
     71a:	40 81       	ld	r20, Z
     71c:	26 e3       	ldi	r18, 0x36	; 54
     71e:	37 e0       	ldi	r19, 0x07	; 7
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	8d e9       	ldi	r24, 0x9D	; 157
     724:	97 e0       	ldi	r25, 0x07	; 7
     726:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	0d c0       	rjmp	.+26     	; 0x748 <_ZN10AlarmClock11setNewAlarmEv+0x252>
			if (!(PINC & (1<<Ok))){i=8; break;}
     72e:	32 9b       	sbis	0x06, 2	; 6
     730:	0a c0       	rjmp	.+20     	; 0x746 <_ZN10AlarmClock11setNewAlarmEv+0x250>
     732:	9f ef       	ldi	r25, 0xFF	; 255
     734:	a1 ee       	ldi	r26, 0xE1	; 225
     736:	b4 e0       	ldi	r27, 0x04	; 4
     738:	91 50       	subi	r25, 0x01	; 1
     73a:	a0 40       	sbci	r26, 0x00	; 0
     73c:	b0 40       	sbci	r27, 0x00	; 0
     73e:	e1 f7       	brne	.-8      	; 0x738 <_ZN10AlarmClock11setNewAlarmEv+0x242>
     740:	00 c0       	rjmp	.+0      	; 0x742 <_ZN10AlarmClock11setNewAlarmEv+0x24c>
     742:	00 00       	nop
     744:	1c cf       	rjmp	.-456    	; 0x57e <_ZN10AlarmClock11setNewAlarmEv+0x88>
     746:	08 e0       	ldi	r16, 0x08	; 8
			//if (key == 10) {lcd.LCD_String_xy(0,n[i],"P");break;}
			_delay_ms(200);
		}

		if (i == 0){hr_al+=key*10;}
     748:	01 11       	cpse	r16, r1
     74a:	0f c0       	rjmp	.+30     	; 0x76a <_ZN10AlarmClock11setNewAlarmEv+0x274>
     74c:	81 2f       	mov	r24, r17
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	9c 01       	movw	r18, r24
     752:	22 0f       	add	r18, r18
     754:	33 1f       	adc	r19, r19
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	88 0f       	add	r24, r24
     760:	99 1f       	adc	r25, r25
     762:	82 0f       	add	r24, r18
     764:	93 1f       	adc	r25, r19
     766:	e8 0e       	add	r14, r24
     768:	f9 1e       	adc	r15, r25
		if (i == 1){hr_al+=key;}
     76a:	01 30       	cpi	r16, 0x01	; 1
     76c:	11 f4       	brne	.+4      	; 0x772 <_ZN10AlarmClock11setNewAlarmEv+0x27c>
     76e:	e1 0e       	add	r14, r17
     770:	f1 1c       	adc	r15, r1
		if (i == 2){min_al+=key*10;}
     772:	02 30       	cpi	r16, 0x02	; 2
     774:	79 f4       	brne	.+30     	; 0x794 <_ZN10AlarmClock11setNewAlarmEv+0x29e>
     776:	81 2f       	mov	r24, r17
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	9c 01       	movw	r18, r24
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	82 0f       	add	r24, r18
     78e:	93 1f       	adc	r25, r19
     790:	c8 0e       	add	r12, r24
     792:	d9 1e       	adc	r13, r25
		if (i == 3){min_al+=key;}	
     794:	03 30       	cpi	r16, 0x03	; 3
     796:	11 f4       	brne	.+4      	; 0x79c <_ZN10AlarmClock11setNewAlarmEv+0x2a6>
     798:	c1 0e       	add	r12, r17
     79a:	d1 1c       	adc	r13, r1
	static int alarm[2];
			
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 6, alarmTime);
	_delay_ms(200);	
	for(uint8_t i=0;i<5;i++)
     79c:	0f 5f       	subi	r16, 0xFF	; 255
     79e:	ec ce       	rjmp	.-552    	; 0x578 <_ZN10AlarmClock11setNewAlarmEv+0x82>
		if (i == 1){hr_al+=key;}
		if (i == 2){min_al+=key*10;}
		if (i == 3){min_al+=key;}	
		
	}
	alarm[0] = hr_al;
     7a0:	e8 e9       	ldi	r30, 0x98	; 152
     7a2:	f7 e0       	ldi	r31, 0x07	; 7
     7a4:	f1 82       	std	Z+1, r15	; 0x01
     7a6:	e0 82       	st	Z, r14
	alarm[1] = min_al;
     7a8:	d3 82       	std	Z+3, r13	; 0x03
     7aa:	c2 82       	std	Z+2, r12	; 0x02
	return alarm;
 }
     7ac:	cf 01       	movw	r24, r30
     7ae:	2c 96       	adiw	r28, 0x0c	; 12
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	08 95       	ret

000007cc <_ZN6ds13078twi_initEv>:
     7cc:	88 e4       	ldi	r24, 0x48	; 72
     7ce:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     7d2:	84 e0       	ldi	r24, 0x04	; 4
     7d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7d8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     7dc:	08 95       	ret

000007de <_ZN6ds13079twi_startEv>:
     7de:	84 ea       	ldi	r24, 0xA4	; 164
     7e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7e8:	88 23       	and	r24, r24
     7ea:	e4 f7       	brge	.-8      	; 0x7e4 <_ZN6ds13079twi_startEv+0x6>
     7ec:	08 95       	ret

000007ee <_ZN6ds13079twi_SLA_WEv>:
     7ee:	80 ed       	ldi	r24, 0xD0	; 208
     7f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     7f4:	84 e8       	ldi	r24, 0x84	; 132
     7f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7fe:	88 23       	and	r24, r24
     800:	e4 f7       	brge	.-8      	; 0x7fa <_ZN6ds13079twi_SLA_WEv+0xc>
     802:	08 95       	ret

00000804 <_ZN6ds13079twi_SLA_REv>:
     804:	81 ed       	ldi	r24, 0xD1	; 209
     806:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     80a:	84 e8       	ldi	r24, 0x84	; 132
     80c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     810:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     814:	88 23       	and	r24, r24
     816:	e4 f7       	brge	.-8      	; 0x810 <_ZN6ds13079twi_SLA_REv+0xc>
     818:	08 95       	ret

0000081a <_ZN6ds13079twi_writeEh>:
     81a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     81e:	84 e8       	ldi	r24, 0x84	; 132
     820:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     824:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     828:	88 23       	and	r24, r24
     82a:	e4 f7       	brge	.-8      	; 0x824 <_ZN6ds13079twi_writeEh+0xa>
     82c:	08 95       	ret

0000082e <_ZN6ds13078twi_readEv>:
     82e:	84 e8       	ldi	r24, 0x84	; 132
     830:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     834:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     838:	88 23       	and	r24, r24
     83a:	e4 f7       	brge	.-8      	; 0x834 <_ZN6ds13078twi_readEv+0x6>
     83c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     840:	08 95       	ret

00000842 <_ZN6ds13078twi_stopEv>:
     842:	84 e9       	ldi	r24, 0x94	; 148
     844:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     848:	08 95       	ret

0000084a <_ZN6ds13078set_timeEPNS_5rtc_tE>:
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	8c 01       	movw	r16, r24
     854:	eb 01       	movw	r28, r22
     856:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN6ds13078twi_initEv>
     85a:	c8 01       	movw	r24, r16
     85c:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN6ds13079twi_startEv>
     860:	c8 01       	movw	r24, r16
     862:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN6ds13079twi_SLA_WEv>
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	c8 01       	movw	r24, r16
     86a:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13079twi_writeEh>
     86e:	68 81       	ld	r22, Y
     870:	c8 01       	movw	r24, r16
     872:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13079twi_writeEh>
     876:	69 81       	ldd	r22, Y+1	; 0x01
     878:	c8 01       	movw	r24, r16
     87a:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13079twi_writeEh>
     87e:	6a 81       	ldd	r22, Y+2	; 0x02
     880:	c8 01       	movw	r24, r16
     882:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13079twi_writeEh>
     886:	6b 81       	ldd	r22, Y+3	; 0x03
     888:	c8 01       	movw	r24, r16
     88a:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13079twi_writeEh>
     88e:	6c 81       	ldd	r22, Y+4	; 0x04
     890:	c8 01       	movw	r24, r16
     892:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13079twi_writeEh>
     896:	6d 81       	ldd	r22, Y+5	; 0x05
     898:	c8 01       	movw	r24, r16
     89a:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13079twi_writeEh>
     89e:	6e 81       	ldd	r22, Y+6	; 0x06
     8a0:	c8 01       	movw	r24, r16
     8a2:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13079twi_writeEh>
     8a6:	c8 01       	movw	r24, r16
     8a8:	0e 94 21 04 	call	0x842	; 0x842 <_ZN6ds13078twi_stopEv>
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <_ZN6ds130710bcd_to_decEh>:
     8b6:	26 2f       	mov	r18, r22
     8b8:	2f 70       	andi	r18, 0x0F	; 15
     8ba:	62 95       	swap	r22
     8bc:	6f 70       	andi	r22, 0x0F	; 15
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	cb 01       	movw	r24, r22
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	66 0f       	add	r22, r22
     8c8:	77 1f       	adc	r23, r23
     8ca:	66 0f       	add	r22, r22
     8cc:	77 1f       	adc	r23, r23
     8ce:	66 0f       	add	r22, r22
     8d0:	77 1f       	adc	r23, r23
     8d2:	86 0f       	add	r24, r22
     8d4:	97 1f       	adc	r25, r23
     8d6:	82 0f       	add	r24, r18
     8d8:	91 1d       	adc	r25, r1
     8da:	08 95       	ret

000008dc <_ZN6ds13079read_timeEh>:
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	ec 01       	movw	r28, r24
     8e4:	16 2f       	mov	r17, r22
     8e6:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN6ds13079twi_startEv>
     8ea:	ce 01       	movw	r24, r28
     8ec:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN6ds13079twi_SLA_WEv>
     8f0:	61 2f       	mov	r22, r17
     8f2:	ce 01       	movw	r24, r28
     8f4:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13079twi_writeEh>
     8f8:	ce 01       	movw	r24, r28
     8fa:	0e 94 21 04 	call	0x842	; 0x842 <_ZN6ds13078twi_stopEv>
     8fe:	ce 01       	movw	r24, r28
     900:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN6ds13079twi_startEv>
     904:	ce 01       	movw	r24, r28
     906:	0e 94 02 04 	call	0x804	; 0x804 <_ZN6ds13079twi_SLA_REv>
     90a:	ce 01       	movw	r24, r28
     90c:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN6ds13078twi_readEv>
     910:	18 2f       	mov	r17, r24
     912:	ce 01       	movw	r24, r28
     914:	0e 94 21 04 	call	0x842	; 0x842 <_ZN6ds13078twi_stopEv>
     918:	61 2f       	mov	r22, r17
     91a:	ce 01       	movw	r24, r28
     91c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN6ds130710bcd_to_decEh>
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	08 95       	ret

00000928 <_ZN6ds130710dec_to_bcdEi>:
     928:	9b 01       	movw	r18, r22
     92a:	6a 30       	cpi	r22, 0x0A	; 10
     92c:	71 05       	cpc	r23, r1
     92e:	c4 f0       	brlt	.+48     	; 0x960 <_ZN6ds130710dec_to_bcdEi+0x38>
     930:	cb 01       	movw	r24, r22
     932:	6a e0       	ldi	r22, 0x0A	; 10
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	0e 94 b5 10 	call	0x216a	; 0x216a <__divmodhi4>
     93a:	46 2f       	mov	r20, r22
     93c:	42 95       	swap	r20
     93e:	40 7f       	andi	r20, 0xF0	; 240
     940:	86 2f       	mov	r24, r22
     942:	97 2f       	mov	r25, r23
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	bc 01       	movw	r22, r24
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
     94e:	66 0f       	add	r22, r22
     950:	77 1f       	adc	r23, r23
     952:	68 0f       	add	r22, r24
     954:	79 1f       	adc	r23, r25
     956:	c9 01       	movw	r24, r18
     958:	0e 94 b5 10 	call	0x216a	; 0x216a <__divmodhi4>
     95c:	84 2b       	or	r24, r20
     95e:	08 95       	ret
     960:	86 2f       	mov	r24, r22
     962:	08 95       	ret

00000964 <_ZN7Get_key6GetKeyEv>:
     964:	8b b1       	in	r24, 0x0b	; 11
     966:	8f 60       	ori	r24, 0x0F	; 15
     968:	8b b9       	out	0x0b, r24	; 11
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	83 30       	cpi	r24, 0x03	; 3
     96e:	80 f5       	brcc	.+96     	; 0x9d0 <_ZN7Get_key6GetKeyEv+0x6c>
     970:	9a b1       	in	r25, 0x0a	; 10
     972:	90 78       	andi	r25, 0x80	; 128
     974:	9a b9       	out	0x0a, r25	; 10
     976:	9a b1       	in	r25, 0x0a	; 10
     978:	20 e4       	ldi	r18, 0x40	; 64
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	08 2e       	mov	r0, r24
     97e:	02 c0       	rjmp	.+4      	; 0x984 <_ZN7Get_key6GetKeyEv+0x20>
     980:	35 95       	asr	r19
     982:	27 95       	ror	r18
     984:	0a 94       	dec	r0
     986:	e2 f7       	brpl	.-8      	; 0x980 <_ZN7Get_key6GetKeyEv+0x1c>
     988:	29 2b       	or	r18, r25
     98a:	2a b9       	out	0x0a, r18	; 10
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	94 30       	cpi	r25, 0x04	; 4
     990:	e8 f4       	brcc	.+58     	; 0x9cc <_ZN7Get_key6GetKeyEv+0x68>
     992:	29 b1       	in	r18, 0x09	; 9
     994:	48 e0       	ldi	r20, 0x08	; 8
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	09 2e       	mov	r0, r25
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <_ZN7Get_key6GetKeyEv+0x3c>
     99c:	55 95       	asr	r21
     99e:	47 95       	ror	r20
     9a0:	0a 94       	dec	r0
     9a2:	e2 f7       	brpl	.-8      	; 0x99c <_ZN7Get_key6GetKeyEv+0x38>
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	24 23       	and	r18, r20
     9a8:	35 23       	and	r19, r21
     9aa:	23 2b       	or	r18, r19
     9ac:	69 f4       	brne	.+26     	; 0x9c8 <_ZN7Get_key6GetKeyEv+0x64>
     9ae:	29 b1       	in	r18, 0x09	; 9
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	24 23       	and	r18, r20
     9b4:	35 23       	and	r19, r21
     9b6:	23 2b       	or	r18, r19
     9b8:	d1 f3       	breq	.-12     	; 0x9ae <_ZN7Get_key6GetKeyEv+0x4a>
     9ba:	29 2f       	mov	r18, r25
     9bc:	22 0f       	add	r18, r18
     9be:	92 0f       	add	r25, r18
     9c0:	98 0f       	add	r25, r24
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	89 0f       	add	r24, r25
     9c6:	08 95       	ret
     9c8:	9f 5f       	subi	r25, 0xFF	; 255
     9ca:	e1 cf       	rjmp	.-62     	; 0x98e <_ZN7Get_key6GetKeyEv+0x2a>
     9cc:	8f 5f       	subi	r24, 0xFF	; 255
     9ce:	ce cf       	rjmp	.-100    	; 0x96c <_ZN7Get_key6GetKeyEv+0x8>
     9d0:	8f ef       	ldi	r24, 0xFF	; 255
     9d2:	08 95       	ret

000009d4 <_ZN11LCD_Display16LCD_CommandgiverEh>:
     9d4:	25 b1       	in	r18, 0x05	; 5
     9d6:	96 2f       	mov	r25, r22
     9d8:	90 7f       	andi	r25, 0xF0	; 240
     9da:	89 2f       	mov	r24, r25
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	95 95       	asr	r25
     9e0:	87 95       	ror	r24
     9e2:	95 95       	asr	r25
     9e4:	87 95       	ror	r24
     9e6:	92 2f       	mov	r25, r18
     9e8:	93 7c       	andi	r25, 0xC3	; 195
     9ea:	89 2b       	or	r24, r25
     9ec:	85 b9       	out	0x05, r24	; 5
     9ee:	85 b1       	in	r24, 0x05	; 5
     9f0:	8e 7f       	andi	r24, 0xFE	; 254
     9f2:	85 b9       	out	0x05, r24	; 5
     9f4:	85 b1       	in	r24, 0x05	; 5
     9f6:	82 60       	ori	r24, 0x02	; 2
     9f8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9fa:	85 e0       	ldi	r24, 0x05	; 5
     9fc:	8a 95       	dec	r24
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <_ZN11LCD_Display16LCD_CommandgiverEh+0x28>
     a00:	00 00       	nop
     a02:	85 b1       	in	r24, 0x05	; 5
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	85 b9       	out	0x05, r24	; 5
     a08:	8f e8       	ldi	r24, 0x8F	; 143
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <_ZN11LCD_Display16LCD_CommandgiverEh+0x38>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <_ZN11LCD_Display16LCD_CommandgiverEh+0x3e>
     a12:	00 00       	nop
     a14:	85 b1       	in	r24, 0x05	; 5
     a16:	6f 70       	andi	r22, 0x0F	; 15
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	66 0f       	add	r22, r22
     a1c:	77 1f       	adc	r23, r23
     a1e:	66 0f       	add	r22, r22
     a20:	77 1f       	adc	r23, r23
     a22:	83 7c       	andi	r24, 0xC3	; 195
     a24:	68 2b       	or	r22, r24
     a26:	65 b9       	out	0x05, r22	; 5
     a28:	85 b1       	in	r24, 0x05	; 5
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	85 b9       	out	0x05, r24	; 5
     a2e:	95 e0       	ldi	r25, 0x05	; 5
     a30:	9a 95       	dec	r25
     a32:	f1 f7       	brne	.-4      	; 0xa30 <_ZN11LCD_Display16LCD_CommandgiverEh+0x5c>
     a34:	00 00       	nop
     a36:	85 b1       	in	r24, 0x05	; 5
     a38:	8d 7f       	andi	r24, 0xFD	; 253
     a3a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a3c:	8f e9       	ldi	r24, 0x9F	; 159
     a3e:	9f e0       	ldi	r25, 0x0F	; 15
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <_ZN11LCD_Display16LCD_CommandgiverEh+0x6c>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <_ZN11LCD_Display16LCD_CommandgiverEh+0x72>
     a46:	00 00       	nop
     a48:	08 95       	ret

00000a4a <_ZN11LCD_Display15LCD_InitializerEv>:
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	ec 01       	movw	r28, r24
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	84 b9       	out	0x04, r24	; 4
     a54:	8f e3       	ldi	r24, 0x3F	; 63
     a56:	9c e9       	ldi	r25, 0x9C	; 156
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <_ZN11LCD_Display15LCD_InitializerEv+0xe>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <_ZN11LCD_Display15LCD_InitializerEv+0x14>
     a5e:	00 00       	nop
     a60:	62 e0       	ldi	r22, 0x02	; 2
     a62:	ce 01       	movw	r24, r28
     a64:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
     a68:	68 e2       	ldi	r22, 0x28	; 40
     a6a:	ce 01       	movw	r24, r28
     a6c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
     a70:	6c e0       	ldi	r22, 0x0C	; 12
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
     a78:	66 e0       	ldi	r22, 0x06	; 6
     a7a:	ce 01       	movw	r24, r28
     a7c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	ce 01       	movw	r24, r28
     a84:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
     a88:	8f e9       	ldi	r24, 0x9F	; 159
     a8a:	9f e0       	ldi	r25, 0x0F	; 15
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <_ZN11LCD_Display15LCD_InitializerEv+0x42>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <_ZN11LCD_Display15LCD_InitializerEv+0x48>
     a92:	00 00       	nop
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <_ZN11LCD_Display13LCD_CharacterEh>:
     a9a:	25 b1       	in	r18, 0x05	; 5
     a9c:	96 2f       	mov	r25, r22
     a9e:	90 7f       	andi	r25, 0xF0	; 240
     aa0:	89 2f       	mov	r24, r25
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	95 95       	asr	r25
     aa6:	87 95       	ror	r24
     aa8:	95 95       	asr	r25
     aaa:	87 95       	ror	r24
     aac:	92 2f       	mov	r25, r18
     aae:	93 7c       	andi	r25, 0xC3	; 195
     ab0:	89 2b       	or	r24, r25
     ab2:	85 b9       	out	0x05, r24	; 5
     ab4:	85 b1       	in	r24, 0x05	; 5
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	85 b9       	out	0x05, r24	; 5
     aba:	85 b1       	in	r24, 0x05	; 5
     abc:	82 60       	ori	r24, 0x02	; 2
     abe:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	8a 95       	dec	r24
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <_ZN11LCD_Display13LCD_CharacterEh+0x28>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <_ZN11LCD_Display13LCD_CharacterEh+0x2e>
     ac8:	85 b1       	in	r24, 0x05	; 5
     aca:	8d 7f       	andi	r24, 0xFD	; 253
     acc:	85 b9       	out	0x05, r24	; 5
     ace:	8f e8       	ldi	r24, 0x8F	; 143
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <_ZN11LCD_Display13LCD_CharacterEh+0x38>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <_ZN11LCD_Display13LCD_CharacterEh+0x3e>
     ad8:	00 00       	nop
     ada:	85 b1       	in	r24, 0x05	; 5
     adc:	6f 70       	andi	r22, 0x0F	; 15
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	66 0f       	add	r22, r22
     ae2:	77 1f       	adc	r23, r23
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	83 7c       	andi	r24, 0xC3	; 195
     aea:	68 2b       	or	r22, r24
     aec:	65 b9       	out	0x05, r22	; 5
     aee:	85 b1       	in	r24, 0x05	; 5
     af0:	82 60       	ori	r24, 0x02	; 2
     af2:	85 b9       	out	0x05, r24	; 5
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	9a 95       	dec	r25
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <_ZN11LCD_Display13LCD_CharacterEh+0x5c>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <_ZN11LCD_Display13LCD_CharacterEh+0x62>
     afc:	85 b1       	in	r24, 0x05	; 5
     afe:	8d 7f       	andi	r24, 0xFD	; 253
     b00:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b02:	8f e9       	ldi	r24, 0x9F	; 159
     b04:	9f e0       	ldi	r25, 0x0F	; 15
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	f1 f7       	brne	.-4      	; 0xb06 <_ZN11LCD_Display13LCD_CharacterEh+0x6c>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <_ZN11LCD_Display13LCD_CharacterEh+0x72>
     b0c:	00 00       	nop
     b0e:	08 95       	ret

00000b10 <_ZN11LCD_Display10LCD_StringEPc>:
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	7c 01       	movw	r14, r24
     b1e:	8b 01       	movw	r16, r22
     b20:	c0 e0       	ldi	r28, 0x00	; 0
     b22:	d0 e0       	ldi	r29, 0x00	; 0
     b24:	f8 01       	movw	r30, r16
     b26:	ec 0f       	add	r30, r28
     b28:	fd 1f       	adc	r31, r29
     b2a:	60 81       	ld	r22, Z
     b2c:	66 23       	and	r22, r22
     b2e:	29 f0       	breq	.+10     	; 0xb3a <_ZN11LCD_Display10LCD_StringEPc+0x2a>
     b30:	c7 01       	movw	r24, r14
     b32:	0e 94 4d 05 	call	0xa9a	; 0xa9a <_ZN11LCD_Display13LCD_CharacterEh>
     b36:	21 96       	adiw	r28, 0x01	; 1
     b38:	f5 cf       	rjmp	.-22     	; 0xb24 <_ZN11LCD_Display10LCD_StringEPc+0x14>
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	08 95       	ret

00000b48 <_ZN11LCD_Display9LCD_ClearEv>:
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	ec 01       	movw	r28, r24
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
     b54:	8f e9       	ldi	r24, 0x9F	; 159
     b56:	9f e0       	ldi	r25, 0x0F	; 15
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <_ZN11LCD_Display9LCD_ClearEv+0x10>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <_ZN11LCD_Display9LCD_ClearEv+0x16>
     b5e:	00 00       	nop
     b60:	60 e8       	ldi	r22, 0x80	; 128
     b62:	ce 01       	movw	r24, r28
     b64:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <_ZN11LCD_Display13LCD_String_xyEccPc>:
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	8c 01       	movw	r16, r24
     b78:	e9 01       	movw	r28, r18
     b7a:	61 11       	cpse	r22, r1
     b7c:	08 c0       	rjmp	.+16     	; 0xb8e <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     b7e:	40 31       	cpi	r20, 0x10	; 16
     b80:	30 f4       	brcc	.+12     	; 0xb8e <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     b82:	4f 70       	andi	r20, 0x0F	; 15
     b84:	64 2f       	mov	r22, r20
     b86:	60 68       	ori	r22, 0x80	; 128
     b88:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
     b8c:	0a c0       	rjmp	.+20     	; 0xba2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     b8e:	61 30       	cpi	r22, 0x01	; 1
     b90:	41 f4       	brne	.+16     	; 0xba2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     b92:	40 31       	cpi	r20, 0x10	; 16
     b94:	30 f4       	brcc	.+12     	; 0xba2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     b96:	4f 70       	andi	r20, 0x0F	; 15
     b98:	64 2f       	mov	r22, r20
     b9a:	60 6c       	ori	r22, 0xC0	; 192
     b9c:	c8 01       	movw	r24, r16
     b9e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
     ba2:	be 01       	movw	r22, r28
     ba4:	c8 01       	movw	r24, r16
     ba6:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN11LCD_Display10LCD_StringEPc>
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <_Z10checkAlarmv>:
			display();
		}
	}
}

void checkAlarm(){
     bb4:	7f 92       	push	r7
     bb6:	8f 92       	push	r8
     bb8:	9f 92       	push	r9
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	cf 92       	push	r12
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
	int currentHr, currentMin, alarmHr, alarmMin, alarmCheck, alOnOff;
	bool alarm;
	//checking time and ringing an alarm
	for (int i=0; i<alarmCount;i++){
     bce:	00 e0       	ldi	r16, 0x00	; 0
     bd0:	10 e0       	ldi	r17, 0x00	; 0
     bd2:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <alarmCount>
     bd6:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <alarmCount+0x1>
     bda:	08 17       	cp	r16, r24
     bdc:	19 07       	cpc	r17, r25
     bde:	0c f0       	brlt	.+2      	; 0xbe2 <_Z10checkAlarmv+0x2e>
     be0:	a5 c0       	rjmp	.+330    	; 0xd2c <_Z10checkAlarmv+0x178>
		alarmHr = allAlarms[i][0];
     be2:	f8 01       	movw	r30, r16
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	e5 55       	subi	r30, 0x55	; 85
     bf2:	f8 4f       	sbci	r31, 0xF8	; 248
     bf4:	e0 80       	ld	r14, Z
     bf6:	f1 80       	ldd	r15, Z+1	; 0x01
		alarmMin = allAlarms[i][1];
     bf8:	c2 80       	ldd	r12, Z+2	; 0x02
     bfa:	d3 80       	ldd	r13, Z+3	; 0x03
		alarmCheck = allAlarms[i][2]; //only used within this loop to check of the alarm was turned on
     bfc:	84 80       	ldd	r8, Z+4	; 0x04
     bfe:	95 80       	ldd	r9, Z+5	; 0x05
		alOnOff = allAlarms[i][3]; //this value will be 1 if alarm is ON and 0 if OFF
     c00:	a6 80       	ldd	r10, Z+6	; 0x06
     c02:	b7 80       	ldd	r11, Z+7	; 0x07

		currentHr = DS1307.read_time(02);
     c04:	62 e0       	ldi	r22, 0x02	; 2
     c06:	80 ef       	ldi	r24, 0xF0	; 240
     c08:	97 e0       	ldi	r25, 0x07	; 7
     c0a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN6ds13079read_timeEh>
     c0e:	ec 01       	movw	r28, r24
		currentMin = DS1307.read_time(01);
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	80 ef       	ldi	r24, 0xF0	; 240
     c14:	97 e0       	ldi	r25, 0x07	; 7
     c16:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN6ds13079read_timeEh>

		if (((currentHr != alarmHr) || (currentMin != alarmMin))){
     c1a:	ec 16       	cp	r14, r28
     c1c:	fd 06       	cpc	r15, r29
     c1e:	19 f4       	brne	.+6      	; 0xc26 <_Z10checkAlarmv+0x72>
     c20:	c8 16       	cp	r12, r24
     c22:	d9 06       	cpc	r13, r25
     c24:	79 f0       	breq	.+30     	; 0xc44 <_Z10checkAlarmv+0x90>
			allAlarms[i][2] = 1;
     c26:	f8 01       	movw	r30, r16
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	e5 55       	subi	r30, 0x55	; 85
     c36:	f8 4f       	sbci	r31, 0xF8	; 248
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	95 83       	std	Z+5, r25	; 0x05
     c3e:	84 83       	std	Z+4, r24	; 0x04
			stop = false;
     c40:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <stop>
		}
		
		while (1){
			currentHr = DS1307.read_time(02);
     c44:	62 e0       	ldi	r22, 0x02	; 2
     c46:	80 ef       	ldi	r24, 0xF0	; 240
     c48:	97 e0       	ldi	r25, 0x07	; 7
     c4a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN6ds13079read_timeEh>
     c4e:	ec 01       	movw	r28, r24
			currentMin = DS1307.read_time(01);
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	80 ef       	ldi	r24, 0xF0	; 240
     c54:	97 e0       	ldi	r25, 0x07	; 7
     c56:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN6ds13079read_timeEh>
     c5a:	ac 01       	movw	r20, r24
			if ((currentHr == alarmHr) & (currentMin == alarmMin)  & ~(stop) & (alarmCheck==1) & (alOnOff==1)){
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	ec 16       	cp	r14, r28
     c60:	fd 06       	cpc	r15, r29
     c62:	09 f0       	breq	.+2      	; 0xc66 <_Z10checkAlarmv+0xb2>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	c4 16       	cp	r12, r20
     c6a:	d5 06       	cpc	r13, r21
     c6c:	09 f0       	breq	.+2      	; 0xc70 <_Z10checkAlarmv+0xbc>
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	92 23       	and	r25, r18
     c72:	29 2f       	mov	r18, r25
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <stop>
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	80 95       	com	r24
     c7e:	90 95       	com	r25
     c80:	82 23       	and	r24, r18
     c82:	93 23       	and	r25, r19
     c84:	21 e0       	ldi	r18, 0x01	; 1
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	84 16       	cp	r8, r20
     c8c:	91 04       	cpc	r9, r1
     c8e:	11 f0       	breq	.+4      	; 0xc94 <_Z10checkAlarmv+0xe0>
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	82 23       	and	r24, r18
     c96:	93 23       	and	r25, r19
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	a4 16       	cp	r10, r20
     ca0:	b1 04       	cpc	r11, r1
     ca2:	11 f0       	breq	.+4      	; 0xca8 <_Z10checkAlarmv+0xf4>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	28 23       	and	r18, r24
     caa:	39 23       	and	r19, r25
     cac:	23 2b       	or	r18, r19
     cae:	31 f1       	breq	.+76     	; 0xcfc <_Z10checkAlarmv+0x148>
				//lcd.LCD_Clear();
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
     cb0:	26 e5       	ldi	r18, 0x56	; 86
     cb2:	37 e0       	ldi	r19, 0x07	; 7
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	8a ee       	ldi	r24, 0xEA	; 234
     cba:	97 e0       	ldi	r25, 0x07	; 7
     cbc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
				lcd.LCD_String_xy(1, 0, "STOP            ");
     cc0:	27 e6       	ldi	r18, 0x67	; 103
     cc2:	37 e0       	ldi	r19, 0x07	; 7
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	8a ee       	ldi	r24, 0xEA	; 234
     cca:	97 e0       	ldi	r25, 0x07	; 7
     ccc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
				//PORTD |= (1<<PORTD7);
				music.tone(0);
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	8b ed       	ldi	r24, 0xDB	; 219
     cd6:	97 e0       	ldi	r25, 0x07	; 7
     cd8:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZN15music_notations4toneEi>
				allAlarms[i][2] = 0;
     cdc:	f8 01       	movw	r30, r16
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	e5 55       	subi	r30, 0x55	; 85
     cec:	f8 4f       	sbci	r31, 0xF8	; 248
     cee:	15 82       	std	Z+5, r1	; 0x05
     cf0:	14 82       	std	Z+4, r1	; 0x04
				alarm = true;
     cf2:	77 24       	eor	r7, r7
     cf4:	73 94       	inc	r7
			else{
				if(alarm){lcd.LCD_Clear();alarm=false;/*PORTD &= ~(1<<PORTD7)*/;set=0;}
				break;
			}
			
			if (!(PINC & (1<<Ok))){
     cf6:	32 99       	sbic	0x06, 2	; 6
     cf8:	a5 cf       	rjmp	.-182    	; 0xc44 <_Z10checkAlarmv+0x90>
     cfa:	0c c0       	rjmp	.+24     	; 0xd14 <_Z10checkAlarmv+0x160>
				music.tone(0);
				allAlarms[i][2] = 0;
				alarm = true;
			}
			else{
				if(alarm){lcd.LCD_Clear();alarm=false;/*PORTD &= ~(1<<PORTD7)*/;set=0;}
     cfc:	77 20       	and	r7, r7
     cfe:	99 f0       	breq	.+38     	; 0xd26 <_Z10checkAlarmv+0x172>
     d00:	8a ee       	ldi	r24, 0xEA	; 234
     d02:	97 e0       	ldi	r25, 0x07	; 7
     d04:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
     d08:	10 92 da 07 	sts	0x07DA, r1	; 0x8007da <set+0x1>
     d0c:	10 92 d9 07 	sts	0x07D9, r1	; 0x8007d9 <set>
     d10:	71 2c       	mov	r7, r1
     d12:	09 c0       	rjmp	.+18     	; 0xd26 <_Z10checkAlarmv+0x172>
			}
			
			if (!(PINC & (1<<Ok))){

				//PORTD &= ~(1<<PORTD7);
				lcd.LCD_Clear();
     d14:	8a ee       	ldi	r24, 0xEA	; 234
     d16:	97 e0       	ldi	r25, 0x07	; 7
     d18:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
				stop = true;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <stop>
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
				lcd.LCD_String_xy(1, 0, "STOP            ");
				//PORTD |= (1<<PORTD7);
				music.tone(0);
				allAlarms[i][2] = 0;
				alarm = true;
     d22:	77 24       	eor	r7, r7
     d24:	73 94       	inc	r7

void checkAlarm(){
	int currentHr, currentMin, alarmHr, alarmMin, alarmCheck, alOnOff;
	bool alarm;
	//checking time and ringing an alarm
	for (int i=0; i<alarmCount;i++){
     d26:	0f 5f       	subi	r16, 0xFF	; 255
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	53 cf       	rjmp	.-346    	; 0xbd2 <_Z10checkAlarmv+0x1e>
				stop = true;
				break;
			}
		}
	}
} 
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	bf 90       	pop	r11
     d3e:	af 90       	pop	r10
     d40:	9f 90       	pop	r9
     d42:	8f 90       	pop	r8
     d44:	7f 90       	pop	r7
     d46:	08 95       	ret

00000d48 <_Z11changeAlarmi>:

void changeAlarm(int alPos){
     d48:	af 92       	push	r10
     d4a:	bf 92       	push	r11
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	2c 97       	sbiw	r28, 0x0c	; 12
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	5c 01       	movw	r10, r24
	//--------------------Changing Alarms------------------------------
	bool delAlarm = false;
	uint8_t key;
	
	int min_al=0, hr_al=0;
	int n[6] = {6, 7, 9, 10};
     d6e:	fe 01       	movw	r30, r28
     d70:	31 96       	adiw	r30, 0x01	; 1
     d72:	8c e0       	ldi	r24, 0x0C	; 12
     d74:	df 01       	movw	r26, r30
     d76:	1d 92       	st	X+, r1
     d78:	8a 95       	dec	r24
     d7a:	e9 f7       	brne	.-6      	; 0xd76 <_Z11changeAlarmi+0x2e>
     d7c:	86 e0       	ldi	r24, 0x06	; 6
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	9a 83       	std	Y+2, r25	; 0x02
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	87 e0       	ldi	r24, 0x07	; 7
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9c 83       	std	Y+4, r25	; 0x04
     d8a:	8b 83       	std	Y+3, r24	; 0x03
     d8c:	89 e0       	ldi	r24, 0x09	; 9
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	8a e0       	ldi	r24, 0x0A	; 10
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	98 87       	std	Y+8, r25	; 0x08
     d9a:	8f 83       	std	Y+7, r24	; 0x07
	static int alarm[2];
	
	lcd.LCD_Clear();
     d9c:	8a ee       	ldi	r24, 0xEA	; 234
     d9e:	97 e0       	ldi	r25, 0x07	; 7
     da0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
     da4:	95 01       	movw	r18, r10
     da6:	22 95       	swap	r18
     da8:	32 95       	swap	r19
     daa:	30 7f       	andi	r19, 0xF0	; 240
     dac:	32 27       	eor	r19, r18
     dae:	20 7f       	andi	r18, 0xF0	; 240
     db0:	32 27       	eor	r19, r18
     db2:	20 55       	subi	r18, 0x50	; 80
     db4:	3e 4f       	sbci	r19, 0xFE	; 254
     db6:	46 e0       	ldi	r20, 0x06	; 6
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	8a ee       	ldi	r24, 0xEA	; 234
     dbc:	97 e0       	ldi	r25, 0x07	; 7
     dbe:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
     dc2:	28 e7       	ldi	r18, 0x78	; 120
     dc4:	37 e0       	ldi	r19, 0x07	; 7
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	8a ee       	ldi	r24, 0xEA	; 234
     dcc:	97 e0       	ldi	r25, 0x07	; 7
     dce:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     dd2:	bf ef       	ldi	r27, 0xFF	; 255
     dd4:	e1 ee       	ldi	r30, 0xE1	; 225
     dd6:	f4 e0       	ldi	r31, 0x04	; 4
     dd8:	b1 50       	subi	r27, 0x01	; 1
     dda:	e0 40       	sbci	r30, 0x00	; 0
     ddc:	f0 40       	sbci	r31, 0x00	; 0
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <_Z11changeAlarmi+0x90>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <_Z11changeAlarmi+0x9a>
     de2:	00 00       	nop
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     de4:	00 e0       	ldi	r16, 0x00	; 0

	//--------------------Changing Alarms------------------------------
	bool delAlarm = false;
	uint8_t key;
	
	int min_al=0, hr_al=0;
     de6:	e1 2c       	mov	r14, r1
     de8:	f1 2c       	mov	r15, r1
     dea:	c1 2c       	mov	r12, r1
     dec:	d1 2c       	mov	r13, r1
	
	lcd.LCD_Clear();
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     dee:	05 30       	cpi	r16, 0x05	; 5
     df0:	08 f0       	brcs	.+2      	; 0xdf4 <_Z11changeAlarmi+0xac>
     df2:	47 c1       	rjmp	.+654    	; 0x1082 <_Z11changeAlarmi+0x33a>
	{
		while(1)
		{
			key = keypad.GetKey();
     df4:	89 ee       	ldi	r24, 0xE9	; 233
     df6:	97 e0       	ldi	r25, 0x07	; 7
     df8:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN7Get_key6GetKeyEv>
     dfc:	18 2f       	mov	r17, r24
			if (key == 1) {lcd.LCD_String_xy(0,n[i],"1");break;}
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	99 f4       	brne	.+38     	; 0xe28 <_Z11changeAlarmi+0xe0>
     e02:	e0 2f       	mov	r30, r16
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	ee 0f       	add	r30, r30
     e08:	ff 1f       	adc	r31, r31
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	8c 0f       	add	r24, r28
     e10:	9d 1f       	adc	r25, r29
     e12:	e8 0f       	add	r30, r24
     e14:	f9 1f       	adc	r31, r25
     e16:	40 81       	ld	r20, Z
     e18:	28 e3       	ldi	r18, 0x38	; 56
     e1a:	37 e0       	ldi	r19, 0x07	; 7
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	8a ee       	ldi	r24, 0xEA	; 234
     e20:	97 e0       	ldi	r25, 0x07	; 7
     e22:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     e26:	01 c1       	rjmp	.+514    	; 0x102a <_Z11changeAlarmi+0x2e2>
			if (key == 2) {lcd.LCD_String_xy(0,n[i],"2");break;}
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	99 f4       	brne	.+38     	; 0xe52 <_Z11changeAlarmi+0x10a>
     e2c:	e0 2f       	mov	r30, r16
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	a1 e0       	ldi	r26, 0x01	; 1
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ac 0f       	add	r26, r28
     e3a:	bd 1f       	adc	r27, r29
     e3c:	ea 0f       	add	r30, r26
     e3e:	fb 1f       	adc	r31, r27
     e40:	40 81       	ld	r20, Z
     e42:	2a e3       	ldi	r18, 0x3A	; 58
     e44:	37 e0       	ldi	r19, 0x07	; 7
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	8a ee       	ldi	r24, 0xEA	; 234
     e4a:	97 e0       	ldi	r25, 0x07	; 7
     e4c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     e50:	ec c0       	rjmp	.+472    	; 0x102a <_Z11changeAlarmi+0x2e2>
			if (key == 3) {lcd.LCD_String_xy(0,n[i],"3");break;}
     e52:	83 30       	cpi	r24, 0x03	; 3
     e54:	99 f4       	brne	.+38     	; 0xe7c <_Z11changeAlarmi+0x134>
     e56:	e0 2f       	mov	r30, r16
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	8c 0f       	add	r24, r28
     e64:	9d 1f       	adc	r25, r29
     e66:	e8 0f       	add	r30, r24
     e68:	f9 1f       	adc	r31, r25
     e6a:	40 81       	ld	r20, Z
     e6c:	2c e3       	ldi	r18, 0x3C	; 60
     e6e:	37 e0       	ldi	r19, 0x07	; 7
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	8a ee       	ldi	r24, 0xEA	; 234
     e74:	97 e0       	ldi	r25, 0x07	; 7
     e76:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     e7a:	d7 c0       	rjmp	.+430    	; 0x102a <_Z11changeAlarmi+0x2e2>
			if (key == 4) {lcd.LCD_String_xy(0,n[i],"4");break;}
     e7c:	84 30       	cpi	r24, 0x04	; 4
     e7e:	99 f4       	brne	.+38     	; 0xea6 <_Z11changeAlarmi+0x15e>
     e80:	e0 2f       	mov	r30, r16
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	a1 e0       	ldi	r26, 0x01	; 1
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ac 0f       	add	r26, r28
     e8e:	bd 1f       	adc	r27, r29
     e90:	ea 0f       	add	r30, r26
     e92:	fb 1f       	adc	r31, r27
     e94:	40 81       	ld	r20, Z
     e96:	2e e3       	ldi	r18, 0x3E	; 62
     e98:	37 e0       	ldi	r19, 0x07	; 7
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	8a ee       	ldi	r24, 0xEA	; 234
     e9e:	97 e0       	ldi	r25, 0x07	; 7
     ea0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     ea4:	c2 c0       	rjmp	.+388    	; 0x102a <_Z11changeAlarmi+0x2e2>
			if (key == 5) {lcd.LCD_String_xy(0,n[i],"5");break;}
     ea6:	85 30       	cpi	r24, 0x05	; 5
     ea8:	99 f4       	brne	.+38     	; 0xed0 <_Z11changeAlarmi+0x188>
     eaa:	e0 2f       	mov	r30, r16
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	8c 0f       	add	r24, r28
     eb8:	9d 1f       	adc	r25, r29
     eba:	e8 0f       	add	r30, r24
     ebc:	f9 1f       	adc	r31, r25
     ebe:	40 81       	ld	r20, Z
     ec0:	20 e4       	ldi	r18, 0x40	; 64
     ec2:	37 e0       	ldi	r19, 0x07	; 7
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	8a ee       	ldi	r24, 0xEA	; 234
     ec8:	97 e0       	ldi	r25, 0x07	; 7
     eca:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     ece:	ad c0       	rjmp	.+346    	; 0x102a <_Z11changeAlarmi+0x2e2>
			if (key == 6) {lcd.LCD_String_xy(0,n[i],"6");break;}
     ed0:	86 30       	cpi	r24, 0x06	; 6
     ed2:	99 f4       	brne	.+38     	; 0xefa <_Z11changeAlarmi+0x1b2>
     ed4:	e0 2f       	mov	r30, r16
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	a1 e0       	ldi	r26, 0x01	; 1
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ac 0f       	add	r26, r28
     ee2:	bd 1f       	adc	r27, r29
     ee4:	ea 0f       	add	r30, r26
     ee6:	fb 1f       	adc	r31, r27
     ee8:	40 81       	ld	r20, Z
     eea:	22 e4       	ldi	r18, 0x42	; 66
     eec:	37 e0       	ldi	r19, 0x07	; 7
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	8a ee       	ldi	r24, 0xEA	; 234
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     ef8:	98 c0       	rjmp	.+304    	; 0x102a <_Z11changeAlarmi+0x2e2>
			if (key == 7) {lcd.LCD_String_xy(0,n[i],"7");break;}
     efa:	87 30       	cpi	r24, 0x07	; 7
     efc:	99 f4       	brne	.+38     	; 0xf24 <_Z11changeAlarmi+0x1dc>
     efe:	e0 2f       	mov	r30, r16
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	8c 0f       	add	r24, r28
     f0c:	9d 1f       	adc	r25, r29
     f0e:	e8 0f       	add	r30, r24
     f10:	f9 1f       	adc	r31, r25
     f12:	40 81       	ld	r20, Z
     f14:	24 e4       	ldi	r18, 0x44	; 68
     f16:	37 e0       	ldi	r19, 0x07	; 7
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	8a ee       	ldi	r24, 0xEA	; 234
     f1c:	97 e0       	ldi	r25, 0x07	; 7
     f1e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     f22:	83 c0       	rjmp	.+262    	; 0x102a <_Z11changeAlarmi+0x2e2>
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
     f24:	88 30       	cpi	r24, 0x08	; 8
     f26:	99 f4       	brne	.+38     	; 0xf4e <_Z11changeAlarmi+0x206>
     f28:	e0 2f       	mov	r30, r16
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	a1 e0       	ldi	r26, 0x01	; 1
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ac 0f       	add	r26, r28
     f36:	bd 1f       	adc	r27, r29
     f38:	ea 0f       	add	r30, r26
     f3a:	fb 1f       	adc	r31, r27
     f3c:	40 81       	ld	r20, Z
     f3e:	26 e4       	ldi	r18, 0x46	; 70
     f40:	37 e0       	ldi	r19, 0x07	; 7
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	8a ee       	ldi	r24, 0xEA	; 234
     f46:	97 e0       	ldi	r25, 0x07	; 7
     f48:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     f4c:	6e c0       	rjmp	.+220    	; 0x102a <_Z11changeAlarmi+0x2e2>
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
     f4e:	89 30       	cpi	r24, 0x09	; 9
     f50:	99 f4       	brne	.+38     	; 0xf78 <_Z11changeAlarmi+0x230>
     f52:	e0 2f       	mov	r30, r16
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	8c 0f       	add	r24, r28
     f60:	9d 1f       	adc	r25, r29
     f62:	e8 0f       	add	r30, r24
     f64:	f9 1f       	adc	r31, r25
     f66:	40 81       	ld	r20, Z
     f68:	28 e4       	ldi	r18, 0x48	; 72
     f6a:	37 e0       	ldi	r19, 0x07	; 7
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	8a ee       	ldi	r24, 0xEA	; 234
     f70:	97 e0       	ldi	r25, 0x07	; 7
     f72:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     f76:	59 c0       	rjmp	.+178    	; 0x102a <_Z11changeAlarmi+0x2e2>
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
     f78:	8b 30       	cpi	r24, 0x0B	; 11
     f7a:	a1 f4       	brne	.+40     	; 0xfa4 <_Z11changeAlarmi+0x25c>
     f7c:	e0 2f       	mov	r30, r16
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	a1 e0       	ldi	r26, 0x01	; 1
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	ac 0f       	add	r26, r28
     f8a:	bd 1f       	adc	r27, r29
     f8c:	ea 0f       	add	r30, r26
     f8e:	fb 1f       	adc	r31, r27
     f90:	40 81       	ld	r20, Z
     f92:	26 e3       	ldi	r18, 0x36	; 54
     f94:	37 e0       	ldi	r19, 0x07	; 7
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	8a ee       	ldi	r24, 0xEA	; 234
     f9a:	97 e0       	ldi	r25, 0x07	; 7
     f9c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN11LCD_Display13LCD_String_xyEccPc>
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	43 c0       	rjmp	.+134    	; 0x102a <_Z11changeAlarmi+0x2e2>
			if (!(PINC & (1<<Ok))){i=8; break;}
     fa4:	32 9b       	sbis	0x06, 2	; 6
     fa6:	40 c0       	rjmp	.+128    	; 0x1028 <_Z11changeAlarmi+0x2e0>
			if (!(PINC & (1<<Back))){
     fa8:	33 99       	sbic	0x06, 3	; 6
     faa:	34 c0       	rjmp	.+104    	; 0x1014 <_Z11changeAlarmi+0x2cc>
				//deleting alarm
				allAlarms[alPos][0] = 0;
     fac:	f5 01       	movw	r30, r10
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	e5 55       	subi	r30, 0x55	; 85
     fbc:	f8 4f       	sbci	r31, 0xF8	; 248
     fbe:	11 82       	std	Z+1, r1	; 0x01
     fc0:	10 82       	st	Z, r1
				allAlarms[alPos][1] = 0;
     fc2:	13 82       	std	Z+3, r1	; 0x03
     fc4:	12 82       	std	Z+2, r1	; 0x02
				allAlarms[alPos][2] = 0;
     fc6:	15 82       	std	Z+5, r1	; 0x05
     fc8:	14 82       	std	Z+4, r1	; 0x04
				allAlarms[alPos][3] = 0; //set alarm state as OFF
     fca:	17 82       	std	Z+7, r1	; 0x07
     fcc:	16 82       	std	Z+6, r1	; 0x06

				allAlarmsMenu[alPos][7] = 'O'; //optional
     fce:	f5 01       	movw	r30, r10
     fd0:	e2 95       	swap	r30
     fd2:	f2 95       	swap	r31
     fd4:	f0 7f       	andi	r31, 0xF0	; 240
     fd6:	fe 27       	eor	r31, r30
     fd8:	e0 7f       	andi	r30, 0xF0	; 240
     fda:	fe 27       	eor	r31, r30
     fdc:	df 01       	movw	r26, r30
     fde:	a0 50       	subi	r26, 0x00	; 0
     fe0:	be 4f       	sbci	r27, 0xFE	; 254
     fe2:	8f e4       	ldi	r24, 0x4F	; 79
     fe4:	17 96       	adiw	r26, 0x07	; 7
     fe6:	8c 93       	st	X, r24
     fe8:	17 97       	sbiw	r26, 0x07	; 7
				allAlarmsMenu[alPos][8] = 'F'; //
     fea:	86 e4       	ldi	r24, 0x46	; 70
     fec:	18 96       	adiw	r26, 0x08	; 8
     fee:	8c 93       	st	X, r24
     ff0:	18 97       	sbiw	r26, 0x08	; 8
				allAlarmsMenu[alPos][9] = 'F';
     ff2:	19 96       	adiw	r26, 0x09	; 9
     ff4:	8c 93       	st	X, r24
 
				alarmChangeList[alPos][0] = '0'; 
     ff6:	e0 55       	subi	r30, 0x50	; 80
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	80 e3       	ldi	r24, 0x30	; 48
     ffc:	80 83       	st	Z, r24
				alarmChangeList[alPos][1] = '0'; 
     ffe:	81 83       	std	Z+1, r24	; 0x01
				alarmChangeList[alPos][3] = '0'; 
    1000:	83 83       	std	Z+3, r24	; 0x03
				alarmChangeList[alPos][4] = '0'; 
    1002:	84 83       	std	Z+4, r24	; 0x04
				
				i = 8;
				delAlarm = true;
				//alarmCount -= 1;
				set=3;
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	90 93 da 07 	sts	0x07DA, r25	; 0x8007da <set+0x1>
    100c:	80 93 d9 07 	sts	0x07D9, r24	; 0x8007d9 <set>
				alarmChangeList[alPos][0] = '0'; 
				alarmChangeList[alPos][1] = '0'; 
				alarmChangeList[alPos][3] = '0'; 
				alarmChangeList[alPos][4] = '0'; 
				
				i = 8;
    1010:	08 e0       	ldi	r16, 0x08	; 8
				delAlarm = true;
				//alarmCount -= 1;
				set=3;
				break;	
    1012:	0b c0       	rjmp	.+22     	; 0x102a <_Z11changeAlarmi+0x2e2>
    1014:	bf ef       	ldi	r27, 0xFF	; 255
    1016:	e1 ee       	ldi	r30, 0xE1	; 225
    1018:	f4 e0       	ldi	r31, 0x04	; 4
    101a:	b1 50       	subi	r27, 0x01	; 1
    101c:	e0 40       	sbci	r30, 0x00	; 0
    101e:	f0 40       	sbci	r31, 0x00	; 0
    1020:	e1 f7       	brne	.-8      	; 0x101a <_Z11changeAlarmi+0x2d2>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <_Z11changeAlarmi+0x2dc>
    1024:	00 00       	nop
    1026:	e6 ce       	rjmp	.-564    	; 0xdf4 <_Z11changeAlarmi+0xac>
			if (key == 6) {lcd.LCD_String_xy(0,n[i],"6");break;}
			if (key == 7) {lcd.LCD_String_xy(0,n[i],"7");break;}
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
			if (!(PINC & (1<<Ok))){i=8; break;}
    1028:	08 e0       	ldi	r16, 0x08	; 8
				break;	
			}
			_delay_ms(200);
		}

		if (i == 0){hr_al+=key*10;}
    102a:	01 11       	cpse	r16, r1
    102c:	0f c0       	rjmp	.+30     	; 0x104c <_Z11changeAlarmi+0x304>
    102e:	81 2f       	mov	r24, r17
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	9c 01       	movw	r18, r24
    1034:	22 0f       	add	r18, r18
    1036:	33 1f       	adc	r19, r19
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
    1048:	e8 0e       	add	r14, r24
    104a:	f9 1e       	adc	r15, r25
		if (i == 1){hr_al+=key;}
    104c:	01 30       	cpi	r16, 0x01	; 1
    104e:	11 f4       	brne	.+4      	; 0x1054 <_Z11changeAlarmi+0x30c>
    1050:	e1 0e       	add	r14, r17
    1052:	f1 1c       	adc	r15, r1
		if (i == 2){min_al+=key*10;}
    1054:	02 30       	cpi	r16, 0x02	; 2
    1056:	79 f4       	brne	.+30     	; 0x1076 <_Z11changeAlarmi+0x32e>
    1058:	81 2f       	mov	r24, r17
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9c 01       	movw	r18, r24
    105e:	22 0f       	add	r18, r18
    1060:	33 1f       	adc	r19, r19
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	82 0f       	add	r24, r18
    1070:	93 1f       	adc	r25, r19
    1072:	c8 0e       	add	r12, r24
    1074:	d9 1e       	adc	r13, r25
		if (i == 3){min_al+=key;}
    1076:	03 30       	cpi	r16, 0x03	; 3
    1078:	11 f4       	brne	.+4      	; 0x107e <_Z11changeAlarmi+0x336>
    107a:	c1 0e       	add	r12, r17
    107c:	d1 1c       	adc	r13, r1
	
	lcd.LCD_Clear();
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
    107e:	0f 5f       	subi	r16, 0xFF	; 255
    1080:	b6 ce       	rjmp	.-660    	; 0xdee <_Z11changeAlarmi+0xa6>
	}
	//updating the lists with new alarm Hour and Min
	if (~(delAlarm)){
		char* txtHr;
		char* txtMin;
		allAlarms[alPos][0] = hr_al;
    1082:	f5 01       	movw	r30, r10
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	ee 0f       	add	r30, r30
    108e:	ff 1f       	adc	r31, r31
    1090:	e5 55       	subi	r30, 0x55	; 85
    1092:	f8 4f       	sbci	r31, 0xF8	; 248
    1094:	f1 82       	std	Z+1, r15	; 0x01
    1096:	e0 82       	st	Z, r14
		allAlarms[alPos][1] = min_al;
    1098:	d3 82       	std	Z+3, r13	; 0x03
    109a:	c2 82       	std	Z+2, r12	; 0x02
		allAlarms[alPos][2] = 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	95 83       	std	Z+5, r25	; 0x05
    10a2:	84 83       	std	Z+4, r24	; 0x04
		allAlarms[alPos][3] = 1;
    10a4:	97 83       	std	Z+7, r25	; 0x07
    10a6:	86 83       	std	Z+6, r24	; 0x06

		txtHr = alarmclock.int_to_char(hr_al);
    10a8:	b7 01       	movw	r22, r14
    10aa:	87 ee       	ldi	r24, 0xE7	; 231
    10ac:	97 e0       	ldi	r25, 0x07	; 7
    10ae:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
		allAlarmsMenu[alPos][7] = 'O'; //optional
    10b2:	85 01       	movw	r16, r10
    10b4:	02 95       	swap	r16
    10b6:	12 95       	swap	r17
    10b8:	10 7f       	andi	r17, 0xF0	; 240
    10ba:	10 27       	eor	r17, r16
    10bc:	00 7f       	andi	r16, 0xF0	; 240
    10be:	10 27       	eor	r17, r16
    10c0:	f8 01       	movw	r30, r16
    10c2:	e0 50       	subi	r30, 0x00	; 0
    10c4:	fe 4f       	sbci	r31, 0xFE	; 254
    10c6:	2f e4       	ldi	r18, 0x4F	; 79
    10c8:	27 83       	std	Z+7, r18	; 0x07
		allAlarmsMenu[alPos][8] = 'N'; 
    10ca:	2e e4       	ldi	r18, 0x4E	; 78
    10cc:	20 87       	std	Z+8, r18	; 0x08
		allAlarmsMenu[alPos][9] = ' ';
    10ce:	20 e2       	ldi	r18, 0x20	; 32
    10d0:	21 87       	std	Z+9, r18	; 0x09

		alarmChangeList[alPos][0] = txtHr[0];
    10d2:	dc 01       	movw	r26, r24
    10d4:	2c 91       	ld	r18, X
    10d6:	00 55       	subi	r16, 0x50	; 80
    10d8:	1e 4f       	sbci	r17, 0xFE	; 254
    10da:	f8 01       	movw	r30, r16
    10dc:	20 83       	st	Z, r18
		alarmChangeList[alPos][1] = txtHr[1];
    10de:	11 96       	adiw	r26, 0x01	; 1
    10e0:	8c 91       	ld	r24, X
    10e2:	81 83       	std	Z+1, r24	; 0x01

		txtMin = alarmclock.int_to_char(min_al);
    10e4:	b6 01       	movw	r22, r12
    10e6:	87 ee       	ldi	r24, 0xE7	; 231
    10e8:	97 e0       	ldi	r25, 0x07	; 7
    10ea:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>

		alarmChangeList[alPos][3] = txtMin[0];
    10ee:	dc 01       	movw	r26, r24
    10f0:	2c 91       	ld	r18, X
    10f2:	f8 01       	movw	r30, r16
    10f4:	23 83       	std	Z+3, r18	; 0x03
		alarmChangeList[alPos][4] = txtMin[1];	
    10f6:	11 96       	adiw	r26, 0x01	; 1
    10f8:	8c 91       	ld	r24, X
    10fa:	84 83       	std	Z+4, r24	; 0x04
	} 
}
    10fc:	2c 96       	adiw	r28, 0x0c	; 12
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	df 90       	pop	r13
    1116:	cf 90       	pop	r12
    1118:	bf 90       	pop	r11
    111a:	af 90       	pop	r10
    111c:	08 95       	ret

0000111e <_Z7displayv>:
		dwnbtn();
		backbtn();
	}
}

void display(){
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29

	if (set == 1){
    1122:	40 91 d9 07 	lds	r20, 0x07D9	; 0x8007d9 <set>
    1126:	50 91 da 07 	lds	r21, 0x07DA	; 0x8007da <set+0x1>
    112a:	41 30       	cpi	r20, 0x01	; 1
    112c:	51 05       	cpc	r21, r1
    112e:	b9 f5       	brne	.+110    	; 0x119e <_Z7displayv+0x80>
		lcd.LCD_Clear();
    1130:	8a ee       	ldi	r24, 0xEA	; 234
    1132:	97 e0       	ldi	r25, 0x07	; 7
    1134:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(Menu[currentscreenset1][0]);        //Write string on 1st line of LCD
    1138:	60 91 d7 07 	lds	r22, 0x07D7	; 0x8007d7 <currentscreenset1>
    113c:	70 91 d8 07 	lds	r23, 0x07D8	; 0x8007d8 <currentscreenset1+0x1>
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	62 95       	swap	r22
    1146:	72 95       	swap	r23
    1148:	70 7f       	andi	r23, 0xF0	; 240
    114a:	76 27       	eor	r23, r22
    114c:	60 7f       	andi	r22, 0xF0	; 240
    114e:	76 27       	eor	r23, r22
    1150:	60 5b       	subi	r22, 0xB0	; 176
    1152:	7d 4f       	sbci	r23, 0xFD	; 253
    1154:	8a ee       	ldi	r24, 0xEA	; 234
    1156:	97 e0       	ldi	r25, 0x07	; 7
    1158:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        //Go to 2nd line
    115c:	60 ec       	ldi	r22, 0xC0	; 192
    115e:	8a ee       	ldi	r24, 0xEA	; 234
    1160:	97 e0       	ldi	r25, 0x07	; 7
    1162:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(Menu[currentscreenset1][1]);
    1166:	60 91 d7 07 	lds	r22, 0x07D7	; 0x8007d7 <currentscreenset1>
    116a:	70 91 d8 07 	lds	r23, 0x07D8	; 0x8007d8 <currentscreenset1+0x1>
    116e:	66 0f       	add	r22, r22
    1170:	77 1f       	adc	r23, r23
    1172:	62 95       	swap	r22
    1174:	72 95       	swap	r23
    1176:	70 7f       	andi	r23, 0xF0	; 240
    1178:	76 27       	eor	r23, r22
    117a:	60 7f       	andi	r22, 0xF0	; 240
    117c:	76 27       	eor	r23, r22
    117e:	60 5a       	subi	r22, 0xA0	; 160
    1180:	7d 4f       	sbci	r23, 0xFD	; 253
    1182:	8a ee       	ldi	r24, 0xEA	; 234
    1184:	97 e0       	ldi	r25, 0x07	; 7
    1186:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN11LCD_Display10LCD_StringEPc>
    118a:	2f ef       	ldi	r18, 0xFF	; 255
    118c:	84 e3       	ldi	r24, 0x34	; 52
    118e:	9c e0       	ldi	r25, 0x0C	; 12
    1190:	21 50       	subi	r18, 0x01	; 1
    1192:	80 40       	sbci	r24, 0x00	; 0
    1194:	90 40       	sbci	r25, 0x00	; 0
    1196:	e1 f7       	brne	.-8      	; 0x1190 <_Z7displayv+0x72>
    1198:	00 c0       	rjmp	.+0      	; 0x119a <_Z7displayv+0x7c>
    119a:	00 00       	nop
    119c:	7e c1       	rjmp	.+764    	; 0x149a <_Z7displayv+0x37c>
		_delay_ms(500);
	}
	else if ((set == 2) & (currentscreenset1 == 0)){
    119e:	21 e0       	ldi	r18, 0x01	; 1
    11a0:	42 30       	cpi	r20, 0x02	; 2
    11a2:	51 05       	cpc	r21, r1
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <_Z7displayv+0x8a>
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <currentscreenset1>
    11ac:	90 91 d8 07 	lds	r25, 0x07D8	; 0x8007d8 <currentscreenset1+0x1>
    11b0:	31 e0       	ldi	r19, 0x01	; 1
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <_Z7displayv+0x9a>
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	33 23       	and	r19, r19
    11ba:	09 f4       	brne	.+2      	; 0x11be <_Z7displayv+0xa0>
    11bc:	6d c0       	rjmp	.+218    	; 0x1298 <_Z7displayv+0x17a>
    11be:	22 23       	and	r18, r18
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <_Z7displayv+0xa6>
    11c2:	6a c0       	rjmp	.+212    	; 0x1298 <_Z7displayv+0x17a>
		char* txtHr;
		char* txtMin;
		lcd.LCD_Clear();
    11c4:	8a ee       	ldi	r24, 0xEA	; 234
    11c6:	97 e0       	ldi	r25, 0x07	; 7
    11c8:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
		int* alarmTime = alarmclock.setNewAlarm();
    11cc:	87 ee       	ldi	r24, 0xE7	; 231
    11ce:	97 e0       	ldi	r25, 0x07	; 7
    11d0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN10AlarmClock11setNewAlarmEv>
    11d4:	ec 01       	movw	r28, r24
		allAlarms[alarmCount][0] = alarmTime[0];
    11d6:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <alarmCount>
    11da:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <alarmCount+0x1>
    11de:	88 81       	ld	r24, Y
    11e0:	99 81       	ldd	r25, Y+1	; 0x01
    11e2:	ee 0f       	add	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	ee 0f       	add	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	e5 55       	subi	r30, 0x55	; 85
    11f0:	f8 4f       	sbci	r31, 0xF8	; 248
    11f2:	91 83       	std	Z+1, r25	; 0x01
    11f4:	80 83       	st	Z, r24
		allAlarms[alarmCount][1] = alarmTime[1];
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	93 83       	std	Z+3, r25	; 0x03
    11fc:	82 83       	std	Z+2, r24	; 0x02
		allAlarms[alarmCount][2] = 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	95 83       	std	Z+5, r25	; 0x05
    1204:	84 83       	std	Z+4, r24	; 0x04
		allAlarms[alarmCount][3] = 1;
    1206:	97 83       	std	Z+7, r25	; 0x07
    1208:	86 83       	std	Z+6, r24	; 0x06

		txtHr = alarmclock.int_to_char(alarmTime[0]);
    120a:	68 81       	ld	r22, Y
    120c:	79 81       	ldd	r23, Y+1	; 0x01
    120e:	87 ee       	ldi	r24, 0xE7	; 231
    1210:	97 e0       	ldi	r25, 0x07	; 7
    1212:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
		allAlarmsMenu[alarmCount][7] = 'O'; //optional
    1216:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <alarmCount>
    121a:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <alarmCount+0x1>
    121e:	e2 95       	swap	r30
    1220:	f2 95       	swap	r31
    1222:	f0 7f       	andi	r31, 0xF0	; 240
    1224:	fe 27       	eor	r31, r30
    1226:	e0 7f       	andi	r30, 0xF0	; 240
    1228:	fe 27       	eor	r31, r30
    122a:	df 01       	movw	r26, r30
    122c:	a0 50       	subi	r26, 0x00	; 0
    122e:	be 4f       	sbci	r27, 0xFE	; 254
    1230:	2f e4       	ldi	r18, 0x4F	; 79
    1232:	17 96       	adiw	r26, 0x07	; 7
    1234:	2c 93       	st	X, r18
    1236:	17 97       	sbiw	r26, 0x07	; 7
		allAlarmsMenu[alarmCount][8] = 'N'; //
    1238:	2e e4       	ldi	r18, 0x4E	; 78
    123a:	18 96       	adiw	r26, 0x08	; 8
    123c:	2c 93       	st	X, r18
    123e:	18 97       	sbiw	r26, 0x08	; 8
		allAlarmsMenu[alarmCount][9] = ' ';
    1240:	20 e2       	ldi	r18, 0x20	; 32
    1242:	19 96       	adiw	r26, 0x09	; 9
    1244:	2c 93       	st	X, r18

		alarmChangeList[alarmCount][0] = txtHr[0]; 
    1246:	dc 01       	movw	r26, r24
    1248:	2c 91       	ld	r18, X
    124a:	e0 55       	subi	r30, 0x50	; 80
    124c:	fe 4f       	sbci	r31, 0xFE	; 254
    124e:	20 83       	st	Z, r18
		alarmChangeList[alarmCount][1] = txtHr[1];
    1250:	11 96       	adiw	r26, 0x01	; 1
    1252:	8c 91       	ld	r24, X
    1254:	81 83       	std	Z+1, r24	; 0x01

		txtMin = alarmclock.int_to_char(alarmTime[1]);
    1256:	6a 81       	ldd	r22, Y+2	; 0x02
    1258:	7b 81       	ldd	r23, Y+3	; 0x03
    125a:	87 ee       	ldi	r24, 0xE7	; 231
    125c:	97 e0       	ldi	r25, 0x07	; 7
    125e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>

		alarmChangeList[alarmCount][3] = txtMin[0];
    1262:	20 91 a9 07 	lds	r18, 0x07A9	; 0x8007a9 <alarmCount>
    1266:	30 91 aa 07 	lds	r19, 0x07AA	; 0x8007aa <alarmCount+0x1>
    126a:	fc 01       	movw	r30, r24
    126c:	40 81       	ld	r20, Z
    126e:	f9 01       	movw	r30, r18
    1270:	e2 95       	swap	r30
    1272:	f2 95       	swap	r31
    1274:	f0 7f       	andi	r31, 0xF0	; 240
    1276:	fe 27       	eor	r31, r30
    1278:	e0 7f       	andi	r30, 0xF0	; 240
    127a:	fe 27       	eor	r31, r30
    127c:	e0 55       	subi	r30, 0x50	; 80
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	43 83       	std	Z+3, r20	; 0x03
		alarmChangeList[alarmCount][4] = txtMin[1];
    1282:	dc 01       	movw	r26, r24
    1284:	11 96       	adiw	r26, 0x01	; 1
    1286:	8c 91       	ld	r24, X
    1288:	84 83       	std	Z+4, r24	; 0x04

		alarmCount += 1;
    128a:	2f 5f       	subi	r18, 0xFF	; 255
    128c:	3f 4f       	sbci	r19, 0xFF	; 255
    128e:	30 93 aa 07 	sts	0x07AA, r19	; 0x8007aa <alarmCount+0x1>
    1292:	20 93 a9 07 	sts	0x07A9, r18	; 0x8007a9 <alarmCount>
    1296:	01 c1       	rjmp	.+514    	; 0x149a <_Z7displayv+0x37c>
	}
	
	else if ((set == 2) & (currentscreenset1 == 1)){
    1298:	31 e0       	ldi	r19, 0x01	; 1
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	09 f0       	breq	.+2      	; 0x12a2 <_Z7displayv+0x184>
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	22 23       	and	r18, r18
    12a4:	59 f1       	breq	.+86     	; 0x12fc <_Z7displayv+0x1de>
    12a6:	33 23       	and	r19, r19
    12a8:	49 f1       	breq	.+82     	; 0x12fc <_Z7displayv+0x1de>
		//All alarms menu
		lcd.LCD_Clear();
    12aa:	8a ee       	ldi	r24, 0xEA	; 234
    12ac:	97 e0       	ldi	r25, 0x07	; 7
    12ae:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(allAlarmsMenu[currentscreenset21]);  
    12b2:	60 91 d5 07 	lds	r22, 0x07D5	; 0x8007d5 <currentscreenset21>
    12b6:	70 91 d6 07 	lds	r23, 0x07D6	; 0x8007d6 <currentscreenset21+0x1>
    12ba:	62 95       	swap	r22
    12bc:	72 95       	swap	r23
    12be:	70 7f       	andi	r23, 0xF0	; 240
    12c0:	76 27       	eor	r23, r22
    12c2:	60 7f       	andi	r22, 0xF0	; 240
    12c4:	76 27       	eor	r23, r22
    12c6:	60 50       	subi	r22, 0x00	; 0
    12c8:	7e 4f       	sbci	r23, 0xFE	; 254
    12ca:	8a ee       	ldi	r24, 0xEA	; 234
    12cc:	97 e0       	ldi	r25, 0x07	; 7
    12ce:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        
    12d2:	60 ec       	ldi	r22, 0xC0	; 192
    12d4:	8a ee       	ldi	r24, 0xEA	; 234
    12d6:	97 e0       	ldi	r25, 0x07	; 7
    12d8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String("CHANGE     BACK");
    12dc:	68 e8       	ldi	r22, 0x88	; 136
    12de:	77 e0       	ldi	r23, 0x07	; 7
    12e0:	8a ee       	ldi	r24, 0xEA	; 234
    12e2:	97 e0       	ldi	r25, 0x07	; 7
    12e4:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN11LCD_Display10LCD_StringEPc>
    12e8:	bf ef       	ldi	r27, 0xFF	; 255
    12ea:	e4 e3       	ldi	r30, 0x34	; 52
    12ec:	fc e0       	ldi	r31, 0x0C	; 12
    12ee:	b1 50       	subi	r27, 0x01	; 1
    12f0:	e0 40       	sbci	r30, 0x00	; 0
    12f2:	f0 40       	sbci	r31, 0x00	; 0
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <_Z7displayv+0x1d0>
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <_Z7displayv+0x1da>
    12f8:	00 00       	nop
    12fa:	cf c0       	rjmp	.+414    	; 0x149a <_Z7displayv+0x37c>

		_delay_ms(500);
	}
	else if ((set==3) & (currentscreenset1==1) ){//& (currentscreenset21 == 0 or 1 or 2 or 3 or 4)){
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	43 30       	cpi	r20, 0x03	; 3
    1300:	51 05       	cpc	r21, r1
    1302:	09 f0       	breq	.+2      	; 0x1306 <_Z7displayv+0x1e8>
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	66 23       	and	r22, r22
    1308:	b1 f0       	breq	.+44     	; 0x1336 <_Z7displayv+0x218>
    130a:	33 23       	and	r19, r19
    130c:	a1 f0       	breq	.+40     	; 0x1336 <_Z7displayv+0x218>
		lcd.LCD_Clear();
    130e:	8a ee       	ldi	r24, 0xEA	; 234
    1310:	97 e0       	ldi	r25, 0x07	; 7
    1312:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
		changeAlarm(currentscreenset21);
    1316:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <currentscreenset21>
    131a:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <currentscreenset21+0x1>
    131e:	0e 94 a4 06 	call	0xd48	; 0xd48 <_Z11changeAlarmi>
    1322:	2f ef       	ldi	r18, 0xFF	; 255
    1324:	84 e3       	ldi	r24, 0x34	; 52
    1326:	9c e0       	ldi	r25, 0x0C	; 12
    1328:	21 50       	subi	r18, 0x01	; 1
    132a:	80 40       	sbci	r24, 0x00	; 0
    132c:	90 40       	sbci	r25, 0x00	; 0
    132e:	e1 f7       	brne	.-8      	; 0x1328 <_Z7displayv+0x20a>
    1330:	00 c0       	rjmp	.+0      	; 0x1332 <_Z7displayv+0x214>
    1332:	00 00       	nop
    1334:	b2 c0       	rjmp	.+356    	; 0x149a <_Z7displayv+0x37c>
		_delay_ms(500);
	}
	else if ((set == 2) & (currentscreenset1 == 2)){
    1336:	31 e0       	ldi	r19, 0x01	; 1
    1338:	82 30       	cpi	r24, 0x02	; 2
    133a:	91 05       	cpc	r25, r1
    133c:	09 f0       	breq	.+2      	; 0x1340 <_Z7displayv+0x222>
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	33 23       	and	r19, r19
    1342:	81 f0       	breq	.+32     	; 0x1364 <_Z7displayv+0x246>
    1344:	22 23       	and	r18, r18
    1346:	71 f0       	breq	.+28     	; 0x1364 <_Z7displayv+0x246>
		alarmclock.setTimetoRTC();
    1348:	87 ee       	ldi	r24, 0xE7	; 231
    134a:	97 e0       	ldi	r25, 0x07	; 7
    134c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN10AlarmClock12setTimetoRTCEv>
    1350:	af ef       	ldi	r26, 0xFF	; 255
    1352:	b4 e3       	ldi	r27, 0x34	; 52
    1354:	ec e0       	ldi	r30, 0x0C	; 12
    1356:	a1 50       	subi	r26, 0x01	; 1
    1358:	b0 40       	sbci	r27, 0x00	; 0
    135a:	e0 40       	sbci	r30, 0x00	; 0
    135c:	e1 f7       	brne	.-8      	; 0x1356 <_Z7displayv+0x238>
    135e:	00 c0       	rjmp	.+0      	; 0x1360 <_Z7displayv+0x242>
    1360:	00 00       	nop
    1362:	9b c0       	rjmp	.+310    	; 0x149a <_Z7displayv+0x37c>
		_delay_ms(500);
	}
	else if ((set == 2) & (currentscreenset1 == 3)){
    1364:	31 e0       	ldi	r19, 0x01	; 1
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	91 05       	cpc	r25, r1
    136a:	09 f0       	breq	.+2      	; 0x136e <_Z7displayv+0x250>
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	33 23       	and	r19, r19
    1370:	09 f4       	brne	.+2      	; 0x1374 <_Z7displayv+0x256>
    1372:	6d c0       	rjmp	.+218    	; 0x144e <_Z7displayv+0x330>
    1374:	22 23       	and	r18, r18
    1376:	09 f4       	brne	.+2      	; 0x137a <_Z7displayv+0x25c>
    1378:	6a c0       	rjmp	.+212    	; 0x144e <_Z7displayv+0x330>
		lcd.LCD_Clear();
    137a:	8a ee       	ldi	r24, 0xEA	; 234
    137c:	97 e0       	ldi	r25, 0x07	; 7
    137e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(alarmtone[currentscreenset23][0]);                //Write string on 1st line of LCD
    1382:	60 91 d3 07 	lds	r22, 0x07D3	; 0x8007d3 <currentscreenset23>
    1386:	70 91 d4 07 	lds	r23, 0x07D4	; 0x8007d4 <currentscreenset23+0x1>
    138a:	66 0f       	add	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	62 95       	swap	r22
    1390:	72 95       	swap	r23
    1392:	70 7f       	andi	r23, 0xF0	; 240
    1394:	76 27       	eor	r23, r22
    1396:	60 7f       	andi	r22, 0xF0	; 240
    1398:	76 27       	eor	r23, r22
    139a:	60 5f       	subi	r22, 0xF0	; 240
    139c:	7e 4f       	sbci	r23, 0xFE	; 254
    139e:	8a ee       	ldi	r24, 0xEA	; 234
    13a0:	97 e0       	ldi	r25, 0x07	; 7
    13a2:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        //Go to 2nd line
    13a6:	60 ec       	ldi	r22, 0xC0	; 192
    13a8:	8a ee       	ldi	r24, 0xEA	; 234
    13aa:	97 e0       	ldi	r25, 0x07	; 7
    13ac:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(alarmtone[currentscreenset23][1]);
    13b0:	60 91 d3 07 	lds	r22, 0x07D3	; 0x8007d3 <currentscreenset23>
    13b4:	70 91 d4 07 	lds	r23, 0x07D4	; 0x8007d4 <currentscreenset23+0x1>
    13b8:	66 0f       	add	r22, r22
    13ba:	77 1f       	adc	r23, r23
    13bc:	62 95       	swap	r22
    13be:	72 95       	swap	r23
    13c0:	70 7f       	andi	r23, 0xF0	; 240
    13c2:	76 27       	eor	r23, r22
    13c4:	60 7f       	andi	r22, 0xF0	; 240
    13c6:	76 27       	eor	r23, r22
    13c8:	60 5e       	subi	r22, 0xE0	; 224
    13ca:	7e 4f       	sbci	r23, 0xFE	; 254
    13cc:	8a ee       	ldi	r24, 0xEA	; 234
    13ce:	97 e0       	ldi	r25, 0x07	; 7
    13d0:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN11LCD_Display10LCD_StringEPc>
    13d4:	ff ef       	ldi	r31, 0xFF	; 255
    13d6:	29 e6       	ldi	r18, 0x69	; 105
    13d8:	88 e1       	ldi	r24, 0x18	; 24
    13da:	f1 50       	subi	r31, 0x01	; 1
    13dc:	20 40       	sbci	r18, 0x00	; 0
    13de:	80 40       	sbci	r24, 0x00	; 0
    13e0:	e1 f7       	brne	.-8      	; 0x13da <_Z7displayv+0x2bc>
    13e2:	00 c0       	rjmp	.+0      	; 0x13e4 <_Z7displayv+0x2c6>
    13e4:	00 00       	nop
		_delay_ms(1000);
		if (currentscreenset23==0){
    13e6:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <currentscreenset23>
    13ea:	90 91 d4 07 	lds	r25, 0x07D4	; 0x8007d4 <currentscreenset23+0x1>
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	39 f4       	brne	.+14     	; 0x1400 <_Z7displayv+0x2e2>
			music.tone(0);
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	8b ed       	ldi	r24, 0xDB	; 219
    13f8:	97 e0       	ldi	r25, 0x07	; 7
    13fa:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZN15music_notations4toneEi>
    13fe:	4d c0       	rjmp	.+154    	; 0x149a <_Z7displayv+0x37c>
		}
		else if (currentscreenset23==1){
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	39 f4       	brne	.+14     	; 0x1414 <_Z7displayv+0x2f6>
			music.tone(1);
    1406:	61 e0       	ldi	r22, 0x01	; 1
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	8b ed       	ldi	r24, 0xDB	; 219
    140c:	97 e0       	ldi	r25, 0x07	; 7
    140e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZN15music_notations4toneEi>
    1412:	43 c0       	rjmp	.+134    	; 0x149a <_Z7displayv+0x37c>
		}
		else if (currentscreenset23==2){
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	91 05       	cpc	r25, r1
    1418:	39 f4       	brne	.+14     	; 0x1428 <_Z7displayv+0x30a>
			music.tone(2);
    141a:	62 e0       	ldi	r22, 0x02	; 2
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	8b ed       	ldi	r24, 0xDB	; 219
    1420:	97 e0       	ldi	r25, 0x07	; 7
    1422:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZN15music_notations4toneEi>
    1426:	39 c0       	rjmp	.+114    	; 0x149a <_Z7displayv+0x37c>
		}
		else if (currentscreenset23==3){
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	91 05       	cpc	r25, r1
    142c:	39 f4       	brne	.+14     	; 0x143c <_Z7displayv+0x31e>
			music.tone(3);
    142e:	63 e0       	ldi	r22, 0x03	; 3
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	8b ed       	ldi	r24, 0xDB	; 219
    1434:	97 e0       	ldi	r25, 0x07	; 7
    1436:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZN15music_notations4toneEi>
    143a:	2f c0       	rjmp	.+94     	; 0x149a <_Z7displayv+0x37c>
		}
		else if (currentscreenset23==4){
    143c:	04 97       	sbiw	r24, 0x04	; 4
    143e:	69 f5       	brne	.+90     	; 0x149a <_Z7displayv+0x37c>
			music.tone(4);
    1440:	64 e0       	ldi	r22, 0x04	; 4
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	8b ed       	ldi	r24, 0xDB	; 219
    1446:	97 e0       	ldi	r25, 0x07	; 7
    1448:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZN15music_notations4toneEi>
    144c:	26 c0       	rjmp	.+76     	; 0x149a <_Z7displayv+0x37c>
		}
	}
	else if ((set == 2) & (currentscreenset1 == 4)){
    144e:	31 e0       	ldi	r19, 0x01	; 1
    1450:	04 97       	sbiw	r24, 0x04	; 4
    1452:	09 f0       	breq	.+2      	; 0x1456 <_Z7displayv+0x338>
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	33 23       	and	r19, r19
    1458:	01 f1       	breq	.+64     	; 0x149a <_Z7displayv+0x37c>
    145a:	22 23       	and	r18, r18
    145c:	f1 f0       	breq	.+60     	; 0x149a <_Z7displayv+0x37c>
		lcd.LCD_Clear();
    145e:	8a ee       	ldi	r24, 0xEA	; 234
    1460:	97 e0       	ldi	r25, 0x07	; 7
    1462:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(reset[0]);                //Write string on 1st line of LCD
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	71 e0       	ldi	r23, 0x01	; 1
    146a:	8a ee       	ldi	r24, 0xEA	; 234
    146c:	97 e0       	ldi	r25, 0x07	; 7
    146e:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);              //Go to 2nd line
    1472:	60 ec       	ldi	r22, 0xC0	; 192
    1474:	8a ee       	ldi	r24, 0xEA	; 234
    1476:	97 e0       	ldi	r25, 0x07	; 7
    1478:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(reset[0]);
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	71 e0       	ldi	r23, 0x01	; 1
    1480:	8a ee       	ldi	r24, 0xEA	; 234
    1482:	97 e0       	ldi	r25, 0x07	; 7
    1484:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN11LCD_Display10LCD_StringEPc>
    1488:	9f ef       	ldi	r25, 0xFF	; 255
    148a:	a4 e3       	ldi	r26, 0x34	; 52
    148c:	bc e0       	ldi	r27, 0x0C	; 12
    148e:	91 50       	subi	r25, 0x01	; 1
    1490:	a0 40       	sbci	r26, 0x00	; 0
    1492:	b0 40       	sbci	r27, 0x00	; 0
    1494:	e1 f7       	brne	.-8      	; 0x148e <_Z7displayv+0x370>
    1496:	00 c0       	rjmp	.+0      	; 0x1498 <_Z7displayv+0x37a>
    1498:	00 00       	nop
		_delay_ms(500);
	}
}
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	08 95       	ret

000014a0 <_Z5upbtnv>:

void upbtn(){
	if (!(PINC &(1<<Up))){
    14a0:	30 99       	sbic	0x06, 0	; 6
    14a2:	93 c0       	rjmp	.+294    	; 0x15ca <_Z5upbtnv+0x12a>
    14a4:	2f e7       	ldi	r18, 0x7F	; 127
    14a6:	88 e3       	ldi	r24, 0x38	; 56
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	21 50       	subi	r18, 0x01	; 1
    14ac:	80 40       	sbci	r24, 0x00	; 0
    14ae:	90 40       	sbci	r25, 0x00	; 0
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <_Z5upbtnv+0xa>
    14b2:	00 c0       	rjmp	.+0      	; 0x14b4 <_Z5upbtnv+0x14>
    14b4:	00 00       	nop
		_delay_ms(50);
		if ((set == 1) & (currentscreenset1==0)){
    14b6:	40 91 d9 07 	lds	r20, 0x07D9	; 0x8007d9 <set>
    14ba:	50 91 da 07 	lds	r21, 0x07DA	; 0x8007da <set+0x1>
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	41 30       	cpi	r20, 0x01	; 1
    14c2:	51 05       	cpc	r21, r1
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <_Z5upbtnv+0x28>
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <currentscreenset1>
    14cc:	90 91 d8 07 	lds	r25, 0x07D8	; 0x8007d8 <currentscreenset1+0x1>
    14d0:	31 e0       	ldi	r19, 0x01	; 1
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <_Z5upbtnv+0x38>
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	33 23       	and	r19, r19
    14da:	59 f0       	breq	.+22     	; 0x14f2 <_Z5upbtnv+0x52>
    14dc:	22 23       	and	r18, r18
    14de:	49 f0       	breq	.+18     	; 0x14f2 <_Z5upbtnv+0x52>
			currentscreenset1=numofscreens1-1;
    14e0:	84 e0       	ldi	r24, 0x04	; 4
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	90 93 d8 07 	sts	0x07D8, r25	; 0x8007d8 <currentscreenset1+0x1>
    14e8:	80 93 d7 07 	sts	0x07D7, r24	; 0x8007d7 <currentscreenset1>
			display();
    14ec:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    14f0:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 0)){
    14f2:	31 e0       	ldi	r19, 0x01	; 1
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	09 f4       	brne	.+2      	; 0x14fa <_Z5upbtnv+0x5a>
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	33 23       	and	r19, r19
    14fc:	51 f0       	breq	.+20     	; 0x1512 <_Z5upbtnv+0x72>
    14fe:	22 23       	and	r18, r18
    1500:	41 f0       	breq	.+16     	; 0x1512 <_Z5upbtnv+0x72>
			currentscreenset1 -= 1;
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	90 93 d8 07 	sts	0x07D8, r25	; 0x8007d8 <currentscreenset1+0x1>
    1508:	80 93 d7 07 	sts	0x07D7, r24	; 0x8007d7 <currentscreenset1>
			display();
    150c:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    1510:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 == 0)){
    1512:	31 e0       	ldi	r19, 0x01	; 1
    1514:	42 30       	cpi	r20, 0x02	; 2
    1516:	51 05       	cpc	r21, r1
    1518:	09 f0       	breq	.+2      	; 0x151c <_Z5upbtnv+0x7c>
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	21 e0       	ldi	r18, 0x01	; 1
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	91 05       	cpc	r25, r1
    1522:	09 f0       	breq	.+2      	; 0x1526 <_Z5upbtnv+0x86>
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	23 23       	and	r18, r19
    1528:	40 91 d5 07 	lds	r20, 0x07D5	; 0x8007d5 <currentscreenset21>
    152c:	50 91 d6 07 	lds	r21, 0x07D6	; 0x8007d6 <currentscreenset21+0x1>
    1530:	61 e0       	ldi	r22, 0x01	; 1
    1532:	41 15       	cp	r20, r1
    1534:	51 05       	cpc	r21, r1
    1536:	09 f0       	breq	.+2      	; 0x153a <_Z5upbtnv+0x9a>
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	22 23       	and	r18, r18
    153c:	59 f0       	breq	.+22     	; 0x1554 <_Z5upbtnv+0xb4>
    153e:	66 23       	and	r22, r22
    1540:	49 f0       	breq	.+18     	; 0x1554 <_Z5upbtnv+0xb4>
			currentscreenset21=numofscreens21-1;
    1542:	84 e0       	ldi	r24, 0x04	; 4
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	90 93 d6 07 	sts	0x07D6, r25	; 0x8007d6 <currentscreenset21+0x1>
    154a:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <currentscreenset21>
			display();
    154e:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    1552:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 != 0)){
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	41 15       	cp	r20, r1
    1558:	51 05       	cpc	r21, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <_Z5upbtnv+0xbe>
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	22 23       	and	r18, r18
    1560:	59 f0       	breq	.+22     	; 0x1578 <_Z5upbtnv+0xd8>
    1562:	66 23       	and	r22, r22
    1564:	49 f0       	breq	.+18     	; 0x1578 <_Z5upbtnv+0xd8>
			currentscreenset21 -= 1;
    1566:	41 50       	subi	r20, 0x01	; 1
    1568:	51 09       	sbc	r21, r1
    156a:	50 93 d6 07 	sts	0x07D6, r21	; 0x8007d6 <currentscreenset21+0x1>
    156e:	40 93 d5 07 	sts	0x07D5, r20	; 0x8007d5 <currentscreenset21>
			display();
    1572:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    1576:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 == 0)){
    1578:	21 e0       	ldi	r18, 0x01	; 1
    157a:	03 97       	sbiw	r24, 0x03	; 3
    157c:	09 f0       	breq	.+2      	; 0x1580 <_Z5upbtnv+0xe0>
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	32 23       	and	r19, r18
    1582:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <currentscreenset23>
    1586:	90 91 d4 07 	lds	r25, 0x07D4	; 0x8007d4 <currentscreenset23+0x1>
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	09 f0       	breq	.+2      	; 0x1592 <_Z5upbtnv+0xf2>
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	33 23       	and	r19, r19
    1594:	59 f0       	breq	.+22     	; 0x15ac <_Z5upbtnv+0x10c>
    1596:	22 23       	and	r18, r18
    1598:	49 f0       	breq	.+18     	; 0x15ac <_Z5upbtnv+0x10c>
			currentscreenset23=numofscreens21-1;
    159a:	84 e0       	ldi	r24, 0x04	; 4
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	90 93 d4 07 	sts	0x07D4, r25	; 0x8007d4 <currentscreenset23+0x1>
    15a2:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <currentscreenset23>
			display();
    15a6:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    15aa:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 != 0)){
    15ac:	21 e0       	ldi	r18, 0x01	; 1
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <_Z5upbtnv+0x114>
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	33 23       	and	r19, r19
    15b6:	49 f0       	breq	.+18     	; 0x15ca <_Z5upbtnv+0x12a>
    15b8:	22 23       	and	r18, r18
    15ba:	39 f0       	breq	.+14     	; 0x15ca <_Z5upbtnv+0x12a>
			currentscreenset23 -= 1;
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	90 93 d4 07 	sts	0x07D4, r25	; 0x8007d4 <currentscreenset23+0x1>
    15c2:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <currentscreenset23>
			display();
    15c6:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    15ca:	08 95       	ret

000015cc <_Z6dwnbtnv>:
    15cc:	2f e7       	ldi	r18, 0x7F	; 127
    15ce:	88 e3       	ldi	r24, 0x38	; 56
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	21 50       	subi	r18, 0x01	; 1
    15d4:	80 40       	sbci	r24, 0x00	; 0
    15d6:	90 40       	sbci	r25, 0x00	; 0
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <_Z6dwnbtnv+0x6>
    15da:	00 c0       	rjmp	.+0      	; 0x15dc <_Z6dwnbtnv+0x10>
    15dc:	00 00       	nop
	}
}

void dwnbtn(){
	_delay_ms(50);
	if (!(PINC &(1<<Down))){
    15de:	31 99       	sbic	0x06, 1	; 6
    15e0:	8e c0       	rjmp	.+284    	; 0x16fe <_Z6dwnbtnv+0x132>
		if ((set == 1) & (currentscreenset1==4)){
    15e2:	40 91 d9 07 	lds	r20, 0x07D9	; 0x8007d9 <set>
    15e6:	50 91 da 07 	lds	r21, 0x07DA	; 0x8007da <set+0x1>
    15ea:	21 e0       	ldi	r18, 0x01	; 1
    15ec:	41 30       	cpi	r20, 0x01	; 1
    15ee:	51 05       	cpc	r21, r1
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <_Z6dwnbtnv+0x28>
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <currentscreenset1>
    15f8:	90 91 d8 07 	lds	r25, 0x07D8	; 0x8007d8 <currentscreenset1+0x1>
    15fc:	31 e0       	ldi	r19, 0x01	; 1
    15fe:	84 30       	cpi	r24, 0x04	; 4
    1600:	91 05       	cpc	r25, r1
    1602:	09 f0       	breq	.+2      	; 0x1606 <_Z6dwnbtnv+0x3a>
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	33 23       	and	r19, r19
    1608:	49 f0       	breq	.+18     	; 0x161c <_Z6dwnbtnv+0x50>
    160a:	22 23       	and	r18, r18
    160c:	39 f0       	breq	.+14     	; 0x161c <_Z6dwnbtnv+0x50>
			currentscreenset1=0;
    160e:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <currentscreenset1+0x1>
    1612:	10 92 d7 07 	sts	0x07D7, r1	; 0x8007d7 <currentscreenset1>
			display();
    1616:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    161a:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 4)){
    161c:	31 e0       	ldi	r19, 0x01	; 1
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	91 05       	cpc	r25, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <_Z6dwnbtnv+0x5a>
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	33 23       	and	r19, r19
    1628:	a1 f0       	breq	.+40     	; 0x1652 <_Z6dwnbtnv+0x86>
    162a:	22 23       	and	r18, r18
    162c:	91 f0       	breq	.+36     	; 0x1652 <_Z6dwnbtnv+0x86>
    162e:	8f e1       	ldi	r24, 0x1F	; 31
    1630:	9e e4       	ldi	r25, 0x4E	; 78
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <_Z6dwnbtnv+0x66>
    1636:	00 c0       	rjmp	.+0      	; 0x1638 <_Z6dwnbtnv+0x6c>
    1638:	00 00       	nop
			_delay_ms(10);
			currentscreenset1 += 1;
    163a:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <currentscreenset1>
    163e:	90 91 d8 07 	lds	r25, 0x07D8	; 0x8007d8 <currentscreenset1+0x1>
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	90 93 d8 07 	sts	0x07D8, r25	; 0x8007d8 <currentscreenset1+0x1>
    1648:	80 93 d7 07 	sts	0x07D7, r24	; 0x8007d7 <currentscreenset1>
			display();
    164c:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    1650:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 == 4)){
    1652:	31 e0       	ldi	r19, 0x01	; 1
    1654:	42 30       	cpi	r20, 0x02	; 2
    1656:	51 05       	cpc	r21, r1
    1658:	09 f0       	breq	.+2      	; 0x165c <_Z6dwnbtnv+0x90>
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	21 e0       	ldi	r18, 0x01	; 1
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	09 f0       	breq	.+2      	; 0x1666 <_Z6dwnbtnv+0x9a>
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	23 23       	and	r18, r19
    1668:	60 91 d5 07 	lds	r22, 0x07D5	; 0x8007d5 <currentscreenset21>
    166c:	70 91 d6 07 	lds	r23, 0x07D6	; 0x8007d6 <currentscreenset21+0x1>
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	64 30       	cpi	r22, 0x04	; 4
    1674:	71 05       	cpc	r23, r1
    1676:	09 f0       	breq	.+2      	; 0x167a <_Z6dwnbtnv+0xae>
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	22 23       	and	r18, r18
    167c:	49 f0       	breq	.+18     	; 0x1690 <_Z6dwnbtnv+0xc4>
    167e:	44 23       	and	r20, r20
    1680:	39 f0       	breq	.+14     	; 0x1690 <_Z6dwnbtnv+0xc4>
			currentscreenset21=0;
    1682:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <currentscreenset21+0x1>
    1686:	10 92 d5 07 	sts	0x07D5, r1	; 0x8007d5 <currentscreenset21>
			display();
    168a:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    168e:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset23 != 4)){
    1690:	40 91 d3 07 	lds	r20, 0x07D3	; 0x8007d3 <currentscreenset23>
    1694:	50 91 d4 07 	lds	r21, 0x07D4	; 0x8007d4 <currentscreenset23+0x1>
    1698:	e1 e0       	ldi	r30, 0x01	; 1
    169a:	44 30       	cpi	r20, 0x04	; 4
    169c:	51 05       	cpc	r21, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <_Z6dwnbtnv+0xd6>
    16a0:	e0 e0       	ldi	r30, 0x00	; 0
    16a2:	22 23       	and	r18, r18
    16a4:	59 f0       	breq	.+22     	; 0x16bc <_Z6dwnbtnv+0xf0>
    16a6:	ee 23       	and	r30, r30
    16a8:	49 f0       	breq	.+18     	; 0x16bc <_Z6dwnbtnv+0xf0>
			currentscreenset21 += 1;
    16aa:	6f 5f       	subi	r22, 0xFF	; 255
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	70 93 d6 07 	sts	0x07D6, r23	; 0x8007d6 <currentscreenset21+0x1>
    16b2:	60 93 d5 07 	sts	0x07D5, r22	; 0x8007d5 <currentscreenset21>
			display();
    16b6:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    16ba:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 == 4)){
    16bc:	21 e0       	ldi	r18, 0x01	; 1
    16be:	03 97       	sbiw	r24, 0x03	; 3
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <_Z6dwnbtnv+0xf8>
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	32 23       	and	r19, r18
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	44 30       	cpi	r20, 0x04	; 4
    16ca:	51 05       	cpc	r21, r1
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <_Z6dwnbtnv+0x104>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	33 23       	and	r19, r19
    16d2:	49 f0       	breq	.+18     	; 0x16e6 <_Z6dwnbtnv+0x11a>
    16d4:	88 23       	and	r24, r24
    16d6:	39 f0       	breq	.+14     	; 0x16e6 <_Z6dwnbtnv+0x11a>
			currentscreenset23 = 0;
    16d8:	10 92 d4 07 	sts	0x07D4, r1	; 0x8007d4 <currentscreenset23+0x1>
    16dc:	10 92 d3 07 	sts	0x07D3, r1	; 0x8007d3 <currentscreenset23>
			display();
    16e0:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    16e4:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 != 4)){
    16e6:	ee 23       	and	r30, r30
    16e8:	51 f0       	breq	.+20     	; 0x16fe <_Z6dwnbtnv+0x132>
    16ea:	33 23       	and	r19, r19
    16ec:	41 f0       	breq	.+16     	; 0x16fe <_Z6dwnbtnv+0x132>
			currentscreenset23 += 1;
    16ee:	4f 5f       	subi	r20, 0xFF	; 255
    16f0:	5f 4f       	sbci	r21, 0xFF	; 255
    16f2:	50 93 d4 07 	sts	0x07D4, r21	; 0x8007d4 <currentscreenset23+0x1>
    16f6:	40 93 d3 07 	sts	0x07D3, r20	; 0x8007d3 <currentscreenset23>
			display();
    16fa:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    16fe:	08 95       	ret

00001700 <_Z5okbtnv>:
    1700:	2f e7       	ldi	r18, 0x7F	; 127
    1702:	88 e3       	ldi	r24, 0x38	; 56
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	21 50       	subi	r18, 0x01	; 1
    1708:	80 40       	sbci	r24, 0x00	; 0
    170a:	90 40       	sbci	r25, 0x00	; 0
    170c:	e1 f7       	brne	.-8      	; 0x1706 <_Z5okbtnv+0x6>
    170e:	00 c0       	rjmp	.+0      	; 0x1710 <_Z5okbtnv+0x10>
    1710:	00 00       	nop
	}
}

void okbtn(){
	_delay_ms(50);
	if (!(PINC & (1<<Ok))){	
    1712:	32 99       	sbic	0x06, 2	; 6
    1714:	15 c0       	rjmp	.+42     	; 0x1740 <_Z5okbtnv+0x40>
		if (set==3){
    1716:	80 91 d9 07 	lds	r24, 0x07D9	; 0x8007d9 <set>
    171a:	90 91 da 07 	lds	r25, 0x07DA	; 0x8007da <set+0x1>
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	39 f4       	brne	.+14     	; 0x1732 <_Z5okbtnv+0x32>
			set = 0;
    1724:	10 92 da 07 	sts	0x07DA, r1	; 0x8007da <set+0x1>
    1728:	10 92 d9 07 	sts	0x07D9, r1	; 0x8007d9 <set>
		display();}
    172c:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    1730:	08 95       	ret
		else {
			set+= 1;
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	90 93 da 07 	sts	0x07DA, r25	; 0x8007da <set+0x1>
    1738:	80 93 d9 07 	sts	0x07D9, r24	; 0x8007d9 <set>
		display();}
    173c:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    1740:	08 95       	ret

00001742 <_Z7backbtnv>:
    1742:	2f e7       	ldi	r18, 0x7F	; 127
    1744:	88 e3       	ldi	r24, 0x38	; 56
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	21 50       	subi	r18, 0x01	; 1
    174a:	80 40       	sbci	r24, 0x00	; 0
    174c:	90 40       	sbci	r25, 0x00	; 0
    174e:	e1 f7       	brne	.-8      	; 0x1748 <_Z7backbtnv+0x6>
    1750:	00 c0       	rjmp	.+0      	; 0x1752 <_Z7backbtnv+0x10>
    1752:	00 00       	nop
	}
}

void backbtn(){
	_delay_ms(50);
	if (!(PINC &(1<<Back))){
    1754:	33 99       	sbic	0x06, 3	; 6
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <_Z7backbtnv+0x3e>
		if (set == 0){
    1758:	80 91 d9 07 	lds	r24, 0x07D9	; 0x8007d9 <set>
    175c:	90 91 da 07 	lds	r25, 0x07DA	; 0x8007da <set+0x1>
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	39 f4       	brne	.+14     	; 0x1772 <_Z7backbtnv+0x30>
			set = 0;
    1764:	10 92 da 07 	sts	0x07DA, r1	; 0x8007da <set+0x1>
    1768:	10 92 d9 07 	sts	0x07D9, r1	; 0x8007d9 <set>
			display();
    176c:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    1770:	08 95       	ret
		}
		else {
			set-= 1;
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	90 93 da 07 	sts	0x07DA, r25	; 0x8007da <set+0x1>
    1778:	80 93 d9 07 	sts	0x07D9, r24	; 0x8007d9 <set>
			display();
    177c:	0e 94 8f 08 	call	0x111e	; 0x111e <_Z7displayv>
    1780:	08 95       	ret

00001782 <main>:
int alarmCount = 0;
bool stop = false;	


int main(void)
{
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	27 97       	sbiw	r28, 0x07	; 7
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0b10000000;
    1796:	80 e8       	ldi	r24, 0x80	; 128
    1798:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (1<<PORTC0) | (1<<PORTC1) | (1<<PORTC2) | (1<<PORTC3);
    179a:	88 b1       	in	r24, 0x08	; 8
    179c:	8f 60       	ori	r24, 0x0F	; 15
    179e:	88 b9       	out	0x08, r24	; 8
	ds1307::rtc_t rtc;

	// Setting time to the RTC
	rtc.seconds =  0x00; //
    17a0:	19 82       	std	Y+1, r1	; 0x01
	rtc.minute =  0x00;
    17a2:	1a 82       	std	Y+2, r1	; 0x02
	rtc.hour = 0x10;	
    17a4:	80 e1       	ldi	r24, 0x10	; 16
    17a6:	8b 83       	std	Y+3, r24	; 0x03
	rtc.weekDay = 0x05;
    17a8:	85 e0       	ldi	r24, 0x05	; 5
    17aa:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x06;
    17ac:	86 e0       	ldi	r24, 0x06	; 6
    17ae:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x08;
    17b0:	88 e0       	ldi	r24, 0x08	; 8
    17b2:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21;	//27th May 2021
    17b4:	81 e2       	ldi	r24, 0x21	; 33
    17b6:	8f 83       	std	Y+7, r24	; 0x07
	
	DS1307.set_time(&rtc);
    17b8:	be 01       	movw	r22, r28
    17ba:	6f 5f       	subi	r22, 0xFF	; 255
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	80 ef       	ldi	r24, 0xF0	; 240
    17c0:	97 e0       	ldi	r25, 0x07	; 7
    17c2:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN6ds13078set_timeEPNS_5rtc_tE>
	lcd.LCD_Initializer();	//initialize the display (PORTB)
    17c6:	8a ee       	ldi	r24, 0xEA	; 234
    17c8:	97 e0       	ldi	r25, 0x07	; 7
    17ca:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN11LCD_Display15LCD_InitializerEv>

	while (1)
	{
		
		if (set==0){alarmclock.displayTime(); checkAlarm();}
    17ce:	80 91 d9 07 	lds	r24, 0x07D9	; 0x8007d9 <set>
    17d2:	90 91 da 07 	lds	r25, 0x07DA	; 0x8007da <set+0x1>
    17d6:	89 2b       	or	r24, r25
    17d8:	31 f4       	brne	.+12     	; 0x17e6 <main+0x64>
    17da:	87 ee       	ldi	r24, 0xE7	; 231
    17dc:	97 e0       	ldi	r25, 0x07	; 7
    17de:	0e 94 7b 00 	call	0xf6	; 0xf6 <_ZN10AlarmClock11displayTimeEv>
    17e2:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_Z10checkAlarmv>
		okbtn();
    17e6:	0e 94 80 0b 	call	0x1700	; 0x1700 <_Z5okbtnv>
		upbtn();
    17ea:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_Z5upbtnv>
		dwnbtn();
    17ee:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_Z6dwnbtnv>
		backbtn();
    17f2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_Z7backbtnv>
	rtc.year = 0x21;	//27th May 2021
	
	DS1307.set_time(&rtc);
	lcd.LCD_Initializer();	//initialize the display (PORTB)

	while (1)
    17f6:	eb cf       	rjmp	.-42     	; 0x17ce <main+0x4c>

000017f8 <_ZN15music_notations11playthenoteEff>:
int sizeofstarwars = sizeof(StarWars)/sizeof(StarWars[0]);
int sizeofcoffindance = sizeof(CoffinDance)/sizeof(CoffinDance[0]);
int sizeoftakeonme = sizeof(TakeOnMe)/sizeof(TakeOnMe[0]);

void music_notations::playthenote(float frequency, float duration)
{
    17f8:	4f 92       	push	r4
    17fa:	5f 92       	push	r5
    17fc:	6f 92       	push	r6
    17fe:	7f 92       	push	r7
    1800:	8f 92       	push	r8
    1802:	9f 92       	push	r9
    1804:	af 92       	push	r10
    1806:	bf 92       	push	r11
    1808:	cf 92       	push	r12
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	00 d0       	rcall	.+0      	; 0x181a <_ZN15music_notations11playthenoteEff+0x22>
    181a:	00 d0       	rcall	.+0      	; 0x181c <_ZN15music_notations11playthenoteEff+0x24>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	6a 01       	movw	r12, r20
    1822:	7b 01       	movw	r14, r22
    1824:	48 01       	movw	r8, r16
    1826:	59 01       	movw	r10, r18
	float period;
	
	// "period" is the wavelength calculated from frequency using the formula "period" = 1 / f.
	// We output 5 V for a length of time determined by half period (period/2), and then output 0 V, for the same length of time.
	
	if (frequency != 0){
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	a9 01       	movw	r20, r18
    182e:	c7 01       	movw	r24, r14
    1830:	b6 01       	movw	r22, r12
    1832:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__cmpsf2>
    1836:	88 23       	and	r24, r24
    1838:	09 f4       	brne	.+2      	; 0x183c <_ZN15music_notations11playthenoteEff+0x44>
    183a:	b0 c0       	rjmp	.+352    	; 0x199c <_ZN15music_notations11playthenoteEff+0x1a4>
		period=(1/frequency)*1000;  // period in mile seconds
    183c:	a7 01       	movw	r20, r14
    183e:	96 01       	movw	r18, r12
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	80 e8       	ldi	r24, 0x80	; 128
    1846:	9f e3       	ldi	r25, 0x3F	; 63
    1848:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__divsf3>
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a e7       	ldi	r20, 0x7A	; 122
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulsf3>
    1858:	6b 01       	movw	r12, r22
    185a:	7c 01       	movw	r14, r24
		cycles=duration/period;
    185c:	9b 01       	movw	r18, r22
    185e:	ac 01       	movw	r20, r24
    1860:	c5 01       	movw	r24, r10
    1862:	b4 01       	movw	r22, r8
    1864:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__divsf3>
    1868:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__fixsfsi>
    186c:	2b 01       	movw	r4, r22
    186e:	3c 01       	movw	r6, r24
		half_period = period/2;
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	5f e3       	ldi	r21, 0x3F	; 63
    1878:	c7 01       	movw	r24, r14
    187a:	b6 01       	movw	r22, r12
    187c:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulsf3>
    1880:	69 83       	std	Y+1, r22	; 0x01
    1882:	7a 83       	std	Y+2, r23	; 0x02
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	9c 83       	std	Y+4, r25	; 0x04
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);
    1888:	8a b1       	in	r24, 0x0a	; 10
    188a:	80 68       	ori	r24, 0x80	; 128
    188c:	8a b9       	out	0x0a, r24	; 10

		for (i=0;i<cycles;i++)
    188e:	81 2c       	mov	r8, r1
    1890:	91 2c       	mov	r9, r1
    1892:	54 01       	movw	r10, r8
    1894:	84 14       	cp	r8, r4
    1896:	95 04       	cpc	r9, r5
    1898:	a6 04       	cpc	r10, r6
    189a:	b7 04       	cpc	r11, r7
    189c:	0c f0       	brlt	.+2      	; 0x18a0 <_ZN15music_notations11playthenoteEff+0xa8>
    189e:	b8 c0       	rjmp	.+368    	; 0x1a10 <_ZN15music_notations11playthenoteEff+0x218>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	4a ef       	ldi	r20, 0xFA	; 250
    18a6:	54 e4       	ldi	r21, 0x44	; 68
    18a8:	69 81       	ldd	r22, Y+1	; 0x01
    18aa:	7a 81       	ldd	r23, Y+2	; 0x02
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulsf3>
    18b4:	6b 01       	movw	r12, r22
    18b6:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__cmpsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	2c f1       	brlt	.+74     	; 0x1912 <_ZN15music_notations11playthenoteEff+0x11a>
		__ticks = 1;
	else if (__tmp > 65535)
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	3f ef       	ldi	r19, 0xFF	; 255
    18cc:	4f e7       	ldi	r20, 0x7F	; 127
    18ce:	57 e4       	ldi	r21, 0x47	; 71
    18d0:	c7 01       	movw	r24, r14
    18d2:	b6 01       	movw	r22, r12
    18d4:	0e 94 43 10 	call	0x2086	; 0x2086 <__gesf2>
    18d8:	18 16       	cp	r1, r24
    18da:	b4 f4       	brge	.+44     	; 0x1908 <_ZN15music_notations11playthenoteEff+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e2       	ldi	r20, 0x20	; 32
    18e2:	51 e4       	ldi	r21, 0x41	; 65
    18e4:	69 81       	ldd	r22, Y+1	; 0x01
    18e6:	7a 81       	ldd	r23, Y+2	; 0x02
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulsf3>
    18f0:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
		while(__ticks)
    18f4:	61 15       	cp	r22, r1
    18f6:	71 05       	cpc	r23, r1
    18f8:	89 f0       	breq	.+34     	; 0x191c <_ZN15music_notations11playthenoteEff+0x124>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    18fa:	88 ec       	ldi	r24, 0xC8	; 200
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <_ZN15music_notations11playthenoteEff+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1902:	61 50       	subi	r22, 0x01	; 1
    1904:	71 09       	sbc	r23, r1
    1906:	f6 cf       	rjmp	.-20     	; 0x18f4 <_ZN15music_notations11playthenoteEff+0xfc>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	c7 01       	movw	r24, r14
    190a:	b6 01       	movw	r22, r12
    190c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <_ZN15music_notations11playthenoteEff+0x11e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1912:	61 e0       	ldi	r22, 0x01	; 1
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	cb 01       	movw	r24, r22
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <_ZN15music_notations11playthenoteEff+0x120>
		{
			_delay_ms(half_period);
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
    191c:	8b b1       	in	r24, 0x0b	; 11
    191e:	80 68       	ori	r24, 0x80	; 128
    1920:	8b b9       	out	0x0b, r24	; 11
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	c7 01       	movw	r24, r14
    192c:	b6 01       	movw	r22, r12
    192e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__cmpsf2>
    1932:	88 23       	and	r24, r24
    1934:	2c f1       	brlt	.+74     	; 0x1980 <_ZN15music_notations11playthenoteEff+0x188>
		__ticks = 1;
	else if (__tmp > 65535)
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	3f ef       	ldi	r19, 0xFF	; 255
    193a:	4f e7       	ldi	r20, 0x7F	; 127
    193c:	57 e4       	ldi	r21, 0x47	; 71
    193e:	c7 01       	movw	r24, r14
    1940:	b6 01       	movw	r22, r12
    1942:	0e 94 43 10 	call	0x2086	; 0x2086 <__gesf2>
    1946:	18 16       	cp	r1, r24
    1948:	b4 f4       	brge	.+44     	; 0x1976 <_ZN15music_notations11playthenoteEff+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e2       	ldi	r20, 0x20	; 32
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	69 81       	ldd	r22, Y+1	; 0x01
    1954:	7a 81       	ldd	r23, Y+2	; 0x02
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulsf3>
    195e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
		while(__ticks)
    1962:	61 15       	cp	r22, r1
    1964:	71 05       	cpc	r23, r1
    1966:	89 f0       	breq	.+34     	; 0x198a <_ZN15music_notations11playthenoteEff+0x192>
    1968:	88 ec       	ldi	r24, 0xC8	; 200
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <_ZN15music_notations11playthenoteEff+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1970:	61 50       	subi	r22, 0x01	; 1
    1972:	71 09       	sbc	r23, r1
    1974:	f6 cf       	rjmp	.-20     	; 0x1962 <_ZN15music_notations11playthenoteEff+0x16a>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1976:	c7 01       	movw	r24, r14
    1978:	b6 01       	movw	r22, r12
    197a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <_ZN15music_notations11playthenoteEff+0x18c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	cb 01       	movw	r24, r22
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <_ZN15music_notations11playthenoteEff+0x18e>
			_delay_ms(half_period);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
    198a:	8b b1       	in	r24, 0x0b	; 11
    198c:	8f 77       	andi	r24, 0x7F	; 127
    198e:	8b b9       	out	0x0b, r24	; 11
		cycles=duration/period;
		half_period = period/2;
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);

		for (i=0;i<cycles;i++)
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	88 1a       	sub	r8, r24
    1994:	98 0a       	sbc	r9, r24
    1996:	a8 0a       	sbc	r10, r24
    1998:	b8 0a       	sbc	r11, r24
    199a:	7c cf       	rjmp	.-264    	; 0x1894 <_ZN15music_notations11playthenoteEff+0x9c>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	4a ef       	ldi	r20, 0xFA	; 250
    19a2:	54 e4       	ldi	r21, 0x44	; 68
    19a4:	c5 01       	movw	r24, r10
    19a6:	b4 01       	movw	r22, r8
    19a8:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulsf3>
    19ac:	6b 01       	movw	r12, r22
    19ae:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__cmpsf2>
    19bc:	88 23       	and	r24, r24
    19be:	1c f1       	brlt	.+70     	; 0x1a06 <_ZN15music_notations11playthenoteEff+0x20e>
		__ticks = 1;
	else if (__tmp > 65535)
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	c7 01       	movw	r24, r14
    19ca:	b6 01       	movw	r22, r12
    19cc:	0e 94 43 10 	call	0x2086	; 0x2086 <__gesf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	a4 f4       	brge	.+40     	; 0x19fc <_ZN15music_notations11playthenoteEff+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	c5 01       	movw	r24, r10
    19de:	b4 01       	movw	r22, r8
    19e0:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulsf3>
    19e4:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
		while(__ticks)
    19e8:	61 15       	cp	r22, r1
    19ea:	71 05       	cpc	r23, r1
    19ec:	89 f0       	breq	.+34     	; 0x1a10 <_ZN15music_notations11playthenoteEff+0x218>
    19ee:	88 ec       	ldi	r24, 0xC8	; 200
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <_ZN15music_notations11playthenoteEff+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f6:	61 50       	subi	r22, 0x01	; 1
    19f8:	71 09       	sbc	r23, r1
    19fa:	f6 cf       	rjmp	.-20     	; 0x19e8 <_ZN15music_notations11playthenoteEff+0x1f0>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	c7 01       	movw	r24, r14
    19fe:	b6 01       	movw	r22, r12
    1a00:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <_ZN15music_notations11playthenoteEff+0x212>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <_ZN15music_notations11playthenoteEff+0x214>
	else {
		_delay_ms(duration);   // rest
	}

	return;
}
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	df 90       	pop	r13
    1a26:	cf 90       	pop	r12
    1a28:	bf 90       	pop	r11
    1a2a:	af 90       	pop	r10
    1a2c:	9f 90       	pop	r9
    1a2e:	8f 90       	pop	r8
    1a30:	7f 90       	pop	r7
    1a32:	6f 90       	pop	r6
    1a34:	5f 90       	pop	r5
    1a36:	4f 90       	pop	r4
    1a38:	08 95       	ret

00001a3a <_ZN15music_notations13playthemelodyEPiS0_i>:
void music_notations::playthemelody(int Melody[], int MelodyDuration[], int size)
{
    1a3a:	2f 92       	push	r2
    1a3c:	3f 92       	push	r3
    1a3e:	4f 92       	push	r4
    1a40:	5f 92       	push	r5
    1a42:	6f 92       	push	r6
    1a44:	7f 92       	push	r7
    1a46:	8f 92       	push	r8
    1a48:	9f 92       	push	r9
    1a4a:	af 92       	push	r10
    1a4c:	bf 92       	push	r11
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	29 97       	sbiw	r28, 0x09	; 9
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	9f 83       	std	Y+7, r25	; 0x07
    1a70:	8e 83       	std	Y+6, r24	; 0x06
    1a72:	2b 01       	movw	r4, r22
    1a74:	1a 01       	movw	r2, r20
    1a76:	39 01       	movw	r6, r18
	// melody will play until the stop button is pressed.
	//int still_playing = 1;
	//while(still_playing){
	for (int x=0; x<size; x++){
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	99 87       	std	Y+9, r25	; 0x09
    1a7e:	88 87       	std	Y+8, r24	; 0x08
    1a80:	e8 85       	ldd	r30, Y+8	; 0x08
    1a82:	f9 85       	ldd	r31, Y+9	; 0x09
    1a84:	e6 15       	cp	r30, r6
    1a86:	f7 05       	cpc	r31, r7
    1a88:	0c f0       	brlt	.+2      	; 0x1a8c <_ZN15music_notations13playthemelodyEPiS0_i+0x52>
    1a8a:	d5 c0       	rjmp	.+426    	; 0x1c36 <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
		playthenote(Melody[x],MelodyDuration[x]);
    1a8c:	7f 01       	movw	r14, r30
    1a8e:	ee 0c       	add	r14, r14
    1a90:	ff 1c       	adc	r15, r15
    1a92:	61 01       	movw	r12, r2
    1a94:	ce 0c       	add	r12, r14
    1a96:	df 1c       	adc	r13, r15
    1a98:	f6 01       	movw	r30, r12
    1a9a:	60 81       	ld	r22, Z
    1a9c:	71 81       	ldd	r23, Z+1	; 0x01
    1a9e:	07 2e       	mov	r0, r23
    1aa0:	00 0c       	add	r0, r0
    1aa2:	88 0b       	sbc	r24, r24
    1aa4:	99 0b       	sbc	r25, r25
    1aa6:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__floatsisf>
    1aaa:	4b 01       	movw	r8, r22
    1aac:	5c 01       	movw	r10, r24
    1aae:	f2 01       	movw	r30, r4
    1ab0:	ee 0d       	add	r30, r14
    1ab2:	ff 1d       	adc	r31, r15
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	07 2e       	mov	r0, r23
    1aba:	00 0c       	add	r0, r0
    1abc:	88 0b       	sbc	r24, r24
    1abe:	99 0b       	sbc	r25, r25
    1ac0:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__floatsisf>
    1ac4:	ab 01       	movw	r20, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	95 01       	movw	r18, r10
    1aca:	84 01       	movw	r16, r8
    1acc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ace:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad0:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN15music_notations11playthenoteEff>
		_delay_us(MelodyDuration[x]);
    1ad4:	f6 01       	movw	r30, r12
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	07 2e       	mov	r0, r23
    1adc:	00 0c       	add	r0, r0
    1ade:	88 0b       	sbc	r24, r24
    1ae0:	99 0b       	sbc	r25, r25
    1ae2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__floatsisf>
    1ae6:	6b 01       	movw	r12, r22
    1ae8:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1aea:	2b ea       	ldi	r18, 0xAB	; 171
    1aec:	3a ea       	ldi	r19, 0xAA	; 170
    1aee:	4a e2       	ldi	r20, 0x2A	; 42
    1af0:	50 e4       	ldi	r21, 0x40	; 64
    1af2:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulsf3>
    1af6:	4b 01       	movw	r8, r22
    1af8:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1afa:	a7 01       	movw	r20, r14
    1afc:	96 01       	movw	r18, r12
    1afe:	c7 01       	movw	r24, r14
    1b00:	b6 01       	movw	r22, r12
    1b02:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__addsf3>
    1b06:	69 83       	std	Y+1, r22	; 0x01
    1b08:	7a 83       	std	Y+2, r23	; 0x02
    1b0a:	8b 83       	std	Y+3, r24	; 0x03
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	c5 01       	movw	r24, r10
    1b18:	b4 01       	movw	r22, r8
    1b1a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__cmpsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	0c f4       	brge	.+2      	; 0x1b24 <_ZN15music_notations13playthemelodyEPiS0_i+0xea>
    1b22:	6a c0       	rjmp	.+212    	; 0x1bf8 <_ZN15music_notations13playthemelodyEPiS0_i+0x1be>
		__ticks = 1;
	else if (__tmp2 > 65535)
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	69 81       	ldd	r22, Y+1	; 0x01
    1b2e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	0e 94 43 10 	call	0x2086	; 0x2086 <__gesf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	0c f0       	brlt	.+2      	; 0x1b3e <_ZN15music_notations13playthemelodyEPiS0_i+0x104>
    1b3c:	43 c0       	rjmp	.+134    	; 0x1bc4 <_ZN15music_notations13playthemelodyEPiS0_i+0x18a>
	{
		_delay_ms(__us / 1000.0);
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a e7       	ldi	r20, 0x7A	; 122
    1b44:	54 e4       	ldi	r21, 0x44	; 68
    1b46:	c7 01       	movw	r24, r14
    1b48:	b6 01       	movw	r22, r12
    1b4a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__divsf3>
    1b4e:	4b 01       	movw	r8, r22
    1b50:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	4a ef       	ldi	r20, 0xFA	; 250
    1b58:	54 e4       	ldi	r21, 0x44	; 68
    1b5a:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulsf3>
    1b5e:	6b 01       	movw	r12, r22
    1b60:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5f e3       	ldi	r21, 0x3F	; 63
    1b6a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__cmpsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	1c f1       	brlt	.+70     	; 0x1bb8 <_ZN15music_notations13playthemelodyEPiS0_i+0x17e>
		__ticks = 1;
	else if (__tmp > 65535)
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	3f ef       	ldi	r19, 0xFF	; 255
    1b76:	4f e7       	ldi	r20, 0x7F	; 127
    1b78:	57 e4       	ldi	r21, 0x47	; 71
    1b7a:	c7 01       	movw	r24, r14
    1b7c:	b6 01       	movw	r22, r12
    1b7e:	0e 94 43 10 	call	0x2086	; 0x2086 <__gesf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	a4 f4       	brge	.+40     	; 0x1bae <_ZN15music_notations13playthemelodyEPiS0_i+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	c5 01       	movw	r24, r10
    1b90:	b4 01       	movw	r22, r8
    1b92:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulsf3>
    1b96:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
		while(__ticks)
    1b9a:	61 15       	cp	r22, r1
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	79 f1       	breq	.+94     	; 0x1bfe <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
    1ba0:	88 ec       	ldi	r24, 0xC8	; 200
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <_ZN15music_notations13playthemelodyEPiS0_i+0x16a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba8:	61 50       	subi	r22, 0x01	; 1
    1baa:	71 09       	sbc	r23, r1
    1bac:	f6 cf       	rjmp	.-20     	; 0x1b9a <_ZN15music_notations13playthemelodyEPiS0_i+0x160>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bae:	c7 01       	movw	r24, r14
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <_ZN15music_notations13playthemelodyEPiS0_i+0x182>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <_ZN15music_notations13playthemelodyEPiS0_i+0x184>
    1bc2:	1d c0       	rjmp	.+58     	; 0x1bfe <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4f e7       	ldi	r20, 0x7F	; 127
    1bca:	53 e4       	ldi	r21, 0x43	; 67
    1bcc:	c5 01       	movw	r24, r10
    1bce:	b4 01       	movw	r22, r8
    1bd0:	0e 94 43 10 	call	0x2086	; 0x2086 <__gesf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	54 f4       	brge	.+20     	; 0x1bec <_ZN15music_notations13playthemelodyEPiS0_i+0x1b2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1bd8:	69 81       	ldd	r22, Y+1	; 0x01
    1bda:	7a 81       	ldd	r23, Y+2	; 0x02
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
    1be4:	cb 01       	movw	r24, r22
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ac>
    1bea:	0c c0       	rjmp	.+24     	; 0x1c04 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ca>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bec:	c5 01       	movw	r24, r10
    1bee:	b4 01       	movw	r22, r8
    1bf0:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
    1bf4:	6d 83       	std	Y+5, r22	; 0x05
    1bf6:	03 c0       	rjmp	.+6      	; 0x1bfe <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	9d 83       	std	Y+5, r25	; 0x05
    1bfc:	00 c0       	rjmp	.+0      	; 0x1bfe <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	8a 95       	dec	r24
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c6>
		if ((!(PINC &(1<<Ok))) || (!(PINC &(1<<Up))) || (!(PINC &(1<<Down))) || (!(PINC &(1<<Back)))){
    1c04:	32 9b       	sbis	0x06, 2	; 6
    1c06:	08 c0       	rjmp	.+16     	; 0x1c18 <_ZN15music_notations13playthemelodyEPiS0_i+0x1de>
    1c08:	30 9b       	sbis	0x06, 0	; 6
    1c0a:	08 c0       	rjmp	.+16     	; 0x1c1c <_ZN15music_notations13playthemelodyEPiS0_i+0x1e2>
    1c0c:	31 9b       	sbis	0x06, 1	; 6
    1c0e:	08 c0       	rjmp	.+16     	; 0x1c20 <_ZN15music_notations13playthemelodyEPiS0_i+0x1e6>
    1c10:	33 99       	sbic	0x06, 3	; 6
    1c12:	08 c0       	rjmp	.+16     	; 0x1c24 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ea>
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	07 c0       	rjmp	.+14     	; 0x1c26 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	03 c0       	rjmp	.+6      	; 0x1c26 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	01 c0       	rjmp	.+2      	; 0x1c26 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	81 11       	cpse	r24, r1
    1c28:	06 c0       	rjmp	.+12     	; 0x1c36 <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
void music_notations::playthemelody(int Melody[], int MelodyDuration[], int size)
{
	// melody will play until the stop button is pressed.
	//int still_playing = 1;
	//while(still_playing){
	for (int x=0; x<size; x++){
    1c2a:	88 85       	ldd	r24, Y+8	; 0x08
    1c2c:	99 85       	ldd	r25, Y+9	; 0x09
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	99 87       	std	Y+9, r25	; 0x09
    1c32:	88 87       	std	Y+8, r24	; 0x08
    1c34:	25 cf       	rjmp	.-438    	; 0x1a80 <_ZN15music_notations13playthemelodyEPiS0_i+0x46>
		}
		
	}
	
	
}
    1c36:	29 96       	adiw	r28, 0x09	; 9
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	ff 90       	pop	r15
    1c4c:	ef 90       	pop	r14
    1c4e:	df 90       	pop	r13
    1c50:	cf 90       	pop	r12
    1c52:	bf 90       	pop	r11
    1c54:	af 90       	pop	r10
    1c56:	9f 90       	pop	r9
    1c58:	8f 90       	pop	r8
    1c5a:	7f 90       	pop	r7
    1c5c:	6f 90       	pop	r6
    1c5e:	5f 90       	pop	r5
    1c60:	4f 90       	pop	r4
    1c62:	3f 90       	pop	r3
    1c64:	2f 90       	pop	r2
    1c66:	08 95       	ret

00001c68 <_ZN15music_notations4toneEi>:
void music_notations::tone(int x){
	if (x==0){
    1c68:	61 15       	cp	r22, r1
    1c6a:	71 05       	cpc	r23, r1
    1c6c:	59 f4       	brne	.+22     	; 0x1c84 <_ZN15music_notations4toneEi+0x1c>
		playthemelody(GOT,GOTDurations,sizeofgot);
    1c6e:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <sizeofgot>
    1c72:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <sizeofgot+0x1>
    1c76:	42 eb       	ldi	r20, 0xB2	; 178
    1c78:	56 e0       	ldi	r21, 0x06	; 6
    1c7a:	66 ed       	ldi	r22, 0xD6	; 214
    1c7c:	76 e0       	ldi	r23, 0x06	; 6
    1c7e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN15music_notations13playthemelodyEPiS0_i>
    1c82:	08 95       	ret
	}
	else if (x==1){
    1c84:	61 30       	cpi	r22, 0x01	; 1
    1c86:	71 05       	cpc	r23, r1
    1c88:	59 f4       	brne	.+22     	; 0x1ca0 <_ZN15music_notations4toneEi+0x38>
		playthemelody(Pirates,PiratesDurations,sizeofpirates);
    1c8a:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <sizeofpirates>
    1c8e:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <sizeofpirates+0x1>
    1c92:	42 e8       	ldi	r20, 0x82	; 130
    1c94:	55 e0       	ldi	r21, 0x05	; 5
    1c96:	6a e1       	ldi	r22, 0x1A	; 26
    1c98:	76 e0       	ldi	r23, 0x06	; 6
    1c9a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN15music_notations13playthemelodyEPiS0_i>
    1c9e:	08 95       	ret
	}
	else if (x==2){
    1ca0:	62 30       	cpi	r22, 0x02	; 2
    1ca2:	71 05       	cpc	r23, r1
    1ca4:	59 f4       	brne	.+22     	; 0x1cbc <_ZN15music_notations4toneEi+0x54>
		playthemelody(StarWars,StarWarsDurations,sizeofstarwars);
    1ca6:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <sizeofstarwars>
    1caa:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <sizeofstarwars+0x1>
    1cae:	4a ee       	ldi	r20, 0xEA	; 234
    1cb0:	54 e0       	ldi	r21, 0x04	; 4
    1cb2:	66 e3       	ldi	r22, 0x36	; 54
    1cb4:	75 e0       	ldi	r23, 0x05	; 5
    1cb6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN15music_notations13playthemelodyEPiS0_i>
    1cba:	08 95       	ret
	}
	else if (x==3){
    1cbc:	63 30       	cpi	r22, 0x03	; 3
    1cbe:	71 05       	cpc	r23, r1
    1cc0:	59 f4       	brne	.+22     	; 0x1cd8 <_ZN15music_notations4toneEi+0x70>
		playthemelody(CoffinDance,CoffinDanceDurations,sizeofcoffindance);
    1cc2:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <sizeofcoffindance>
    1cc6:	30 91 f3 02 	lds	r19, 0x02F3	; 0x8002f3 <sizeofcoffindance+0x1>
    1cca:	4a e5       	ldi	r20, 0x5A	; 90
    1ccc:	53 e0       	ldi	r21, 0x03	; 3
    1cce:	62 e2       	ldi	r22, 0x22	; 34
    1cd0:	74 e0       	ldi	r23, 0x04	; 4
    1cd2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN15music_notations13playthemelodyEPiS0_i>
    1cd6:	08 95       	ret
	}
	else{
		playthemelody(TakeOnMe,TakeOnMeDurations,sizeoftakeonme);
    1cd8:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <sizeoftakeonme>
    1cdc:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <sizeoftakeonme+0x1>
    1ce0:	4a ef       	ldi	r20, 0xFA	; 250
    1ce2:	52 e0       	ldi	r21, 0x02	; 2
    1ce4:	6a e2       	ldi	r22, 0x2A	; 42
    1ce6:	73 e0       	ldi	r23, 0x03	; 3
    1ce8:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN15music_notations13playthemelodyEPiS0_i>
    1cec:	08 95       	ret

00001cee <__subsf3>:
    1cee:	50 58       	subi	r21, 0x80	; 128

00001cf0 <__addsf3>:
    1cf0:	bb 27       	eor	r27, r27
    1cf2:	aa 27       	eor	r26, r26
    1cf4:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__addsf3x>
    1cf8:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__fp_round>
    1cfc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fp_pscA>
    1d00:	38 f0       	brcs	.+14     	; 0x1d10 <__addsf3+0x20>
    1d02:	0e 94 02 10 	call	0x2004	; 0x2004 <__fp_pscB>
    1d06:	20 f0       	brcs	.+8      	; 0x1d10 <__addsf3+0x20>
    1d08:	39 f4       	brne	.+14     	; 0x1d18 <__addsf3+0x28>
    1d0a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d0c:	19 f4       	brne	.+6      	; 0x1d14 <__addsf3+0x24>
    1d0e:	26 f4       	brtc	.+8      	; 0x1d18 <__addsf3+0x28>
    1d10:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__fp_nan>
    1d14:	0e f4       	brtc	.+2      	; 0x1d18 <__addsf3+0x28>
    1d16:	e0 95       	com	r30
    1d18:	e7 fb       	bst	r30, 7
    1d1a:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_inf>

00001d1e <__addsf3x>:
    1d1e:	e9 2f       	mov	r30, r25
    1d20:	0e 94 1a 10 	call	0x2034	; 0x2034 <__fp_split3>
    1d24:	58 f3       	brcs	.-42     	; 0x1cfc <__addsf3+0xc>
    1d26:	ba 17       	cp	r27, r26
    1d28:	62 07       	cpc	r22, r18
    1d2a:	73 07       	cpc	r23, r19
    1d2c:	84 07       	cpc	r24, r20
    1d2e:	95 07       	cpc	r25, r21
    1d30:	20 f0       	brcs	.+8      	; 0x1d3a <__addsf3x+0x1c>
    1d32:	79 f4       	brne	.+30     	; 0x1d52 <__addsf3x+0x34>
    1d34:	a6 f5       	brtc	.+104    	; 0x1d9e <__addsf3x+0x80>
    1d36:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__fp_zero>
    1d3a:	0e f4       	brtc	.+2      	; 0x1d3e <__addsf3x+0x20>
    1d3c:	e0 95       	com	r30
    1d3e:	0b 2e       	mov	r0, r27
    1d40:	ba 2f       	mov	r27, r26
    1d42:	a0 2d       	mov	r26, r0
    1d44:	0b 01       	movw	r0, r22
    1d46:	b9 01       	movw	r22, r18
    1d48:	90 01       	movw	r18, r0
    1d4a:	0c 01       	movw	r0, r24
    1d4c:	ca 01       	movw	r24, r20
    1d4e:	a0 01       	movw	r20, r0
    1d50:	11 24       	eor	r1, r1
    1d52:	ff 27       	eor	r31, r31
    1d54:	59 1b       	sub	r21, r25
    1d56:	99 f0       	breq	.+38     	; 0x1d7e <__addsf3x+0x60>
    1d58:	59 3f       	cpi	r21, 0xF9	; 249
    1d5a:	50 f4       	brcc	.+20     	; 0x1d70 <__addsf3x+0x52>
    1d5c:	50 3e       	cpi	r21, 0xE0	; 224
    1d5e:	68 f1       	brcs	.+90     	; 0x1dba <__addsf3x+0x9c>
    1d60:	1a 16       	cp	r1, r26
    1d62:	f0 40       	sbci	r31, 0x00	; 0
    1d64:	a2 2f       	mov	r26, r18
    1d66:	23 2f       	mov	r18, r19
    1d68:	34 2f       	mov	r19, r20
    1d6a:	44 27       	eor	r20, r20
    1d6c:	58 5f       	subi	r21, 0xF8	; 248
    1d6e:	f3 cf       	rjmp	.-26     	; 0x1d56 <__addsf3x+0x38>
    1d70:	46 95       	lsr	r20
    1d72:	37 95       	ror	r19
    1d74:	27 95       	ror	r18
    1d76:	a7 95       	ror	r26
    1d78:	f0 40       	sbci	r31, 0x00	; 0
    1d7a:	53 95       	inc	r21
    1d7c:	c9 f7       	brne	.-14     	; 0x1d70 <__addsf3x+0x52>
    1d7e:	7e f4       	brtc	.+30     	; 0x1d9e <__addsf3x+0x80>
    1d80:	1f 16       	cp	r1, r31
    1d82:	ba 0b       	sbc	r27, r26
    1d84:	62 0b       	sbc	r22, r18
    1d86:	73 0b       	sbc	r23, r19
    1d88:	84 0b       	sbc	r24, r20
    1d8a:	ba f0       	brmi	.+46     	; 0x1dba <__addsf3x+0x9c>
    1d8c:	91 50       	subi	r25, 0x01	; 1
    1d8e:	a1 f0       	breq	.+40     	; 0x1db8 <__addsf3x+0x9a>
    1d90:	ff 0f       	add	r31, r31
    1d92:	bb 1f       	adc	r27, r27
    1d94:	66 1f       	adc	r22, r22
    1d96:	77 1f       	adc	r23, r23
    1d98:	88 1f       	adc	r24, r24
    1d9a:	c2 f7       	brpl	.-16     	; 0x1d8c <__addsf3x+0x6e>
    1d9c:	0e c0       	rjmp	.+28     	; 0x1dba <__addsf3x+0x9c>
    1d9e:	ba 0f       	add	r27, r26
    1da0:	62 1f       	adc	r22, r18
    1da2:	73 1f       	adc	r23, r19
    1da4:	84 1f       	adc	r24, r20
    1da6:	48 f4       	brcc	.+18     	; 0x1dba <__addsf3x+0x9c>
    1da8:	87 95       	ror	r24
    1daa:	77 95       	ror	r23
    1dac:	67 95       	ror	r22
    1dae:	b7 95       	ror	r27
    1db0:	f7 95       	ror	r31
    1db2:	9e 3f       	cpi	r25, 0xFE	; 254
    1db4:	08 f0       	brcs	.+2      	; 0x1db8 <__addsf3x+0x9a>
    1db6:	b0 cf       	rjmp	.-160    	; 0x1d18 <__addsf3+0x28>
    1db8:	93 95       	inc	r25
    1dba:	88 0f       	add	r24, r24
    1dbc:	08 f0       	brcs	.+2      	; 0x1dc0 <__addsf3x+0xa2>
    1dbe:	99 27       	eor	r25, r25
    1dc0:	ee 0f       	add	r30, r30
    1dc2:	97 95       	ror	r25
    1dc4:	87 95       	ror	r24
    1dc6:	08 95       	ret

00001dc8 <__cmpsf2>:
    1dc8:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__fp_cmp>
    1dcc:	08 f4       	brcc	.+2      	; 0x1dd0 <__cmpsf2+0x8>
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	08 95       	ret

00001dd2 <__divsf3>:
    1dd2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__divsf3x>
    1dd6:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__fp_round>
    1dda:	0e 94 02 10 	call	0x2004	; 0x2004 <__fp_pscB>
    1dde:	58 f0       	brcs	.+22     	; 0x1df6 <__divsf3+0x24>
    1de0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fp_pscA>
    1de4:	40 f0       	brcs	.+16     	; 0x1df6 <__divsf3+0x24>
    1de6:	29 f4       	brne	.+10     	; 0x1df2 <__divsf3+0x20>
    1de8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dea:	29 f0       	breq	.+10     	; 0x1df6 <__divsf3+0x24>
    1dec:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_inf>
    1df0:	51 11       	cpse	r21, r1
    1df2:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__fp_szero>
    1df6:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__fp_nan>

00001dfa <__divsf3x>:
    1dfa:	0e 94 1a 10 	call	0x2034	; 0x2034 <__fp_split3>
    1dfe:	68 f3       	brcs	.-38     	; 0x1dda <__divsf3+0x8>

00001e00 <__divsf3_pse>:
    1e00:	99 23       	and	r25, r25
    1e02:	b1 f3       	breq	.-20     	; 0x1df0 <__divsf3+0x1e>
    1e04:	55 23       	and	r21, r21
    1e06:	91 f3       	breq	.-28     	; 0x1dec <__divsf3+0x1a>
    1e08:	95 1b       	sub	r25, r21
    1e0a:	55 0b       	sbc	r21, r21
    1e0c:	bb 27       	eor	r27, r27
    1e0e:	aa 27       	eor	r26, r26
    1e10:	62 17       	cp	r22, r18
    1e12:	73 07       	cpc	r23, r19
    1e14:	84 07       	cpc	r24, r20
    1e16:	38 f0       	brcs	.+14     	; 0x1e26 <__divsf3_pse+0x26>
    1e18:	9f 5f       	subi	r25, 0xFF	; 255
    1e1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1c:	22 0f       	add	r18, r18
    1e1e:	33 1f       	adc	r19, r19
    1e20:	44 1f       	adc	r20, r20
    1e22:	aa 1f       	adc	r26, r26
    1e24:	a9 f3       	breq	.-22     	; 0x1e10 <__divsf3_pse+0x10>
    1e26:	35 d0       	rcall	.+106    	; 0x1e92 <__divsf3_pse+0x92>
    1e28:	0e 2e       	mov	r0, r30
    1e2a:	3a f0       	brmi	.+14     	; 0x1e3a <__divsf3_pse+0x3a>
    1e2c:	e0 e8       	ldi	r30, 0x80	; 128
    1e2e:	32 d0       	rcall	.+100    	; 0x1e94 <__divsf3_pse+0x94>
    1e30:	91 50       	subi	r25, 0x01	; 1
    1e32:	50 40       	sbci	r21, 0x00	; 0
    1e34:	e6 95       	lsr	r30
    1e36:	00 1c       	adc	r0, r0
    1e38:	ca f7       	brpl	.-14     	; 0x1e2c <__divsf3_pse+0x2c>
    1e3a:	2b d0       	rcall	.+86     	; 0x1e92 <__divsf3_pse+0x92>
    1e3c:	fe 2f       	mov	r31, r30
    1e3e:	29 d0       	rcall	.+82     	; 0x1e92 <__divsf3_pse+0x92>
    1e40:	66 0f       	add	r22, r22
    1e42:	77 1f       	adc	r23, r23
    1e44:	88 1f       	adc	r24, r24
    1e46:	bb 1f       	adc	r27, r27
    1e48:	26 17       	cp	r18, r22
    1e4a:	37 07       	cpc	r19, r23
    1e4c:	48 07       	cpc	r20, r24
    1e4e:	ab 07       	cpc	r26, r27
    1e50:	b0 e8       	ldi	r27, 0x80	; 128
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <__divsf3_pse+0x56>
    1e54:	bb 0b       	sbc	r27, r27
    1e56:	80 2d       	mov	r24, r0
    1e58:	bf 01       	movw	r22, r30
    1e5a:	ff 27       	eor	r31, r31
    1e5c:	93 58       	subi	r25, 0x83	; 131
    1e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e60:	3a f0       	brmi	.+14     	; 0x1e70 <__divsf3_pse+0x70>
    1e62:	9e 3f       	cpi	r25, 0xFE	; 254
    1e64:	51 05       	cpc	r21, r1
    1e66:	78 f0       	brcs	.+30     	; 0x1e86 <__divsf3_pse+0x86>
    1e68:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_inf>
    1e6c:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__fp_szero>
    1e70:	5f 3f       	cpi	r21, 0xFF	; 255
    1e72:	e4 f3       	brlt	.-8      	; 0x1e6c <__divsf3_pse+0x6c>
    1e74:	98 3e       	cpi	r25, 0xE8	; 232
    1e76:	d4 f3       	brlt	.-12     	; 0x1e6c <__divsf3_pse+0x6c>
    1e78:	86 95       	lsr	r24
    1e7a:	77 95       	ror	r23
    1e7c:	67 95       	ror	r22
    1e7e:	b7 95       	ror	r27
    1e80:	f7 95       	ror	r31
    1e82:	9f 5f       	subi	r25, 0xFF	; 255
    1e84:	c9 f7       	brne	.-14     	; 0x1e78 <__divsf3_pse+0x78>
    1e86:	88 0f       	add	r24, r24
    1e88:	91 1d       	adc	r25, r1
    1e8a:	96 95       	lsr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	97 f9       	bld	r25, 7
    1e90:	08 95       	ret
    1e92:	e1 e0       	ldi	r30, 0x01	; 1
    1e94:	66 0f       	add	r22, r22
    1e96:	77 1f       	adc	r23, r23
    1e98:	88 1f       	adc	r24, r24
    1e9a:	bb 1f       	adc	r27, r27
    1e9c:	62 17       	cp	r22, r18
    1e9e:	73 07       	cpc	r23, r19
    1ea0:	84 07       	cpc	r24, r20
    1ea2:	ba 07       	cpc	r27, r26
    1ea4:	20 f0       	brcs	.+8      	; 0x1eae <__divsf3_pse+0xae>
    1ea6:	62 1b       	sub	r22, r18
    1ea8:	73 0b       	sbc	r23, r19
    1eaa:	84 0b       	sbc	r24, r20
    1eac:	ba 0b       	sbc	r27, r26
    1eae:	ee 1f       	adc	r30, r30
    1eb0:	88 f7       	brcc	.-30     	; 0x1e94 <__divsf3_pse+0x94>
    1eb2:	e0 95       	com	r30
    1eb4:	08 95       	ret

00001eb6 <__fixsfsi>:
    1eb6:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__fixunssfsi>
    1eba:	68 94       	set
    1ebc:	b1 11       	cpse	r27, r1
    1ebe:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__fp_szero>
    1ec2:	08 95       	ret

00001ec4 <__fixunssfsi>:
    1ec4:	0e 94 22 10 	call	0x2044	; 0x2044 <__fp_splitA>
    1ec8:	88 f0       	brcs	.+34     	; 0x1eec <__fixunssfsi+0x28>
    1eca:	9f 57       	subi	r25, 0x7F	; 127
    1ecc:	98 f0       	brcs	.+38     	; 0x1ef4 <__fixunssfsi+0x30>
    1ece:	b9 2f       	mov	r27, r25
    1ed0:	99 27       	eor	r25, r25
    1ed2:	b7 51       	subi	r27, 0x17	; 23
    1ed4:	b0 f0       	brcs	.+44     	; 0x1f02 <__fixunssfsi+0x3e>
    1ed6:	e1 f0       	breq	.+56     	; 0x1f10 <__fixunssfsi+0x4c>
    1ed8:	66 0f       	add	r22, r22
    1eda:	77 1f       	adc	r23, r23
    1edc:	88 1f       	adc	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	1a f0       	brmi	.+6      	; 0x1ee8 <__fixunssfsi+0x24>
    1ee2:	ba 95       	dec	r27
    1ee4:	c9 f7       	brne	.-14     	; 0x1ed8 <__fixunssfsi+0x14>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <__fixunssfsi+0x4c>
    1ee8:	b1 30       	cpi	r27, 0x01	; 1
    1eea:	91 f0       	breq	.+36     	; 0x1f10 <__fixunssfsi+0x4c>
    1eec:	0e 94 3c 10 	call	0x2078	; 0x2078 <__fp_zero>
    1ef0:	b1 e0       	ldi	r27, 0x01	; 1
    1ef2:	08 95       	ret
    1ef4:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__fp_zero>
    1ef8:	67 2f       	mov	r22, r23
    1efa:	78 2f       	mov	r23, r24
    1efc:	88 27       	eor	r24, r24
    1efe:	b8 5f       	subi	r27, 0xF8	; 248
    1f00:	39 f0       	breq	.+14     	; 0x1f10 <__fixunssfsi+0x4c>
    1f02:	b9 3f       	cpi	r27, 0xF9	; 249
    1f04:	cc f3       	brlt	.-14     	; 0x1ef8 <__fixunssfsi+0x34>
    1f06:	86 95       	lsr	r24
    1f08:	77 95       	ror	r23
    1f0a:	67 95       	ror	r22
    1f0c:	b3 95       	inc	r27
    1f0e:	d9 f7       	brne	.-10     	; 0x1f06 <__fixunssfsi+0x42>
    1f10:	3e f4       	brtc	.+14     	; 0x1f20 <__fixunssfsi+0x5c>
    1f12:	90 95       	com	r25
    1f14:	80 95       	com	r24
    1f16:	70 95       	com	r23
    1f18:	61 95       	neg	r22
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f20:	08 95       	ret

00001f22 <__floatunsisf>:
    1f22:	e8 94       	clt
    1f24:	09 c0       	rjmp	.+18     	; 0x1f38 <__floatsisf+0x12>

00001f26 <__floatsisf>:
    1f26:	97 fb       	bst	r25, 7
    1f28:	3e f4       	brtc	.+14     	; 0x1f38 <__floatsisf+0x12>
    1f2a:	90 95       	com	r25
    1f2c:	80 95       	com	r24
    1f2e:	70 95       	com	r23
    1f30:	61 95       	neg	r22
    1f32:	7f 4f       	sbci	r23, 0xFF	; 255
    1f34:	8f 4f       	sbci	r24, 0xFF	; 255
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	99 23       	and	r25, r25
    1f3a:	a9 f0       	breq	.+42     	; 0x1f66 <__floatsisf+0x40>
    1f3c:	f9 2f       	mov	r31, r25
    1f3e:	96 e9       	ldi	r25, 0x96	; 150
    1f40:	bb 27       	eor	r27, r27
    1f42:	93 95       	inc	r25
    1f44:	f6 95       	lsr	r31
    1f46:	87 95       	ror	r24
    1f48:	77 95       	ror	r23
    1f4a:	67 95       	ror	r22
    1f4c:	b7 95       	ror	r27
    1f4e:	f1 11       	cpse	r31, r1
    1f50:	f8 cf       	rjmp	.-16     	; 0x1f42 <__floatsisf+0x1c>
    1f52:	fa f4       	brpl	.+62     	; 0x1f92 <__floatsisf+0x6c>
    1f54:	bb 0f       	add	r27, r27
    1f56:	11 f4       	brne	.+4      	; 0x1f5c <__floatsisf+0x36>
    1f58:	60 ff       	sbrs	r22, 0
    1f5a:	1b c0       	rjmp	.+54     	; 0x1f92 <__floatsisf+0x6c>
    1f5c:	6f 5f       	subi	r22, 0xFF	; 255
    1f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f60:	8f 4f       	sbci	r24, 0xFF	; 255
    1f62:	9f 4f       	sbci	r25, 0xFF	; 255
    1f64:	16 c0       	rjmp	.+44     	; 0x1f92 <__floatsisf+0x6c>
    1f66:	88 23       	and	r24, r24
    1f68:	11 f0       	breq	.+4      	; 0x1f6e <__floatsisf+0x48>
    1f6a:	96 e9       	ldi	r25, 0x96	; 150
    1f6c:	11 c0       	rjmp	.+34     	; 0x1f90 <__floatsisf+0x6a>
    1f6e:	77 23       	and	r23, r23
    1f70:	21 f0       	breq	.+8      	; 0x1f7a <__floatsisf+0x54>
    1f72:	9e e8       	ldi	r25, 0x8E	; 142
    1f74:	87 2f       	mov	r24, r23
    1f76:	76 2f       	mov	r23, r22
    1f78:	05 c0       	rjmp	.+10     	; 0x1f84 <__floatsisf+0x5e>
    1f7a:	66 23       	and	r22, r22
    1f7c:	71 f0       	breq	.+28     	; 0x1f9a <__floatsisf+0x74>
    1f7e:	96 e8       	ldi	r25, 0x86	; 134
    1f80:	86 2f       	mov	r24, r22
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	2a f0       	brmi	.+10     	; 0x1f92 <__floatsisf+0x6c>
    1f88:	9a 95       	dec	r25
    1f8a:	66 0f       	add	r22, r22
    1f8c:	77 1f       	adc	r23, r23
    1f8e:	88 1f       	adc	r24, r24
    1f90:	da f7       	brpl	.-10     	; 0x1f88 <__floatsisf+0x62>
    1f92:	88 0f       	add	r24, r24
    1f94:	96 95       	lsr	r25
    1f96:	87 95       	ror	r24
    1f98:	97 f9       	bld	r25, 7
    1f9a:	08 95       	ret

00001f9c <__fp_cmp>:
    1f9c:	99 0f       	add	r25, r25
    1f9e:	00 08       	sbc	r0, r0
    1fa0:	55 0f       	add	r21, r21
    1fa2:	aa 0b       	sbc	r26, r26
    1fa4:	e0 e8       	ldi	r30, 0x80	; 128
    1fa6:	fe ef       	ldi	r31, 0xFE	; 254
    1fa8:	16 16       	cp	r1, r22
    1faa:	17 06       	cpc	r1, r23
    1fac:	e8 07       	cpc	r30, r24
    1fae:	f9 07       	cpc	r31, r25
    1fb0:	c0 f0       	brcs	.+48     	; 0x1fe2 <__fp_cmp+0x46>
    1fb2:	12 16       	cp	r1, r18
    1fb4:	13 06       	cpc	r1, r19
    1fb6:	e4 07       	cpc	r30, r20
    1fb8:	f5 07       	cpc	r31, r21
    1fba:	98 f0       	brcs	.+38     	; 0x1fe2 <__fp_cmp+0x46>
    1fbc:	62 1b       	sub	r22, r18
    1fbe:	73 0b       	sbc	r23, r19
    1fc0:	84 0b       	sbc	r24, r20
    1fc2:	95 0b       	sbc	r25, r21
    1fc4:	39 f4       	brne	.+14     	; 0x1fd4 <__fp_cmp+0x38>
    1fc6:	0a 26       	eor	r0, r26
    1fc8:	61 f0       	breq	.+24     	; 0x1fe2 <__fp_cmp+0x46>
    1fca:	23 2b       	or	r18, r19
    1fcc:	24 2b       	or	r18, r20
    1fce:	25 2b       	or	r18, r21
    1fd0:	21 f4       	brne	.+8      	; 0x1fda <__fp_cmp+0x3e>
    1fd2:	08 95       	ret
    1fd4:	0a 26       	eor	r0, r26
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <__fp_cmp+0x3e>
    1fd8:	a1 40       	sbci	r26, 0x01	; 1
    1fda:	a6 95       	lsr	r26
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	81 1d       	adc	r24, r1
    1fe0:	81 1d       	adc	r24, r1
    1fe2:	08 95       	ret

00001fe4 <__fp_inf>:
    1fe4:	97 f9       	bld	r25, 7
    1fe6:	9f 67       	ori	r25, 0x7F	; 127
    1fe8:	80 e8       	ldi	r24, 0x80	; 128
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	08 95       	ret

00001ff0 <__fp_nan>:
    1ff0:	9f ef       	ldi	r25, 0xFF	; 255
    1ff2:	80 ec       	ldi	r24, 0xC0	; 192
    1ff4:	08 95       	ret

00001ff6 <__fp_pscA>:
    1ff6:	00 24       	eor	r0, r0
    1ff8:	0a 94       	dec	r0
    1ffa:	16 16       	cp	r1, r22
    1ffc:	17 06       	cpc	r1, r23
    1ffe:	18 06       	cpc	r1, r24
    2000:	09 06       	cpc	r0, r25
    2002:	08 95       	ret

00002004 <__fp_pscB>:
    2004:	00 24       	eor	r0, r0
    2006:	0a 94       	dec	r0
    2008:	12 16       	cp	r1, r18
    200a:	13 06       	cpc	r1, r19
    200c:	14 06       	cpc	r1, r20
    200e:	05 06       	cpc	r0, r21
    2010:	08 95       	ret

00002012 <__fp_round>:
    2012:	09 2e       	mov	r0, r25
    2014:	03 94       	inc	r0
    2016:	00 0c       	add	r0, r0
    2018:	11 f4       	brne	.+4      	; 0x201e <__fp_round+0xc>
    201a:	88 23       	and	r24, r24
    201c:	52 f0       	brmi	.+20     	; 0x2032 <__fp_round+0x20>
    201e:	bb 0f       	add	r27, r27
    2020:	40 f4       	brcc	.+16     	; 0x2032 <__fp_round+0x20>
    2022:	bf 2b       	or	r27, r31
    2024:	11 f4       	brne	.+4      	; 0x202a <__fp_round+0x18>
    2026:	60 ff       	sbrs	r22, 0
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <__fp_round+0x20>
    202a:	6f 5f       	subi	r22, 0xFF	; 255
    202c:	7f 4f       	sbci	r23, 0xFF	; 255
    202e:	8f 4f       	sbci	r24, 0xFF	; 255
    2030:	9f 4f       	sbci	r25, 0xFF	; 255
    2032:	08 95       	ret

00002034 <__fp_split3>:
    2034:	57 fd       	sbrc	r21, 7
    2036:	90 58       	subi	r25, 0x80	; 128
    2038:	44 0f       	add	r20, r20
    203a:	55 1f       	adc	r21, r21
    203c:	59 f0       	breq	.+22     	; 0x2054 <__fp_splitA+0x10>
    203e:	5f 3f       	cpi	r21, 0xFF	; 255
    2040:	71 f0       	breq	.+28     	; 0x205e <__fp_splitA+0x1a>
    2042:	47 95       	ror	r20

00002044 <__fp_splitA>:
    2044:	88 0f       	add	r24, r24
    2046:	97 fb       	bst	r25, 7
    2048:	99 1f       	adc	r25, r25
    204a:	61 f0       	breq	.+24     	; 0x2064 <__fp_splitA+0x20>
    204c:	9f 3f       	cpi	r25, 0xFF	; 255
    204e:	79 f0       	breq	.+30     	; 0x206e <__fp_splitA+0x2a>
    2050:	87 95       	ror	r24
    2052:	08 95       	ret
    2054:	12 16       	cp	r1, r18
    2056:	13 06       	cpc	r1, r19
    2058:	14 06       	cpc	r1, r20
    205a:	55 1f       	adc	r21, r21
    205c:	f2 cf       	rjmp	.-28     	; 0x2042 <__fp_split3+0xe>
    205e:	46 95       	lsr	r20
    2060:	f1 df       	rcall	.-30     	; 0x2044 <__fp_splitA>
    2062:	08 c0       	rjmp	.+16     	; 0x2074 <__fp_splitA+0x30>
    2064:	16 16       	cp	r1, r22
    2066:	17 06       	cpc	r1, r23
    2068:	18 06       	cpc	r1, r24
    206a:	99 1f       	adc	r25, r25
    206c:	f1 cf       	rjmp	.-30     	; 0x2050 <__fp_splitA+0xc>
    206e:	86 95       	lsr	r24
    2070:	71 05       	cpc	r23, r1
    2072:	61 05       	cpc	r22, r1
    2074:	08 94       	sec
    2076:	08 95       	ret

00002078 <__fp_zero>:
    2078:	e8 94       	clt

0000207a <__fp_szero>:
    207a:	bb 27       	eor	r27, r27
    207c:	66 27       	eor	r22, r22
    207e:	77 27       	eor	r23, r23
    2080:	cb 01       	movw	r24, r22
    2082:	97 f9       	bld	r25, 7
    2084:	08 95       	ret

00002086 <__gesf2>:
    2086:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__fp_cmp>
    208a:	08 f4       	brcc	.+2      	; 0x208e <__gesf2+0x8>
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	08 95       	ret

00002090 <__mulsf3>:
    2090:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__mulsf3x>
    2094:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__fp_round>
    2098:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__fp_pscA>
    209c:	38 f0       	brcs	.+14     	; 0x20ac <__mulsf3+0x1c>
    209e:	0e 94 02 10 	call	0x2004	; 0x2004 <__fp_pscB>
    20a2:	20 f0       	brcs	.+8      	; 0x20ac <__mulsf3+0x1c>
    20a4:	95 23       	and	r25, r21
    20a6:	11 f0       	breq	.+4      	; 0x20ac <__mulsf3+0x1c>
    20a8:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_inf>
    20ac:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__fp_nan>
    20b0:	11 24       	eor	r1, r1
    20b2:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__fp_szero>

000020b6 <__mulsf3x>:
    20b6:	0e 94 1a 10 	call	0x2034	; 0x2034 <__fp_split3>
    20ba:	70 f3       	brcs	.-36     	; 0x2098 <__mulsf3+0x8>

000020bc <__mulsf3_pse>:
    20bc:	95 9f       	mul	r25, r21
    20be:	c1 f3       	breq	.-16     	; 0x20b0 <__mulsf3+0x20>
    20c0:	95 0f       	add	r25, r21
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	55 1f       	adc	r21, r21
    20c6:	62 9f       	mul	r22, r18
    20c8:	f0 01       	movw	r30, r0
    20ca:	72 9f       	mul	r23, r18
    20cc:	bb 27       	eor	r27, r27
    20ce:	f0 0d       	add	r31, r0
    20d0:	b1 1d       	adc	r27, r1
    20d2:	63 9f       	mul	r22, r19
    20d4:	aa 27       	eor	r26, r26
    20d6:	f0 0d       	add	r31, r0
    20d8:	b1 1d       	adc	r27, r1
    20da:	aa 1f       	adc	r26, r26
    20dc:	64 9f       	mul	r22, r20
    20de:	66 27       	eor	r22, r22
    20e0:	b0 0d       	add	r27, r0
    20e2:	a1 1d       	adc	r26, r1
    20e4:	66 1f       	adc	r22, r22
    20e6:	82 9f       	mul	r24, r18
    20e8:	22 27       	eor	r18, r18
    20ea:	b0 0d       	add	r27, r0
    20ec:	a1 1d       	adc	r26, r1
    20ee:	62 1f       	adc	r22, r18
    20f0:	73 9f       	mul	r23, r19
    20f2:	b0 0d       	add	r27, r0
    20f4:	a1 1d       	adc	r26, r1
    20f6:	62 1f       	adc	r22, r18
    20f8:	83 9f       	mul	r24, r19
    20fa:	a0 0d       	add	r26, r0
    20fc:	61 1d       	adc	r22, r1
    20fe:	22 1f       	adc	r18, r18
    2100:	74 9f       	mul	r23, r20
    2102:	33 27       	eor	r19, r19
    2104:	a0 0d       	add	r26, r0
    2106:	61 1d       	adc	r22, r1
    2108:	23 1f       	adc	r18, r19
    210a:	84 9f       	mul	r24, r20
    210c:	60 0d       	add	r22, r0
    210e:	21 1d       	adc	r18, r1
    2110:	82 2f       	mov	r24, r18
    2112:	76 2f       	mov	r23, r22
    2114:	6a 2f       	mov	r22, r26
    2116:	11 24       	eor	r1, r1
    2118:	9f 57       	subi	r25, 0x7F	; 127
    211a:	50 40       	sbci	r21, 0x00	; 0
    211c:	9a f0       	brmi	.+38     	; 0x2144 <__mulsf3_pse+0x88>
    211e:	f1 f0       	breq	.+60     	; 0x215c <__mulsf3_pse+0xa0>
    2120:	88 23       	and	r24, r24
    2122:	4a f0       	brmi	.+18     	; 0x2136 <__mulsf3_pse+0x7a>
    2124:	ee 0f       	add	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	bb 1f       	adc	r27, r27
    212a:	66 1f       	adc	r22, r22
    212c:	77 1f       	adc	r23, r23
    212e:	88 1f       	adc	r24, r24
    2130:	91 50       	subi	r25, 0x01	; 1
    2132:	50 40       	sbci	r21, 0x00	; 0
    2134:	a9 f7       	brne	.-22     	; 0x2120 <__mulsf3_pse+0x64>
    2136:	9e 3f       	cpi	r25, 0xFE	; 254
    2138:	51 05       	cpc	r21, r1
    213a:	80 f0       	brcs	.+32     	; 0x215c <__mulsf3_pse+0xa0>
    213c:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__fp_inf>
    2140:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__fp_szero>
    2144:	5f 3f       	cpi	r21, 0xFF	; 255
    2146:	e4 f3       	brlt	.-8      	; 0x2140 <__mulsf3_pse+0x84>
    2148:	98 3e       	cpi	r25, 0xE8	; 232
    214a:	d4 f3       	brlt	.-12     	; 0x2140 <__mulsf3_pse+0x84>
    214c:	86 95       	lsr	r24
    214e:	77 95       	ror	r23
    2150:	67 95       	ror	r22
    2152:	b7 95       	ror	r27
    2154:	f7 95       	ror	r31
    2156:	e7 95       	ror	r30
    2158:	9f 5f       	subi	r25, 0xFF	; 255
    215a:	c1 f7       	brne	.-16     	; 0x214c <__mulsf3_pse+0x90>
    215c:	fe 2b       	or	r31, r30
    215e:	88 0f       	add	r24, r24
    2160:	91 1d       	adc	r25, r1
    2162:	96 95       	lsr	r25
    2164:	87 95       	ror	r24
    2166:	97 f9       	bld	r25, 7
    2168:	08 95       	ret

0000216a <__divmodhi4>:
    216a:	97 fb       	bst	r25, 7
    216c:	07 2e       	mov	r0, r23
    216e:	16 f4       	brtc	.+4      	; 0x2174 <__divmodhi4+0xa>
    2170:	00 94       	com	r0
    2172:	07 d0       	rcall	.+14     	; 0x2182 <__divmodhi4_neg1>
    2174:	77 fd       	sbrc	r23, 7
    2176:	09 d0       	rcall	.+18     	; 0x218a <__divmodhi4_neg2>
    2178:	0e 94 c9 10 	call	0x2192	; 0x2192 <__udivmodhi4>
    217c:	07 fc       	sbrc	r0, 7
    217e:	05 d0       	rcall	.+10     	; 0x218a <__divmodhi4_neg2>
    2180:	3e f4       	brtc	.+14     	; 0x2190 <__divmodhi4_exit>

00002182 <__divmodhi4_neg1>:
    2182:	90 95       	com	r25
    2184:	81 95       	neg	r24
    2186:	9f 4f       	sbci	r25, 0xFF	; 255
    2188:	08 95       	ret

0000218a <__divmodhi4_neg2>:
    218a:	70 95       	com	r23
    218c:	61 95       	neg	r22
    218e:	7f 4f       	sbci	r23, 0xFF	; 255

00002190 <__divmodhi4_exit>:
    2190:	08 95       	ret

00002192 <__udivmodhi4>:
    2192:	aa 1b       	sub	r26, r26
    2194:	bb 1b       	sub	r27, r27
    2196:	51 e1       	ldi	r21, 0x11	; 17
    2198:	07 c0       	rjmp	.+14     	; 0x21a8 <__udivmodhi4_ep>

0000219a <__udivmodhi4_loop>:
    219a:	aa 1f       	adc	r26, r26
    219c:	bb 1f       	adc	r27, r27
    219e:	a6 17       	cp	r26, r22
    21a0:	b7 07       	cpc	r27, r23
    21a2:	10 f0       	brcs	.+4      	; 0x21a8 <__udivmodhi4_ep>
    21a4:	a6 1b       	sub	r26, r22
    21a6:	b7 0b       	sbc	r27, r23

000021a8 <__udivmodhi4_ep>:
    21a8:	88 1f       	adc	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	5a 95       	dec	r21
    21ae:	a9 f7       	brne	.-22     	; 0x219a <__udivmodhi4_loop>
    21b0:	80 95       	com	r24
    21b2:	90 95       	com	r25
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	08 95       	ret

000021ba <_exit>:
    21ba:	f8 94       	cli

000021bc <__stop_program>:
    21bc:	ff cf       	rjmp	.-2      	; 0x21bc <__stop_program>
