
AlarmTimer_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d9  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059e  00000000  00000000  00001e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00002428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b4  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049d  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  88:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_ZN6ds13078twi_initEv>:
  //-------------TWI initialization------------------------------------------

  void ds1307::twi_init(){
	  //TWBR = (F_CPU/SCL_freq - 16)/(2*prescalar)
	  //F_CPU = 16MHz, SCL_freq(for DS1307) = 100KHz, prescalar = 1 -> TWBR =72
	  TWBR = 0x48;	// set bit rate 72
  90:	88 e4       	ldi	r24, 0x48	; 72
  92:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	  TWCR = (1<<TWEN);	//enable TWI
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  TWSR = 0x00;	//sets the prescalar value to 1
  9c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  a0:	08 95       	ret

000000a2 <_ZN6ds13079twi_startEv>:
  }

  //------------TWI Start----------------------------------------------------

  void ds1307::twi_start(){
	  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);	// initiate the start condition
  a2:	84 ea       	ldi	r24, 0xA4	; 164
  a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	// wait for the start condition to transmit
  a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ac:	88 23       	and	r24, r24
  ae:	e4 f7       	brge	.-8      	; 0xa8 <_ZN6ds13079twi_startEv+0x6>
  }
  b0:	08 95       	ret

000000b2 <_ZN6ds13079twi_SLA_WEv>:

  void ds1307::twi_SLA_W(){
	  //chooses the device address and sends the Write signal
	  //DS1307 address = 1101000
	  //Write = 0 (last bit)
	  TWDR = 0b11010000;	//SLA + W to data register
  b2:	80 ed       	ldi	r24, 0xD0	; 208
  b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  b8:	84 e8       	ldi	r24, 0x84	; 132
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for SLA + W to transmit
  be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <_ZN6ds13079twi_SLA_WEv+0xc>
  }
  c6:	08 95       	ret

000000c8 <_ZN6ds13079twi_SLA_REv>:

  void ds1307::twi_SLA_R(){
	  //chooses the device address and sends the Read signal
	  //DS1307 address = 1101000
	  //Read = 1 (last bit)
	  TWDR = 0b11010001;	//SLA + R to data register
  c8:	81 ed       	ldi	r24, 0xD1	; 209
  ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  ce:	84 e8       	ldi	r24, 0x84	; 132
  d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	////wait for SLA + R to transmit
  d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d8:	88 23       	and	r24, r24
  da:	e4 f7       	brge	.-8      	; 0xd4 <_ZN6ds13079twi_SLA_REv+0xc>
  }
  dc:	08 95       	ret

000000de <_ZN6ds13079twi_writeEh>:

  //-----------TWI Write(to Slave registers)----------------------------------

  void ds1307::twi_write(uint8_t x){
	  TWDR = x;	//data byte to be written to the slave
  de:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  e2:	84 e8       	ldi	r24, 0x84	; 132
  e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
  e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ec:	88 23       	and	r24, r24
  ee:	e4 f7       	brge	.-8      	; 0xe8 <_ZN6ds13079twi_writeEh+0xa>
  }
  f0:	08 95       	ret

000000f2 <_ZN6ds13078twi_readEv>:

  //------------TWI Read(from Slave registers)---------------------------------

  uint8_t ds1307::twi_read(){
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
  f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fc:	88 23       	and	r24, r24
  fe:	e4 f7       	brge	.-8      	; 0xf8 <_ZN6ds13078twi_readEv+0x6>
	  return TWDR;	//returns the data read from the slave which is stored in TWDR
 100:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  }
 104:	08 95       	ret

00000106 <_ZN6ds13078twi_stopEv>:

  //------------TWI Stop------------------------------------------------------

  void ds1307::twi_stop(){
	  //stops the transmission with TWSTO
	  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 106:	84 e9       	ldi	r24, 0x94	; 148
 108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 10c:	08 95       	ret

0000010e <_ZN6ds13078set_timeEPNS_5rtc_tE>:

  //----------------Set time to DS1307---------------------------------------

  

  void ds1307::set_time(rtc_t * rtc){
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	8c 01       	movw	r16, r24
 118:	eb 01       	movw	r28, r22
	  twi_init();
 11a:	0e 94 48 00 	call	0x90	; 0x90 <_ZN6ds13078twi_initEv>
	  twi_start();	//sending the start condition to DS1307
 11e:	c8 01       	movw	r24, r16
 120:	0e 94 51 00 	call	0xa2	; 0xa2 <_ZN6ds13079twi_startEv>
	  twi_SLA_W();	//initiates the device ds1307 & sends write signal
 124:	c8 01       	movw	r24, r16
 126:	0e 94 59 00 	call	0xb2	; 0xb2 <_ZN6ds13079twi_SLA_WEv>

	  twi_write(0x00);	//set the register pointer to 00H(seconds reg)
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	c8 01       	movw	r24, r16
 12e:	0e 94 6f 00 	call	0xde	; 0xde <_ZN6ds13079twi_writeEh>
	  
	  twi_write(rtc -> seconds);
 132:	68 81       	ld	r22, Y
 134:	c8 01       	movw	r24, r16
 136:	0e 94 6f 00 	call	0xde	; 0xde <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> minute);
 13a:	69 81       	ldd	r22, Y+1	; 0x01
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 6f 00 	call	0xde	; 0xde <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> hour);
 142:	6a 81       	ldd	r22, Y+2	; 0x02
 144:	c8 01       	movw	r24, r16
 146:	0e 94 6f 00 	call	0xde	; 0xde <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> weekDay);
 14a:	6b 81       	ldd	r22, Y+3	; 0x03
 14c:	c8 01       	movw	r24, r16
 14e:	0e 94 6f 00 	call	0xde	; 0xde <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> date);
 152:	6c 81       	ldd	r22, Y+4	; 0x04
 154:	c8 01       	movw	r24, r16
 156:	0e 94 6f 00 	call	0xde	; 0xde <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> month);
 15a:	6d 81       	ldd	r22, Y+5	; 0x05
 15c:	c8 01       	movw	r24, r16
 15e:	0e 94 6f 00 	call	0xde	; 0xde <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> year);
 162:	6e 81       	ldd	r22, Y+6	; 0x06
 164:	c8 01       	movw	r24, r16
 166:	0e 94 6f 00 	call	0xde	; 0xde <_ZN6ds13079twi_writeEh>
	  
	  twi_stop(); //stop writing
 16a:	c8 01       	movw	r24, r16
 16c:	0e 94 83 00 	call	0x106	; 0x106 <_ZN6ds13078twi_stopEv>
  }
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <_ZN6ds13079read_timeEh>:


  //-----------------Read time from DS1307---------------------------------

  uint8_t ds1307::read_time(uint8_t reg){
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
 182:	16 2f       	mov	r17, r22
	  //sets the register pointer to the register we want -> reg (00H, 01H, etc)
	  twi_start();
 184:	0e 94 51 00 	call	0xa2	; 0xa2 <_ZN6ds13079twi_startEv>
	  twi_SLA_W();	//initiates the device ds1307
 188:	ce 01       	movw	r24, r28
 18a:	0e 94 59 00 	call	0xb2	; 0xb2 <_ZN6ds13079twi_SLA_WEv>
	  twi_write(reg);	//set the register pointer to reg)
 18e:	61 2f       	mov	r22, r17
 190:	ce 01       	movw	r24, r28
 192:	0e 94 6f 00 	call	0xde	; 0xde <_ZN6ds13079twi_writeEh>
	  twi_stop();
 196:	ce 01       	movw	r24, r28
 198:	0e 94 83 00 	call	0x106	; 0x106 <_ZN6ds13078twi_stopEv>
	  
	  //reading from the particular register
	  uint8_t x;
	  twi_start();
 19c:	ce 01       	movw	r24, r28
 19e:	0e 94 51 00 	call	0xa2	; 0xa2 <_ZN6ds13079twi_startEv>
	  twi_SLA_R();		//read from the reg
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN6ds13079twi_SLA_REv>
	  x = twi_read();		//value read from reg is stored in x
 1a8:	ce 01       	movw	r24, r28
 1aa:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN6ds13078twi_readEv>
 1ae:	18 2f       	mov	r17, r24
	  twi_stop();
 1b0:	ce 01       	movw	r24, r28
 1b2:	0e 94 83 00 	call	0x106	; 0x106 <_ZN6ds13078twi_stopEv>
	  return x;
  }
 1b6:	81 2f       	mov	r24, r17
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	08 95       	ret

000001c0 <_ZN6ds130710bcd_to_decEh>:
  int ds1307::bcd_to_dec(uint8_t num){
	  //Data received from DS1307 are in Binary Coded Decimal
	  //This function converts these data to decimal integers
	  int first4, last4, decValue;
	  
	  first4 = num & 0b00001111;	//gets first 4 digits
 1c0:	26 2f       	mov	r18, r22
 1c2:	2f 70       	andi	r18, 0x0F	; 15
	  last4 = ((num & 0b11110000) >> 4); //get last 4 digits
 1c4:	62 95       	swap	r22
 1c6:	6f 70       	andi	r22, 0x0F	; 15
 1c8:	70 e0       	ldi	r23, 0x00	; 0
	  decValue = last4 * 10 + first4;	//gives the corresponding decimal value
 1ca:	cb 01       	movw	r24, r22
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	86 0f       	add	r24, r22
 1de:	97 1f       	adc	r25, r23
	  
	  return decValue;
  }
 1e0:	82 0f       	add	r24, r18
 1e2:	91 1d       	adc	r25, r1
 1e4:	08 95       	ret

000001e6 <main>:

ds1307 DS1307;


int main(void)
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	27 97       	sbiw	r28, 0x07	; 7
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
	DDRD = (1<<AlarmLED) | (1<<SnoozeLED); // sets the pins PD2 & PD3 as outputs
 1fa:	8c e0       	ldi	r24, 0x0C	; 12
 1fc:	8a b9       	out	0x0a, r24	; 10
	//DDRB = (1<<PORTB6) | (1<<PORTB7);	// X1 and X2  16MHz crystal
	PORTD |= (1<<PORTD4) | (1<<PORTD5); // enable the internal pull ups for PD4 & PD4
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	80 63       	ori	r24, 0x30	; 48
 202:	8b b9       	out	0x0b, r24	; 11
	
	ds1307::rtc_t rtc;

	// Setting time to the RTC
	rtc.seconds =  0x55; //
 204:	85 e5       	ldi	r24, 0x55	; 85
 206:	89 83       	std	Y+1, r24	; 0x01
	rtc.minute =  0x58;
 208:	88 e5       	ldi	r24, 0x58	; 88
 20a:	8a 83       	std	Y+2, r24	; 0x02
	rtc.hour = 0x23;	//  20:17:00
 20c:	83 e2       	ldi	r24, 0x23	; 35
 20e:	8b 83       	std	Y+3, r24	; 0x03
	rtc.weekDay = 0x04;
 210:	84 e0       	ldi	r24, 0x04	; 4
 212:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x27;
 214:	87 e2       	ldi	r24, 0x27	; 39
 216:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x05;
 218:	85 e0       	ldi	r24, 0x05	; 5
 21a:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21;	//27th May 2021
 21c:	81 e2       	ldi	r24, 0x21	; 33
 21e:	8f 83       	std	Y+7, r24	; 0x07
	
	DS1307.set_time(&rtc);
 220:	be 01       	movw	r22, r28
 222:	6f 5f       	subi	r22, 0xFF	; 255
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN6ds13078set_timeEPNS_5rtc_tE>
	bool stop = false;	//STOP button state
	bool snooze = false;	//Snooze button state
	
	// Set the alarm
	int alarm_min = 59;
	int alarm_hr = 23;
 22e:	0f 2e       	mov	r0, r31
 230:	f7 e1       	ldi	r31, 0x17	; 23
 232:	ef 2e       	mov	r14, r31
 234:	f1 2c       	mov	r15, r1
 236:	f0 2d       	mov	r31, r0
	// Button state
	bool stop = false;	//STOP button state
	bool snooze = false;	//Snooze button state
	
	// Set the alarm
	int alarm_min = 59;
 238:	0b e3       	ldi	r16, 0x3B	; 59
 23a:	10 e0       	ldi	r17, 0x00	; 0
	int min, hr;
	uint8_t min_bcd, hr_bcd;

	// Button state
	bool stop = false;	//STOP button state
	bool snooze = false;	//Snooze button state
 23c:	d1 2c       	mov	r13, r1

	int min, hr;
	uint8_t min_bcd, hr_bcd;

	// Button state
	bool stop = false;	//STOP button state
 23e:	c1 2c       	mov	r12, r1
	
	while (1)
	{
		//read current time from the RTC
		//sec = read_time(0x00);
		min_bcd = DS1307.read_time(0x01);	// Minutes from register 01H
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN6ds13079read_timeEh>
 24a:	b8 2e       	mov	r11, r24
		hr_bcd = DS1307.read_time(0x02);	// Hours from register 02H
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN6ds13079read_timeEh>
 256:	98 2e       	mov	r9, r24
		
		min = DS1307.bcd_to_dec(min_bcd);	//convert minutes to decimal form
 258:	6b 2d       	mov	r22, r11
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6ds130710bcd_to_decEh>
 262:	5c 01       	movw	r10, r24
		hr = DS1307.bcd_to_dec(hr_bcd);	//convert hours to decimal form
 264:	69 2d       	mov	r22, r9
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6ds130710bcd_to_decEh>
 26e:	ac 01       	movw	r20, r24

		//------------Alarm ON-----------------------------------------------------------------
		
		if ((min == alarm_min)  & (hr == alarm_hr) & ~(stop)){
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	0a 15       	cp	r16, r10
 274:	1b 05       	cpc	r17, r11
 276:	09 f0       	breq	.+2      	; 0x27a <main+0x94>
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	e4 16       	cp	r14, r20
 27e:	f5 06       	cpc	r15, r21
 280:	09 f0       	breq	.+2      	; 0x284 <main+0x9e>
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	92 23       	and	r25, r18
 286:	29 2f       	mov	r18, r25
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	8c 2d       	mov	r24, r12
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	80 95       	com	r24
 290:	90 95       	com	r25
 292:	82 23       	and	r24, r18
 294:	93 23       	and	r25, r19
 296:	89 2b       	or	r24, r25
 298:	21 f0       	breq	.+8      	; 0x2a2 <main+0xbc>
			// if the current time == alarm time & StopBTN is off-> switch ON Alarm LED
			PORTD |= (1<<AlarmLED);
 29a:	8b b1       	in	r24, 0x0b	; 11
 29c:	84 60       	ori	r24, 0x04	; 4
 29e:	8b b9       	out	0x0b, r24	; 11
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <main+0xc2>
		}
		
		else{
			// after 1 min or when StopBTN is already pressed -> switch OFF AlarmLED
			PORTD &= ~(1<<AlarmLED);
 2a2:	8b b1       	in	r24, 0x0b	; 11
 2a4:	8b 7f       	andi	r24, 0xFB	; 251
 2a6:	8b b9       	out	0x0b, r24	; 11
		}
		
		
		//-------------Alarm Stop-------------------------------------------------------------
		
		if (!(PIND & (1<<StopBTN)) & !(~PORTD & (1<<AlarmLED))){
 2a8:	89 b1       	in	r24, 0x09	; 9
 2aa:	9b b1       	in	r25, 0x0b	; 11
 2ac:	84 fd       	sbrc	r24, 4
 2ae:	07 c0       	rjmp	.+14     	; 0x2be <main+0xd8>
 2b0:	92 ff       	sbrs	r25, 2
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <main+0xd8>
			//if AlarmLED is ON & StopBTN is pressed -> switch off AlarmLED
			PORTD &= ~(1<<AlarmLED);
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	8b 7f       	andi	r24, 0xFB	; 251
 2b8:	8b b9       	out	0x0b, r24	; 11
			stop = true;	// state of stop button set to true
 2ba:	cc 24       	eor	r12, r12
 2bc:	c3 94       	inc	r12
		}
		
		
		//------------Alarm Snooze------------------------------------------------------------
		
		if (!(PIND & (1<<SnoozeBTN)) & !(~PORTD & (1<<AlarmLED))){
 2be:	89 b1       	in	r24, 0x09	; 9
 2c0:	9b b1       	in	r25, 0x0b	; 11
 2c2:	85 fd       	sbrc	r24, 5
 2c4:	16 c0       	rjmp	.+44     	; 0x2f2 <main+0x10c>
 2c6:	92 ff       	sbrs	r25, 2
 2c8:	14 c0       	rjmp	.+40     	; 0x2f2 <main+0x10c>
			// To indicate the SnoozeBTN was pressed SnoozeLED lights up for 0.5s
			PORTD |= (1<<SnoozeLED);
 2ca:	8b b1       	in	r24, 0x0b	; 11
 2cc:	88 60       	ori	r24, 0x08	; 8
 2ce:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	89 e6       	ldi	r24, 0x69	; 105
 2d4:	98 e1       	ldi	r25, 0x18	; 24
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0xf0>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0xfa>
 2e0:	00 00       	nop
			_delay_ms(500);
			PORTD &= ~(1<<SnoozeLED);
 2e2:	8b b1       	in	r24, 0x0b	; 11
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<AlarmLED);	// AlarmLED switches OFF
 2e8:	8b b1       	in	r24, 0x0b	; 11
 2ea:	8b 7f       	andi	r24, 0xFB	; 251
 2ec:	8b b9       	out	0x0b, r24	; 11
			snooze = true;				//state of SnoozeBTN set to 1
 2ee:	dd 24       	eor	r13, r13
 2f0:	d3 94       	inc	r13
		}
		
		if (snooze){
 2f2:	dd 20       	and	r13, r13
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <main+0x112>
 2f6:	a4 cf       	rjmp	.-184    	; 0x240 <main+0x5a>
			// extends the alarm time after the SnoozeBTN is pressed
			if (alarm_min == 59){
 2f8:	0b 33       	cpi	r16, 0x3B	; 59
 2fa:	11 05       	cpc	r17, r1
 2fc:	51 f4       	brne	.+20     	; 0x312 <main+0x12c>
				alarm_min = 0;
				if (alarm_hr == 23){
 2fe:	27 e1       	ldi	r18, 0x17	; 23
 300:	e2 16       	cp	r14, r18
 302:	f1 04       	cpc	r15, r1
 304:	49 f0       	breq	.+18     	; 0x318 <main+0x132>
					alarm_hr = 0;
				}
				else{
					alarm_hr += 1;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	e8 1a       	sub	r14, r24
 30a:	f8 0a       	sbc	r15, r24
		}
		
		if (snooze){
			// extends the alarm time after the SnoozeBTN is pressed
			if (alarm_min == 59){
				alarm_min = 0;
 30c:	00 e0       	ldi	r16, 0x00	; 0
 30e:	10 e0       	ldi	r17, 0x00	; 0
 310:	07 c0       	rjmp	.+14     	; 0x320 <main+0x13a>
				else{
					alarm_hr += 1;
				}
			}
			else{
				alarm_min += snoozeTime;
 312:	0f 5f       	subi	r16, 0xFF	; 255
 314:	1f 4f       	sbci	r17, 0xFF	; 255
 316:	04 c0       	rjmp	.+8      	; 0x320 <main+0x13a>
		if (snooze){
			// extends the alarm time after the SnoozeBTN is pressed
			if (alarm_min == 59){
				alarm_min = 0;
				if (alarm_hr == 23){
					alarm_hr = 0;
 318:	e1 2c       	mov	r14, r1
 31a:	f1 2c       	mov	r15, r1
		}
		
		if (snooze){
			// extends the alarm time after the SnoozeBTN is pressed
			if (alarm_min == 59){
				alarm_min = 0;
 31c:	00 e0       	ldi	r16, 0x00	; 0
 31e:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			else{
				alarm_min += snoozeTime;
			}
			PORTD |= (1<<PORTD5);	//Sets the SnoozeBTN to high (internal pull up)
 320:	8b b1       	in	r24, 0x0b	; 11
 322:	80 62       	ori	r24, 0x20	; 32
 324:	8b b9       	out	0x0b, r24	; 11
			snooze = false;
 326:	d1 2c       	mov	r13, r1
 328:	8b cf       	rjmp	.-234    	; 0x240 <main+0x5a>

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
