
AlarmTimer_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aeb  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c1  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000506  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051d  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000305  00000000  00000000  000021c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000024c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  78:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8twi_initv>:
//-------------TWI initialization------------------------------------------

void twi_init(){
	//TWBR = (F_CPU/SCL_freq - 16)/(2*prescalar)
	//F_CPU = 16MHz, SCL_freq(for DS1307) = 100KHz, prescalar = 1 -> TWBR =72
	TWBR = 0x48;	// set bit rate 72 
  80:	88 e4       	ldi	r24, 0x48	; 72
  82:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1<<TWEN);	//enable TWI
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWSR = 0x00;	//sets the prescalar value to 1
  8c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  90:	08 95       	ret

00000092 <_Z9twi_startv>:
}

//------------TWI Start----------------------------------------------------

void twi_start(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);	// initiate the start condition
  92:	84 ea       	ldi	r24, 0xA4	; 164
  94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	// wait for the start condition to transmit
  98:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  9c:	88 23       	and	r24, r24
  9e:	e4 f7       	brge	.-8      	; 0x98 <_Z9twi_startv+0x6>
}
  a0:	08 95       	ret

000000a2 <_Z9twi_SLA_Wv>:

void twi_SLA_W(){
	//chooses the device address and sends the Write signal
	//DS1307 address = 1101000
	//Write = 0 (last bit)
	TWDR = 0b11010000;	//SLA + W to data register 
  a2:	80 ed       	ldi	r24, 0xD0	; 208
  a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  a8:	84 e8       	ldi	r24, 0x84	; 132
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	//wait for SLA + W to transmit
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <_Z9twi_SLA_Wv+0xc>
}
  b6:	08 95       	ret

000000b8 <_Z9twi_SLA_Rv>:

void twi_SLA_R(){
	//chooses the device address and sends the Read signal
	//DS1307 address = 1101000
	//Read = 1 (last bit)
	TWDR = 0b11010001;	//SLA + R to data register
  b8:	81 ed       	ldi	r24, 0xD1	; 209
  ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  be:	84 e8       	ldi	r24, 0x84	; 132
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	////wait for SLA + R to transmit
  c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	88 23       	and	r24, r24
  ca:	e4 f7       	brge	.-8      	; 0xc4 <_Z9twi_SLA_Rv+0xc>
}
  cc:	08 95       	ret

000000ce <_Z9twi_writeh>:

//-----------TWI Write(to Slave registers)----------------------------------

void twi_write(uint8_t x){
	TWDR = x;	//data byte to be written to the slave
  ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
  d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  dc:	88 23       	and	r24, r24
  de:	e4 f7       	brge	.-8      	; 0xd8 <_Z9twi_writeh+0xa>
}
  e0:	08 95       	ret

000000e2 <_Z8twi_readv>:

//------------TWI Read(from Slave registers)---------------------------------

uint8_t twi_read(){	
	TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  e2:	84 e8       	ldi	r24, 0x84	; 132
  e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
  e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ec:	88 23       	and	r24, r24
  ee:	e4 f7       	brge	.-8      	; 0xe8 <_Z8twi_readv+0x6>
	return TWDR;	//returns the data read from the slave which is stored in TWDR
  f0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
  f4:	08 95       	ret

000000f6 <_Z8twi_stopv>:

//------------TWI Stop------------------------------------------------------

void twi_stop(){
	//stops the transmission with TWSTO  
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  f6:	84 e9       	ldi	r24, 0x94	; 148
  f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fc:	08 95       	ret

000000fe <_Z8set_timeP5rtc_t>:
	uint8_t year;
}rtc_t;

//----------------Set time to DS1307---------------------------------------

void set_time(rtc_t * rtc){
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
	twi_init();		
 104:	0e 94 40 00 	call	0x80	; 0x80 <_Z8twi_initv>
	twi_start();	//sending the start condition to DS1307
 108:	0e 94 49 00 	call	0x92	; 0x92 <_Z9twi_startv>
	twi_SLA_W();	//initiates the device ds1307 & sends write signal
 10c:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z9twi_SLA_Wv>

	twi_write(0x00);	//set the register pointer to 00H(seconds reg)
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	
	twi_write(rtc -> seconds);	
 116:	88 81       	ld	r24, Y
 118:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> minute);	
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> hour);	
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> weekDay);	
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> date);	
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> month);	
 134:	8d 81       	ldd	r24, Y+5	; 0x05
 136:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> year);	
 13a:	8e 81       	ldd	r24, Y+6	; 0x06
 13c:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	
	twi_stop(); //stop writing
 140:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z8twi_stopv>
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <_Z9read_timeh>:


//-----------------Read time from DS1307---------------------------------

uint8_t read_time(uint8_t reg){
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
	//sets the register pointer to the register we want -> reg (00H, 01H, etc)
	twi_start();
 14e:	0e 94 49 00 	call	0x92	; 0x92 <_Z9twi_startv>
	twi_SLA_W();	//initiates the device ds1307
 152:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z9twi_SLA_Wv>
	twi_write(reg);	//set the register pointer to reg)
 156:	8c 2f       	mov	r24, r28
 158:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_stop();
 15c:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z8twi_stopv>
	
	//reading from the particular register
	uint8_t x;
	twi_start();
 160:	0e 94 49 00 	call	0x92	; 0x92 <_Z9twi_startv>
	twi_SLA_R();		//read from the reg
 164:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9twi_SLA_Rv>
	x = twi_read();		//value read from reg is stored in x
 168:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z8twi_readv>
 16c:	c8 2f       	mov	r28, r24
	twi_stop();
 16e:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z8twi_stopv>
	return x;
}
 172:	8c 2f       	mov	r24, r28
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <_Z10bcd_to_dech>:
int bcd_to_dec(uint8_t num){
	//Data received from DS1307 are in Binary Coded Decimal
	//This function converts these data to decimal integers
	int first4, last4, decValue;
	
	first4 = num & 0b00001111;	//gets first 4 digits
 178:	48 2f       	mov	r20, r24
 17a:	4f 70       	andi	r20, 0x0F	; 15
	last4 = ((num & 0b11110000) >> 4); //get last 4 digits
 17c:	82 95       	swap	r24
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	28 2f       	mov	r18, r24
 182:	30 e0       	ldi	r19, 0x00	; 0
	decValue = last4 * 10 + first4;	//gives the corresponding decimal value
 184:	c9 01       	movw	r24, r18
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
	
	return decValue; 
}
 19a:	84 0f       	add	r24, r20
 19c:	91 1d       	adc	r25, r1
 19e:	08 95       	ret

000001a0 <main>:
#include <util/delay.h>
#include "ds1307.h"


int main(void)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	27 97       	sbiw	r28, 0x07	; 7
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
	DDRD = (1<<AlarmLED) | (1<<SnoozeLED); // sets the pins PD2 & PD3 as outputs
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	8a b9       	out	0x0a, r24	; 10
	//DDRB = (1<<PORTB6) | (1<<PORTB7);	// X1 and X2  16MHz crystal 
	PORTD |= (1<<PORTD4) | (1<<PORTD5); // enable the internal pull ups for PD4 & PD4
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	80 63       	ori	r24, 0x30	; 48
 1bc:	8b b9       	out	0x0b, r24	; 11
	
	rtc_t rtc; 
	
	// Setting time to the RTC
	rtc.seconds =  0x55;
 1be:	85 e5       	ldi	r24, 0x55	; 85
 1c0:	89 83       	std	Y+1, r24	; 0x01
	rtc.minute =  0x58;
 1c2:	88 e5       	ldi	r24, 0x58	; 88
 1c4:	8a 83       	std	Y+2, r24	; 0x02
	rtc.hour = 0x23; //  20:17:00
 1c6:	83 e2       	ldi	r24, 0x23	; 35
 1c8:	8b 83       	std	Y+3, r24	; 0x03
	rtc.weekDay = 0x04;
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x27;
 1ce:	87 e2       	ldi	r24, 0x27	; 39
 1d0:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x05;
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21; //27th May 2021
 1d6:	81 e2       	ldi	r24, 0x21	; 33
 1d8:	8f 83       	std	Y+7, r24	; 0x07
	
	set_time(&rtc);	
 1da:	ce 01       	movw	r24, r28
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z8set_timeP5rtc_t>
	bool stop = false;	//STOP button state
	bool snooze = false;	//Snooze button state
	
	// Set the alarm
	int alarm_min = 59;
	int alarm_hr = 23;
 1e2:	0f 2e       	mov	r0, r31
 1e4:	f7 e1       	ldi	r31, 0x17	; 23
 1e6:	ef 2e       	mov	r14, r31
 1e8:	f1 2c       	mov	r15, r1
 1ea:	f0 2d       	mov	r31, r0
	// Button state
	bool stop = false;	//STOP button state
	bool snooze = false;	//Snooze button state
	
	// Set the alarm
	int alarm_min = 59;
 1ec:	0b e3       	ldi	r16, 0x3B	; 59
 1ee:	10 e0       	ldi	r17, 0x00	; 0
	int min, hr;
	uint8_t min_bcd, hr_bcd;

	// Button state
	bool stop = false;	//STOP button state
	bool snooze = false;	//Snooze button state
 1f0:	d1 2c       	mov	r13, r1

	int min, hr;
	uint8_t min_bcd, hr_bcd;

	// Button state
	bool stop = false;	//STOP button state
 1f2:	c1 2c       	mov	r12, r1
	
	while (1)
	{
		//read current time from the RTC
		//sec = read_time(0x00);
		min_bcd = read_time(0x01);	// Minutes from register 01H
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 a5 00 	call	0x14a	; 0x14a <_Z9read_timeh>
 1fa:	b8 2e       	mov	r11, r24
		hr_bcd = read_time(0x02);	// Hours from register 02H 
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 a5 00 	call	0x14a	; 0x14a <_Z9read_timeh>
 202:	98 2e       	mov	r9, r24
		
		min = bcd_to_dec(min_bcd);	//convert minutes to decimal form
 204:	8b 2d       	mov	r24, r11
 206:	0e 94 bc 00 	call	0x178	; 0x178 <_Z10bcd_to_dech>
 20a:	5c 01       	movw	r10, r24
		hr = bcd_to_dec(hr_bcd);	//convert hours to decimal form
 20c:	89 2d       	mov	r24, r9
 20e:	0e 94 bc 00 	call	0x178	; 0x178 <_Z10bcd_to_dech>
 212:	ac 01       	movw	r20, r24

		//------------Alarm ON-----------------------------------------------------------------
		
		if ((min == alarm_min)  & (hr == alarm_hr) & ~(stop)){
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	0a 15       	cp	r16, r10
 218:	1b 05       	cpc	r17, r11
 21a:	09 f0       	breq	.+2      	; 0x21e <main+0x7e>
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	e4 16       	cp	r14, r20
 222:	f5 06       	cpc	r15, r21
 224:	09 f0       	breq	.+2      	; 0x228 <main+0x88>
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	92 23       	and	r25, r18
 22a:	29 2f       	mov	r18, r25
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	8c 2d       	mov	r24, r12
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	80 95       	com	r24
 234:	90 95       	com	r25
 236:	82 23       	and	r24, r18
 238:	93 23       	and	r25, r19
 23a:	89 2b       	or	r24, r25
 23c:	21 f0       	breq	.+8      	; 0x246 <main+0xa6>
			// if the current time == alarm time & StopBTN is off-> switch ON Alarm LED
			PORTD |= (1<<AlarmLED);
 23e:	8b b1       	in	r24, 0x0b	; 11
 240:	84 60       	ori	r24, 0x04	; 4
 242:	8b b9       	out	0x0b, r24	; 11
 244:	03 c0       	rjmp	.+6      	; 0x24c <main+0xac>
		}
		
		else{
			// after 1 min or when StopBTN is already pressed -> switch OFF AlarmLED
			PORTD &= ~(1<<AlarmLED);
 246:	8b b1       	in	r24, 0x0b	; 11
 248:	8b 7f       	andi	r24, 0xFB	; 251
 24a:	8b b9       	out	0x0b, r24	; 11
		}
		
		
		//-------------Alarm Stop-------------------------------------------------------------
		
		if (!(PIND & (1<<StopBTN)) & !(~PORTD & (1<<AlarmLED))){
 24c:	89 b1       	in	r24, 0x09	; 9
 24e:	9b b1       	in	r25, 0x0b	; 11
 250:	84 fd       	sbrc	r24, 4
 252:	07 c0       	rjmp	.+14     	; 0x262 <main+0xc2>
 254:	92 ff       	sbrs	r25, 2
 256:	05 c0       	rjmp	.+10     	; 0x262 <main+0xc2>
			//if AlarmLED is ON & StopBTN is pressed -> switch off AlarmLED
			PORTD &= ~(1<<AlarmLED);
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	8b 7f       	andi	r24, 0xFB	; 251
 25c:	8b b9       	out	0x0b, r24	; 11
			stop = true;	// state of stop button set to true
 25e:	cc 24       	eor	r12, r12
 260:	c3 94       	inc	r12
		}
		
		
		//------------Alarm Snooze------------------------------------------------------------
		
		if (!(PIND & (1<<SnoozeBTN)) & !(~PORTD & (1<<AlarmLED))){
 262:	89 b1       	in	r24, 0x09	; 9
 264:	9b b1       	in	r25, 0x0b	; 11
 266:	85 fd       	sbrc	r24, 5
 268:	16 c0       	rjmp	.+44     	; 0x296 <main+0xf6>
 26a:	92 ff       	sbrs	r25, 2
 26c:	14 c0       	rjmp	.+40     	; 0x296 <main+0xf6>
			// To indicate the SnoozeBTN was pressed SnoozeLED lights up for 0.5s
			PORTD |= (1<<SnoozeLED);
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	88 60       	ori	r24, 0x08	; 8
 272:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	89 e6       	ldi	r24, 0x69	; 105
 278:	98 e1       	ldi	r25, 0x18	; 24
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0xda>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0xe4>
 284:	00 00       	nop
			_delay_ms(500);
			PORTD &= ~(1<<SnoozeLED);
 286:	8b b1       	in	r24, 0x0b	; 11
 288:	87 7f       	andi	r24, 0xF7	; 247
 28a:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<AlarmLED);	// AlarmLED switches OFF
 28c:	8b b1       	in	r24, 0x0b	; 11
 28e:	8b 7f       	andi	r24, 0xFB	; 251
 290:	8b b9       	out	0x0b, r24	; 11
			snooze = true;				//state of SnoozeBTN set to 1
 292:	dd 24       	eor	r13, r13
 294:	d3 94       	inc	r13
		}
		
		if (snooze){
 296:	dd 20       	and	r13, r13
 298:	09 f4       	brne	.+2      	; 0x29c <main+0xfc>
 29a:	ac cf       	rjmp	.-168    	; 0x1f4 <main+0x54>
			// extends the alarm time after the SnoozeBTN is pressed 
			if (alarm_min == 59){
 29c:	0b 33       	cpi	r16, 0x3B	; 59
 29e:	11 05       	cpc	r17, r1
 2a0:	51 f4       	brne	.+20     	; 0x2b6 <main+0x116>
				alarm_min = 0;
				if (alarm_hr == 23){
 2a2:	27 e1       	ldi	r18, 0x17	; 23
 2a4:	e2 16       	cp	r14, r18
 2a6:	f1 04       	cpc	r15, r1
 2a8:	49 f0       	breq	.+18     	; 0x2bc <main+0x11c>
					alarm_hr = 0;
				}
				else{
					alarm_hr += 1;
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	e8 1a       	sub	r14, r24
 2ae:	f8 0a       	sbc	r15, r24
		}
		
		if (snooze){
			// extends the alarm time after the SnoozeBTN is pressed 
			if (alarm_min == 59){
				alarm_min = 0;
 2b0:	00 e0       	ldi	r16, 0x00	; 0
 2b2:	10 e0       	ldi	r17, 0x00	; 0
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <main+0x124>
				else{
					alarm_hr += 1;
				}
			}
			else{
				alarm_min += snoozeTime;
 2b6:	0f 5f       	subi	r16, 0xFF	; 255
 2b8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <main+0x124>
		if (snooze){
			// extends the alarm time after the SnoozeBTN is pressed 
			if (alarm_min == 59){
				alarm_min = 0;
				if (alarm_hr == 23){
					alarm_hr = 0;
 2bc:	e1 2c       	mov	r14, r1
 2be:	f1 2c       	mov	r15, r1
		}
		
		if (snooze){
			// extends the alarm time after the SnoozeBTN is pressed 
			if (alarm_min == 59){
				alarm_min = 0;
 2c0:	00 e0       	ldi	r16, 0x00	; 0
 2c2:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			else{
				alarm_min += snoozeTime;
			}
			PORTD |= (1<<PORTD5);	//Sets the SnoozeBTN to high (internal pull up)
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	8b b9       	out	0x0b, r24	; 11
			snooze = false;
 2ca:	d1 2c       	mov	r13, r1
 2cc:	93 cf       	rjmp	.-218    	; 0x1f4 <main+0x54>

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
