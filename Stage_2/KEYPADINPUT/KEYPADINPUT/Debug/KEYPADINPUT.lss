
KEYPADINPUT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079b  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bb  00000000  00000000  000009b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e4  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  00001717  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001819  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GetKey>:
#include <util/delay.h>
#define F_CPU 8000000UL
uint8_t GetKey()
{
	uint8_t r,c;
	PORTD |= 0b00001111;
  80:	8b b1       	in	r24, 0x0b	; 11
  82:	8f 60       	ori	r24, 0x0F	; 15
  84:	8b b9       	out	0x0b, r24	; 11
	
	for (c=0;c<3;c++)
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	2f c0       	rjmp	.+94     	; 0xe8 <GetKey+0x68>
	{
		DDRD &=~(0b01111111);
  8a:	9a b1       	in	r25, 0x0a	; 10
  8c:	90 78       	andi	r25, 0x80	; 128
  8e:	9a b9       	out	0x0a, r25	; 10
		DDRD |=(0b01000000>>c);
  90:	9a b1       	in	r25, 0x0a	; 10
  92:	20 e4       	ldi	r18, 0x40	; 64
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	08 2e       	mov	r0, r24
  98:	02 c0       	rjmp	.+4      	; 0x9e <GetKey+0x1e>
  9a:	35 95       	asr	r19
  9c:	27 95       	ror	r18
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GetKey+0x1a>
  a2:	29 2b       	or	r18, r25
  a4:	2a b9       	out	0x0a, r18	; 10
		for (r=0;r<4;r++)
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <GetKey+0x62>
		{
			if(!(PIND & (0b00001000>>r)))
  aa:	29 b1       	in	r18, 0x09	; 9
  ac:	48 e0       	ldi	r20, 0x08	; 8
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	09 2e       	mov	r0, r25
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <GetKey+0x38>
  b4:	55 95       	asr	r21
  b6:	47 95       	ror	r20
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <GetKey+0x34>
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	24 23       	and	r18, r20
  c0:	35 23       	and	r19, r21
  c2:	23 2b       	or	r18, r19
  c4:	69 f4       	brne	.+26     	; 0xe0 <GetKey+0x60>
			{
				while(!(PIND & (0b00001000>>r)));
  c6:	29 b1       	in	r18, 0x09	; 9
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	24 23       	and	r18, r20
  cc:	35 23       	and	r19, r21
  ce:	23 2b       	or	r18, r19
  d0:	d1 f3       	breq	.-12     	; 0xc6 <GetKey+0x46>
				return(r*3+c +1);
  d2:	29 2f       	mov	r18, r25
  d4:	22 0f       	add	r18, r18
  d6:	92 0f       	add	r25, r18
  d8:	98 0f       	add	r25, r24
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	89 0f       	add	r24, r25
  de:	08 95       	ret
	
	for (c=0;c<3;c++)
	{
		DDRD &=~(0b01111111);
		DDRD |=(0b01000000>>c);
		for (r=0;r<4;r++)
  e0:	9f 5f       	subi	r25, 0xFF	; 255
  e2:	94 30       	cpi	r25, 0x04	; 4
  e4:	10 f3       	brcs	.-60     	; 0xaa <GetKey+0x2a>
uint8_t GetKey()
{
	uint8_t r,c;
	PORTD |= 0b00001111;
	
	for (c=0;c<3;c++)
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	78 f2       	brcs	.-98     	; 0x8a <GetKey+0xa>
				return(r*3+c +1);
			}
		}
	}
	
	return 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
}
  ee:	08 95       	ret

000000f0 <main>:

int main(void)
{
    /* Replace with your application code */
	uint8_t key;
	DDRB = 0b00000001;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	84 b9       	out	0x04, r24	; 4
    while (1) 
    {
		key = GetKey();
  f4:	0e 94 40 00 	call	0x80	; 0x80 <GetKey>
		
	
		if (key < 13) {for (uint8_t i = 0;i<key;i++){_delay_ms(100);PORTB = 0b00000001;_delay_ms(100);PORTB = 0b00000000;}}
  f8:	8d 30       	cpi	r24, 0x0D	; 13
  fa:	e0 f7       	brcc	.-8      	; 0xf4 <main+0x4>
  fc:	11 c0       	rjmp	.+34     	; 0x120 <main+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	e7 ea       	ldi	r30, 0xA7	; 167
 100:	f1 e6       	ldi	r31, 0x61	; 97
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x12>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x18>
 108:	00 00       	nop
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	25 b9       	out	0x05, r18	; 5
 10e:	e7 ea       	ldi	r30, 0xA7	; 167
 110:	f1 e6       	ldi	r31, 0x61	; 97
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x22>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x28>
 118:	00 00       	nop
 11a:	15 b8       	out	0x05, r1	; 5
 11c:	9f 5f       	subi	r25, 0xFF	; 255
 11e:	01 c0       	rjmp	.+2      	; 0x122 <main+0x32>
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	98 17       	cp	r25, r24
 124:	60 f3       	brcs	.-40     	; 0xfe <main+0xe>
 126:	e6 cf       	rjmp	.-52     	; 0xf4 <main+0x4>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
