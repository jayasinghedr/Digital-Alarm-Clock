
AlarmTimer_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3d  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000795  00000000  00000000  00000dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a7  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dd  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000242  00000000  00000000  00001fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000021fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  78:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8twi_initv>:
//-------------TWI initialization------------------------------------------

void twi_init(){
	//TWBR = (F_CPU/SCL_freq - 16)/(2*prescalar)
	//F_CPU = 16MHz, SCL_freq(for DS1307) = 100KHz, prescalar = 1 -> TWBR =72
	TWBR = 0x48;	// set bit rate 72 
  80:	88 e4       	ldi	r24, 0x48	; 72
  82:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1<<TWEN);	//enable TWI
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWSR = 0x00;	//sets the prescalar value to 1
  8c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  90:	08 95       	ret

00000092 <_Z9twi_startv>:
}

//------------TWI Start----------------------------------------------------

void twi_start(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);	// initiate the start condition
  92:	84 ea       	ldi	r24, 0xA4	; 164
  94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	// wait for the start condition to transmit
  98:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  9c:	88 23       	and	r24, r24
  9e:	e4 f7       	brge	.-8      	; 0x98 <_Z9twi_startv+0x6>
}
  a0:	08 95       	ret

000000a2 <_Z9twi_SLA_Wv>:

void twi_SLA_W(){
	//chooses the device address and sends the Write signal
	//DS1307 address = 1101000
	//Write = 0 (last bit)
	TWDR = 0b11010000;	//SLA + W to data register 
  a2:	80 ed       	ldi	r24, 0xD0	; 208
  a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  a8:	84 e8       	ldi	r24, 0x84	; 132
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	//wait for SLA + W to transmit
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <_Z9twi_SLA_Wv+0xc>
}
  b6:	08 95       	ret

000000b8 <_Z9twi_SLA_Rv>:

void twi_SLA_R(){
	//chooses the device address and sends the Read signal
	//DS1307 address = 1101000
	//Read = 1 (last bit)
	TWDR = 0b11010001;	//SLA + R to data register
  b8:	81 ed       	ldi	r24, 0xD1	; 209
  ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  be:	84 e8       	ldi	r24, 0x84	; 132
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	////wait for SLA + R to transmit
  c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	88 23       	and	r24, r24
  ca:	e4 f7       	brge	.-8      	; 0xc4 <_Z9twi_SLA_Rv+0xc>
}
  cc:	08 95       	ret

000000ce <_Z9twi_writeh>:

//-----------TWI Write(to Slave registers)----------------------------------

void twi_write(uint8_t x){
	TWDR = x;	//data byte to be written to the slave
  ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
  d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  dc:	88 23       	and	r24, r24
  de:	e4 f7       	brge	.-8      	; 0xd8 <_Z9twi_writeh+0xa>
}
  e0:	08 95       	ret

000000e2 <_Z8twi_readv>:

//------------TWI Read(from Slave registers)---------------------------------

uint8_t twi_read(){	
	TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
  e2:	84 e8       	ldi	r24, 0x84	; 132
  e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
  e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ec:	88 23       	and	r24, r24
  ee:	e4 f7       	brge	.-8      	; 0xe8 <_Z8twi_readv+0x6>
	return TWDR;	//returns the data read from the slave which is stored in TWDR
  f0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
  f4:	08 95       	ret

000000f6 <_Z8twi_stopv>:

//------------TWI Stop------------------------------------------------------

void twi_stop(){
	//stops the transmission with TWSTO  
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  f6:	84 e9       	ldi	r24, 0x94	; 148
  f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fc:	08 95       	ret

000000fe <_Z8set_timeP5rtc_t>:
	uint8_t year;
}rtc_t;

//----------------Set time to DS1307---------------------------------------

void set_time(rtc_t * rtc){
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
	twi_init();		
 104:	0e 94 40 00 	call	0x80	; 0x80 <_Z8twi_initv>
	twi_start();	//sending the start condition to DS1307
 108:	0e 94 49 00 	call	0x92	; 0x92 <_Z9twi_startv>
	twi_SLA_W();	//initiates the device ds1307 & sends write signal
 10c:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z9twi_SLA_Wv>

	twi_write(0x00);	//set the register pointer to 00H(seconds reg)
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	
	twi_write(rtc -> seconds);	
 116:	88 81       	ld	r24, Y
 118:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> minute);	
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> hour);	
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> weekDay);	
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> date);	
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> month);	
 134:	8d 81       	ldd	r24, Y+5	; 0x05
 136:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_write(rtc -> year);	
 13a:	8e 81       	ldd	r24, Y+6	; 0x06
 13c:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	
	twi_stop(); //stop writing
 140:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z8twi_stopv>
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <_Z9read_timeh>:


//-----------------Read time from DS1307---------------------------------

uint8_t read_time(uint8_t reg){
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
	//sets the register pointer to the register we want -> reg (00H, 01H, etc)
	twi_start();
 14e:	0e 94 49 00 	call	0x92	; 0x92 <_Z9twi_startv>
	twi_SLA_W();	//initiates the device ds1307
 152:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z9twi_SLA_Wv>
	twi_write(reg);	//set the register pointer to reg)
 156:	8c 2f       	mov	r24, r28
 158:	0e 94 67 00 	call	0xce	; 0xce <_Z9twi_writeh>
	twi_stop();
 15c:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z8twi_stopv>
	
	//reading from the particular register
	uint8_t x;
	twi_start();
 160:	0e 94 49 00 	call	0x92	; 0x92 <_Z9twi_startv>
	twi_SLA_R();		//read from the reg
 164:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z9twi_SLA_Rv>
	x = twi_read();		//value read from reg is stored in x
 168:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z8twi_readv>
 16c:	c8 2f       	mov	r28, r24
	twi_stop();
 16e:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z8twi_stopv>
	return x;
}
 172:	8c 2f       	mov	r24, r28
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <main>:
#include <util/delay.h>
#include "ds1307.h"


int main(void)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	27 97       	sbiw	r28, 0x07	; 7
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
	DDRD = (1<<AlarmLED) | (1<<SnoozeLED); // sets the pins PD2 & PD3 as outputs
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	8a b9       	out	0x0a, r24	; 10
	//DDRB = (1<<PORTB6) | (1<<PORTB7);	// X1 and X2  16MHz crystal 
	PORTD |= (1<<PORTD4) | (1<<PORTD5); // enable the input pull ups for PD4 & PD4
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	80 63       	ori	r24, 0x30	; 48
 194:	8b b9       	out	0x0b, r24	; 11
	
	rtc_t rtc; 
	
	// Setting time to the RTC
	rtc.seconds =  0x55;
 196:	85 e5       	ldi	r24, 0x55	; 85
 198:	89 83       	std	Y+1, r24	; 0x01
	rtc.minute =  0x00;
 19a:	1a 82       	std	Y+2, r1	; 0x02
	rtc.hour = 0x20; //  20:17:00
 19c:	80 e2       	ldi	r24, 0x20	; 32
 19e:	8b 83       	std	Y+3, r24	; 0x03
	rtc.weekDay = 0x04;
 1a0:	84 e0       	ldi	r24, 0x04	; 4
 1a2:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x27;
 1a4:	87 e2       	ldi	r24, 0x27	; 39
 1a6:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x05;
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21; //27th May 2021
 1ac:	81 e2       	ldi	r24, 0x21	; 33
 1ae:	8f 83       	std	Y+7, r24	; 0x07
	
	set_time(&rtc);	
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z8set_timeP5rtc_t>
	// Button state
	bool stop = false;	//STOP button state
	bool snooze = false;	//Snooze button state
	
	// Set the alarm
	uint8_t alarm_min = 0x01;
 1b8:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t min;
	uint8_t hr;
	
	// Button state
	bool stop = false;	//STOP button state
	bool snooze = false;	//Snooze button state
 1ba:	f1 2c       	mov	r15, r1
	//uint8_t sec;
	uint8_t min;
	uint8_t hr;
	
	// Button state
	bool stop = false;	//STOP button state
 1bc:	00 e0       	ldi	r16, 0x00	; 0
	
	while (1)
	{
		//read current time from the RTC
		//sec = read_time(0x00);
		min = read_time(0x01);	// Minutes from register 01H
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 a5 00 	call	0x14a	; 0x14a <_Z9read_timeh>
 1c4:	e8 2e       	mov	r14, r24
		hr = read_time(0x02);	// Hours from register 02H 
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 a5 00 	call	0x14a	; 0x14a <_Z9read_timeh>
		
		//------------Alarm ON-----------------------------------------------------------------
		
		if ((min == alarm_min)  & (hr == alarm_hr) & ~(stop)){
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	1e 11       	cpse	r17, r14
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	80 32       	cpi	r24, 0x20	; 32
 1d6:	09 f0       	breq	.+2      	; 0x1da <main+0x62>
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	92 23       	and	r25, r18
 1dc:	29 2f       	mov	r18, r25
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	80 2f       	mov	r24, r16
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	80 95       	com	r24
 1e6:	90 95       	com	r25
 1e8:	82 23       	and	r24, r18
 1ea:	93 23       	and	r25, r19
 1ec:	89 2b       	or	r24, r25
 1ee:	21 f0       	breq	.+8      	; 0x1f8 <main+0x80>
			// if the current time == alarm time & StopBTN is off-> switch ON Alarm LED
			PORTD |= (1<<AlarmLED);
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	84 60       	ori	r24, 0x04	; 4
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <main+0x86>
		}
		
		else{
			// after 1 min or when StopBTN is already pressed -> switch OFF AlarmLED
			PORTD &= ~(1<<AlarmLED);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	8b 7f       	andi	r24, 0xFB	; 251
 1fc:	8b b9       	out	0x0b, r24	; 11
		}
		
		
		//-------------Alarm Stop-------------------------------------------------------------
		
		if (!(PIND & (1<<StopBTN)) & !(~PORTD & (1<<AlarmLED))){
 1fe:	89 b1       	in	r24, 0x09	; 9
 200:	9b b1       	in	r25, 0x0b	; 11
 202:	84 fd       	sbrc	r24, 4
 204:	06 c0       	rjmp	.+12     	; 0x212 <main+0x9a>
 206:	92 ff       	sbrs	r25, 2
 208:	04 c0       	rjmp	.+8      	; 0x212 <main+0x9a>
			//if AlarmLED is ON & StopBTN is pressed -> switch off AlarmLED
			PORTD &= ~(1<<AlarmLED);
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	8b 7f       	andi	r24, 0xFB	; 251
 20e:	8b b9       	out	0x0b, r24	; 11
			stop = true;	// state of stop button set to true
 210:	01 e0       	ldi	r16, 0x01	; 1
		}
		
		
		//------------Alarm Snooze------------------------------------------------------------
		
		if (!(PIND & (1<<SnoozeBTN)) & !(~PORTD & (1<<AlarmLED))){
 212:	89 b1       	in	r24, 0x09	; 9
 214:	9b b1       	in	r25, 0x0b	; 11
 216:	85 fd       	sbrc	r24, 5
 218:	16 c0       	rjmp	.+44     	; 0x246 <main+0xce>
 21a:	92 ff       	sbrs	r25, 2
 21c:	14 c0       	rjmp	.+40     	; 0x246 <main+0xce>
			// To indicate the SnoozeBTN was pressed SnoozeLED lights up for 0.5s
			PORTD |= (1<<SnoozeLED);
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	88 60       	ori	r24, 0x08	; 8
 222:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	89 e6       	ldi	r24, 0x69	; 105
 228:	98 e1       	ldi	r25, 0x18	; 24
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0xb2>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0xbc>
 234:	00 00       	nop
			_delay_ms(500);
			PORTD &= ~(1<<SnoozeLED);
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	87 7f       	andi	r24, 0xF7	; 247
 23a:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<AlarmLED);	// AlarmLED switches OFF
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	8b 7f       	andi	r24, 0xFB	; 251
 240:	8b b9       	out	0x0b, r24	; 11
			snooze = true;				//state of SnoozeBTN set to 1
 242:	ff 24       	eor	r15, r15
 244:	f3 94       	inc	r15
		}
		
		if (snooze){
 246:	ff 20       	and	r15, r15
 248:	09 f4       	brne	.+2      	; 0x24c <main+0xd4>
 24a:	b9 cf       	rjmp	.-142    	; 0x1be <main+0x46>
			// extends the alarm time after the SnoozeBTN is pressed 
			alarm_min += snoozeTime;
 24c:	1f 5f       	subi	r17, 0xFF	; 255
			PORTD |= (1<<PORTD5);	//Sets the SnoozeBTN to high (input pull up)
 24e:	8b b1       	in	r24, 0x0b	; 11
 250:	80 62       	ori	r24, 0x20	; 32
 252:	8b b9       	out	0x0b, r24	; 11
			snooze = false;
 254:	f1 2c       	mov	r15, r1
 256:	b3 cf       	rjmp	.-154    	; 0x1be <main+0x46>

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
