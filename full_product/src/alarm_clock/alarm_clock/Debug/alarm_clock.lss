
alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000718  00800100  0000218e  00002222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000218e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  00800818  00800818  0000293a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000293a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000296c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041d6  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b1  00000000  00000000  00006d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000188f  00000000  00000000  00007ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  0000975c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ceb  00000000  00000000  00009c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021c4  00000000  00000000  0000a91f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000cae3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	18 e0       	ldi	r17, 0x08	; 8
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e8       	ldi	r30, 0x8E	; 142
      7c:	f1 e2       	ldi	r31, 0x21	; 33
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 31       	cpi	r26, 0x18	; 24
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	28 e0       	ldi	r18, 0x08	; 8
      8c:	a8 e1       	ldi	r26, 0x18	; 24
      8e:	b8 e0       	ldi	r27, 0x08	; 8
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 37       	cpi	r26, 0x75	; 117
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ad 0b 	call	0x175a	; 0x175a <main>
      9e:	0c 94 c5 10 	jmp	0x218a	; 0x218a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN10AlarmClock11int_to_charEi>:
 
 ds1307 ds1307_1;
 LCD_Display lcd_1;
 Get_key keypad_1;

 char* AlarmClock::int_to_char(int num){
      a6:	9b 01       	movw	r18, r22
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
      a8:	6a 30       	cpi	r22, 0x0A	; 10
      aa:	71 05       	cpc	r23, r1
      ac:	ec f0       	brlt	.+58     	; 0xe8 <_ZN10AlarmClock11int_to_charEi+0x42>
		 chArr = "__";
		 x = num / 10;
      ae:	cb 01       	movw	r24, r22
      b0:	6a e0       	ldi	r22, 0x0A	; 10
      b2:	70 e0       	ldi	r23, 0x00	; 0
      b4:	0e 94 9d 10 	call	0x213a	; 0x213a <__divmodhi4>
		 div = x + 48;
      b8:	ab 01       	movw	r20, r22
      ba:	40 5d       	subi	r20, 0xD0	; 208
      bc:	5f 4f       	sbci	r21, 0xFF	; 255
		 rem = (num % (10 * x)) + 48;
      be:	cb 01       	movw	r24, r22
      c0:	88 0f       	add	r24, r24
      c2:	99 1f       	adc	r25, r25
      c4:	66 0f       	add	r22, r22
      c6:	77 1f       	adc	r23, r23
      c8:	66 0f       	add	r22, r22
      ca:	77 1f       	adc	r23, r23
      cc:	66 0f       	add	r22, r22
      ce:	77 1f       	adc	r23, r23
      d0:	68 0f       	add	r22, r24
      d2:	79 1f       	adc	r23, r25
      d4:	c9 01       	movw	r24, r18
      d6:	0e 94 9d 10 	call	0x213a	; 0x213a <__divmodhi4>
      da:	c0 96       	adiw	r24, 0x30	; 48
		 char ch1 = div;
		 char ch2 = rem;
		 chArr[0] = ch1;
      dc:	e6 ea       	ldi	r30, 0xA6	; 166
      de:	f7 e0       	ldi	r31, 0x07	; 7
      e0:	40 83       	st	Z, r20
		 chArr[1] = ch2;
      e2:	81 83       	std	Z+1, r24	; 0x01

 char* AlarmClock::int_to_char(int num){
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
		 chArr = "__";
      e4:	cf 01       	movw	r24, r30
      e6:	08 95       	ret
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
		 temp = num + 48;
      e8:	20 5d       	subi	r18, 0xD0	; 208
      ea:	3f 4f       	sbci	r19, 0xFF	; 255
		 char ch = temp;
		 chArr[1] = ch;
      ec:	20 93 aa 07 	sts	0x07AA, r18	; 0x8007aa <GOT+0x34>
		 char ch2 = rem;
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
      f0:	89 ea       	ldi	r24, 0xA9	; 169
      f2:	97 e0       	ldi	r25, 0x07	; 7
		 temp = num + 48;
		 char ch = temp;
		 chArr[1] = ch;
	 }
	 return chArr;
 }
      f4:	08 95       	ret

000000f6 <_ZN10AlarmClock11displayTimeEv>:

 void AlarmClock::displayTime(){
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	8c 01       	movw	r16, r24

	 char* time1 = "    00:00:00     ";
	 int sec, min, hr;
	 //uint8_t sec_bcd, min_bcd, hr_bcd;

	 sec = ds1307_1.read_time(0x00);	//read from seconds reg
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	83 e2       	ldi	r24, 0x23	; 35
     10c:	98 e0       	ldi	r25, 0x08	; 8
     10e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN6ds13079read_timeEh>
     112:	7c 01       	movw	r14, r24
	 min = ds1307_1.read_time(0x01);	//read from minutes reg
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	83 e2       	ldi	r24, 0x23	; 35
     118:	98 e0       	ldi	r25, 0x08	; 8
     11a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN6ds13079read_timeEh>
     11e:	6c 01       	movw	r12, r24
	 hr = ds1307_1.read_time(0x02);		//read from hours reg
     120:	62 e0       	ldi	r22, 0x02	; 2
     122:	83 e2       	ldi	r24, 0x23	; 35
     124:	98 e0       	ldi	r25, 0x08	; 8
     126:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN6ds13079read_timeEh>
	 
	 str_hr = int_to_char(hr);
     12a:	bc 01       	movw	r22, r24
     12c:	c8 01       	movw	r24, r16
     12e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[4] = str_hr[0];
     132:	fc 01       	movw	r30, r24
     134:	20 81       	ld	r18, Z
     136:	cc ea       	ldi	r28, 0xAC	; 172
     138:	d7 e0       	ldi	r29, 0x07	; 7
     13a:	2c 83       	std	Y+4, r18	; 0x04
	 time1[5] = str_hr[1];
     13c:	81 81       	ldd	r24, Z+1	; 0x01
     13e:	8d 83       	std	Y+5, r24	; 0x05
	 
	 str_min = int_to_char(min);
     140:	b6 01       	movw	r22, r12
     142:	c8 01       	movw	r24, r16
     144:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[7] = str_min[0];
     148:	fc 01       	movw	r30, r24
     14a:	20 81       	ld	r18, Z
     14c:	2f 83       	std	Y+7, r18	; 0x07
	 time1[8] = str_min[1];
     14e:	81 81       	ldd	r24, Z+1	; 0x01
     150:	88 87       	std	Y+8, r24	; 0x08
	 
	 str_sec = int_to_char(sec);
     152:	b7 01       	movw	r22, r14
     154:	c8 01       	movw	r24, r16
     156:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[10] = str_sec[0];
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	2a 87       	std	Y+10, r18	; 0x0a
	 time1[11] = str_sec[1];
     160:	81 81       	ldd	r24, Z+1	; 0x01
     162:	8b 87       	std	Y+11, r24	; 0x0b
	 
	 lcd_1.LCD_String_xy(0, 0, time1);       //Write string on 1st line of LCD
     164:	9e 01       	movw	r18, r28
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	8d e1       	ldi	r24, 0x1D	; 29
     16c:	98 e0       	ldi	r25, 0x08	; 8
     16e:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
	 lcd_1.LCD_String_xy(1, 0, "MENU            ");		//Write string on 2nd line
     172:	2e eb       	ldi	r18, 0xBE	; 190
     174:	37 e0       	ldi	r19, 0x07	; 7
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	8d e1       	ldi	r24, 0x1D	; 29
     17c:	98 e0       	ldi	r25, 0x08	; 8
     17e:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     182:	ff ef       	ldi	r31, 0xFF	; 255
     184:	29 e6       	ldi	r18, 0x69	; 105
     186:	88 e1       	ldi	r24, 0x18	; 24
     188:	f1 50       	subi	r31, 0x01	; 1
     18a:	20 40       	sbci	r18, 0x00	; 0
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	e1 f7       	brne	.-8      	; 0x188 <_ZN10AlarmClock11displayTimeEv+0x92>
     190:	00 c0       	rjmp	.+0      	; 0x192 <_ZN10AlarmClock11displayTimeEv+0x9c>
     192:	00 00       	nop
	 _delay_ms(1000);
}
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	cf 90       	pop	r12
     1a4:	08 95       	ret

000001a6 <_ZN10AlarmClock12setTimetoRTCEv>:

 void AlarmClock::setTimetoRTC(){
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	63 97       	sbiw	r28, 0x13	; 19
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
	int n[6] = {4, 5, 7, 8, 10, 11};
     1ca:	8c e0       	ldi	r24, 0x0C	; 12
     1cc:	ea e9       	ldi	r30, 0x9A	; 154
     1ce:	f7 e0       	ldi	r31, 0x07	; 7
     1d0:	de 01       	movw	r26, r28
     1d2:	18 96       	adiw	r26, 0x08	; 8
     1d4:	01 90       	ld	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	8a 95       	dec	r24
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <_ZN10AlarmClock12setTimetoRTCEv+0x2e>
	lcd_1.LCD_Clear();
     1dc:	8d e1       	ldi	r24, 0x1D	; 29
     1de:	98 e0       	ldi	r25, 0x08	; 8
     1e0:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
	lcd_1.LCD_String_xy(0, 4, time);
     1e4:	2f ec       	ldi	r18, 0xCF	; 207
     1e6:	37 e0       	ldi	r19, 0x07	; 7
     1e8:	44 e0       	ldi	r20, 0x04	; 4
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	8d e1       	ldi	r24, 0x1D	; 29
     1ee:	98 e0       	ldi	r25, 0x08	; 8
     1f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     1f4:	2f ef       	ldi	r18, 0xFF	; 255
     1f6:	84 e3       	ldi	r24, 0x34	; 52
     1f8:	9c e0       	ldi	r25, 0x0C	; 12
     1fa:	21 50       	subi	r18, 0x01	; 1
     1fc:	80 40       	sbci	r24, 0x00	; 0
     1fe:	90 40       	sbci	r25, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <_ZN10AlarmClock12setTimetoRTCEv+0x54>
     202:	00 c0       	rjmp	.+0      	; 0x204 <_ZN10AlarmClock12setTimetoRTCEv+0x5e>
     204:	00 00       	nop
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     206:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
     208:	e1 2c       	mov	r14, r1
     20a:	f1 2c       	mov	r15, r1
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
     20c:	a1 2c       	mov	r10, r1
     20e:	b1 2c       	mov	r11, r1
	
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
     210:	c1 2c       	mov	r12, r1
     212:	d1 2c       	mov	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     214:	07 30       	cpi	r16, 0x07	; 7
     216:	08 f0       	brcs	.+2      	; 0x21a <_ZN10AlarmClock12setTimetoRTCEv+0x74>
     218:	1c c1       	rjmp	.+568    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	{
		while(1)
		{
			key = keypad_1.GetKey();
     21a:	8c e1       	ldi	r24, 0x1C	; 28
     21c:	98 e0       	ldi	r25, 0x08	; 8
     21e:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN7Get_key6GetKeyEv>
     222:	18 2f       	mov	r17, r24
			if (key == 1) {lcd_1.LCD_String_xy(0,n[i],"1");break;}
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	99 f4       	brne	.+38     	; 0x24e <_ZN10AlarmClock12setTimetoRTCEv+0xa8>
     228:	e0 2f       	mov	r30, r16
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	ee 0f       	add	r30, r30
     22e:	ff 1f       	adc	r31, r31
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	8c 0f       	add	r24, r28
     236:	9d 1f       	adc	r25, r29
     238:	e8 0f       	add	r30, r24
     23a:	f9 1f       	adc	r31, r25
     23c:	47 81       	ldd	r20, Z+7	; 0x07
     23e:	28 ed       	ldi	r18, 0xD8	; 216
     240:	37 e0       	ldi	r19, 0x07	; 7
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	8d e1       	ldi	r24, 0x1D	; 29
     246:	98 e0       	ldi	r25, 0x08	; 8
     248:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     24c:	c1 c0       	rjmp	.+386    	; 0x3d0 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 2) {lcd_1.LCD_String_xy(0,n[i],"2");break;}
     24e:	82 30       	cpi	r24, 0x02	; 2
     250:	99 f4       	brne	.+38     	; 0x278 <_ZN10AlarmClock12setTimetoRTCEv+0xd2>
     252:	e0 2f       	mov	r30, r16
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	8c 0f       	add	r24, r28
     260:	9d 1f       	adc	r25, r29
     262:	e8 0f       	add	r30, r24
     264:	f9 1f       	adc	r31, r25
     266:	47 81       	ldd	r20, Z+7	; 0x07
     268:	2a ed       	ldi	r18, 0xDA	; 218
     26a:	37 e0       	ldi	r19, 0x07	; 7
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	8d e1       	ldi	r24, 0x1D	; 29
     270:	98 e0       	ldi	r25, 0x08	; 8
     272:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     276:	ac c0       	rjmp	.+344    	; 0x3d0 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 3) {lcd_1.LCD_String_xy(0,n[i],"3");break;}
     278:	83 30       	cpi	r24, 0x03	; 3
     27a:	99 f4       	brne	.+38     	; 0x2a2 <_ZN10AlarmClock12setTimetoRTCEv+0xfc>
     27c:	e0 2f       	mov	r30, r16
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	8c 0f       	add	r24, r28
     28a:	9d 1f       	adc	r25, r29
     28c:	e8 0f       	add	r30, r24
     28e:	f9 1f       	adc	r31, r25
     290:	47 81       	ldd	r20, Z+7	; 0x07
     292:	2c ed       	ldi	r18, 0xDC	; 220
     294:	37 e0       	ldi	r19, 0x07	; 7
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	8d e1       	ldi	r24, 0x1D	; 29
     29a:	98 e0       	ldi	r25, 0x08	; 8
     29c:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2a0:	97 c0       	rjmp	.+302    	; 0x3d0 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 4) {lcd_1.LCD_String_xy(0,n[i],"4");break;}
     2a2:	84 30       	cpi	r24, 0x04	; 4
     2a4:	99 f4       	brne	.+38     	; 0x2cc <_ZN10AlarmClock12setTimetoRTCEv+0x126>
     2a6:	e0 2f       	mov	r30, r16
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	ee 0f       	add	r30, r30
     2ac:	ff 1f       	adc	r31, r31
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	8c 0f       	add	r24, r28
     2b4:	9d 1f       	adc	r25, r29
     2b6:	e8 0f       	add	r30, r24
     2b8:	f9 1f       	adc	r31, r25
     2ba:	47 81       	ldd	r20, Z+7	; 0x07
     2bc:	2e ed       	ldi	r18, 0xDE	; 222
     2be:	37 e0       	ldi	r19, 0x07	; 7
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	8d e1       	ldi	r24, 0x1D	; 29
     2c4:	98 e0       	ldi	r25, 0x08	; 8
     2c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2ca:	82 c0       	rjmp	.+260    	; 0x3d0 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 5) {lcd_1.LCD_String_xy(0,n[i],"5");break;}
     2cc:	85 30       	cpi	r24, 0x05	; 5
     2ce:	99 f4       	brne	.+38     	; 0x2f6 <_ZN10AlarmClock12setTimetoRTCEv+0x150>
     2d0:	e0 2f       	mov	r30, r16
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	ee 0f       	add	r30, r30
     2d6:	ff 1f       	adc	r31, r31
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	8c 0f       	add	r24, r28
     2de:	9d 1f       	adc	r25, r29
     2e0:	e8 0f       	add	r30, r24
     2e2:	f9 1f       	adc	r31, r25
     2e4:	47 81       	ldd	r20, Z+7	; 0x07
     2e6:	20 ee       	ldi	r18, 0xE0	; 224
     2e8:	37 e0       	ldi	r19, 0x07	; 7
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	8d e1       	ldi	r24, 0x1D	; 29
     2ee:	98 e0       	ldi	r25, 0x08	; 8
     2f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2f4:	6d c0       	rjmp	.+218    	; 0x3d0 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
     2f6:	86 30       	cpi	r24, 0x06	; 6
     2f8:	99 f4       	brne	.+38     	; 0x320 <_ZN10AlarmClock12setTimetoRTCEv+0x17a>
     2fa:	e0 2f       	mov	r30, r16
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	8c 0f       	add	r24, r28
     308:	9d 1f       	adc	r25, r29
     30a:	e8 0f       	add	r30, r24
     30c:	f9 1f       	adc	r31, r25
     30e:	47 81       	ldd	r20, Z+7	; 0x07
     310:	22 ee       	ldi	r18, 0xE2	; 226
     312:	37 e0       	ldi	r19, 0x07	; 7
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	8d e1       	ldi	r24, 0x1D	; 29
     318:	98 e0       	ldi	r25, 0x08	; 8
     31a:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     31e:	58 c0       	rjmp	.+176    	; 0x3d0 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
     320:	87 30       	cpi	r24, 0x07	; 7
     322:	99 f4       	brne	.+38     	; 0x34a <_ZN10AlarmClock12setTimetoRTCEv+0x1a4>
     324:	e0 2f       	mov	r30, r16
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	8c 0f       	add	r24, r28
     332:	9d 1f       	adc	r25, r29
     334:	e8 0f       	add	r30, r24
     336:	f9 1f       	adc	r31, r25
     338:	47 81       	ldd	r20, Z+7	; 0x07
     33a:	24 ee       	ldi	r18, 0xE4	; 228
     33c:	37 e0       	ldi	r19, 0x07	; 7
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	8d e1       	ldi	r24, 0x1D	; 29
     342:	98 e0       	ldi	r25, 0x08	; 8
     344:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     348:	43 c0       	rjmp	.+134    	; 0x3d0 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
     34a:	88 30       	cpi	r24, 0x08	; 8
     34c:	99 f4       	brne	.+38     	; 0x374 <_ZN10AlarmClock12setTimetoRTCEv+0x1ce>
     34e:	e0 2f       	mov	r30, r16
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	8c 0f       	add	r24, r28
     35c:	9d 1f       	adc	r25, r29
     35e:	e8 0f       	add	r30, r24
     360:	f9 1f       	adc	r31, r25
     362:	47 81       	ldd	r20, Z+7	; 0x07
     364:	26 ee       	ldi	r18, 0xE6	; 230
     366:	37 e0       	ldi	r19, 0x07	; 7
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	8d e1       	ldi	r24, 0x1D	; 29
     36c:	98 e0       	ldi	r25, 0x08	; 8
     36e:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     372:	2e c0       	rjmp	.+92     	; 0x3d0 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
     374:	89 30       	cpi	r24, 0x09	; 9
     376:	99 f4       	brne	.+38     	; 0x39e <_ZN10AlarmClock12setTimetoRTCEv+0x1f8>
     378:	e0 2f       	mov	r30, r16
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	8c 0f       	add	r24, r28
     386:	9d 1f       	adc	r25, r29
     388:	e8 0f       	add	r30, r24
     38a:	f9 1f       	adc	r31, r25
     38c:	47 81       	ldd	r20, Z+7	; 0x07
     38e:	28 ee       	ldi	r18, 0xE8	; 232
     390:	37 e0       	ldi	r19, 0x07	; 7
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	8d e1       	ldi	r24, 0x1D	; 29
     396:	98 e0       	ldi	r25, 0x08	; 8
     398:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     39c:	19 c0       	rjmp	.+50     	; 0x3d0 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
     39e:	8b 30       	cpi	r24, 0x0B	; 11
     3a0:	a1 f4       	brne	.+40     	; 0x3ca <_ZN10AlarmClock12setTimetoRTCEv+0x224>
     3a2:	e0 2f       	mov	r30, r16
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	8c 0f       	add	r24, r28
     3b0:	9d 1f       	adc	r25, r29
     3b2:	e8 0f       	add	r30, r24
     3b4:	f9 1f       	adc	r31, r25
     3b6:	47 81       	ldd	r20, Z+7	; 0x07
     3b8:	26 ed       	ldi	r18, 0xD6	; 214
     3ba:	37 e0       	ldi	r19, 0x07	; 7
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	8d e1       	ldi	r24, 0x1D	; 29
     3c0:	98 e0       	ldi	r25, 0x08	; 8
     3c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			//if (key == 10) {lcd.LCD_String_xy(0,n[i],"P");break;}
			if (PINC & (1<<Ok)){i=8; break;}
     3ca:	32 9b       	sbis	0x06, 2	; 6
     3cc:	26 cf       	rjmp	.-436    	; 0x21a <_ZN10AlarmClock12setTimetoRTCEv+0x74>
     3ce:	08 e0       	ldi	r16, 0x08	; 8
			//if (i == 6){i = 0;}
		}

		if (i == 0){hr+=key*10;}
     3d0:	01 11       	cpse	r16, r1
     3d2:	0f c0       	rjmp	.+30     	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
     3d4:	81 2f       	mov	r24, r17
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	9c 01       	movw	r18, r24
     3da:	22 0f       	add	r18, r18
     3dc:	33 1f       	adc	r19, r19
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	82 0f       	add	r24, r18
     3ec:	93 1f       	adc	r25, r19
     3ee:	e8 0e       	add	r14, r24
     3f0:	f9 1e       	adc	r15, r25
		if (i == 1){hr+=key;}
     3f2:	01 30       	cpi	r16, 0x01	; 1
     3f4:	11 f4       	brne	.+4      	; 0x3fa <_ZN10AlarmClock12setTimetoRTCEv+0x254>
     3f6:	e1 0e       	add	r14, r17
     3f8:	f1 1c       	adc	r15, r1
		if (i == 2){min+=key*10;}
     3fa:	02 30       	cpi	r16, 0x02	; 2
     3fc:	79 f4       	brne	.+30     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     3fe:	81 2f       	mov	r24, r17
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	9c 01       	movw	r18, r24
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	82 0f       	add	r24, r18
     416:	93 1f       	adc	r25, r19
     418:	a8 0e       	add	r10, r24
     41a:	b9 1e       	adc	r11, r25
		if (i == 3){min+=key;}
     41c:	03 30       	cpi	r16, 0x03	; 3
     41e:	11 f4       	brne	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     420:	a1 0e       	add	r10, r17
     422:	b1 1c       	adc	r11, r1
		if (i == 4){sec+=key*10;}
     424:	04 30       	cpi	r16, 0x04	; 4
     426:	79 f4       	brne	.+30     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     428:	81 2f       	mov	r24, r17
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	9c 01       	movw	r18, r24
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	82 0f       	add	r24, r18
     440:	93 1f       	adc	r25, r19
     442:	c8 0e       	add	r12, r24
     444:	d9 1e       	adc	r13, r25
		if (i == 5){sec+=key;}
     446:	05 30       	cpi	r16, 0x05	; 5
     448:	11 f4       	brne	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44a:	c1 0e       	add	r12, r17
     44c:	d1 1c       	adc	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     44e:	0f 5f       	subi	r16, 0xFF	; 255
     450:	e1 ce       	rjmp	.-574    	; 0x214 <_ZN10AlarmClock12setTimetoRTCEv+0x6e>
		if (i == 4){sec+=key*10;}
		if (i == 5){sec+=key;}

	}
	
	hour = ds1307_1.dec_to_bcd(hr);
     452:	b7 01       	movw	r22, r14
     454:	83 e2       	ldi	r24, 0x23	; 35
     456:	98 e0       	ldi	r25, 0x08	; 8
     458:	0e 94 80 04 	call	0x900	; 0x900 <_ZN6ds130710dec_to_bcdEi>
     45c:	18 2f       	mov	r17, r24
	minutes = ds1307_1.dec_to_bcd(min);
     45e:	b5 01       	movw	r22, r10
     460:	83 e2       	ldi	r24, 0x23	; 35
     462:	98 e0       	ldi	r25, 0x08	; 8
     464:	0e 94 80 04 	call	0x900	; 0x900 <_ZN6ds130710dec_to_bcdEi>
     468:	08 2f       	mov	r16, r24
	seconds = ds1307_1.dec_to_bcd(sec);
     46a:	b6 01       	movw	r22, r12
     46c:	83 e2       	ldi	r24, 0x23	; 35
     46e:	98 e0       	ldi	r25, 0x08	; 8
     470:	0e 94 80 04 	call	0x900	; 0x900 <_ZN6ds130710dec_to_bcdEi>

	// Setting time to the RTC
	rtc.seconds =  seconds;
     474:	89 83       	std	Y+1, r24	; 0x01
	rtc.minute =  minutes;
     476:	0a 83       	std	Y+2, r16	; 0x02
	rtc.hour = hour;
     478:	1b 83       	std	Y+3, r17	; 0x03
	rtc.weekDay = 0x07;
     47a:	87 e0       	ldi	r24, 0x07	; 7
     47c:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x20;
     47e:	80 e2       	ldi	r24, 0x20	; 32
     480:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x06;
     482:	86 e0       	ldi	r24, 0x06	; 6
     484:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21;
     486:	81 e2       	ldi	r24, 0x21	; 33
     488:	8f 83       	std	Y+7, r24	; 0x07
	lcd_1.LCD_Clear();
     48a:	8d e1       	ldi	r24, 0x1D	; 29
     48c:	98 e0       	ldi	r25, 0x08	; 8
     48e:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
	ds1307_1.set_time(&rtc);
     492:	be 01       	movw	r22, r28
     494:	6f 5f       	subi	r22, 0xFF	; 255
     496:	7f 4f       	sbci	r23, 0xFF	; 255
     498:	83 e2       	ldi	r24, 0x23	; 35
     49a:	98 e0       	ldi	r25, 0x08	; 8
     49c:	0e 94 11 04 	call	0x822	; 0x822 <_ZN6ds13078set_timeEPNS_5rtc_tE>
	lcd_1.LCD_String_xy(0, 4, "Time Set");
     4a0:	2a ee       	ldi	r18, 0xEA	; 234
     4a2:	37 e0       	ldi	r19, 0x07	; 7
     4a4:	44 e0       	ldi	r20, 0x04	; 4
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	8d e1       	ldi	r24, 0x1D	; 29
     4aa:	98 e0       	ldi	r25, 0x08	; 8
     4ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
	lcd_1.LCD_String_xy(1, 0, "OK");
     4b0:	23 ef       	ldi	r18, 0xF3	; 243
     4b2:	37 e0       	ldi	r19, 0x07	; 7
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	8d e1       	ldi	r24, 0x1D	; 29
     4ba:	98 e0       	ldi	r25, 0x08	; 8
     4bc:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
	//_delay_ms(500);
	//lcd_1.LCD_Clear();
 }
     4c0:	63 96       	adiw	r28, 0x13	; 19
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	cf 90       	pop	r12
     4dc:	bf 90       	pop	r11
     4de:	af 90       	pop	r10
     4e0:	08 95       	ret

000004e2 <_ZN10AlarmClock11setNewAlarmEv>:

 int* AlarmClock::setNewAlarm(){
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	2c 97       	sbiw	r28, 0x0c	; 12
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
	uint8_t key;
	char* alarmTime = "00:00";
	int min_al=0, hr_al=0;
	int n[6] = {6, 7, 9, 10};
     502:	fe 01       	movw	r30, r28
     504:	31 96       	adiw	r30, 0x01	; 1
     506:	8c e0       	ldi	r24, 0x0C	; 12
     508:	df 01       	movw	r26, r30
     50a:	1d 92       	st	X+, r1
     50c:	8a 95       	dec	r24
     50e:	e9 f7       	brne	.-6      	; 0x50a <_ZN10AlarmClock11setNewAlarmEv+0x28>
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	9a 83       	std	Y+2, r25	; 0x02
     516:	89 83       	std	Y+1, r24	; 0x01
     518:	87 e0       	ldi	r24, 0x07	; 7
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	9c 83       	std	Y+4, r25	; 0x04
     51e:	8b 83       	std	Y+3, r24	; 0x03
     520:	89 e0       	ldi	r24, 0x09	; 9
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	9e 83       	std	Y+6, r25	; 0x06
     526:	8d 83       	std	Y+5, r24	; 0x05
     528:	8a e0       	ldi	r24, 0x0A	; 10
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	98 87       	std	Y+8, r25	; 0x08
     52e:	8f 83       	std	Y+7, r24	; 0x07
	static int alarm[2];
			
	lcd_1.LCD_Clear();
     530:	8d e1       	ldi	r24, 0x1D	; 29
     532:	98 e0       	ldi	r25, 0x08	; 8
     534:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
	lcd_1.LCD_String_xy(0, 6, alarmTime);
     538:	22 ed       	ldi	r18, 0xD2	; 210
     53a:	37 e0       	ldi	r19, 0x07	; 7
     53c:	46 e0       	ldi	r20, 0x06	; 6
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	8d e1       	ldi	r24, 0x1D	; 29
     542:	98 e0       	ldi	r25, 0x08	; 8
     544:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     548:	bf ef       	ldi	r27, 0xFF	; 255
     54a:	21 ee       	ldi	r18, 0xE1	; 225
     54c:	84 e0       	ldi	r24, 0x04	; 4
     54e:	b1 50       	subi	r27, 0x01	; 1
     550:	20 40       	sbci	r18, 0x00	; 0
     552:	80 40       	sbci	r24, 0x00	; 0
     554:	e1 f7       	brne	.-8      	; 0x54e <_ZN10AlarmClock11setNewAlarmEv+0x6c>
     556:	00 c0       	rjmp	.+0      	; 0x558 <_ZN10AlarmClock11setNewAlarmEv+0x76>
     558:	00 00       	nop
	_delay_ms(200);	
	for(uint8_t i=0;i<5;i++)
     55a:	00 e0       	ldi	r16, 0x00	; 0
 }

 int* AlarmClock::setNewAlarm(){
	uint8_t key;
	char* alarmTime = "00:00";
	int min_al=0, hr_al=0;
     55c:	e1 2c       	mov	r14, r1
     55e:	f1 2c       	mov	r15, r1
     560:	c1 2c       	mov	r12, r1
     562:	d1 2c       	mov	r13, r1
	static int alarm[2];
			
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 6, alarmTime);
	_delay_ms(200);	
	for(uint8_t i=0;i<5;i++)
     564:	05 30       	cpi	r16, 0x05	; 5
     566:	08 f0       	brcs	.+2      	; 0x56a <_ZN10AlarmClock11setNewAlarmEv+0x88>
     568:	07 c1       	rjmp	.+526    	; 0x778 <_ZN10AlarmClock11setNewAlarmEv+0x296>
	{
		while(1)
		{
			key = keypad_1.GetKey();
     56a:	8c e1       	ldi	r24, 0x1C	; 28
     56c:	98 e0       	ldi	r25, 0x08	; 8
     56e:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN7Get_key6GetKeyEv>
     572:	18 2f       	mov	r17, r24
			if (key == 1) {lcd_1.LCD_String_xy(0,n[i],"1");break;}
     574:	81 30       	cpi	r24, 0x01	; 1
     576:	99 f4       	brne	.+38     	; 0x59e <_ZN10AlarmClock11setNewAlarmEv+0xbc>
     578:	e0 2f       	mov	r30, r16
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	a1 e0       	ldi	r26, 0x01	; 1
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	ac 0f       	add	r26, r28
     586:	bd 1f       	adc	r27, r29
     588:	ea 0f       	add	r30, r26
     58a:	fb 1f       	adc	r31, r27
     58c:	40 81       	ld	r20, Z
     58e:	28 ed       	ldi	r18, 0xD8	; 216
     590:	37 e0       	ldi	r19, 0x07	; 7
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	8d e1       	ldi	r24, 0x1D	; 29
     596:	98 e0       	ldi	r25, 0x08	; 8
     598:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     59c:	c1 c0       	rjmp	.+386    	; 0x720 <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 2) {lcd_1.LCD_String_xy(0,n[i],"2");break;}
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	99 f4       	brne	.+38     	; 0x5c8 <_ZN10AlarmClock11setNewAlarmEv+0xe6>
     5a2:	e0 2f       	mov	r30, r16
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	8c 0f       	add	r24, r28
     5b0:	9d 1f       	adc	r25, r29
     5b2:	e8 0f       	add	r30, r24
     5b4:	f9 1f       	adc	r31, r25
     5b6:	40 81       	ld	r20, Z
     5b8:	2a ed       	ldi	r18, 0xDA	; 218
     5ba:	37 e0       	ldi	r19, 0x07	; 7
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	8d e1       	ldi	r24, 0x1D	; 29
     5c0:	98 e0       	ldi	r25, 0x08	; 8
     5c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     5c6:	ac c0       	rjmp	.+344    	; 0x720 <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 3) {lcd_1.LCD_String_xy(0,n[i],"3");break;}
     5c8:	83 30       	cpi	r24, 0x03	; 3
     5ca:	99 f4       	brne	.+38     	; 0x5f2 <_ZN10AlarmClock11setNewAlarmEv+0x110>
     5cc:	e0 2f       	mov	r30, r16
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	ee 0f       	add	r30, r30
     5d2:	ff 1f       	adc	r31, r31
     5d4:	a1 e0       	ldi	r26, 0x01	; 1
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	ac 0f       	add	r26, r28
     5da:	bd 1f       	adc	r27, r29
     5dc:	ea 0f       	add	r30, r26
     5de:	fb 1f       	adc	r31, r27
     5e0:	40 81       	ld	r20, Z
     5e2:	2c ed       	ldi	r18, 0xDC	; 220
     5e4:	37 e0       	ldi	r19, 0x07	; 7
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	8d e1       	ldi	r24, 0x1D	; 29
     5ea:	98 e0       	ldi	r25, 0x08	; 8
     5ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     5f0:	97 c0       	rjmp	.+302    	; 0x720 <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 4) {lcd_1.LCD_String_xy(0,n[i],"4");break;}
     5f2:	84 30       	cpi	r24, 0x04	; 4
     5f4:	99 f4       	brne	.+38     	; 0x61c <_ZN10AlarmClock11setNewAlarmEv+0x13a>
     5f6:	e0 2f       	mov	r30, r16
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	ee 0f       	add	r30, r30
     5fc:	ff 1f       	adc	r31, r31
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	8c 0f       	add	r24, r28
     604:	9d 1f       	adc	r25, r29
     606:	e8 0f       	add	r30, r24
     608:	f9 1f       	adc	r31, r25
     60a:	40 81       	ld	r20, Z
     60c:	2e ed       	ldi	r18, 0xDE	; 222
     60e:	37 e0       	ldi	r19, 0x07	; 7
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	8d e1       	ldi	r24, 0x1D	; 29
     614:	98 e0       	ldi	r25, 0x08	; 8
     616:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     61a:	82 c0       	rjmp	.+260    	; 0x720 <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 5) {lcd_1.LCD_String_xy(0,n[i],"5");break;}
     61c:	85 30       	cpi	r24, 0x05	; 5
     61e:	99 f4       	brne	.+38     	; 0x646 <_ZN10AlarmClock11setNewAlarmEv+0x164>
     620:	e0 2f       	mov	r30, r16
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	a1 e0       	ldi	r26, 0x01	; 1
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	ac 0f       	add	r26, r28
     62e:	bd 1f       	adc	r27, r29
     630:	ea 0f       	add	r30, r26
     632:	fb 1f       	adc	r31, r27
     634:	40 81       	ld	r20, Z
     636:	20 ee       	ldi	r18, 0xE0	; 224
     638:	37 e0       	ldi	r19, 0x07	; 7
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	8d e1       	ldi	r24, 0x1D	; 29
     63e:	98 e0       	ldi	r25, 0x08	; 8
     640:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     644:	6d c0       	rjmp	.+218    	; 0x720 <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
     646:	86 30       	cpi	r24, 0x06	; 6
     648:	99 f4       	brne	.+38     	; 0x670 <_ZN10AlarmClock11setNewAlarmEv+0x18e>
     64a:	e0 2f       	mov	r30, r16
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	8c 0f       	add	r24, r28
     658:	9d 1f       	adc	r25, r29
     65a:	e8 0f       	add	r30, r24
     65c:	f9 1f       	adc	r31, r25
     65e:	40 81       	ld	r20, Z
     660:	22 ee       	ldi	r18, 0xE2	; 226
     662:	37 e0       	ldi	r19, 0x07	; 7
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	8d e1       	ldi	r24, 0x1D	; 29
     668:	98 e0       	ldi	r25, 0x08	; 8
     66a:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     66e:	58 c0       	rjmp	.+176    	; 0x720 <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
     670:	87 30       	cpi	r24, 0x07	; 7
     672:	99 f4       	brne	.+38     	; 0x69a <_ZN10AlarmClock11setNewAlarmEv+0x1b8>
     674:	e0 2f       	mov	r30, r16
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	a1 e0       	ldi	r26, 0x01	; 1
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	ac 0f       	add	r26, r28
     682:	bd 1f       	adc	r27, r29
     684:	ea 0f       	add	r30, r26
     686:	fb 1f       	adc	r31, r27
     688:	40 81       	ld	r20, Z
     68a:	24 ee       	ldi	r18, 0xE4	; 228
     68c:	37 e0       	ldi	r19, 0x07	; 7
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	8d e1       	ldi	r24, 0x1D	; 29
     692:	98 e0       	ldi	r25, 0x08	; 8
     694:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     698:	43 c0       	rjmp	.+134    	; 0x720 <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
     69a:	88 30       	cpi	r24, 0x08	; 8
     69c:	99 f4       	brne	.+38     	; 0x6c4 <_ZN10AlarmClock11setNewAlarmEv+0x1e2>
     69e:	e0 2f       	mov	r30, r16
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	8c 0f       	add	r24, r28
     6ac:	9d 1f       	adc	r25, r29
     6ae:	e8 0f       	add	r30, r24
     6b0:	f9 1f       	adc	r31, r25
     6b2:	40 81       	ld	r20, Z
     6b4:	26 ee       	ldi	r18, 0xE6	; 230
     6b6:	37 e0       	ldi	r19, 0x07	; 7
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	8d e1       	ldi	r24, 0x1D	; 29
     6bc:	98 e0       	ldi	r25, 0x08	; 8
     6be:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     6c2:	2e c0       	rjmp	.+92     	; 0x720 <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
     6c4:	89 30       	cpi	r24, 0x09	; 9
     6c6:	99 f4       	brne	.+38     	; 0x6ee <_ZN10AlarmClock11setNewAlarmEv+0x20c>
     6c8:	e0 2f       	mov	r30, r16
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	a1 e0       	ldi	r26, 0x01	; 1
     6d2:	b0 e0       	ldi	r27, 0x00	; 0
     6d4:	ac 0f       	add	r26, r28
     6d6:	bd 1f       	adc	r27, r29
     6d8:	ea 0f       	add	r30, r26
     6da:	fb 1f       	adc	r31, r27
     6dc:	40 81       	ld	r20, Z
     6de:	28 ee       	ldi	r18, 0xE8	; 232
     6e0:	37 e0       	ldi	r19, 0x07	; 7
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	8d e1       	ldi	r24, 0x1D	; 29
     6e6:	98 e0       	ldi	r25, 0x08	; 8
     6e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     6ec:	19 c0       	rjmp	.+50     	; 0x720 <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
     6ee:	8b 30       	cpi	r24, 0x0B	; 11
     6f0:	a1 f4       	brne	.+40     	; 0x71a <_ZN10AlarmClock11setNewAlarmEv+0x238>
     6f2:	e0 2f       	mov	r30, r16
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	8c 0f       	add	r24, r28
     700:	9d 1f       	adc	r25, r29
     702:	e8 0f       	add	r30, r24
     704:	f9 1f       	adc	r31, r25
     706:	40 81       	ld	r20, Z
     708:	26 ed       	ldi	r18, 0xD6	; 214
     70a:	37 e0       	ldi	r19, 0x07	; 7
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	8d e1       	ldi	r24, 0x1D	; 29
     710:	98 e0       	ldi	r25, 0x08	; 8
     712:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	03 c0       	rjmp	.+6      	; 0x720 <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (PINC & (1<<Ok)){i=8; break;}
     71a:	32 9b       	sbis	0x06, 2	; 6
     71c:	26 cf       	rjmp	.-436    	; 0x56a <_ZN10AlarmClock11setNewAlarmEv+0x88>
     71e:	08 e0       	ldi	r16, 0x08	; 8
			//if (key == 10) {lcd.LCD_String_xy(0,n[i],"P");break;}
		}

		if (i == 0){hr_al+=key*10;}
     720:	01 11       	cpse	r16, r1
     722:	0f c0       	rjmp	.+30     	; 0x742 <_ZN10AlarmClock11setNewAlarmEv+0x260>
     724:	81 2f       	mov	r24, r17
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	9c 01       	movw	r18, r24
     72a:	22 0f       	add	r18, r18
     72c:	33 1f       	adc	r19, r19
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	82 0f       	add	r24, r18
     73c:	93 1f       	adc	r25, r19
     73e:	e8 0e       	add	r14, r24
     740:	f9 1e       	adc	r15, r25
		if (i == 1){hr_al+=key;}
     742:	01 30       	cpi	r16, 0x01	; 1
     744:	11 f4       	brne	.+4      	; 0x74a <_ZN10AlarmClock11setNewAlarmEv+0x268>
     746:	e1 0e       	add	r14, r17
     748:	f1 1c       	adc	r15, r1
		if (i == 2){min_al+=key*10;}
     74a:	02 30       	cpi	r16, 0x02	; 2
     74c:	79 f4       	brne	.+30     	; 0x76c <_ZN10AlarmClock11setNewAlarmEv+0x28a>
     74e:	81 2f       	mov	r24, r17
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	9c 01       	movw	r18, r24
     754:	22 0f       	add	r18, r18
     756:	33 1f       	adc	r19, r19
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	82 0f       	add	r24, r18
     766:	93 1f       	adc	r25, r19
     768:	c8 0e       	add	r12, r24
     76a:	d9 1e       	adc	r13, r25
		if (i == 3){min_al+=key;}	
     76c:	03 30       	cpi	r16, 0x03	; 3
     76e:	11 f4       	brne	.+4      	; 0x774 <_ZN10AlarmClock11setNewAlarmEv+0x292>
     770:	c1 0e       	add	r12, r17
     772:	d1 1c       	adc	r13, r1
	static int alarm[2];
			
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 6, alarmTime);
	_delay_ms(200);	
	for(uint8_t i=0;i<5;i++)
     774:	0f 5f       	subi	r16, 0xFF	; 255
     776:	f6 ce       	rjmp	.-532    	; 0x564 <_ZN10AlarmClock11setNewAlarmEv+0x82>
		if (i == 1){hr_al+=key;}
		if (i == 2){min_al+=key*10;}
		if (i == 3){min_al+=key;}	
		
	}
	alarm[0] = hr_al;
     778:	e8 e1       	ldi	r30, 0x18	; 24
     77a:	f8 e0       	ldi	r31, 0x08	; 8
     77c:	f1 82       	std	Z+1, r15	; 0x01
     77e:	e0 82       	st	Z, r14
	alarm[1] = min_al;
     780:	d3 82       	std	Z+3, r13	; 0x03
     782:	c2 82       	std	Z+2, r12	; 0x02
	return alarm;
 }
     784:	cf 01       	movw	r24, r30
     786:	2c 96       	adiw	r28, 0x0c	; 12
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	08 95       	ret

000007a4 <_ZN6ds13078twi_initEv>:
     7a4:	88 e4       	ldi	r24, 0x48	; 72
     7a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     7aa:	84 e0       	ldi	r24, 0x04	; 4
     7ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7b0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     7b4:	08 95       	ret

000007b6 <_ZN6ds13079twi_startEv>:
     7b6:	84 ea       	ldi	r24, 0xA4	; 164
     7b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7c0:	88 23       	and	r24, r24
     7c2:	e4 f7       	brge	.-8      	; 0x7bc <_ZN6ds13079twi_startEv+0x6>
     7c4:	08 95       	ret

000007c6 <_ZN6ds13079twi_SLA_WEv>:
     7c6:	80 ed       	ldi	r24, 0xD0	; 208
     7c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     7cc:	84 e8       	ldi	r24, 0x84	; 132
     7ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7d6:	88 23       	and	r24, r24
     7d8:	e4 f7       	brge	.-8      	; 0x7d2 <_ZN6ds13079twi_SLA_WEv+0xc>
     7da:	08 95       	ret

000007dc <_ZN6ds13079twi_SLA_REv>:
     7dc:	81 ed       	ldi	r24, 0xD1	; 209
     7de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     7e2:	84 e8       	ldi	r24, 0x84	; 132
     7e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7ec:	88 23       	and	r24, r24
     7ee:	e4 f7       	brge	.-8      	; 0x7e8 <_ZN6ds13079twi_SLA_REv+0xc>
     7f0:	08 95       	ret

000007f2 <_ZN6ds13079twi_writeEh>:
     7f2:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     7f6:	84 e8       	ldi	r24, 0x84	; 132
     7f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     800:	88 23       	and	r24, r24
     802:	e4 f7       	brge	.-8      	; 0x7fc <_ZN6ds13079twi_writeEh+0xa>
     804:	08 95       	ret

00000806 <_ZN6ds13078twi_readEv>:
     806:	84 e8       	ldi	r24, 0x84	; 132
     808:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     80c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     810:	88 23       	and	r24, r24
     812:	e4 f7       	brge	.-8      	; 0x80c <_ZN6ds13078twi_readEv+0x6>
     814:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     818:	08 95       	ret

0000081a <_ZN6ds13078twi_stopEv>:
     81a:	84 e9       	ldi	r24, 0x94	; 148
     81c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     820:	08 95       	ret

00000822 <_ZN6ds13078set_timeEPNS_5rtc_tE>:
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	8c 01       	movw	r16, r24
     82c:	eb 01       	movw	r28, r22
     82e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <_ZN6ds13078twi_initEv>
     832:	c8 01       	movw	r24, r16
     834:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN6ds13079twi_startEv>
     838:	c8 01       	movw	r24, r16
     83a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN6ds13079twi_SLA_WEv>
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	c8 01       	movw	r24, r16
     842:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6ds13079twi_writeEh>
     846:	68 81       	ld	r22, Y
     848:	c8 01       	movw	r24, r16
     84a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6ds13079twi_writeEh>
     84e:	69 81       	ldd	r22, Y+1	; 0x01
     850:	c8 01       	movw	r24, r16
     852:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6ds13079twi_writeEh>
     856:	6a 81       	ldd	r22, Y+2	; 0x02
     858:	c8 01       	movw	r24, r16
     85a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6ds13079twi_writeEh>
     85e:	6b 81       	ldd	r22, Y+3	; 0x03
     860:	c8 01       	movw	r24, r16
     862:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6ds13079twi_writeEh>
     866:	6c 81       	ldd	r22, Y+4	; 0x04
     868:	c8 01       	movw	r24, r16
     86a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6ds13079twi_writeEh>
     86e:	6d 81       	ldd	r22, Y+5	; 0x05
     870:	c8 01       	movw	r24, r16
     872:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6ds13079twi_writeEh>
     876:	6e 81       	ldd	r22, Y+6	; 0x06
     878:	c8 01       	movw	r24, r16
     87a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6ds13079twi_writeEh>
     87e:	c8 01       	movw	r24, r16
     880:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13078twi_stopEv>
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	08 95       	ret

0000088e <_ZN6ds130710bcd_to_decEh>:
     88e:	26 2f       	mov	r18, r22
     890:	2f 70       	andi	r18, 0x0F	; 15
     892:	62 95       	swap	r22
     894:	6f 70       	andi	r22, 0x0F	; 15
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	cb 01       	movw	r24, r22
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	66 0f       	add	r22, r22
     8a0:	77 1f       	adc	r23, r23
     8a2:	66 0f       	add	r22, r22
     8a4:	77 1f       	adc	r23, r23
     8a6:	66 0f       	add	r22, r22
     8a8:	77 1f       	adc	r23, r23
     8aa:	86 0f       	add	r24, r22
     8ac:	97 1f       	adc	r25, r23
     8ae:	82 0f       	add	r24, r18
     8b0:	91 1d       	adc	r25, r1
     8b2:	08 95       	ret

000008b4 <_ZN6ds13079read_timeEh>:
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
     8bc:	16 2f       	mov	r17, r22
     8be:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN6ds13079twi_startEv>
     8c2:	ce 01       	movw	r24, r28
     8c4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN6ds13079twi_SLA_WEv>
     8c8:	61 2f       	mov	r22, r17
     8ca:	ce 01       	movw	r24, r28
     8cc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6ds13079twi_writeEh>
     8d0:	ce 01       	movw	r24, r28
     8d2:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13078twi_stopEv>
     8d6:	ce 01       	movw	r24, r28
     8d8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN6ds13079twi_startEv>
     8dc:	ce 01       	movw	r24, r28
     8de:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN6ds13079twi_SLA_REv>
     8e2:	ce 01       	movw	r24, r28
     8e4:	0e 94 03 04 	call	0x806	; 0x806 <_ZN6ds13078twi_readEv>
     8e8:	18 2f       	mov	r17, r24
     8ea:	ce 01       	movw	r24, r28
     8ec:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN6ds13078twi_stopEv>
     8f0:	61 2f       	mov	r22, r17
     8f2:	ce 01       	movw	r24, r28
     8f4:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN6ds130710bcd_to_decEh>
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <_ZN6ds130710dec_to_bcdEi>:
     900:	9b 01       	movw	r18, r22
     902:	6a 30       	cpi	r22, 0x0A	; 10
     904:	71 05       	cpc	r23, r1
     906:	c4 f0       	brlt	.+48     	; 0x938 <_ZN6ds130710dec_to_bcdEi+0x38>
     908:	cb 01       	movw	r24, r22
     90a:	6a e0       	ldi	r22, 0x0A	; 10
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	0e 94 9d 10 	call	0x213a	; 0x213a <__divmodhi4>
     912:	46 2f       	mov	r20, r22
     914:	42 95       	swap	r20
     916:	40 7f       	andi	r20, 0xF0	; 240
     918:	86 2f       	mov	r24, r22
     91a:	97 2f       	mov	r25, r23
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	bc 01       	movw	r22, r24
     922:	66 0f       	add	r22, r22
     924:	77 1f       	adc	r23, r23
     926:	66 0f       	add	r22, r22
     928:	77 1f       	adc	r23, r23
     92a:	68 0f       	add	r22, r24
     92c:	79 1f       	adc	r23, r25
     92e:	c9 01       	movw	r24, r18
     930:	0e 94 9d 10 	call	0x213a	; 0x213a <__divmodhi4>
     934:	84 2b       	or	r24, r20
     936:	08 95       	ret
     938:	86 2f       	mov	r24, r22
     93a:	08 95       	ret

0000093c <_ZN7Get_key6GetKeyEv>:
     93c:	8b b1       	in	r24, 0x0b	; 11
     93e:	8f 60       	ori	r24, 0x0F	; 15
     940:	8b b9       	out	0x0b, r24	; 11
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	83 30       	cpi	r24, 0x03	; 3
     946:	80 f5       	brcc	.+96     	; 0x9a8 <_ZN7Get_key6GetKeyEv+0x6c>
     948:	9a b1       	in	r25, 0x0a	; 10
     94a:	90 78       	andi	r25, 0x80	; 128
     94c:	9a b9       	out	0x0a, r25	; 10
     94e:	9a b1       	in	r25, 0x0a	; 10
     950:	20 e4       	ldi	r18, 0x40	; 64
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	08 2e       	mov	r0, r24
     956:	02 c0       	rjmp	.+4      	; 0x95c <_ZN7Get_key6GetKeyEv+0x20>
     958:	35 95       	asr	r19
     95a:	27 95       	ror	r18
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <_ZN7Get_key6GetKeyEv+0x1c>
     960:	29 2b       	or	r18, r25
     962:	2a b9       	out	0x0a, r18	; 10
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	94 30       	cpi	r25, 0x04	; 4
     968:	e8 f4       	brcc	.+58     	; 0x9a4 <_ZN7Get_key6GetKeyEv+0x68>
     96a:	29 b1       	in	r18, 0x09	; 9
     96c:	48 e0       	ldi	r20, 0x08	; 8
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	09 2e       	mov	r0, r25
     972:	02 c0       	rjmp	.+4      	; 0x978 <_ZN7Get_key6GetKeyEv+0x3c>
     974:	55 95       	asr	r21
     976:	47 95       	ror	r20
     978:	0a 94       	dec	r0
     97a:	e2 f7       	brpl	.-8      	; 0x974 <_ZN7Get_key6GetKeyEv+0x38>
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	24 23       	and	r18, r20
     980:	35 23       	and	r19, r21
     982:	23 2b       	or	r18, r19
     984:	69 f4       	brne	.+26     	; 0x9a0 <_ZN7Get_key6GetKeyEv+0x64>
     986:	29 b1       	in	r18, 0x09	; 9
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	24 23       	and	r18, r20
     98c:	35 23       	and	r19, r21
     98e:	23 2b       	or	r18, r19
     990:	d1 f3       	breq	.-12     	; 0x986 <_ZN7Get_key6GetKeyEv+0x4a>
     992:	29 2f       	mov	r18, r25
     994:	22 0f       	add	r18, r18
     996:	92 0f       	add	r25, r18
     998:	98 0f       	add	r25, r24
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	89 0f       	add	r24, r25
     99e:	08 95       	ret
     9a0:	9f 5f       	subi	r25, 0xFF	; 255
     9a2:	e1 cf       	rjmp	.-62     	; 0x966 <_ZN7Get_key6GetKeyEv+0x2a>
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	ce cf       	rjmp	.-100    	; 0x944 <_ZN7Get_key6GetKeyEv+0x8>
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	08 95       	ret

000009ac <_ZN11LCD_Display16LCD_CommandgiverEh>:
     9ac:	25 b1       	in	r18, 0x05	; 5
     9ae:	96 2f       	mov	r25, r22
     9b0:	90 7f       	andi	r25, 0xF0	; 240
     9b2:	89 2f       	mov	r24, r25
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	95 95       	asr	r25
     9b8:	87 95       	ror	r24
     9ba:	95 95       	asr	r25
     9bc:	87 95       	ror	r24
     9be:	92 2f       	mov	r25, r18
     9c0:	93 7c       	andi	r25, 0xC3	; 195
     9c2:	89 2b       	or	r24, r25
     9c4:	85 b9       	out	0x05, r24	; 5
     9c6:	85 b1       	in	r24, 0x05	; 5
     9c8:	8e 7f       	andi	r24, 0xFE	; 254
     9ca:	85 b9       	out	0x05, r24	; 5
     9cc:	85 b1       	in	r24, 0x05	; 5
     9ce:	82 60       	ori	r24, 0x02	; 2
     9d0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d2:	85 e0       	ldi	r24, 0x05	; 5
     9d4:	8a 95       	dec	r24
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <_ZN11LCD_Display16LCD_CommandgiverEh+0x28>
     9d8:	00 00       	nop
     9da:	85 b1       	in	r24, 0x05	; 5
     9dc:	8d 7f       	andi	r24, 0xFD	; 253
     9de:	85 b9       	out	0x05, r24	; 5
     9e0:	8f e8       	ldi	r24, 0x8F	; 143
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <_ZN11LCD_Display16LCD_CommandgiverEh+0x38>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <_ZN11LCD_Display16LCD_CommandgiverEh+0x3e>
     9ea:	00 00       	nop
     9ec:	85 b1       	in	r24, 0x05	; 5
     9ee:	6f 70       	andi	r22, 0x0F	; 15
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	66 0f       	add	r22, r22
     9f4:	77 1f       	adc	r23, r23
     9f6:	66 0f       	add	r22, r22
     9f8:	77 1f       	adc	r23, r23
     9fa:	83 7c       	andi	r24, 0xC3	; 195
     9fc:	68 2b       	or	r22, r24
     9fe:	65 b9       	out	0x05, r22	; 5
     a00:	85 b1       	in	r24, 0x05	; 5
     a02:	82 60       	ori	r24, 0x02	; 2
     a04:	85 b9       	out	0x05, r24	; 5
     a06:	95 e0       	ldi	r25, 0x05	; 5
     a08:	9a 95       	dec	r25
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <_ZN11LCD_Display16LCD_CommandgiverEh+0x5c>
     a0c:	00 00       	nop
     a0e:	85 b1       	in	r24, 0x05	; 5
     a10:	8d 7f       	andi	r24, 0xFD	; 253
     a12:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a14:	8f e9       	ldi	r24, 0x9F	; 159
     a16:	9f e0       	ldi	r25, 0x0F	; 15
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <_ZN11LCD_Display16LCD_CommandgiverEh+0x6c>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <_ZN11LCD_Display16LCD_CommandgiverEh+0x72>
     a1e:	00 00       	nop
     a20:	08 95       	ret

00000a22 <_ZN11LCD_Display15LCD_InitializerEv>:
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	ec 01       	movw	r28, r24
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	84 b9       	out	0x04, r24	; 4
     a2c:	8f e3       	ldi	r24, 0x3F	; 63
     a2e:	9c e9       	ldi	r25, 0x9C	; 156
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <_ZN11LCD_Display15LCD_InitializerEv+0xe>
     a34:	00 c0       	rjmp	.+0      	; 0xa36 <_ZN11LCD_Display15LCD_InitializerEv+0x14>
     a36:	00 00       	nop
     a38:	62 e0       	ldi	r22, 0x02	; 2
     a3a:	ce 01       	movw	r24, r28
     a3c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
     a40:	68 e2       	ldi	r22, 0x28	; 40
     a42:	ce 01       	movw	r24, r28
     a44:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
     a48:	6c e0       	ldi	r22, 0x0C	; 12
     a4a:	ce 01       	movw	r24, r28
     a4c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
     a50:	66 e0       	ldi	r22, 0x06	; 6
     a52:	ce 01       	movw	r24, r28
     a54:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	ce 01       	movw	r24, r28
     a5c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
     a60:	8f e9       	ldi	r24, 0x9F	; 159
     a62:	9f e0       	ldi	r25, 0x0F	; 15
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <_ZN11LCD_Display15LCD_InitializerEv+0x42>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <_ZN11LCD_Display15LCD_InitializerEv+0x48>
     a6a:	00 00       	nop
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <_ZN11LCD_Display13LCD_CharacterEh>:
     a72:	25 b1       	in	r18, 0x05	; 5
     a74:	96 2f       	mov	r25, r22
     a76:	90 7f       	andi	r25, 0xF0	; 240
     a78:	89 2f       	mov	r24, r25
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	95 95       	asr	r25
     a7e:	87 95       	ror	r24
     a80:	95 95       	asr	r25
     a82:	87 95       	ror	r24
     a84:	92 2f       	mov	r25, r18
     a86:	93 7c       	andi	r25, 0xC3	; 195
     a88:	89 2b       	or	r24, r25
     a8a:	85 b9       	out	0x05, r24	; 5
     a8c:	85 b1       	in	r24, 0x05	; 5
     a8e:	81 60       	ori	r24, 0x01	; 1
     a90:	85 b9       	out	0x05, r24	; 5
     a92:	85 b1       	in	r24, 0x05	; 5
     a94:	82 60       	ori	r24, 0x02	; 2
     a96:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	8a 95       	dec	r24
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <_ZN11LCD_Display13LCD_CharacterEh+0x28>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <_ZN11LCD_Display13LCD_CharacterEh+0x2e>
     aa0:	85 b1       	in	r24, 0x05	; 5
     aa2:	8d 7f       	andi	r24, 0xFD	; 253
     aa4:	85 b9       	out	0x05, r24	; 5
     aa6:	8f e8       	ldi	r24, 0x8F	; 143
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	f1 f7       	brne	.-4      	; 0xaaa <_ZN11LCD_Display13LCD_CharacterEh+0x38>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <_ZN11LCD_Display13LCD_CharacterEh+0x3e>
     ab0:	00 00       	nop
     ab2:	85 b1       	in	r24, 0x05	; 5
     ab4:	6f 70       	andi	r22, 0x0F	; 15
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	66 0f       	add	r22, r22
     aba:	77 1f       	adc	r23, r23
     abc:	66 0f       	add	r22, r22
     abe:	77 1f       	adc	r23, r23
     ac0:	83 7c       	andi	r24, 0xC3	; 195
     ac2:	68 2b       	or	r22, r24
     ac4:	65 b9       	out	0x05, r22	; 5
     ac6:	85 b1       	in	r24, 0x05	; 5
     ac8:	82 60       	ori	r24, 0x02	; 2
     aca:	85 b9       	out	0x05, r24	; 5
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	9a 95       	dec	r25
     ad0:	f1 f7       	brne	.-4      	; 0xace <_ZN11LCD_Display13LCD_CharacterEh+0x5c>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <_ZN11LCD_Display13LCD_CharacterEh+0x62>
     ad4:	85 b1       	in	r24, 0x05	; 5
     ad6:	8d 7f       	andi	r24, 0xFD	; 253
     ad8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ada:	8f e9       	ldi	r24, 0x9F	; 159
     adc:	9f e0       	ldi	r25, 0x0F	; 15
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <_ZN11LCD_Display13LCD_CharacterEh+0x6c>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <_ZN11LCD_Display13LCD_CharacterEh+0x72>
     ae4:	00 00       	nop
     ae6:	08 95       	ret

00000ae8 <_ZN11LCD_Display10LCD_StringEPc>:
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	7c 01       	movw	r14, r24
     af6:	8b 01       	movw	r16, r22
     af8:	c0 e0       	ldi	r28, 0x00	; 0
     afa:	d0 e0       	ldi	r29, 0x00	; 0
     afc:	f8 01       	movw	r30, r16
     afe:	ec 0f       	add	r30, r28
     b00:	fd 1f       	adc	r31, r29
     b02:	60 81       	ld	r22, Z
     b04:	66 23       	and	r22, r22
     b06:	29 f0       	breq	.+10     	; 0xb12 <_ZN11LCD_Display10LCD_StringEPc+0x2a>
     b08:	c7 01       	movw	r24, r14
     b0a:	0e 94 39 05 	call	0xa72	; 0xa72 <_ZN11LCD_Display13LCD_CharacterEh>
     b0e:	21 96       	adiw	r28, 0x01	; 1
     b10:	f5 cf       	rjmp	.-22     	; 0xafc <_ZN11LCD_Display10LCD_StringEPc+0x14>
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	08 95       	ret

00000b20 <_ZN11LCD_Display9LCD_ClearEv>:
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	ec 01       	movw	r28, r24
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
     b2c:	8f e9       	ldi	r24, 0x9F	; 159
     b2e:	9f e0       	ldi	r25, 0x0F	; 15
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <_ZN11LCD_Display9LCD_ClearEv+0x10>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <_ZN11LCD_Display9LCD_ClearEv+0x16>
     b36:	00 00       	nop
     b38:	60 e8       	ldi	r22, 0x80	; 128
     b3a:	ce 01       	movw	r24, r28
     b3c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <_ZN11LCD_Display13LCD_String_xyEccPc>:
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	8c 01       	movw	r16, r24
     b50:	e9 01       	movw	r28, r18
     b52:	61 11       	cpse	r22, r1
     b54:	08 c0       	rjmp	.+16     	; 0xb66 <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     b56:	40 31       	cpi	r20, 0x10	; 16
     b58:	30 f4       	brcc	.+12     	; 0xb66 <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     b5a:	4f 70       	andi	r20, 0x0F	; 15
     b5c:	64 2f       	mov	r22, r20
     b5e:	60 68       	ori	r22, 0x80	; 128
     b60:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
     b64:	0a c0       	rjmp	.+20     	; 0xb7a <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     b66:	61 30       	cpi	r22, 0x01	; 1
     b68:	41 f4       	brne	.+16     	; 0xb7a <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     b6a:	40 31       	cpi	r20, 0x10	; 16
     b6c:	30 f4       	brcc	.+12     	; 0xb7a <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     b6e:	4f 70       	andi	r20, 0x0F	; 15
     b70:	64 2f       	mov	r22, r20
     b72:	60 6c       	ori	r22, 0xC0	; 192
     b74:	c8 01       	movw	r24, r16
     b76:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
     b7a:	be 01       	movw	r22, r28
     b7c:	c8 01       	movw	r24, r16
     b7e:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN11LCD_Display10LCD_StringEPc>
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <_Z10checkAlarmv>:
			display();
		}
	}
}

void checkAlarm(){
     b8c:	7f 92       	push	r7
     b8e:	8f 92       	push	r8
     b90:	9f 92       	push	r9
     b92:	af 92       	push	r10
     b94:	bf 92       	push	r11
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
	int currentHr, currentMin, alarmHr, alarmMin, currentAlarm, alarmCheck, alOnOff;
	bool alarm;
	//checking time and ringing an alarm
	for (int i=0; i<alarmCount;i++){
     ba6:	00 e0       	ldi	r16, 0x00	; 0
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <alarmCount>
     bae:	90 91 2a 08 	lds	r25, 0x082A	; 0x80082a <alarmCount+0x1>
     bb2:	08 17       	cp	r16, r24
     bb4:	19 07       	cpc	r17, r25
     bb6:	0c f0       	brlt	.+2      	; 0xbba <_Z10checkAlarmv+0x2e>
     bb8:	9f c0       	rjmp	.+318    	; 0xcf8 <_Z10checkAlarmv+0x16c>
		alarmHr = allAlarms[i][0];
     bba:	f8 01       	movw	r30, r16
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e5 5d       	subi	r30, 0xD5	; 213
     bca:	f7 4f       	sbci	r31, 0xF7	; 247
     bcc:	e0 80       	ld	r14, Z
     bce:	f1 80       	ldd	r15, Z+1	; 0x01
		alarmMin = allAlarms[i][1];
     bd0:	c2 80       	ldd	r12, Z+2	; 0x02
     bd2:	d3 80       	ldd	r13, Z+3	; 0x03
		alarmCheck = allAlarms[i][2]; //only used within this loop to check of the alarm was turned on
     bd4:	84 80       	ldd	r8, Z+4	; 0x04
     bd6:	95 80       	ldd	r9, Z+5	; 0x05
		alOnOff = allAlarms[i][3]; //this value will be 1 if alarm is ON and 0 if OFF
     bd8:	a6 80       	ldd	r10, Z+6	; 0x06
     bda:	b7 80       	ldd	r11, Z+7	; 0x07

		currentHr = DS1307.read_time(02);
     bdc:	62 e0       	ldi	r22, 0x02	; 2
     bde:	80 e7       	ldi	r24, 0x70	; 112
     be0:	98 e0       	ldi	r25, 0x08	; 8
     be2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN6ds13079read_timeEh>
     be6:	ec 01       	movw	r28, r24
		currentMin = DS1307.read_time(01);
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	80 e7       	ldi	r24, 0x70	; 112
     bec:	98 e0       	ldi	r25, 0x08	; 8
     bee:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN6ds13079read_timeEh>

		if (((currentHr != alarmHr) || (currentMin != alarmMin)) /*& (currentAlarm==i)*/){
     bf2:	ec 16       	cp	r14, r28
     bf4:	fd 06       	cpc	r15, r29
     bf6:	19 f4       	brne	.+6      	; 0xbfe <_Z10checkAlarmv+0x72>
     bf8:	c8 16       	cp	r12, r24
     bfa:	d9 06       	cpc	r13, r25
     bfc:	79 f0       	breq	.+30     	; 0xc1c <_Z10checkAlarmv+0x90>
			allAlarms[i][2] = 1;
     bfe:	f8 01       	movw	r30, r16
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	e5 5d       	subi	r30, 0xD5	; 213
     c0e:	f7 4f       	sbci	r31, 0xF7	; 247
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	95 83       	std	Z+5, r25	; 0x05
     c16:	84 83       	std	Z+4, r24	; 0x04
			stop = false;
     c18:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <stop>
		}
		
		while (1){
			currentHr = DS1307.read_time(02);
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	80 e7       	ldi	r24, 0x70	; 112
     c20:	98 e0       	ldi	r25, 0x08	; 8
     c22:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN6ds13079read_timeEh>
     c26:	ec 01       	movw	r28, r24
			currentMin = DS1307.read_time(01);
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	80 e7       	ldi	r24, 0x70	; 112
     c2c:	98 e0       	ldi	r25, 0x08	; 8
     c2e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN6ds13079read_timeEh>
     c32:	ac 01       	movw	r20, r24
			if ((currentHr == alarmHr) & (currentMin == alarmMin)  & ~(stop) & (alarmCheck==1) & (alOnOff==1)){
     c34:	21 e0       	ldi	r18, 0x01	; 1
     c36:	ec 16       	cp	r14, r28
     c38:	fd 06       	cpc	r15, r29
     c3a:	09 f0       	breq	.+2      	; 0xc3e <_Z10checkAlarmv+0xb2>
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	c4 16       	cp	r12, r20
     c42:	d5 06       	cpc	r13, r21
     c44:	09 f0       	breq	.+2      	; 0xc48 <_Z10checkAlarmv+0xbc>
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	92 23       	and	r25, r18
     c4a:	29 2f       	mov	r18, r25
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <stop>
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	80 95       	com	r24
     c56:	90 95       	com	r25
     c58:	82 23       	and	r24, r18
     c5a:	93 23       	and	r25, r19
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	84 16       	cp	r8, r20
     c64:	91 04       	cpc	r9, r1
     c66:	11 f0       	breq	.+4      	; 0xc6c <_Z10checkAlarmv+0xe0>
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	82 23       	and	r24, r18
     c6e:	93 23       	and	r25, r19
     c70:	21 e0       	ldi	r18, 0x01	; 1
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	a4 16       	cp	r10, r20
     c78:	b1 04       	cpc	r11, r1
     c7a:	11 f0       	breq	.+4      	; 0xc80 <_Z10checkAlarmv+0xf4>
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	28 23       	and	r18, r24
     c82:	39 23       	and	r19, r25
     c84:	23 2b       	or	r18, r19
     c86:	01 f1       	breq	.+64     	; 0xcc8 <_Z10checkAlarmv+0x13c>
				//lcd.LCD_Clear();
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
     c88:	26 ef       	ldi	r18, 0xF6	; 246
     c8a:	37 e0       	ldi	r19, 0x07	; 7
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	8a e6       	ldi	r24, 0x6A	; 106
     c92:	98 e0       	ldi	r25, 0x08	; 8
     c94:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
				lcd.LCD_String_xy(1, 0, "STOP            ");
     c98:	27 e0       	ldi	r18, 0x07	; 7
     c9a:	38 e0       	ldi	r19, 0x08	; 8
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	8a e6       	ldi	r24, 0x6A	; 106
     ca2:	98 e0       	ldi	r25, 0x08	; 8
     ca4:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
				//PORTD |= (1<<PORTD7);
				allAlarms[i][2] = 0;
     ca8:	f8 01       	movw	r30, r16
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	e5 5d       	subi	r30, 0xD5	; 213
     cb8:	f7 4f       	sbci	r31, 0xF7	; 247
     cba:	15 82       	std	Z+5, r1	; 0x05
     cbc:	14 82       	std	Z+4, r1	; 0x04
				currentAlarm = i;
				alarm = true;
     cbe:	77 24       	eor	r7, r7
     cc0:	73 94       	inc	r7
			else{
				if(alarm){lcd.LCD_Clear();alarm=false;/*PORTD &= ~(1<<PORTD7)*/;set=0;}
				break;
			}
			
			if (PINC & (1<<Ok)){
     cc2:	32 9b       	sbis	0x06, 2	; 6
     cc4:	ab cf       	rjmp	.-170    	; 0xc1c <_Z10checkAlarmv+0x90>
     cc6:	0c c0       	rjmp	.+24     	; 0xce0 <_Z10checkAlarmv+0x154>
				allAlarms[i][2] = 0;
				currentAlarm = i;
				alarm = true;
			}
			else{
				if(alarm){lcd.LCD_Clear();alarm=false;/*PORTD &= ~(1<<PORTD7)*/;set=0;}
     cc8:	77 20       	and	r7, r7
     cca:	99 f0       	breq	.+38     	; 0xcf2 <_Z10checkAlarmv+0x166>
     ccc:	8a e6       	ldi	r24, 0x6A	; 106
     cce:	98 e0       	ldi	r25, 0x08	; 8
     cd0:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
     cd4:	10 92 5a 08 	sts	0x085A, r1	; 0x80085a <set+0x1>
     cd8:	10 92 59 08 	sts	0x0859, r1	; 0x800859 <set>
     cdc:	71 2c       	mov	r7, r1
     cde:	09 c0       	rjmp	.+18     	; 0xcf2 <_Z10checkAlarmv+0x166>
				break;
			}
			
			if (PINC & (1<<Ok)){
				//PORTD &= ~(1<<PORTD7);
				lcd.LCD_Clear();
     ce0:	8a e6       	ldi	r24, 0x6A	; 106
     ce2:	98 e0       	ldi	r25, 0x08	; 8
     ce4:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
				stop = true;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <stop>
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
				lcd.LCD_String_xy(1, 0, "STOP            ");
				//PORTD |= (1<<PORTD7);
				allAlarms[i][2] = 0;
				currentAlarm = i;
				alarm = true;
     cee:	77 24       	eor	r7, r7
     cf0:	73 94       	inc	r7

void checkAlarm(){
	int currentHr, currentMin, alarmHr, alarmMin, currentAlarm, alarmCheck, alOnOff;
	bool alarm;
	//checking time and ringing an alarm
	for (int i=0; i<alarmCount;i++){
     cf2:	0f 5f       	subi	r16, 0xFF	; 255
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	59 cf       	rjmp	.-334    	; 0xbaa <_Z10checkAlarmv+0x1e>
				stop = true;
				break;
			}
		}
	}
} 
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	9f 90       	pop	r9
     d0e:	8f 90       	pop	r8
     d10:	7f 90       	pop	r7
     d12:	08 95       	ret

00000d14 <_Z11changeAlarmi>:

void changeAlarm(int alPos){
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	2c 97       	sbiw	r28, 0x0c	; 12
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	5c 01       	movw	r10, r24
	//--------------------Changing Alarms------------------------------
	bool delAlarm = false;
	uint8_t key;
	
	int min_al=0, hr_al=0;
	int n[6] = {6, 7, 9, 10};
     d3a:	fe 01       	movw	r30, r28
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	8c e0       	ldi	r24, 0x0C	; 12
     d40:	df 01       	movw	r26, r30
     d42:	1d 92       	st	X+, r1
     d44:	8a 95       	dec	r24
     d46:	e9 f7       	brne	.-6      	; 0xd42 <_Z11changeAlarmi+0x2e>
     d48:	86 e0       	ldi	r24, 0x06	; 6
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9a 83       	std	Y+2, r25	; 0x02
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	87 e0       	ldi	r24, 0x07	; 7
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	9c 83       	std	Y+4, r25	; 0x04
     d56:	8b 83       	std	Y+3, r24	; 0x03
     d58:	89 e0       	ldi	r24, 0x09	; 9
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	8a e0       	ldi	r24, 0x0A	; 10
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	98 87       	std	Y+8, r25	; 0x08
     d66:	8f 83       	std	Y+7, r24	; 0x07
	static int alarm[2];
	
	lcd.LCD_Clear();
     d68:	8a e6       	ldi	r24, 0x6A	; 106
     d6a:	98 e0       	ldi	r25, 0x08	; 8
     d6c:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos][0]);
     d70:	85 01       	movw	r16, r10
     d72:	00 0f       	add	r16, r16
     d74:	11 1f       	adc	r17, r17
     d76:	02 95       	swap	r16
     d78:	12 95       	swap	r17
     d7a:	10 7f       	andi	r17, 0xF0	; 240
     d7c:	10 27       	eor	r17, r16
     d7e:	00 7f       	andi	r16, 0xF0	; 240
     d80:	10 27       	eor	r17, r16
     d82:	98 01       	movw	r18, r16
     d84:	20 55       	subi	r18, 0x50	; 80
     d86:	3e 4f       	sbci	r19, 0xFE	; 254
     d88:	46 e0       	ldi	r20, 0x06	; 6
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	8a e6       	ldi	r24, 0x6A	; 106
     d8e:	98 e0       	ldi	r25, 0x08	; 8
     d90:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
	lcd.LCD_String_xy(1, 0, alarmChangeList[alPos][1]);
     d94:	98 01       	movw	r18, r16
     d96:	20 54       	subi	r18, 0x40	; 64
     d98:	3e 4f       	sbci	r19, 0xFE	; 254
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	8a e6       	ldi	r24, 0x6A	; 106
     da0:	98 e0       	ldi	r25, 0x08	; 8
     da2:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     da6:	bf ef       	ldi	r27, 0xFF	; 255
     da8:	e1 ee       	ldi	r30, 0xE1	; 225
     daa:	f4 e0       	ldi	r31, 0x04	; 4
     dac:	b1 50       	subi	r27, 0x01	; 1
     dae:	e0 40       	sbci	r30, 0x00	; 0
     db0:	f0 40       	sbci	r31, 0x00	; 0
     db2:	e1 f7       	brne	.-8      	; 0xdac <_Z11changeAlarmi+0x98>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <_Z11changeAlarmi+0xa2>
     db6:	00 00       	nop
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     db8:	00 e0       	ldi	r16, 0x00	; 0

	//--------------------Changing Alarms------------------------------
	bool delAlarm = false;
	uint8_t key;
	
	int min_al=0, hr_al=0;
     dba:	e1 2c       	mov	r14, r1
     dbc:	f1 2c       	mov	r15, r1
     dbe:	c1 2c       	mov	r12, r1
     dc0:	d1 2c       	mov	r13, r1
	
	lcd.LCD_Clear();
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos][0]);
	lcd.LCD_String_xy(1, 0, alarmChangeList[alPos][1]);
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     dc2:	05 30       	cpi	r16, 0x05	; 5
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <_Z11changeAlarmi+0xb4>
     dc6:	47 c1       	rjmp	.+654    	; 0x1056 <_Z11changeAlarmi+0x342>
	{
		while(1)
		{
			key = keypad.GetKey();
     dc8:	89 e6       	ldi	r24, 0x69	; 105
     dca:	98 e0       	ldi	r25, 0x08	; 8
     dcc:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN7Get_key6GetKeyEv>
     dd0:	18 2f       	mov	r17, r24
			if (key == 1) {lcd.LCD_String_xy(0,n[i],"1");break;}
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	99 f4       	brne	.+38     	; 0xdfc <_Z11changeAlarmi+0xe8>
     dd6:	e0 2f       	mov	r30, r16
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	21 e0       	ldi	r18, 0x01	; 1
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	2c 0f       	add	r18, r28
     de4:	3d 1f       	adc	r19, r29
     de6:	e2 0f       	add	r30, r18
     de8:	f3 1f       	adc	r31, r19
     dea:	40 81       	ld	r20, Z
     dec:	28 ed       	ldi	r18, 0xD8	; 216
     dee:	37 e0       	ldi	r19, 0x07	; 7
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	8a e6       	ldi	r24, 0x6A	; 106
     df4:	98 e0       	ldi	r25, 0x08	; 8
     df6:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     dfa:	01 c1       	rjmp	.+514    	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (key == 2) {lcd.LCD_String_xy(0,n[i],"2");break;}
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	99 f4       	brne	.+38     	; 0xe26 <_Z11changeAlarmi+0x112>
     e00:	e0 2f       	mov	r30, r16
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	8c 0f       	add	r24, r28
     e0e:	9d 1f       	adc	r25, r29
     e10:	e8 0f       	add	r30, r24
     e12:	f9 1f       	adc	r31, r25
     e14:	40 81       	ld	r20, Z
     e16:	2a ed       	ldi	r18, 0xDA	; 218
     e18:	37 e0       	ldi	r19, 0x07	; 7
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	8a e6       	ldi	r24, 0x6A	; 106
     e1e:	98 e0       	ldi	r25, 0x08	; 8
     e20:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     e24:	ec c0       	rjmp	.+472    	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (key == 3) {lcd.LCD_String_xy(0,n[i],"3");break;}
     e26:	83 30       	cpi	r24, 0x03	; 3
     e28:	99 f4       	brne	.+38     	; 0xe50 <_Z11changeAlarmi+0x13c>
     e2a:	e0 2f       	mov	r30, r16
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	a1 e0       	ldi	r26, 0x01	; 1
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ac 0f       	add	r26, r28
     e38:	bd 1f       	adc	r27, r29
     e3a:	ea 0f       	add	r30, r26
     e3c:	fb 1f       	adc	r31, r27
     e3e:	40 81       	ld	r20, Z
     e40:	2c ed       	ldi	r18, 0xDC	; 220
     e42:	37 e0       	ldi	r19, 0x07	; 7
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	8a e6       	ldi	r24, 0x6A	; 106
     e48:	98 e0       	ldi	r25, 0x08	; 8
     e4a:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     e4e:	d7 c0       	rjmp	.+430    	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (key == 4) {lcd.LCD_String_xy(0,n[i],"4");break;}
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	99 f4       	brne	.+38     	; 0xe7a <_Z11changeAlarmi+0x166>
     e54:	e0 2f       	mov	r30, r16
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	21 e0       	ldi	r18, 0x01	; 1
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	2c 0f       	add	r18, r28
     e62:	3d 1f       	adc	r19, r29
     e64:	e2 0f       	add	r30, r18
     e66:	f3 1f       	adc	r31, r19
     e68:	40 81       	ld	r20, Z
     e6a:	2e ed       	ldi	r18, 0xDE	; 222
     e6c:	37 e0       	ldi	r19, 0x07	; 7
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	8a e6       	ldi	r24, 0x6A	; 106
     e72:	98 e0       	ldi	r25, 0x08	; 8
     e74:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     e78:	c2 c0       	rjmp	.+388    	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (key == 5) {lcd.LCD_String_xy(0,n[i],"5");break;}
     e7a:	85 30       	cpi	r24, 0x05	; 5
     e7c:	99 f4       	brne	.+38     	; 0xea4 <_Z11changeAlarmi+0x190>
     e7e:	e0 2f       	mov	r30, r16
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	8c 0f       	add	r24, r28
     e8c:	9d 1f       	adc	r25, r29
     e8e:	e8 0f       	add	r30, r24
     e90:	f9 1f       	adc	r31, r25
     e92:	40 81       	ld	r20, Z
     e94:	20 ee       	ldi	r18, 0xE0	; 224
     e96:	37 e0       	ldi	r19, 0x07	; 7
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	8a e6       	ldi	r24, 0x6A	; 106
     e9c:	98 e0       	ldi	r25, 0x08	; 8
     e9e:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     ea2:	ad c0       	rjmp	.+346    	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (key == 6) {lcd.LCD_String_xy(0,n[i],"6");break;}
     ea4:	86 30       	cpi	r24, 0x06	; 6
     ea6:	99 f4       	brne	.+38     	; 0xece <_Z11changeAlarmi+0x1ba>
     ea8:	e0 2f       	mov	r30, r16
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	a1 e0       	ldi	r26, 0x01	; 1
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ac 0f       	add	r26, r28
     eb6:	bd 1f       	adc	r27, r29
     eb8:	ea 0f       	add	r30, r26
     eba:	fb 1f       	adc	r31, r27
     ebc:	40 81       	ld	r20, Z
     ebe:	22 ee       	ldi	r18, 0xE2	; 226
     ec0:	37 e0       	ldi	r19, 0x07	; 7
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	8a e6       	ldi	r24, 0x6A	; 106
     ec6:	98 e0       	ldi	r25, 0x08	; 8
     ec8:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     ecc:	98 c0       	rjmp	.+304    	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (key == 7) {lcd.LCD_String_xy(0,n[i],"7");break;}
     ece:	87 30       	cpi	r24, 0x07	; 7
     ed0:	99 f4       	brne	.+38     	; 0xef8 <_Z11changeAlarmi+0x1e4>
     ed2:	e0 2f       	mov	r30, r16
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	ee 0f       	add	r30, r30
     ed8:	ff 1f       	adc	r31, r31
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	2c 0f       	add	r18, r28
     ee0:	3d 1f       	adc	r19, r29
     ee2:	e2 0f       	add	r30, r18
     ee4:	f3 1f       	adc	r31, r19
     ee6:	40 81       	ld	r20, Z
     ee8:	24 ee       	ldi	r18, 0xE4	; 228
     eea:	37 e0       	ldi	r19, 0x07	; 7
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	8a e6       	ldi	r24, 0x6A	; 106
     ef0:	98 e0       	ldi	r25, 0x08	; 8
     ef2:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     ef6:	83 c0       	rjmp	.+262    	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	99 f4       	brne	.+38     	; 0xf22 <_Z11changeAlarmi+0x20e>
     efc:	e0 2f       	mov	r30, r16
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	8c 0f       	add	r24, r28
     f0a:	9d 1f       	adc	r25, r29
     f0c:	e8 0f       	add	r30, r24
     f0e:	f9 1f       	adc	r31, r25
     f10:	40 81       	ld	r20, Z
     f12:	26 ee       	ldi	r18, 0xE6	; 230
     f14:	37 e0       	ldi	r19, 0x07	; 7
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	8a e6       	ldi	r24, 0x6A	; 106
     f1a:	98 e0       	ldi	r25, 0x08	; 8
     f1c:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     f20:	6e c0       	rjmp	.+220    	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
     f22:	89 30       	cpi	r24, 0x09	; 9
     f24:	99 f4       	brne	.+38     	; 0xf4c <_Z11changeAlarmi+0x238>
     f26:	e0 2f       	mov	r30, r16
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	a1 e0       	ldi	r26, 0x01	; 1
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ac 0f       	add	r26, r28
     f34:	bd 1f       	adc	r27, r29
     f36:	ea 0f       	add	r30, r26
     f38:	fb 1f       	adc	r31, r27
     f3a:	40 81       	ld	r20, Z
     f3c:	28 ee       	ldi	r18, 0xE8	; 232
     f3e:	37 e0       	ldi	r19, 0x07	; 7
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	8a e6       	ldi	r24, 0x6A	; 106
     f44:	98 e0       	ldi	r25, 0x08	; 8
     f46:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     f4a:	59 c0       	rjmp	.+178    	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
     f4c:	8b 30       	cpi	r24, 0x0B	; 11
     f4e:	a1 f4       	brne	.+40     	; 0xf78 <_Z11changeAlarmi+0x264>
     f50:	e0 2f       	mov	r30, r16
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	2c 0f       	add	r18, r28
     f5e:	3d 1f       	adc	r19, r29
     f60:	e2 0f       	add	r30, r18
     f62:	f3 1f       	adc	r31, r19
     f64:	40 81       	ld	r20, Z
     f66:	26 ed       	ldi	r18, 0xD6	; 214
     f68:	37 e0       	ldi	r19, 0x07	; 7
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	8a e6       	ldi	r24, 0x6A	; 106
     f6e:	98 e0       	ldi	r25, 0x08	; 8
     f70:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN11LCD_Display13LCD_String_xyEccPc>
     f74:	10 e0       	ldi	r17, 0x00	; 0
     f76:	43 c0       	rjmp	.+134    	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (PINC & (1<<Ok)){i=8; break;}
     f78:	32 99       	sbic	0x06, 2	; 6
     f7a:	40 c0       	rjmp	.+128    	; 0xffc <_Z11changeAlarmi+0x2e8>
			if (PINC & (1<<Back)){
     f7c:	33 9b       	sbis	0x06, 3	; 6
     f7e:	24 cf       	rjmp	.-440    	; 0xdc8 <_Z11changeAlarmi+0xb4>
				//deleting alarm
				
				i = 8;
				allAlarms[alPos][0] = 0;
     f80:	f5 01       	movw	r30, r10
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	e5 5d       	subi	r30, 0xD5	; 213
     f90:	f7 4f       	sbci	r31, 0xF7	; 247
     f92:	11 82       	std	Z+1, r1	; 0x01
     f94:	10 82       	st	Z, r1
				allAlarms[alPos][1] = 0;
     f96:	13 82       	std	Z+3, r1	; 0x03
     f98:	12 82       	std	Z+2, r1	; 0x02
				allAlarms[alPos][2] = 0;
     f9a:	15 82       	std	Z+5, r1	; 0x05
     f9c:	14 82       	std	Z+4, r1	; 0x04
				allAlarms[alPos][3] = 0;
     f9e:	17 82       	std	Z+7, r1	; 0x07
     fa0:	16 82       	std	Z+6, r1	; 0x06
				
				allAlarmsMenu[alPos][0][7] = '_'; 
     fa2:	f5 01       	movw	r30, r10
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	e2 95       	swap	r30
     faa:	f2 95       	swap	r31
     fac:	f0 7f       	andi	r31, 0xF0	; 240
     fae:	fe 27       	eor	r31, r30
     fb0:	e0 7f       	andi	r30, 0xF0	; 240
     fb2:	fe 27       	eor	r31, r30
     fb4:	df 01       	movw	r26, r30
     fb6:	a0 5b       	subi	r26, 0xB0	; 176
     fb8:	bd 4f       	sbci	r27, 0xFD	; 253
     fba:	8f e5       	ldi	r24, 0x5F	; 95
     fbc:	17 96       	adiw	r26, 0x07	; 7
     fbe:	8c 93       	st	X, r24
     fc0:	17 97       	sbiw	r26, 0x07	; 7
				allAlarmsMenu[alPos][0][8] = '_'; 
     fc2:	18 96       	adiw	r26, 0x08	; 8
     fc4:	8c 93       	st	X, r24
     fc6:	18 97       	sbiw	r26, 0x08	; 8
				alarmChangeList[alPos][0][0] = '_'; 
     fc8:	e0 55       	subi	r30, 0x50	; 80
     fca:	fe 4f       	sbci	r31, 0xFE	; 254
     fcc:	80 83       	st	Z, r24
				alarmChangeList[alPos][0][1] = '_'; 
     fce:	81 83       	std	Z+1, r24	; 0x01

				allAlarmsMenu[alPos][0][10] = '_'; 
     fd0:	1a 96       	adiw	r26, 0x0a	; 10
     fd2:	8c 93       	st	X, r24
     fd4:	1a 97       	sbiw	r26, 0x0a	; 10
				allAlarmsMenu[alPos][0][11] = '_'; 
     fd6:	1b 96       	adiw	r26, 0x0b	; 11
     fd8:	8c 93       	st	X, r24
				alarmChangeList[alPos][0][3] = '_'; 
     fda:	83 83       	std	Z+3, r24	; 0x03
				alarmChangeList[alPos][0][4] = '_'; 
     fdc:	84 83       	std	Z+4, r24	; 0x04
				delAlarm = true;
				alarmCount -= 1;
     fde:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <alarmCount>
     fe2:	90 91 2a 08 	lds	r25, 0x082A	; 0x80082a <alarmCount+0x1>
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	90 93 2a 08 	sts	0x082A, r25	; 0x80082a <alarmCount+0x1>
     fec:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <alarmCount>
				set=0;
     ff0:	10 92 5a 08 	sts	0x085A, r1	; 0x80085a <set+0x1>
     ff4:	10 92 59 08 	sts	0x0859, r1	; 0x800859 <set>
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
			if (PINC & (1<<Ok)){i=8; break;}
			if (PINC & (1<<Back)){
				//deleting alarm
				
				i = 8;
     ff8:	08 e0       	ldi	r16, 0x08	; 8
				alarmChangeList[alPos][0][3] = '_'; 
				alarmChangeList[alPos][0][4] = '_'; 
				delAlarm = true;
				alarmCount -= 1;
				set=0;
				break;
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <_Z11changeAlarmi+0x2ea>
			if (key == 6) {lcd.LCD_String_xy(0,n[i],"6");break;}
			if (key == 7) {lcd.LCD_String_xy(0,n[i],"7");break;}
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
			if (PINC & (1<<Ok)){i=8; break;}
     ffc:	08 e0       	ldi	r16, 0x08	; 8
				set=0;
				break;
			}
		}

		if (i == 0){hr_al+=key*10;}
     ffe:	01 11       	cpse	r16, r1
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <_Z11changeAlarmi+0x30c>
    1002:	81 2f       	mov	r24, r17
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9c 01       	movw	r18, r24
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	e8 0e       	add	r14, r24
    101e:	f9 1e       	adc	r15, r25
		if (i == 1){hr_al+=key;}
    1020:	01 30       	cpi	r16, 0x01	; 1
    1022:	11 f4       	brne	.+4      	; 0x1028 <_Z11changeAlarmi+0x314>
    1024:	e1 0e       	add	r14, r17
    1026:	f1 1c       	adc	r15, r1
		if (i == 2){min_al+=key*10;}
    1028:	02 30       	cpi	r16, 0x02	; 2
    102a:	79 f4       	brne	.+30     	; 0x104a <_Z11changeAlarmi+0x336>
    102c:	81 2f       	mov	r24, r17
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9c 01       	movw	r18, r24
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	82 0f       	add	r24, r18
    1044:	93 1f       	adc	r25, r19
    1046:	c8 0e       	add	r12, r24
    1048:	d9 1e       	adc	r13, r25
		if (i == 3){min_al+=key;}
    104a:	03 30       	cpi	r16, 0x03	; 3
    104c:	11 f4       	brne	.+4      	; 0x1052 <_Z11changeAlarmi+0x33e>
    104e:	c1 0e       	add	r12, r17
    1050:	d1 1c       	adc	r13, r1
	
	lcd.LCD_Clear();
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos][0]);
	lcd.LCD_String_xy(1, 0, alarmChangeList[alPos][1]);
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
    1052:	0f 5f       	subi	r16, 0xFF	; 255
    1054:	b6 ce       	rjmp	.-660    	; 0xdc2 <_Z11changeAlarmi+0xae>
	}
	//updating the lists with new alarm Hour and Min
	if (~(delAlarm)){
		char* txtHr;
		char* txtMin;
		allAlarms[alPos][0] = hr_al;
    1056:	f5 01       	movw	r30, r10
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	e5 5d       	subi	r30, 0xD5	; 213
    1066:	f7 4f       	sbci	r31, 0xF7	; 247
    1068:	f1 82       	std	Z+1, r15	; 0x01
    106a:	e0 82       	st	Z, r14
		allAlarms[alPos][1] = min_al;
    106c:	d3 82       	std	Z+3, r13	; 0x03
    106e:	c2 82       	std	Z+2, r12	; 0x02
		allAlarms[alPos][2] = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	95 83       	std	Z+5, r25	; 0x05
    1076:	84 83       	std	Z+4, r24	; 0x04
		allAlarms[alPos][3] = 1;
    1078:	97 83       	std	Z+7, r25	; 0x07
    107a:	86 83       	std	Z+6, r24	; 0x06

		txtHr = alarmclock.int_to_char(hr_al);
    107c:	b7 01       	movw	r22, r14
    107e:	87 e6       	ldi	r24, 0x67	; 103
    1080:	98 e0       	ldi	r25, 0x08	; 8
    1082:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
    1086:	fc 01       	movw	r30, r24
		allAlarmsMenu[alPos][0][7] = txtHr[0]; //optional
    1088:	80 81       	ld	r24, Z
    108a:	85 01       	movw	r16, r10
    108c:	00 0f       	add	r16, r16
    108e:	11 1f       	adc	r17, r17
    1090:	02 95       	swap	r16
    1092:	12 95       	swap	r17
    1094:	10 7f       	andi	r17, 0xF0	; 240
    1096:	10 27       	eor	r17, r16
    1098:	00 7f       	andi	r16, 0xF0	; 240
    109a:	10 27       	eor	r17, r16
    109c:	d8 01       	movw	r26, r16
    109e:	a0 5b       	subi	r26, 0xB0	; 176
    10a0:	bd 4f       	sbci	r27, 0xFD	; 253
    10a2:	7d 01       	movw	r14, r26
    10a4:	17 96       	adiw	r26, 0x07	; 7
    10a6:	8c 93       	st	X, r24
    10a8:	17 97       	sbiw	r26, 0x07	; 7
		allAlarmsMenu[alPos][0][8] = txtHr[1]; //
    10aa:	81 81       	ldd	r24, Z+1	; 0x01
    10ac:	18 96       	adiw	r26, 0x08	; 8
    10ae:	8c 93       	st	X, r24

		alarmChangeList[alPos][0][0] = txtHr[0];
    10b0:	80 81       	ld	r24, Z
    10b2:	00 55       	subi	r16, 0x50	; 80
    10b4:	1e 4f       	sbci	r17, 0xFE	; 254
    10b6:	d8 01       	movw	r26, r16
    10b8:	8c 93       	st	X, r24
		alarmChangeList[alPos][0][1] = txtHr[1];
    10ba:	81 81       	ldd	r24, Z+1	; 0x01
    10bc:	11 96       	adiw	r26, 0x01	; 1
    10be:	8c 93       	st	X, r24

		txtMin = alarmclock.int_to_char(min_al);
    10c0:	b6 01       	movw	r22, r12
    10c2:	87 e6       	ldi	r24, 0x67	; 103
    10c4:	98 e0       	ldi	r25, 0x08	; 8
    10c6:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
    10ca:	fc 01       	movw	r30, r24
		allAlarmsMenu[alPos][0][10] = txtMin[0]; // optional
    10cc:	80 81       	ld	r24, Z
    10ce:	d7 01       	movw	r26, r14
    10d0:	1a 96       	adiw	r26, 0x0a	; 10
    10d2:	8c 93       	st	X, r24
    10d4:	1a 97       	sbiw	r26, 0x0a	; 10
		allAlarmsMenu[alPos][0][11] = txtMin[1]; //
    10d6:	81 81       	ldd	r24, Z+1	; 0x01
    10d8:	1b 96       	adiw	r26, 0x0b	; 11
    10da:	8c 93       	st	X, r24

		alarmChangeList[alPos][0][3] = txtMin[0];
    10dc:	80 81       	ld	r24, Z
    10de:	d8 01       	movw	r26, r16
    10e0:	13 96       	adiw	r26, 0x03	; 3
    10e2:	8c 93       	st	X, r24
    10e4:	13 97       	sbiw	r26, 0x03	; 3
		alarmChangeList[alPos][0][4] = txtMin[1];	
    10e6:	81 81       	ldd	r24, Z+1	; 0x01
    10e8:	14 96       	adiw	r26, 0x04	; 4
    10ea:	8c 93       	st	X, r24
	} 
}
    10ec:	2c 96       	adiw	r28, 0x0c	; 12
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	ef 90       	pop	r14
    1104:	df 90       	pop	r13
    1106:	cf 90       	pop	r12
    1108:	bf 90       	pop	r11
    110a:	af 90       	pop	r10
    110c:	08 95       	ret

0000110e <_Z7displayv>:
		dwnbtn();
		backbtn();
	}
}

void display(){
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29

	if (set == 1){
    1112:	40 91 59 08 	lds	r20, 0x0859	; 0x800859 <set>
    1116:	50 91 5a 08 	lds	r21, 0x085A	; 0x80085a <set+0x1>
    111a:	41 30       	cpi	r20, 0x01	; 1
    111c:	51 05       	cpc	r21, r1
    111e:	b9 f5       	brne	.+110    	; 0x118e <_Z7displayv+0x80>
		lcd.LCD_Clear();
    1120:	8a e6       	ldi	r24, 0x6A	; 106
    1122:	98 e0       	ldi	r25, 0x08	; 8
    1124:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(Menu[currentscreenset1][0]);        //Write string on 1st line of LCD
    1128:	60 91 57 08 	lds	r22, 0x0857	; 0x800857 <currentscreenset1>
    112c:	70 91 58 08 	lds	r23, 0x0858	; 0x800858 <currentscreenset1+0x1>
    1130:	66 0f       	add	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	62 95       	swap	r22
    1136:	72 95       	swap	r23
    1138:	70 7f       	andi	r23, 0xF0	; 240
    113a:	76 27       	eor	r23, r22
    113c:	60 7f       	andi	r22, 0xF0	; 240
    113e:	76 27       	eor	r23, r22
    1140:	60 51       	subi	r22, 0x10	; 16
    1142:	7d 4f       	sbci	r23, 0xFD	; 253
    1144:	8a e6       	ldi	r24, 0x6A	; 106
    1146:	98 e0       	ldi	r25, 0x08	; 8
    1148:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        //Go to 2nd line
    114c:	60 ec       	ldi	r22, 0xC0	; 192
    114e:	8a e6       	ldi	r24, 0x6A	; 106
    1150:	98 e0       	ldi	r25, 0x08	; 8
    1152:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(Menu[currentscreenset1][1]);
    1156:	60 91 57 08 	lds	r22, 0x0857	; 0x800857 <currentscreenset1>
    115a:	70 91 58 08 	lds	r23, 0x0858	; 0x800858 <currentscreenset1+0x1>
    115e:	66 0f       	add	r22, r22
    1160:	77 1f       	adc	r23, r23
    1162:	62 95       	swap	r22
    1164:	72 95       	swap	r23
    1166:	70 7f       	andi	r23, 0xF0	; 240
    1168:	76 27       	eor	r23, r22
    116a:	60 7f       	andi	r22, 0xF0	; 240
    116c:	76 27       	eor	r23, r22
    116e:	60 50       	subi	r22, 0x00	; 0
    1170:	7d 4f       	sbci	r23, 0xFD	; 253
    1172:	8a e6       	ldi	r24, 0x6A	; 106
    1174:	98 e0       	ldi	r25, 0x08	; 8
    1176:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN11LCD_Display10LCD_StringEPc>
    117a:	2f ef       	ldi	r18, 0xFF	; 255
    117c:	84 e3       	ldi	r24, 0x34	; 52
    117e:	9c e0       	ldi	r25, 0x0C	; 12
    1180:	21 50       	subi	r18, 0x01	; 1
    1182:	80 40       	sbci	r24, 0x00	; 0
    1184:	90 40       	sbci	r25, 0x00	; 0
    1186:	e1 f7       	brne	.-8      	; 0x1180 <_Z7displayv+0x72>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <_Z7displayv+0x7c>
    118a:	00 00       	nop
    118c:	96 c1       	rjmp	.+812    	; 0x14ba <_Z7displayv+0x3ac>
		_delay_ms(500);
	}
	else if ((set == 2) & (currentscreenset1 == 0)){
    118e:	21 e0       	ldi	r18, 0x01	; 1
    1190:	42 30       	cpi	r20, 0x02	; 2
    1192:	51 05       	cpc	r21, r1
    1194:	09 f0       	breq	.+2      	; 0x1198 <_Z7displayv+0x8a>
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <currentscreenset1>
    119c:	90 91 58 08 	lds	r25, 0x0858	; 0x800858 <currentscreenset1+0x1>
    11a0:	31 e0       	ldi	r19, 0x01	; 1
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <_Z7displayv+0x9a>
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	33 23       	and	r19, r19
    11aa:	09 f4       	brne	.+2      	; 0x11ae <_Z7displayv+0xa0>
    11ac:	77 c0       	rjmp	.+238    	; 0x129c <_Z7displayv+0x18e>
    11ae:	22 23       	and	r18, r18
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <_Z7displayv+0xa6>
    11b2:	74 c0       	rjmp	.+232    	; 0x129c <_Z7displayv+0x18e>
		char* txtHr;
		char* txtMin;
		lcd.LCD_Clear();
    11b4:	8a e6       	ldi	r24, 0x6A	; 106
    11b6:	98 e0       	ldi	r25, 0x08	; 8
    11b8:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
		int* alarmTime = alarmclock.setNewAlarm();
    11bc:	87 e6       	ldi	r24, 0x67	; 103
    11be:	98 e0       	ldi	r25, 0x08	; 8
    11c0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_ZN10AlarmClock11setNewAlarmEv>
    11c4:	ec 01       	movw	r28, r24
		allAlarms[alarmCount][0] = alarmTime[0];
    11c6:	e0 91 29 08 	lds	r30, 0x0829	; 0x800829 <alarmCount>
    11ca:	f0 91 2a 08 	lds	r31, 0x082A	; 0x80082a <alarmCount+0x1>
    11ce:	88 81       	ld	r24, Y
    11d0:	99 81       	ldd	r25, Y+1	; 0x01
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	ee 0f       	add	r30, r30
    11d8:	ff 1f       	adc	r31, r31
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	e5 5d       	subi	r30, 0xD5	; 213
    11e0:	f7 4f       	sbci	r31, 0xF7	; 247
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
		allAlarms[alarmCount][1] = alarmTime[1];
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ea:	93 83       	std	Z+3, r25	; 0x03
    11ec:	82 83       	std	Z+2, r24	; 0x02
		allAlarms[alarmCount][2] = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	95 83       	std	Z+5, r25	; 0x05
    11f4:	84 83       	std	Z+4, r24	; 0x04
		allAlarms[alarmCount][3] = 1;
    11f6:	97 83       	std	Z+7, r25	; 0x07
    11f8:	86 83       	std	Z+6, r24	; 0x06

		txtHr = alarmclock.int_to_char(alarmTime[0]);
    11fa:	68 81       	ld	r22, Y
    11fc:	79 81       	ldd	r23, Y+1	; 0x01
    11fe:	87 e6       	ldi	r24, 0x67	; 103
    1200:	98 e0       	ldi	r25, 0x08	; 8
    1202:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
    1206:	dc 01       	movw	r26, r24
		allAlarmsMenu[alarmCount][0][7] = txtHr[0]; //optional
    1208:	e0 91 29 08 	lds	r30, 0x0829	; 0x800829 <alarmCount>
    120c:	f0 91 2a 08 	lds	r31, 0x082A	; 0x80082a <alarmCount+0x1>
    1210:	2c 91       	ld	r18, X
    1212:	af 01       	movw	r20, r30
    1214:	44 0f       	add	r20, r20
    1216:	55 1f       	adc	r21, r21
    1218:	42 95       	swap	r20
    121a:	52 95       	swap	r21
    121c:	50 7f       	andi	r21, 0xF0	; 240
    121e:	54 27       	eor	r21, r20
    1220:	40 7f       	andi	r20, 0xF0	; 240
    1222:	54 27       	eor	r21, r20
    1224:	ca 01       	movw	r24, r20
    1226:	80 5b       	subi	r24, 0xB0	; 176
    1228:	9d 4f       	sbci	r25, 0xFD	; 253
    122a:	fc 01       	movw	r30, r24
    122c:	27 83       	std	Z+7, r18	; 0x07
		allAlarmsMenu[alarmCount][0][8] = txtHr[1]; //
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	2c 91       	ld	r18, X
    1232:	11 97       	sbiw	r26, 0x01	; 1
    1234:	20 87       	std	Z+8, r18	; 0x08

		alarmChangeList[alarmCount][0][0] = txtHr[0]; 
    1236:	8c 91       	ld	r24, X
    1238:	fa 01       	movw	r30, r20
    123a:	e0 55       	subi	r30, 0x50	; 80
    123c:	fe 4f       	sbci	r31, 0xFE	; 254
    123e:	80 83       	st	Z, r24
		alarmChangeList[alarmCount][0][1] = txtHr[1];
    1240:	11 96       	adiw	r26, 0x01	; 1
    1242:	8c 91       	ld	r24, X
    1244:	81 83       	std	Z+1, r24	; 0x01

		txtMin = alarmclock.int_to_char(alarmTime[1]);
    1246:	6a 81       	ldd	r22, Y+2	; 0x02
    1248:	7b 81       	ldd	r23, Y+3	; 0x03
    124a:	87 e6       	ldi	r24, 0x67	; 103
    124c:	98 e0       	ldi	r25, 0x08	; 8
    124e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
    1252:	dc 01       	movw	r26, r24
		allAlarmsMenu[alarmCount][0][10] = txtMin[0]; // optional
    1254:	20 91 29 08 	lds	r18, 0x0829	; 0x800829 <alarmCount>
    1258:	30 91 2a 08 	lds	r19, 0x082A	; 0x80082a <alarmCount+0x1>
    125c:	8c 91       	ld	r24, X
    125e:	f9 01       	movw	r30, r18
    1260:	ee 0f       	add	r30, r30
    1262:	ff 1f       	adc	r31, r31
    1264:	e2 95       	swap	r30
    1266:	f2 95       	swap	r31
    1268:	f0 7f       	andi	r31, 0xF0	; 240
    126a:	fe 27       	eor	r31, r30
    126c:	e0 7f       	andi	r30, 0xF0	; 240
    126e:	fe 27       	eor	r31, r30
    1270:	ef 01       	movw	r28, r30
    1272:	c0 5b       	subi	r28, 0xB0	; 176
    1274:	dd 4f       	sbci	r29, 0xFD	; 253
    1276:	8a 87       	std	Y+10, r24	; 0x0a
		allAlarmsMenu[alarmCount][0][11] = txtMin[1]; //
    1278:	11 96       	adiw	r26, 0x01	; 1
    127a:	8c 91       	ld	r24, X
    127c:	11 97       	sbiw	r26, 0x01	; 1
    127e:	8b 87       	std	Y+11, r24	; 0x0b

		alarmChangeList[alarmCount][0][3] = txtMin[0];
    1280:	8c 91       	ld	r24, X
    1282:	e0 55       	subi	r30, 0x50	; 80
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	83 83       	std	Z+3, r24	; 0x03
		alarmChangeList[alarmCount][0][4] = txtMin[1];
    1288:	11 96       	adiw	r26, 0x01	; 1
    128a:	8c 91       	ld	r24, X
    128c:	84 83       	std	Z+4, r24	; 0x04

		alarmCount += 1;
    128e:	2f 5f       	subi	r18, 0xFF	; 255
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	30 93 2a 08 	sts	0x082A, r19	; 0x80082a <alarmCount+0x1>
    1296:	20 93 29 08 	sts	0x0829, r18	; 0x800829 <alarmCount>
    129a:	0f c1       	rjmp	.+542    	; 0x14ba <_Z7displayv+0x3ac>
	}
	else if ((set == 2) & (currentscreenset1 == 1)){
    129c:	31 e0       	ldi	r19, 0x01	; 1
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <_Z7displayv+0x198>
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	22 23       	and	r18, r18
    12a8:	c9 f1       	breq	.+114    	; 0x131c <_Z7displayv+0x20e>
    12aa:	33 23       	and	r19, r19
    12ac:	b9 f1       	breq	.+110    	; 0x131c <_Z7displayv+0x20e>
		//All alarms menu
		lcd.LCD_Clear();
    12ae:	8a e6       	ldi	r24, 0x6A	; 106
    12b0:	98 e0       	ldi	r25, 0x08	; 8
    12b2:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(allAlarmsMenu[currentscreenset21][0]);  
    12b6:	60 91 55 08 	lds	r22, 0x0855	; 0x800855 <currentscreenset21>
    12ba:	70 91 56 08 	lds	r23, 0x0856	; 0x800856 <currentscreenset21+0x1>
    12be:	66 0f       	add	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	62 95       	swap	r22
    12c4:	72 95       	swap	r23
    12c6:	70 7f       	andi	r23, 0xF0	; 240
    12c8:	76 27       	eor	r23, r22
    12ca:	60 7f       	andi	r22, 0xF0	; 240
    12cc:	76 27       	eor	r23, r22
    12ce:	60 5b       	subi	r22, 0xB0	; 176
    12d0:	7d 4f       	sbci	r23, 0xFD	; 253
    12d2:	8a e6       	ldi	r24, 0x6A	; 106
    12d4:	98 e0       	ldi	r25, 0x08	; 8
    12d6:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        
    12da:	60 ec       	ldi	r22, 0xC0	; 192
    12dc:	8a e6       	ldi	r24, 0x6A	; 106
    12de:	98 e0       	ldi	r25, 0x08	; 8
    12e0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(allAlarmsMenu[currentscreenset21][1]);
    12e4:	60 91 55 08 	lds	r22, 0x0855	; 0x800855 <currentscreenset21>
    12e8:	70 91 56 08 	lds	r23, 0x0856	; 0x800856 <currentscreenset21+0x1>
    12ec:	66 0f       	add	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	62 95       	swap	r22
    12f2:	72 95       	swap	r23
    12f4:	70 7f       	andi	r23, 0xF0	; 240
    12f6:	76 27       	eor	r23, r22
    12f8:	60 7f       	andi	r22, 0xF0	; 240
    12fa:	76 27       	eor	r23, r22
    12fc:	60 5a       	subi	r22, 0xA0	; 160
    12fe:	7d 4f       	sbci	r23, 0xFD	; 253
    1300:	8a e6       	ldi	r24, 0x6A	; 106
    1302:	98 e0       	ldi	r25, 0x08	; 8
    1304:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN11LCD_Display10LCD_StringEPc>
    1308:	ff ef       	ldi	r31, 0xFF	; 255
    130a:	24 e3       	ldi	r18, 0x34	; 52
    130c:	8c e0       	ldi	r24, 0x0C	; 12
    130e:	f1 50       	subi	r31, 0x01	; 1
    1310:	20 40       	sbci	r18, 0x00	; 0
    1312:	80 40       	sbci	r24, 0x00	; 0
    1314:	e1 f7       	brne	.-8      	; 0x130e <_Z7displayv+0x200>
    1316:	00 c0       	rjmp	.+0      	; 0x1318 <_Z7displayv+0x20a>
    1318:	00 00       	nop
    131a:	cf c0       	rjmp	.+414    	; 0x14ba <_Z7displayv+0x3ac>

		_delay_ms(500);
	}
	else if ((set==3) & (currentscreenset1==1) ){//& (currentscreenset21 == 0 or 1 or 2 or 3 or 4)){
    131c:	61 e0       	ldi	r22, 0x01	; 1
    131e:	43 30       	cpi	r20, 0x03	; 3
    1320:	51 05       	cpc	r21, r1
    1322:	09 f0       	breq	.+2      	; 0x1326 <_Z7displayv+0x218>
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	66 23       	and	r22, r22
    1328:	b1 f0       	breq	.+44     	; 0x1356 <_Z7displayv+0x248>
    132a:	33 23       	and	r19, r19
    132c:	a1 f0       	breq	.+40     	; 0x1356 <_Z7displayv+0x248>
		lcd.LCD_Clear();
    132e:	8a e6       	ldi	r24, 0x6A	; 106
    1330:	98 e0       	ldi	r25, 0x08	; 8
    1332:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
		changeAlarm(currentscreenset21);
    1336:	80 91 55 08 	lds	r24, 0x0855	; 0x800855 <currentscreenset21>
    133a:	90 91 56 08 	lds	r25, 0x0856	; 0x800856 <currentscreenset21+0x1>
    133e:	0e 94 8a 06 	call	0xd14	; 0xd14 <_Z11changeAlarmi>
    1342:	9f ef       	ldi	r25, 0xFF	; 255
    1344:	e4 e3       	ldi	r30, 0x34	; 52
    1346:	fc e0       	ldi	r31, 0x0C	; 12
    1348:	91 50       	subi	r25, 0x01	; 1
    134a:	e0 40       	sbci	r30, 0x00	; 0
    134c:	f0 40       	sbci	r31, 0x00	; 0
    134e:	e1 f7       	brne	.-8      	; 0x1348 <_Z7displayv+0x23a>
    1350:	00 c0       	rjmp	.+0      	; 0x1352 <_Z7displayv+0x244>
    1352:	00 00       	nop
    1354:	b2 c0       	rjmp	.+356    	; 0x14ba <_Z7displayv+0x3ac>
		_delay_ms(500);
	}
	else if ((set == 2) & (currentscreenset1 == 2)){
    1356:	31 e0       	ldi	r19, 0x01	; 1
    1358:	82 30       	cpi	r24, 0x02	; 2
    135a:	91 05       	cpc	r25, r1
    135c:	09 f0       	breq	.+2      	; 0x1360 <_Z7displayv+0x252>
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	33 23       	and	r19, r19
    1362:	81 f0       	breq	.+32     	; 0x1384 <_Z7displayv+0x276>
    1364:	22 23       	and	r18, r18
    1366:	71 f0       	breq	.+28     	; 0x1384 <_Z7displayv+0x276>
		alarmclock.setTimetoRTC();
    1368:	87 e6       	ldi	r24, 0x67	; 103
    136a:	98 e0       	ldi	r25, 0x08	; 8
    136c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN10AlarmClock12setTimetoRTCEv>
    1370:	2f ef       	ldi	r18, 0xFF	; 255
    1372:	84 e3       	ldi	r24, 0x34	; 52
    1374:	9c e0       	ldi	r25, 0x0C	; 12
    1376:	21 50       	subi	r18, 0x01	; 1
    1378:	80 40       	sbci	r24, 0x00	; 0
    137a:	90 40       	sbci	r25, 0x00	; 0
    137c:	e1 f7       	brne	.-8      	; 0x1376 <_Z7displayv+0x268>
    137e:	00 c0       	rjmp	.+0      	; 0x1380 <_Z7displayv+0x272>
    1380:	00 00       	nop
    1382:	9b c0       	rjmp	.+310    	; 0x14ba <_Z7displayv+0x3ac>
		_delay_ms(500);
	}
	else if ((set == 2) & (currentscreenset1 == 3)){
    1384:	31 e0       	ldi	r19, 0x01	; 1
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	91 05       	cpc	r25, r1
    138a:	09 f0       	breq	.+2      	; 0x138e <_Z7displayv+0x280>
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	33 23       	and	r19, r19
    1390:	09 f4       	brne	.+2      	; 0x1394 <_Z7displayv+0x286>
    1392:	6d c0       	rjmp	.+218    	; 0x146e <_Z7displayv+0x360>
    1394:	22 23       	and	r18, r18
    1396:	09 f4       	brne	.+2      	; 0x139a <_Z7displayv+0x28c>
    1398:	6a c0       	rjmp	.+212    	; 0x146e <_Z7displayv+0x360>
		lcd.LCD_Clear();
    139a:	8a e6       	ldi	r24, 0x6A	; 106
    139c:	98 e0       	ldi	r25, 0x08	; 8
    139e:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(alarmtone[currentscreenset23][0]);                //Write string on 1st line of LCD
    13a2:	60 91 53 08 	lds	r22, 0x0853	; 0x800853 <currentscreenset23>
    13a6:	70 91 54 08 	lds	r23, 0x0854	; 0x800854 <currentscreenset23+0x1>
    13aa:	66 0f       	add	r22, r22
    13ac:	77 1f       	adc	r23, r23
    13ae:	62 95       	swap	r22
    13b0:	72 95       	swap	r23
    13b2:	70 7f       	andi	r23, 0xF0	; 240
    13b4:	76 27       	eor	r23, r22
    13b6:	60 7f       	andi	r22, 0xF0	; 240
    13b8:	76 27       	eor	r23, r22
    13ba:	60 5f       	subi	r22, 0xF0	; 240
    13bc:	7e 4f       	sbci	r23, 0xFE	; 254
    13be:	8a e6       	ldi	r24, 0x6A	; 106
    13c0:	98 e0       	ldi	r25, 0x08	; 8
    13c2:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        //Go to 2nd line
    13c6:	60 ec       	ldi	r22, 0xC0	; 192
    13c8:	8a e6       	ldi	r24, 0x6A	; 106
    13ca:	98 e0       	ldi	r25, 0x08	; 8
    13cc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(alarmtone[currentscreenset23][1]);
    13d0:	60 91 53 08 	lds	r22, 0x0853	; 0x800853 <currentscreenset23>
    13d4:	70 91 54 08 	lds	r23, 0x0854	; 0x800854 <currentscreenset23+0x1>
    13d8:	66 0f       	add	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	62 95       	swap	r22
    13de:	72 95       	swap	r23
    13e0:	70 7f       	andi	r23, 0xF0	; 240
    13e2:	76 27       	eor	r23, r22
    13e4:	60 7f       	andi	r22, 0xF0	; 240
    13e6:	76 27       	eor	r23, r22
    13e8:	60 5e       	subi	r22, 0xE0	; 224
    13ea:	7e 4f       	sbci	r23, 0xFE	; 254
    13ec:	8a e6       	ldi	r24, 0x6A	; 106
    13ee:	98 e0       	ldi	r25, 0x08	; 8
    13f0:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN11LCD_Display10LCD_StringEPc>
    13f4:	ef ef       	ldi	r30, 0xFF	; 255
    13f6:	f4 e3       	ldi	r31, 0x34	; 52
    13f8:	2c e0       	ldi	r18, 0x0C	; 12
    13fa:	e1 50       	subi	r30, 0x01	; 1
    13fc:	f0 40       	sbci	r31, 0x00	; 0
    13fe:	20 40       	sbci	r18, 0x00	; 0
    1400:	e1 f7       	brne	.-8      	; 0x13fa <_Z7displayv+0x2ec>
    1402:	00 c0       	rjmp	.+0      	; 0x1404 <_Z7displayv+0x2f6>
    1404:	00 00       	nop
		_delay_ms(500);
		if (currentscreenset23==0){
    1406:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <currentscreenset23>
    140a:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <currentscreenset23+0x1>
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	39 f4       	brne	.+14     	; 0x1420 <_Z7displayv+0x312>
			music.tone(0);
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	8b e5       	ldi	r24, 0x5B	; 91
    1418:	98 e0       	ldi	r25, 0x08	; 8
    141a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN15music_notations4toneEi>
    141e:	4d c0       	rjmp	.+154    	; 0x14ba <_Z7displayv+0x3ac>
		}
		else if (currentscreenset23==1){
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	91 05       	cpc	r25, r1
    1424:	39 f4       	brne	.+14     	; 0x1434 <_Z7displayv+0x326>
			music.tone(1);
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	8b e5       	ldi	r24, 0x5B	; 91
    142c:	98 e0       	ldi	r25, 0x08	; 8
    142e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN15music_notations4toneEi>
    1432:	43 c0       	rjmp	.+134    	; 0x14ba <_Z7displayv+0x3ac>
		}
		else if (currentscreenset23==2){
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	91 05       	cpc	r25, r1
    1438:	39 f4       	brne	.+14     	; 0x1448 <_Z7displayv+0x33a>
			music.tone(2);
    143a:	62 e0       	ldi	r22, 0x02	; 2
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	8b e5       	ldi	r24, 0x5B	; 91
    1440:	98 e0       	ldi	r25, 0x08	; 8
    1442:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN15music_notations4toneEi>
    1446:	39 c0       	rjmp	.+114    	; 0x14ba <_Z7displayv+0x3ac>
		}
		else if (currentscreenset23==3){
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	91 05       	cpc	r25, r1
    144c:	39 f4       	brne	.+14     	; 0x145c <_Z7displayv+0x34e>
			music.tone(3);
    144e:	63 e0       	ldi	r22, 0x03	; 3
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	8b e5       	ldi	r24, 0x5B	; 91
    1454:	98 e0       	ldi	r25, 0x08	; 8
    1456:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN15music_notations4toneEi>
    145a:	2f c0       	rjmp	.+94     	; 0x14ba <_Z7displayv+0x3ac>
		}
		else if (currentscreenset23==4){
    145c:	04 97       	sbiw	r24, 0x04	; 4
    145e:	69 f5       	brne	.+90     	; 0x14ba <_Z7displayv+0x3ac>
			music.tone(4);
    1460:	64 e0       	ldi	r22, 0x04	; 4
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	8b e5       	ldi	r24, 0x5B	; 91
    1466:	98 e0       	ldi	r25, 0x08	; 8
    1468:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN15music_notations4toneEi>
    146c:	26 c0       	rjmp	.+76     	; 0x14ba <_Z7displayv+0x3ac>
		}
	}
	else if ((set == 2) & (currentscreenset1 == 4)){
    146e:	31 e0       	ldi	r19, 0x01	; 1
    1470:	04 97       	sbiw	r24, 0x04	; 4
    1472:	09 f0       	breq	.+2      	; 0x1476 <_Z7displayv+0x368>
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	33 23       	and	r19, r19
    1478:	01 f1       	breq	.+64     	; 0x14ba <_Z7displayv+0x3ac>
    147a:	22 23       	and	r18, r18
    147c:	f1 f0       	breq	.+60     	; 0x14ba <_Z7displayv+0x3ac>
		lcd.LCD_Clear();
    147e:	8a e6       	ldi	r24, 0x6A	; 106
    1480:	98 e0       	ldi	r25, 0x08	; 8
    1482:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(reset[0]);                //Write string on 1st line of LCD
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	71 e0       	ldi	r23, 0x01	; 1
    148a:	8a e6       	ldi	r24, 0x6A	; 106
    148c:	98 e0       	ldi	r25, 0x08	; 8
    148e:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);              //Go to 2nd line
    1492:	60 ec       	ldi	r22, 0xC0	; 192
    1494:	8a e6       	ldi	r24, 0x6A	; 106
    1496:	98 e0       	ldi	r25, 0x08	; 8
    1498:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(reset[0]);
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	71 e0       	ldi	r23, 0x01	; 1
    14a0:	8a e6       	ldi	r24, 0x6A	; 106
    14a2:	98 e0       	ldi	r25, 0x08	; 8
    14a4:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN11LCD_Display10LCD_StringEPc>
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	94 e3       	ldi	r25, 0x34	; 52
    14ac:	ec e0       	ldi	r30, 0x0C	; 12
    14ae:	81 50       	subi	r24, 0x01	; 1
    14b0:	90 40       	sbci	r25, 0x00	; 0
    14b2:	e0 40       	sbci	r30, 0x00	; 0
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <_Z7displayv+0x3a0>
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <_Z7displayv+0x3aa>
    14b8:	00 00       	nop
		_delay_ms(500);
	}
}
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	08 95       	ret

000014c0 <_Z5upbtnv>:

void upbtn(){
	if (PINC &(1<<Up)){
    14c0:	30 9b       	sbis	0x06, 0	; 6
    14c2:	8a c0       	rjmp	.+276    	; 0x15d8 <_Z5upbtnv+0x118>
		if ((set == 1) & (currentscreenset1==0)){
    14c4:	40 91 59 08 	lds	r20, 0x0859	; 0x800859 <set>
    14c8:	50 91 5a 08 	lds	r21, 0x085A	; 0x80085a <set+0x1>
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	41 30       	cpi	r20, 0x01	; 1
    14d0:	51 05       	cpc	r21, r1
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <_Z5upbtnv+0x16>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <currentscreenset1>
    14da:	90 91 58 08 	lds	r25, 0x0858	; 0x800858 <currentscreenset1+0x1>
    14de:	31 e0       	ldi	r19, 0x01	; 1
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <_Z5upbtnv+0x26>
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	33 23       	and	r19, r19
    14e8:	59 f0       	breq	.+22     	; 0x1500 <_Z5upbtnv+0x40>
    14ea:	22 23       	and	r18, r18
    14ec:	49 f0       	breq	.+18     	; 0x1500 <_Z5upbtnv+0x40>
			currentscreenset1=numofscreens1-1;
    14ee:	84 e0       	ldi	r24, 0x04	; 4
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	90 93 58 08 	sts	0x0858, r25	; 0x800858 <currentscreenset1+0x1>
    14f6:	80 93 57 08 	sts	0x0857, r24	; 0x800857 <currentscreenset1>
			display();
    14fa:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    14fe:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 0)){
    1500:	31 e0       	ldi	r19, 0x01	; 1
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	09 f4       	brne	.+2      	; 0x1508 <_Z5upbtnv+0x48>
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	33 23       	and	r19, r19
    150a:	51 f0       	breq	.+20     	; 0x1520 <_Z5upbtnv+0x60>
    150c:	22 23       	and	r18, r18
    150e:	41 f0       	breq	.+16     	; 0x1520 <_Z5upbtnv+0x60>
			currentscreenset1 -= 1;
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	90 93 58 08 	sts	0x0858, r25	; 0x800858 <currentscreenset1+0x1>
    1516:	80 93 57 08 	sts	0x0857, r24	; 0x800857 <currentscreenset1>
			display();
    151a:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    151e:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 == 0)){
    1520:	31 e0       	ldi	r19, 0x01	; 1
    1522:	42 30       	cpi	r20, 0x02	; 2
    1524:	51 05       	cpc	r21, r1
    1526:	09 f0       	breq	.+2      	; 0x152a <_Z5upbtnv+0x6a>
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	21 e0       	ldi	r18, 0x01	; 1
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	91 05       	cpc	r25, r1
    1530:	09 f0       	breq	.+2      	; 0x1534 <_Z5upbtnv+0x74>
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	23 23       	and	r18, r19
    1536:	40 91 55 08 	lds	r20, 0x0855	; 0x800855 <currentscreenset21>
    153a:	50 91 56 08 	lds	r21, 0x0856	; 0x800856 <currentscreenset21+0x1>
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	41 15       	cp	r20, r1
    1542:	51 05       	cpc	r21, r1
    1544:	09 f0       	breq	.+2      	; 0x1548 <_Z5upbtnv+0x88>
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	22 23       	and	r18, r18
    154a:	59 f0       	breq	.+22     	; 0x1562 <_Z5upbtnv+0xa2>
    154c:	66 23       	and	r22, r22
    154e:	49 f0       	breq	.+18     	; 0x1562 <_Z5upbtnv+0xa2>
			currentscreenset21=numofscreens21-1;
    1550:	84 e0       	ldi	r24, 0x04	; 4
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	90 93 56 08 	sts	0x0856, r25	; 0x800856 <currentscreenset21+0x1>
    1558:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <currentscreenset21>
			display();
    155c:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    1560:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 != 0)){
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	41 15       	cp	r20, r1
    1566:	51 05       	cpc	r21, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <_Z5upbtnv+0xac>
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	22 23       	and	r18, r18
    156e:	59 f0       	breq	.+22     	; 0x1586 <_Z5upbtnv+0xc6>
    1570:	66 23       	and	r22, r22
    1572:	49 f0       	breq	.+18     	; 0x1586 <_Z5upbtnv+0xc6>
			currentscreenset21 -= 1;
    1574:	41 50       	subi	r20, 0x01	; 1
    1576:	51 09       	sbc	r21, r1
    1578:	50 93 56 08 	sts	0x0856, r21	; 0x800856 <currentscreenset21+0x1>
    157c:	40 93 55 08 	sts	0x0855, r20	; 0x800855 <currentscreenset21>
			display();
    1580:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    1584:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 == 0)){
    1586:	21 e0       	ldi	r18, 0x01	; 1
    1588:	03 97       	sbiw	r24, 0x03	; 3
    158a:	09 f0       	breq	.+2      	; 0x158e <_Z5upbtnv+0xce>
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	32 23       	and	r19, r18
    1590:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <currentscreenset23>
    1594:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <currentscreenset23+0x1>
    1598:	21 e0       	ldi	r18, 0x01	; 1
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	09 f0       	breq	.+2      	; 0x15a0 <_Z5upbtnv+0xe0>
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	33 23       	and	r19, r19
    15a2:	59 f0       	breq	.+22     	; 0x15ba <_Z5upbtnv+0xfa>
    15a4:	22 23       	and	r18, r18
    15a6:	49 f0       	breq	.+18     	; 0x15ba <_Z5upbtnv+0xfa>
			currentscreenset23=numofscreens21-1;
    15a8:	84 e0       	ldi	r24, 0x04	; 4
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <currentscreenset23+0x1>
    15b0:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <currentscreenset23>
			display();
    15b4:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    15b8:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 != 0)){
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	09 f4       	brne	.+2      	; 0x15c2 <_Z5upbtnv+0x102>
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	33 23       	and	r19, r19
    15c4:	49 f0       	breq	.+18     	; 0x15d8 <_Z5upbtnv+0x118>
    15c6:	22 23       	and	r18, r18
    15c8:	39 f0       	breq	.+14     	; 0x15d8 <_Z5upbtnv+0x118>
			currentscreenset23 -= 1;
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <currentscreenset23+0x1>
    15d0:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <currentscreenset23>
			display();
    15d4:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    15d8:	08 95       	ret

000015da <_Z6dwnbtnv>:
		}
	}
}

void dwnbtn(){
	if (PINC &(1<<Down)){
    15da:	31 9b       	sbis	0x06, 1	; 6
    15dc:	8e c0       	rjmp	.+284    	; 0x16fa <_Z6dwnbtnv+0x120>
		if ((set == 1) & (currentscreenset1==4)){
    15de:	40 91 59 08 	lds	r20, 0x0859	; 0x800859 <set>
    15e2:	50 91 5a 08 	lds	r21, 0x085A	; 0x80085a <set+0x1>
    15e6:	21 e0       	ldi	r18, 0x01	; 1
    15e8:	41 30       	cpi	r20, 0x01	; 1
    15ea:	51 05       	cpc	r21, r1
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <_Z6dwnbtnv+0x16>
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <currentscreenset1>
    15f4:	90 91 58 08 	lds	r25, 0x0858	; 0x800858 <currentscreenset1+0x1>
    15f8:	31 e0       	ldi	r19, 0x01	; 1
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	91 05       	cpc	r25, r1
    15fe:	09 f0       	breq	.+2      	; 0x1602 <_Z6dwnbtnv+0x28>
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	33 23       	and	r19, r19
    1604:	49 f0       	breq	.+18     	; 0x1618 <_Z6dwnbtnv+0x3e>
    1606:	22 23       	and	r18, r18
    1608:	39 f0       	breq	.+14     	; 0x1618 <_Z6dwnbtnv+0x3e>
			currentscreenset1=0;
    160a:	10 92 58 08 	sts	0x0858, r1	; 0x800858 <currentscreenset1+0x1>
    160e:	10 92 57 08 	sts	0x0857, r1	; 0x800857 <currentscreenset1>
			display();
    1612:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    1616:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 4)){
    1618:	31 e0       	ldi	r19, 0x01	; 1
    161a:	84 30       	cpi	r24, 0x04	; 4
    161c:	91 05       	cpc	r25, r1
    161e:	09 f4       	brne	.+2      	; 0x1622 <_Z6dwnbtnv+0x48>
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	33 23       	and	r19, r19
    1624:	a1 f0       	breq	.+40     	; 0x164e <_Z6dwnbtnv+0x74>
    1626:	22 23       	and	r18, r18
    1628:	91 f0       	breq	.+36     	; 0x164e <_Z6dwnbtnv+0x74>
    162a:	8f e1       	ldi	r24, 0x1F	; 31
    162c:	9e e4       	ldi	r25, 0x4E	; 78
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <_Z6dwnbtnv+0x54>
    1632:	00 c0       	rjmp	.+0      	; 0x1634 <_Z6dwnbtnv+0x5a>
    1634:	00 00       	nop
			_delay_ms(10);
			currentscreenset1 += 1;
    1636:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <currentscreenset1>
    163a:	90 91 58 08 	lds	r25, 0x0858	; 0x800858 <currentscreenset1+0x1>
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	90 93 58 08 	sts	0x0858, r25	; 0x800858 <currentscreenset1+0x1>
    1644:	80 93 57 08 	sts	0x0857, r24	; 0x800857 <currentscreenset1>
			display();
    1648:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    164c:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 == 4)){
    164e:	31 e0       	ldi	r19, 0x01	; 1
    1650:	42 30       	cpi	r20, 0x02	; 2
    1652:	51 05       	cpc	r21, r1
    1654:	09 f0       	breq	.+2      	; 0x1658 <_Z6dwnbtnv+0x7e>
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	21 e0       	ldi	r18, 0x01	; 1
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	09 f0       	breq	.+2      	; 0x1662 <_Z6dwnbtnv+0x88>
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	23 23       	and	r18, r19
    1664:	60 91 55 08 	lds	r22, 0x0855	; 0x800855 <currentscreenset21>
    1668:	70 91 56 08 	lds	r23, 0x0856	; 0x800856 <currentscreenset21+0x1>
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	64 30       	cpi	r22, 0x04	; 4
    1670:	71 05       	cpc	r23, r1
    1672:	09 f0       	breq	.+2      	; 0x1676 <_Z6dwnbtnv+0x9c>
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	22 23       	and	r18, r18
    1678:	49 f0       	breq	.+18     	; 0x168c <_Z6dwnbtnv+0xb2>
    167a:	44 23       	and	r20, r20
    167c:	39 f0       	breq	.+14     	; 0x168c <_Z6dwnbtnv+0xb2>
			currentscreenset21=0;
    167e:	10 92 56 08 	sts	0x0856, r1	; 0x800856 <currentscreenset21+0x1>
    1682:	10 92 55 08 	sts	0x0855, r1	; 0x800855 <currentscreenset21>
			display();
    1686:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    168a:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset23 != 4)){
    168c:	40 91 53 08 	lds	r20, 0x0853	; 0x800853 <currentscreenset23>
    1690:	50 91 54 08 	lds	r21, 0x0854	; 0x800854 <currentscreenset23+0x1>
    1694:	e1 e0       	ldi	r30, 0x01	; 1
    1696:	44 30       	cpi	r20, 0x04	; 4
    1698:	51 05       	cpc	r21, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <_Z6dwnbtnv+0xc4>
    169c:	e0 e0       	ldi	r30, 0x00	; 0
    169e:	22 23       	and	r18, r18
    16a0:	59 f0       	breq	.+22     	; 0x16b8 <_Z6dwnbtnv+0xde>
    16a2:	ee 23       	and	r30, r30
    16a4:	49 f0       	breq	.+18     	; 0x16b8 <_Z6dwnbtnv+0xde>
			currentscreenset21 += 1;
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	70 93 56 08 	sts	0x0856, r23	; 0x800856 <currentscreenset21+0x1>
    16ae:	60 93 55 08 	sts	0x0855, r22	; 0x800855 <currentscreenset21>
			display();
    16b2:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    16b6:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 == 4)){
    16b8:	21 e0       	ldi	r18, 0x01	; 1
    16ba:	03 97       	sbiw	r24, 0x03	; 3
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <_Z6dwnbtnv+0xe6>
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	32 23       	and	r19, r18
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	44 30       	cpi	r20, 0x04	; 4
    16c6:	51 05       	cpc	r21, r1
    16c8:	09 f0       	breq	.+2      	; 0x16cc <_Z6dwnbtnv+0xf2>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	33 23       	and	r19, r19
    16ce:	49 f0       	breq	.+18     	; 0x16e2 <_Z6dwnbtnv+0x108>
    16d0:	88 23       	and	r24, r24
    16d2:	39 f0       	breq	.+14     	; 0x16e2 <_Z6dwnbtnv+0x108>
			currentscreenset23 = 0;
    16d4:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <currentscreenset23+0x1>
    16d8:	10 92 53 08 	sts	0x0853, r1	; 0x800853 <currentscreenset23>
			display();
    16dc:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    16e0:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 != 4)){
    16e2:	ee 23       	and	r30, r30
    16e4:	51 f0       	breq	.+20     	; 0x16fa <_Z6dwnbtnv+0x120>
    16e6:	33 23       	and	r19, r19
    16e8:	41 f0       	breq	.+16     	; 0x16fa <_Z6dwnbtnv+0x120>
			currentscreenset23 += 1;
    16ea:	4f 5f       	subi	r20, 0xFF	; 255
    16ec:	5f 4f       	sbci	r21, 0xFF	; 255
    16ee:	50 93 54 08 	sts	0x0854, r21	; 0x800854 <currentscreenset23+0x1>
    16f2:	40 93 53 08 	sts	0x0853, r20	; 0x800853 <currentscreenset23>
			display();
    16f6:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    16fa:	08 95       	ret

000016fc <_Z5okbtnv>:
		}
	}
}

void okbtn(){
	if (PINC & (1<<Ok)){
    16fc:	32 9b       	sbis	0x06, 2	; 6
    16fe:	15 c0       	rjmp	.+42     	; 0x172a <_Z5okbtnv+0x2e>
		if (set==3){
    1700:	80 91 59 08 	lds	r24, 0x0859	; 0x800859 <set>
    1704:	90 91 5a 08 	lds	r25, 0x085A	; 0x80085a <set+0x1>
    1708:	83 30       	cpi	r24, 0x03	; 3
    170a:	91 05       	cpc	r25, r1
    170c:	39 f4       	brne	.+14     	; 0x171c <_Z5okbtnv+0x20>
			set = 0;
    170e:	10 92 5a 08 	sts	0x085A, r1	; 0x80085a <set+0x1>
    1712:	10 92 59 08 	sts	0x0859, r1	; 0x800859 <set>
		display();}
    1716:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    171a:	08 95       	ret
		else {
			set+= 1;
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	90 93 5a 08 	sts	0x085A, r25	; 0x80085a <set+0x1>
    1722:	80 93 59 08 	sts	0x0859, r24	; 0x800859 <set>
		display();}
    1726:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    172a:	08 95       	ret

0000172c <_Z7backbtnv>:
	}
}

void backbtn(){
	if (PINC &(1<<Back)){
    172c:	33 9b       	sbis	0x06, 3	; 6
    172e:	14 c0       	rjmp	.+40     	; 0x1758 <_Z7backbtnv+0x2c>
		if (set == 0){
    1730:	80 91 59 08 	lds	r24, 0x0859	; 0x800859 <set>
    1734:	90 91 5a 08 	lds	r25, 0x085A	; 0x80085a <set+0x1>
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	39 f4       	brne	.+14     	; 0x174a <_Z7backbtnv+0x1e>
			set = 0;
    173c:	10 92 5a 08 	sts	0x085A, r1	; 0x80085a <set+0x1>
    1740:	10 92 59 08 	sts	0x0859, r1	; 0x800859 <set>
			display();
    1744:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    1748:	08 95       	ret
		}
		else {
			set-= 1;
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	90 93 5a 08 	sts	0x085A, r25	; 0x80085a <set+0x1>
    1750:	80 93 59 08 	sts	0x0859, r24	; 0x800859 <set>
			display();
    1754:	0e 94 87 08 	call	0x110e	; 0x110e <_Z7displayv>
    1758:	08 95       	ret

0000175a <main>:
int alarmCount = 0;
bool stop = false;	


int main(void)
{
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	27 97       	sbiw	r28, 0x07	; 7
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0b10000000;
    176e:	80 e8       	ldi	r24, 0x80	; 128
    1770:	8a b9       	out	0x0a, r24	; 10
	ds1307::rtc_t rtc;

	// Setting time to the RTC
	rtc.seconds =  0x00; //
    1772:	19 82       	std	Y+1, r1	; 0x01
	rtc.minute =  0x00;
    1774:	1a 82       	std	Y+2, r1	; 0x02
	rtc.hour = 0x12;	//  20:17:00
    1776:	82 e1       	ldi	r24, 0x12	; 18
    1778:	8b 83       	std	Y+3, r24	; 0x03
	rtc.weekDay = 0x05;
    177a:	85 e0       	ldi	r24, 0x05	; 5
    177c:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x31;
    177e:	91 e3       	ldi	r25, 0x31	; 49
    1780:	9d 83       	std	Y+5, r25	; 0x05
	rtc.month = 0x05;
    1782:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21;	//27th May 2021
    1784:	81 e2       	ldi	r24, 0x21	; 33
    1786:	8f 83       	std	Y+7, r24	; 0x07
	
	DS1307.set_time(&rtc);
    1788:	be 01       	movw	r22, r28
    178a:	6f 5f       	subi	r22, 0xFF	; 255
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	80 e7       	ldi	r24, 0x70	; 112
    1790:	98 e0       	ldi	r25, 0x08	; 8
    1792:	0e 94 11 04 	call	0x822	; 0x822 <_ZN6ds13078set_timeEPNS_5rtc_tE>
	lcd.LCD_Initializer();	//initialize the display (PORTB)
    1796:	8a e6       	ldi	r24, 0x6A	; 106
    1798:	98 e0       	ldi	r25, 0x08	; 8
    179a:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN11LCD_Display15LCD_InitializerEv>

	while (1)
	{
		checkAlarm();
    179e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_Z10checkAlarmv>
		if (set==0){alarmclock.displayTime();}
    17a2:	80 91 59 08 	lds	r24, 0x0859	; 0x800859 <set>
    17a6:	90 91 5a 08 	lds	r25, 0x085A	; 0x80085a <set+0x1>
    17aa:	89 2b       	or	r24, r25
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <main+0x5c>
    17ae:	87 e6       	ldi	r24, 0x67	; 103
    17b0:	98 e0       	ldi	r25, 0x08	; 8
    17b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <_ZN10AlarmClock11displayTimeEv>
		okbtn();
    17b6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_Z5okbtnv>
		upbtn();
    17ba:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <_Z5upbtnv>
		dwnbtn();
    17be:	0e 94 ed 0a 	call	0x15da	; 0x15da <_Z6dwnbtnv>
		backbtn();
    17c2:	0e 94 96 0b 	call	0x172c	; 0x172c <_Z7backbtnv>
	rtc.year = 0x21;	//27th May 2021
	
	DS1307.set_time(&rtc);
	lcd.LCD_Initializer();	//initialize the display (PORTB)

	while (1)
    17c6:	eb cf       	rjmp	.-42     	; 0x179e <main+0x44>

000017c8 <_ZN15music_notations11playthenoteEff>:
    17c8:	4f 92       	push	r4
    17ca:	5f 92       	push	r5
    17cc:	6f 92       	push	r6
    17ce:	7f 92       	push	r7
    17d0:	8f 92       	push	r8
    17d2:	9f 92       	push	r9
    17d4:	af 92       	push	r10
    17d6:	bf 92       	push	r11
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <_ZN15music_notations11playthenoteEff+0x22>
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <_ZN15music_notations11playthenoteEff+0x24>
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	6a 01       	movw	r12, r20
    17f2:	7b 01       	movw	r14, r22
    17f4:	48 01       	movw	r8, r16
    17f6:	59 01       	movw	r10, r18
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	a9 01       	movw	r20, r18
    17fe:	c7 01       	movw	r24, r14
    1800:	b6 01       	movw	r22, r12
    1802:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__cmpsf2>
    1806:	88 23       	and	r24, r24
    1808:	09 f4       	brne	.+2      	; 0x180c <_ZN15music_notations11playthenoteEff+0x44>
    180a:	b0 c0       	rjmp	.+352    	; 0x196c <_ZN15music_notations11playthenoteEff+0x1a4>
    180c:	a7 01       	movw	r20, r14
    180e:	96 01       	movw	r18, r12
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	80 e8       	ldi	r24, 0x80	; 128
    1816:	9f e3       	ldi	r25, 0x3F	; 63
    1818:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__divsf3>
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a e7       	ldi	r20, 0x7A	; 122
    1822:	54 e4       	ldi	r21, 0x44	; 68
    1824:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3>
    1828:	6b 01       	movw	r12, r22
    182a:	7c 01       	movw	r14, r24
    182c:	9b 01       	movw	r18, r22
    182e:	ac 01       	movw	r20, r24
    1830:	c5 01       	movw	r24, r10
    1832:	b4 01       	movw	r22, r8
    1834:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__divsf3>
    1838:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__fixsfsi>
    183c:	2b 01       	movw	r4, r22
    183e:	3c 01       	movw	r6, r24
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	c7 01       	movw	r24, r14
    184a:	b6 01       	movw	r22, r12
    184c:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3>
    1850:	69 83       	std	Y+1, r22	; 0x01
    1852:	7a 83       	std	Y+2, r23	; 0x02
    1854:	8b 83       	std	Y+3, r24	; 0x03
    1856:	9c 83       	std	Y+4, r25	; 0x04
    1858:	8a b1       	in	r24, 0x0a	; 10
    185a:	80 68       	ori	r24, 0x80	; 128
    185c:	8a b9       	out	0x0a, r24	; 10
    185e:	81 2c       	mov	r8, r1
    1860:	91 2c       	mov	r9, r1
    1862:	54 01       	movw	r10, r8
    1864:	84 14       	cp	r8, r4
    1866:	95 04       	cpc	r9, r5
    1868:	a6 04       	cpc	r10, r6
    186a:	b7 04       	cpc	r11, r7
    186c:	0c f0       	brlt	.+2      	; 0x1870 <_ZN15music_notations11playthenoteEff+0xa8>
    186e:	b8 c0       	rjmp	.+368    	; 0x19e0 <_ZN15music_notations11playthenoteEff+0x218>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4a ef       	ldi	r20, 0xFA	; 250
    1876:	54 e4       	ldi	r21, 0x44	; 68
    1878:	69 81       	ldd	r22, Y+1	; 0x01
    187a:	7a 81       	ldd	r23, Y+2	; 0x02
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3>
    1884:	6b 01       	movw	r12, r22
    1886:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__cmpsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f1       	brlt	.+74     	; 0x18e2 <_ZN15music_notations11playthenoteEff+0x11a>
		__ticks = 1;
	else if (__tmp > 65535)
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	3f ef       	ldi	r19, 0xFF	; 255
    189c:	4f e7       	ldi	r20, 0x7F	; 127
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	c7 01       	movw	r24, r14
    18a2:	b6 01       	movw	r22, r12
    18a4:	0e 94 2b 10 	call	0x2056	; 0x2056 <__gesf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	b4 f4       	brge	.+44     	; 0x18d8 <_ZN15music_notations11playthenoteEff+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	69 81       	ldd	r22, Y+1	; 0x01
    18b6:	7a 81       	ldd	r23, Y+2	; 0x02
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3>
    18c0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
		while(__ticks)
    18c4:	61 15       	cp	r22, r1
    18c6:	71 05       	cpc	r23, r1
    18c8:	89 f0       	breq	.+34     	; 0x18ec <_ZN15music_notations11playthenoteEff+0x124>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    18ca:	88 ec       	ldi	r24, 0xC8	; 200
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <_ZN15music_notations11playthenoteEff+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d2:	61 50       	subi	r22, 0x01	; 1
    18d4:	71 09       	sbc	r23, r1
    18d6:	f6 cf       	rjmp	.-20     	; 0x18c4 <_ZN15music_notations11playthenoteEff+0xfc>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	c7 01       	movw	r24, r14
    18da:	b6 01       	movw	r22, r12
    18dc:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <_ZN15music_notations11playthenoteEff+0x11e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	cb 01       	movw	r24, r22
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <_ZN15music_notations11playthenoteEff+0x120>
    18ec:	8b b1       	in	r24, 0x0b	; 11
    18ee:	80 68       	ori	r24, 0x80	; 128
    18f0:	8b b9       	out	0x0b, r24	; 11
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	c7 01       	movw	r24, r14
    18fc:	b6 01       	movw	r22, r12
    18fe:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__cmpsf2>
    1902:	88 23       	and	r24, r24
    1904:	2c f1       	brlt	.+74     	; 0x1950 <_ZN15music_notations11playthenoteEff+0x188>
		__ticks = 1;
	else if (__tmp > 65535)
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	3f ef       	ldi	r19, 0xFF	; 255
    190a:	4f e7       	ldi	r20, 0x7F	; 127
    190c:	57 e4       	ldi	r21, 0x47	; 71
    190e:	c7 01       	movw	r24, r14
    1910:	b6 01       	movw	r22, r12
    1912:	0e 94 2b 10 	call	0x2056	; 0x2056 <__gesf2>
    1916:	18 16       	cp	r1, r24
    1918:	b4 f4       	brge	.+44     	; 0x1946 <_ZN15music_notations11playthenoteEff+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	69 81       	ldd	r22, Y+1	; 0x01
    1924:	7a 81       	ldd	r23, Y+2	; 0x02
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3>
    192e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
		while(__ticks)
    1932:	61 15       	cp	r22, r1
    1934:	71 05       	cpc	r23, r1
    1936:	89 f0       	breq	.+34     	; 0x195a <_ZN15music_notations11playthenoteEff+0x192>
    1938:	88 ec       	ldi	r24, 0xC8	; 200
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <_ZN15music_notations11playthenoteEff+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	61 50       	subi	r22, 0x01	; 1
    1942:	71 09       	sbc	r23, r1
    1944:	f6 cf       	rjmp	.-20     	; 0x1932 <_ZN15music_notations11playthenoteEff+0x16a>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	c7 01       	movw	r24, r14
    1948:	b6 01       	movw	r22, r12
    194a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <_ZN15music_notations11playthenoteEff+0x18c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	cb 01       	movw	r24, r22
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <_ZN15music_notations11playthenoteEff+0x18e>
    195a:	8b b1       	in	r24, 0x0b	; 11
    195c:	8f 77       	andi	r24, 0x7F	; 127
    195e:	8b b9       	out	0x0b, r24	; 11
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	88 1a       	sub	r8, r24
    1964:	98 0a       	sbc	r9, r24
    1966:	a8 0a       	sbc	r10, r24
    1968:	b8 0a       	sbc	r11, r24
    196a:	7c cf       	rjmp	.-264    	; 0x1864 <_ZN15music_notations11playthenoteEff+0x9c>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4a ef       	ldi	r20, 0xFA	; 250
    1972:	54 e4       	ldi	r21, 0x44	; 68
    1974:	c5 01       	movw	r24, r10
    1976:	b4 01       	movw	r22, r8
    1978:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3>
    197c:	6b 01       	movw	r12, r22
    197e:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e8       	ldi	r20, 0x80	; 128
    1986:	5f e3       	ldi	r21, 0x3F	; 63
    1988:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__cmpsf2>
    198c:	88 23       	and	r24, r24
    198e:	1c f1       	brlt	.+70     	; 0x19d6 <_ZN15music_notations11playthenoteEff+0x20e>
		__ticks = 1;
	else if (__tmp > 65535)
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	3f ef       	ldi	r19, 0xFF	; 255
    1994:	4f e7       	ldi	r20, 0x7F	; 127
    1996:	57 e4       	ldi	r21, 0x47	; 71
    1998:	c7 01       	movw	r24, r14
    199a:	b6 01       	movw	r22, r12
    199c:	0e 94 2b 10 	call	0x2056	; 0x2056 <__gesf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	a4 f4       	brge	.+40     	; 0x19cc <_ZN15music_notations11playthenoteEff+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	c5 01       	movw	r24, r10
    19ae:	b4 01       	movw	r22, r8
    19b0:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3>
    19b4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
		while(__ticks)
    19b8:	61 15       	cp	r22, r1
    19ba:	71 05       	cpc	r23, r1
    19bc:	89 f0       	breq	.+34     	; 0x19e0 <_ZN15music_notations11playthenoteEff+0x218>
    19be:	88 ec       	ldi	r24, 0xC8	; 200
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <_ZN15music_notations11playthenoteEff+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c6:	61 50       	subi	r22, 0x01	; 1
    19c8:	71 09       	sbc	r23, r1
    19ca:	f6 cf       	rjmp	.-20     	; 0x19b8 <_ZN15music_notations11playthenoteEff+0x1f0>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19cc:	c7 01       	movw	r24, r14
    19ce:	b6 01       	movw	r22, r12
    19d0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <_ZN15music_notations11playthenoteEff+0x212>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	cb 01       	movw	r24, r22
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <_ZN15music_notations11playthenoteEff+0x214>
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	bf 90       	pop	r11
    19fa:	af 90       	pop	r10
    19fc:	9f 90       	pop	r9
    19fe:	8f 90       	pop	r8
    1a00:	7f 90       	pop	r7
    1a02:	6f 90       	pop	r6
    1a04:	5f 90       	pop	r5
    1a06:	4f 90       	pop	r4
    1a08:	08 95       	ret

00001a0a <_ZN15music_notations13playthemelodyEPiS0_i>:
    1a0a:	2f 92       	push	r2
    1a0c:	3f 92       	push	r3
    1a0e:	4f 92       	push	r4
    1a10:	5f 92       	push	r5
    1a12:	6f 92       	push	r6
    1a14:	7f 92       	push	r7
    1a16:	8f 92       	push	r8
    1a18:	9f 92       	push	r9
    1a1a:	af 92       	push	r10
    1a1c:	bf 92       	push	r11
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	29 97       	sbiw	r28, 0x09	; 9
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	9f 83       	std	Y+7, r25	; 0x07
    1a40:	8e 83       	std	Y+6, r24	; 0x06
    1a42:	2b 01       	movw	r4, r22
    1a44:	1a 01       	movw	r2, r20
    1a46:	39 01       	movw	r6, r18
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	99 87       	std	Y+9, r25	; 0x09
    1a4e:	88 87       	std	Y+8, r24	; 0x08
    1a50:	e8 85       	ldd	r30, Y+8	; 0x08
    1a52:	f9 85       	ldd	r31, Y+9	; 0x09
    1a54:	e6 15       	cp	r30, r6
    1a56:	f7 05       	cpc	r31, r7
    1a58:	0c f0       	brlt	.+2      	; 0x1a5c <_ZN15music_notations13playthemelodyEPiS0_i+0x52>
    1a5a:	d5 c0       	rjmp	.+426    	; 0x1c06 <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
    1a5c:	7f 01       	movw	r14, r30
    1a5e:	ee 0c       	add	r14, r14
    1a60:	ff 1c       	adc	r15, r15
    1a62:	61 01       	movw	r12, r2
    1a64:	ce 0c       	add	r12, r14
    1a66:	df 1c       	adc	r13, r15
    1a68:	f6 01       	movw	r30, r12
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	07 2e       	mov	r0, r23
    1a70:	00 0c       	add	r0, r0
    1a72:	88 0b       	sbc	r24, r24
    1a74:	99 0b       	sbc	r25, r25
    1a76:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__floatsisf>
    1a7a:	4b 01       	movw	r8, r22
    1a7c:	5c 01       	movw	r10, r24
    1a7e:	f2 01       	movw	r30, r4
    1a80:	ee 0d       	add	r30, r14
    1a82:	ff 1d       	adc	r31, r15
    1a84:	60 81       	ld	r22, Z
    1a86:	71 81       	ldd	r23, Z+1	; 0x01
    1a88:	07 2e       	mov	r0, r23
    1a8a:	00 0c       	add	r0, r0
    1a8c:	88 0b       	sbc	r24, r24
    1a8e:	99 0b       	sbc	r25, r25
    1a90:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__floatsisf>
    1a94:	ab 01       	movw	r20, r22
    1a96:	bc 01       	movw	r22, r24
    1a98:	95 01       	movw	r18, r10
    1a9a:	84 01       	movw	r16, r8
    1a9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN15music_notations11playthenoteEff>
    1aa4:	f6 01       	movw	r30, r12
    1aa6:	60 81       	ld	r22, Z
    1aa8:	71 81       	ldd	r23, Z+1	; 0x01
    1aaa:	07 2e       	mov	r0, r23
    1aac:	00 0c       	add	r0, r0
    1aae:	88 0b       	sbc	r24, r24
    1ab0:	99 0b       	sbc	r25, r25
    1ab2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__floatsisf>
    1ab6:	6b 01       	movw	r12, r22
    1ab8:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1aba:	2b ea       	ldi	r18, 0xAB	; 171
    1abc:	3a ea       	ldi	r19, 0xAA	; 170
    1abe:	4a e2       	ldi	r20, 0x2A	; 42
    1ac0:	50 e4       	ldi	r21, 0x40	; 64
    1ac2:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3>
    1ac6:	4b 01       	movw	r8, r22
    1ac8:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1aca:	a7 01       	movw	r20, r14
    1acc:	96 01       	movw	r18, r12
    1ace:	c7 01       	movw	r24, r14
    1ad0:	b6 01       	movw	r22, r12
    1ad2:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__addsf3>
    1ad6:	69 83       	std	Y+1, r22	; 0x01
    1ad8:	7a 83       	std	Y+2, r23	; 0x02
    1ada:	8b 83       	std	Y+3, r24	; 0x03
    1adc:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	c5 01       	movw	r24, r10
    1ae8:	b4 01       	movw	r22, r8
    1aea:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__cmpsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	0c f4       	brge	.+2      	; 0x1af4 <_ZN15music_notations13playthemelodyEPiS0_i+0xea>
    1af2:	6a c0       	rjmp	.+212    	; 0x1bc8 <_ZN15music_notations13playthemelodyEPiS0_i+0x1be>
		__ticks = 1;
	else if (__tmp2 > 65535)
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	57 e4       	ldi	r21, 0x47	; 71
    1afc:	69 81       	ldd	r22, Y+1	; 0x01
    1afe:	7a 81       	ldd	r23, Y+2	; 0x02
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	0e 94 2b 10 	call	0x2056	; 0x2056 <__gesf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	0c f0       	brlt	.+2      	; 0x1b0e <_ZN15music_notations13playthemelodyEPiS0_i+0x104>
    1b0c:	43 c0       	rjmp	.+134    	; 0x1b94 <_ZN15music_notations13playthemelodyEPiS0_i+0x18a>
	{
		_delay_ms(__us / 1000.0);
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a e7       	ldi	r20, 0x7A	; 122
    1b14:	54 e4       	ldi	r21, 0x44	; 68
    1b16:	c7 01       	movw	r24, r14
    1b18:	b6 01       	movw	r22, r12
    1b1a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__divsf3>
    1b1e:	4b 01       	movw	r8, r22
    1b20:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4a ef       	ldi	r20, 0xFA	; 250
    1b28:	54 e4       	ldi	r21, 0x44	; 68
    1b2a:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3>
    1b2e:	6b 01       	movw	r12, r22
    1b30:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e8       	ldi	r20, 0x80	; 128
    1b38:	5f e3       	ldi	r21, 0x3F	; 63
    1b3a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__cmpsf2>
    1b3e:	88 23       	and	r24, r24
    1b40:	1c f1       	brlt	.+70     	; 0x1b88 <_ZN15music_notations13playthemelodyEPiS0_i+0x17e>
		__ticks = 1;
	else if (__tmp > 65535)
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	c7 01       	movw	r24, r14
    1b4c:	b6 01       	movw	r22, r12
    1b4e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__gesf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	a4 f4       	brge	.+40     	; 0x1b7e <_ZN15music_notations13playthemelodyEPiS0_i+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	c5 01       	movw	r24, r10
    1b60:	b4 01       	movw	r22, r8
    1b62:	0e 94 30 10 	call	0x2060	; 0x2060 <__mulsf3>
    1b66:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
		while(__ticks)
    1b6a:	61 15       	cp	r22, r1
    1b6c:	71 05       	cpc	r23, r1
    1b6e:	79 f1       	breq	.+94     	; 0x1bce <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
    1b70:	88 ec       	ldi	r24, 0xC8	; 200
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <_ZN15music_notations13playthemelodyEPiS0_i+0x16a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b78:	61 50       	subi	r22, 0x01	; 1
    1b7a:	71 09       	sbc	r23, r1
    1b7c:	f6 cf       	rjmp	.-20     	; 0x1b6a <_ZN15music_notations13playthemelodyEPiS0_i+0x160>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	c7 01       	movw	r24, r14
    1b80:	b6 01       	movw	r22, r12
    1b82:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <_ZN15music_notations13playthemelodyEPiS0_i+0x182>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1b88:	61 e0       	ldi	r22, 0x01	; 1
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <_ZN15music_notations13playthemelodyEPiS0_i+0x184>
    1b92:	1d c0       	rjmp	.+58     	; 0x1bce <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	53 e4       	ldi	r21, 0x43	; 67
    1b9c:	c5 01       	movw	r24, r10
    1b9e:	b4 01       	movw	r22, r8
    1ba0:	0e 94 2b 10 	call	0x2056	; 0x2056 <__gesf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	54 f4       	brge	.+20     	; 0x1bbc <_ZN15music_notations13playthemelodyEPiS0_i+0x1b2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1ba8:	69 81       	ldd	r22, Y+1	; 0x01
    1baa:	7a 81       	ldd	r23, Y+2	; 0x02
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ac>
    1bba:	0c c0       	rjmp	.+24     	; 0x1bd4 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ca>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bbc:	c5 01       	movw	r24, r10
    1bbe:	b4 01       	movw	r22, r8
    1bc0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
    1bc4:	6d 83       	std	Y+5, r22	; 0x05
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	9d 83       	std	Y+5, r25	; 0x05
    1bcc:	00 c0       	rjmp	.+0      	; 0x1bce <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	8a 95       	dec	r24
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c6>
    1bd4:	32 99       	sbic	0x06, 2	; 6
    1bd6:	08 c0       	rjmp	.+16     	; 0x1be8 <_ZN15music_notations13playthemelodyEPiS0_i+0x1de>
    1bd8:	30 99       	sbic	0x06, 0	; 6
    1bda:	08 c0       	rjmp	.+16     	; 0x1bec <_ZN15music_notations13playthemelodyEPiS0_i+0x1e2>
    1bdc:	31 99       	sbic	0x06, 1	; 6
    1bde:	08 c0       	rjmp	.+16     	; 0x1bf0 <_ZN15music_notations13playthemelodyEPiS0_i+0x1e6>
    1be0:	33 9b       	sbis	0x06, 3	; 6
    1be2:	08 c0       	rjmp	.+16     	; 0x1bf4 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ea>
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	07 c0       	rjmp	.+14     	; 0x1bf6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	05 c0       	rjmp	.+10     	; 0x1bf6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	01 c0       	rjmp	.+2      	; 0x1bf6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	81 11       	cpse	r24, r1
    1bf8:	06 c0       	rjmp	.+12     	; 0x1c06 <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
    1bfa:	88 85       	ldd	r24, Y+8	; 0x08
    1bfc:	99 85       	ldd	r25, Y+9	; 0x09
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	99 87       	std	Y+9, r25	; 0x09
    1c02:	88 87       	std	Y+8, r24	; 0x08
    1c04:	25 cf       	rjmp	.-438    	; 0x1a50 <_ZN15music_notations13playthemelodyEPiS0_i+0x46>
    1c06:	29 96       	adiw	r28, 0x09	; 9
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14
    1c1e:	df 90       	pop	r13
    1c20:	cf 90       	pop	r12
    1c22:	bf 90       	pop	r11
    1c24:	af 90       	pop	r10
    1c26:	9f 90       	pop	r9
    1c28:	8f 90       	pop	r8
    1c2a:	7f 90       	pop	r7
    1c2c:	6f 90       	pop	r6
    1c2e:	5f 90       	pop	r5
    1c30:	4f 90       	pop	r4
    1c32:	3f 90       	pop	r3
    1c34:	2f 90       	pop	r2
    1c36:	08 95       	ret

00001c38 <_ZN15music_notations4toneEi>:
    1c38:	61 15       	cp	r22, r1
    1c3a:	71 05       	cpc	r23, r1
    1c3c:	59 f4       	brne	.+22     	; 0x1c54 <_ZN15music_notations4toneEi+0x1c>
    1c3e:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <sizeofgot>
    1c42:	30 91 99 03 	lds	r19, 0x0399	; 0x800399 <sizeofgot+0x1>
    1c46:	42 e5       	ldi	r20, 0x52	; 82
    1c48:	57 e0       	ldi	r21, 0x07	; 7
    1c4a:	66 e7       	ldi	r22, 0x76	; 118
    1c4c:	77 e0       	ldi	r23, 0x07	; 7
    1c4e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN15music_notations13playthemelodyEPiS0_i>
    1c52:	08 95       	ret
    1c54:	61 30       	cpi	r22, 0x01	; 1
    1c56:	71 05       	cpc	r23, r1
    1c58:	59 f4       	brne	.+22     	; 0x1c70 <_ZN15music_notations4toneEi+0x38>
    1c5a:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <sizeofpirates>
    1c5e:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <sizeofpirates+0x1>
    1c62:	42 e2       	ldi	r20, 0x22	; 34
    1c64:	56 e0       	ldi	r21, 0x06	; 6
    1c66:	6a eb       	ldi	r22, 0xBA	; 186
    1c68:	76 e0       	ldi	r23, 0x06	; 6
    1c6a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN15music_notations13playthemelodyEPiS0_i>
    1c6e:	08 95       	ret
    1c70:	62 30       	cpi	r22, 0x02	; 2
    1c72:	71 05       	cpc	r23, r1
    1c74:	59 f4       	brne	.+22     	; 0x1c8c <_ZN15music_notations4toneEi+0x54>
    1c76:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <sizeofstarwars>
    1c7a:	30 91 95 03 	lds	r19, 0x0395	; 0x800395 <sizeofstarwars+0x1>
    1c7e:	4a e8       	ldi	r20, 0x8A	; 138
    1c80:	55 e0       	ldi	r21, 0x05	; 5
    1c82:	66 ed       	ldi	r22, 0xD6	; 214
    1c84:	75 e0       	ldi	r23, 0x05	; 5
    1c86:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN15music_notations13playthemelodyEPiS0_i>
    1c8a:	08 95       	ret
    1c8c:	63 30       	cpi	r22, 0x03	; 3
    1c8e:	71 05       	cpc	r23, r1
    1c90:	59 f4       	brne	.+22     	; 0x1ca8 <_ZN15music_notations4toneEi+0x70>
    1c92:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <sizeofcoffindance>
    1c96:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <sizeofcoffindance+0x1>
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	53 e0       	ldi	r21, 0x03	; 3
    1c9e:	62 ec       	ldi	r22, 0xC2	; 194
    1ca0:	74 e0       	ldi	r23, 0x04	; 4
    1ca2:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN15music_notations13playthemelodyEPiS0_i>
    1ca6:	08 95       	ret
    1ca8:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <sizeoftakeonme>
    1cac:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <sizeoftakeonme+0x1>
    1cb0:	4a e9       	ldi	r20, 0x9A	; 154
    1cb2:	53 e0       	ldi	r21, 0x03	; 3
    1cb4:	6a ec       	ldi	r22, 0xCA	; 202
    1cb6:	73 e0       	ldi	r23, 0x03	; 3
    1cb8:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN15music_notations13playthemelodyEPiS0_i>
    1cbc:	08 95       	ret

00001cbe <__subsf3>:
    1cbe:	50 58       	subi	r21, 0x80	; 128

00001cc0 <__addsf3>:
    1cc0:	bb 27       	eor	r27, r27
    1cc2:	aa 27       	eor	r26, r26
    1cc4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__addsf3x>
    1cc8:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_round>
    1ccc:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__fp_pscA>
    1cd0:	38 f0       	brcs	.+14     	; 0x1ce0 <__addsf3+0x20>
    1cd2:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fp_pscB>
    1cd6:	20 f0       	brcs	.+8      	; 0x1ce0 <__addsf3+0x20>
    1cd8:	39 f4       	brne	.+14     	; 0x1ce8 <__addsf3+0x28>
    1cda:	9f 3f       	cpi	r25, 0xFF	; 255
    1cdc:	19 f4       	brne	.+6      	; 0x1ce4 <__addsf3+0x24>
    1cde:	26 f4       	brtc	.+8      	; 0x1ce8 <__addsf3+0x28>
    1ce0:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__fp_nan>
    1ce4:	0e f4       	brtc	.+2      	; 0x1ce8 <__addsf3+0x28>
    1ce6:	e0 95       	com	r30
    1ce8:	e7 fb       	bst	r30, 7
    1cea:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__fp_inf>

00001cee <__addsf3x>:
    1cee:	e9 2f       	mov	r30, r25
    1cf0:	0e 94 02 10 	call	0x2004	; 0x2004 <__fp_split3>
    1cf4:	58 f3       	brcs	.-42     	; 0x1ccc <__addsf3+0xc>
    1cf6:	ba 17       	cp	r27, r26
    1cf8:	62 07       	cpc	r22, r18
    1cfa:	73 07       	cpc	r23, r19
    1cfc:	84 07       	cpc	r24, r20
    1cfe:	95 07       	cpc	r25, r21
    1d00:	20 f0       	brcs	.+8      	; 0x1d0a <__addsf3x+0x1c>
    1d02:	79 f4       	brne	.+30     	; 0x1d22 <__addsf3x+0x34>
    1d04:	a6 f5       	brtc	.+104    	; 0x1d6e <__addsf3x+0x80>
    1d06:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__fp_zero>
    1d0a:	0e f4       	brtc	.+2      	; 0x1d0e <__addsf3x+0x20>
    1d0c:	e0 95       	com	r30
    1d0e:	0b 2e       	mov	r0, r27
    1d10:	ba 2f       	mov	r27, r26
    1d12:	a0 2d       	mov	r26, r0
    1d14:	0b 01       	movw	r0, r22
    1d16:	b9 01       	movw	r22, r18
    1d18:	90 01       	movw	r18, r0
    1d1a:	0c 01       	movw	r0, r24
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	a0 01       	movw	r20, r0
    1d20:	11 24       	eor	r1, r1
    1d22:	ff 27       	eor	r31, r31
    1d24:	59 1b       	sub	r21, r25
    1d26:	99 f0       	breq	.+38     	; 0x1d4e <__addsf3x+0x60>
    1d28:	59 3f       	cpi	r21, 0xF9	; 249
    1d2a:	50 f4       	brcc	.+20     	; 0x1d40 <__addsf3x+0x52>
    1d2c:	50 3e       	cpi	r21, 0xE0	; 224
    1d2e:	68 f1       	brcs	.+90     	; 0x1d8a <__addsf3x+0x9c>
    1d30:	1a 16       	cp	r1, r26
    1d32:	f0 40       	sbci	r31, 0x00	; 0
    1d34:	a2 2f       	mov	r26, r18
    1d36:	23 2f       	mov	r18, r19
    1d38:	34 2f       	mov	r19, r20
    1d3a:	44 27       	eor	r20, r20
    1d3c:	58 5f       	subi	r21, 0xF8	; 248
    1d3e:	f3 cf       	rjmp	.-26     	; 0x1d26 <__addsf3x+0x38>
    1d40:	46 95       	lsr	r20
    1d42:	37 95       	ror	r19
    1d44:	27 95       	ror	r18
    1d46:	a7 95       	ror	r26
    1d48:	f0 40       	sbci	r31, 0x00	; 0
    1d4a:	53 95       	inc	r21
    1d4c:	c9 f7       	brne	.-14     	; 0x1d40 <__addsf3x+0x52>
    1d4e:	7e f4       	brtc	.+30     	; 0x1d6e <__addsf3x+0x80>
    1d50:	1f 16       	cp	r1, r31
    1d52:	ba 0b       	sbc	r27, r26
    1d54:	62 0b       	sbc	r22, r18
    1d56:	73 0b       	sbc	r23, r19
    1d58:	84 0b       	sbc	r24, r20
    1d5a:	ba f0       	brmi	.+46     	; 0x1d8a <__addsf3x+0x9c>
    1d5c:	91 50       	subi	r25, 0x01	; 1
    1d5e:	a1 f0       	breq	.+40     	; 0x1d88 <__addsf3x+0x9a>
    1d60:	ff 0f       	add	r31, r31
    1d62:	bb 1f       	adc	r27, r27
    1d64:	66 1f       	adc	r22, r22
    1d66:	77 1f       	adc	r23, r23
    1d68:	88 1f       	adc	r24, r24
    1d6a:	c2 f7       	brpl	.-16     	; 0x1d5c <__addsf3x+0x6e>
    1d6c:	0e c0       	rjmp	.+28     	; 0x1d8a <__addsf3x+0x9c>
    1d6e:	ba 0f       	add	r27, r26
    1d70:	62 1f       	adc	r22, r18
    1d72:	73 1f       	adc	r23, r19
    1d74:	84 1f       	adc	r24, r20
    1d76:	48 f4       	brcc	.+18     	; 0x1d8a <__addsf3x+0x9c>
    1d78:	87 95       	ror	r24
    1d7a:	77 95       	ror	r23
    1d7c:	67 95       	ror	r22
    1d7e:	b7 95       	ror	r27
    1d80:	f7 95       	ror	r31
    1d82:	9e 3f       	cpi	r25, 0xFE	; 254
    1d84:	08 f0       	brcs	.+2      	; 0x1d88 <__addsf3x+0x9a>
    1d86:	b0 cf       	rjmp	.-160    	; 0x1ce8 <__addsf3+0x28>
    1d88:	93 95       	inc	r25
    1d8a:	88 0f       	add	r24, r24
    1d8c:	08 f0       	brcs	.+2      	; 0x1d90 <__addsf3x+0xa2>
    1d8e:	99 27       	eor	r25, r25
    1d90:	ee 0f       	add	r30, r30
    1d92:	97 95       	ror	r25
    1d94:	87 95       	ror	r24
    1d96:	08 95       	ret

00001d98 <__cmpsf2>:
    1d98:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fp_cmp>
    1d9c:	08 f4       	brcc	.+2      	; 0x1da0 <__cmpsf2+0x8>
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	08 95       	ret

00001da2 <__divsf3>:
    1da2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__divsf3x>
    1da6:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_round>
    1daa:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fp_pscB>
    1dae:	58 f0       	brcs	.+22     	; 0x1dc6 <__divsf3+0x24>
    1db0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__fp_pscA>
    1db4:	40 f0       	brcs	.+16     	; 0x1dc6 <__divsf3+0x24>
    1db6:	29 f4       	brne	.+10     	; 0x1dc2 <__divsf3+0x20>
    1db8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dba:	29 f0       	breq	.+10     	; 0x1dc6 <__divsf3+0x24>
    1dbc:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__fp_inf>
    1dc0:	51 11       	cpse	r21, r1
    1dc2:	0c 94 25 10 	jmp	0x204a	; 0x204a <__fp_szero>
    1dc6:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__fp_nan>

00001dca <__divsf3x>:
    1dca:	0e 94 02 10 	call	0x2004	; 0x2004 <__fp_split3>
    1dce:	68 f3       	brcs	.-38     	; 0x1daa <__divsf3+0x8>

00001dd0 <__divsf3_pse>:
    1dd0:	99 23       	and	r25, r25
    1dd2:	b1 f3       	breq	.-20     	; 0x1dc0 <__divsf3+0x1e>
    1dd4:	55 23       	and	r21, r21
    1dd6:	91 f3       	breq	.-28     	; 0x1dbc <__divsf3+0x1a>
    1dd8:	95 1b       	sub	r25, r21
    1dda:	55 0b       	sbc	r21, r21
    1ddc:	bb 27       	eor	r27, r27
    1dde:	aa 27       	eor	r26, r26
    1de0:	62 17       	cp	r22, r18
    1de2:	73 07       	cpc	r23, r19
    1de4:	84 07       	cpc	r24, r20
    1de6:	38 f0       	brcs	.+14     	; 0x1df6 <__divsf3_pse+0x26>
    1de8:	9f 5f       	subi	r25, 0xFF	; 255
    1dea:	5f 4f       	sbci	r21, 0xFF	; 255
    1dec:	22 0f       	add	r18, r18
    1dee:	33 1f       	adc	r19, r19
    1df0:	44 1f       	adc	r20, r20
    1df2:	aa 1f       	adc	r26, r26
    1df4:	a9 f3       	breq	.-22     	; 0x1de0 <__divsf3_pse+0x10>
    1df6:	35 d0       	rcall	.+106    	; 0x1e62 <__divsf3_pse+0x92>
    1df8:	0e 2e       	mov	r0, r30
    1dfa:	3a f0       	brmi	.+14     	; 0x1e0a <__divsf3_pse+0x3a>
    1dfc:	e0 e8       	ldi	r30, 0x80	; 128
    1dfe:	32 d0       	rcall	.+100    	; 0x1e64 <__divsf3_pse+0x94>
    1e00:	91 50       	subi	r25, 0x01	; 1
    1e02:	50 40       	sbci	r21, 0x00	; 0
    1e04:	e6 95       	lsr	r30
    1e06:	00 1c       	adc	r0, r0
    1e08:	ca f7       	brpl	.-14     	; 0x1dfc <__divsf3_pse+0x2c>
    1e0a:	2b d0       	rcall	.+86     	; 0x1e62 <__divsf3_pse+0x92>
    1e0c:	fe 2f       	mov	r31, r30
    1e0e:	29 d0       	rcall	.+82     	; 0x1e62 <__divsf3_pse+0x92>
    1e10:	66 0f       	add	r22, r22
    1e12:	77 1f       	adc	r23, r23
    1e14:	88 1f       	adc	r24, r24
    1e16:	bb 1f       	adc	r27, r27
    1e18:	26 17       	cp	r18, r22
    1e1a:	37 07       	cpc	r19, r23
    1e1c:	48 07       	cpc	r20, r24
    1e1e:	ab 07       	cpc	r26, r27
    1e20:	b0 e8       	ldi	r27, 0x80	; 128
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <__divsf3_pse+0x56>
    1e24:	bb 0b       	sbc	r27, r27
    1e26:	80 2d       	mov	r24, r0
    1e28:	bf 01       	movw	r22, r30
    1e2a:	ff 27       	eor	r31, r31
    1e2c:	93 58       	subi	r25, 0x83	; 131
    1e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e30:	3a f0       	brmi	.+14     	; 0x1e40 <__divsf3_pse+0x70>
    1e32:	9e 3f       	cpi	r25, 0xFE	; 254
    1e34:	51 05       	cpc	r21, r1
    1e36:	78 f0       	brcs	.+30     	; 0x1e56 <__divsf3_pse+0x86>
    1e38:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__fp_inf>
    1e3c:	0c 94 25 10 	jmp	0x204a	; 0x204a <__fp_szero>
    1e40:	5f 3f       	cpi	r21, 0xFF	; 255
    1e42:	e4 f3       	brlt	.-8      	; 0x1e3c <__divsf3_pse+0x6c>
    1e44:	98 3e       	cpi	r25, 0xE8	; 232
    1e46:	d4 f3       	brlt	.-12     	; 0x1e3c <__divsf3_pse+0x6c>
    1e48:	86 95       	lsr	r24
    1e4a:	77 95       	ror	r23
    1e4c:	67 95       	ror	r22
    1e4e:	b7 95       	ror	r27
    1e50:	f7 95       	ror	r31
    1e52:	9f 5f       	subi	r25, 0xFF	; 255
    1e54:	c9 f7       	brne	.-14     	; 0x1e48 <__divsf3_pse+0x78>
    1e56:	88 0f       	add	r24, r24
    1e58:	91 1d       	adc	r25, r1
    1e5a:	96 95       	lsr	r25
    1e5c:	87 95       	ror	r24
    1e5e:	97 f9       	bld	r25, 7
    1e60:	08 95       	ret
    1e62:	e1 e0       	ldi	r30, 0x01	; 1
    1e64:	66 0f       	add	r22, r22
    1e66:	77 1f       	adc	r23, r23
    1e68:	88 1f       	adc	r24, r24
    1e6a:	bb 1f       	adc	r27, r27
    1e6c:	62 17       	cp	r22, r18
    1e6e:	73 07       	cpc	r23, r19
    1e70:	84 07       	cpc	r24, r20
    1e72:	ba 07       	cpc	r27, r26
    1e74:	20 f0       	brcs	.+8      	; 0x1e7e <__divsf3_pse+0xae>
    1e76:	62 1b       	sub	r22, r18
    1e78:	73 0b       	sbc	r23, r19
    1e7a:	84 0b       	sbc	r24, r20
    1e7c:	ba 0b       	sbc	r27, r26
    1e7e:	ee 1f       	adc	r30, r30
    1e80:	88 f7       	brcc	.-30     	; 0x1e64 <__divsf3_pse+0x94>
    1e82:	e0 95       	com	r30
    1e84:	08 95       	ret

00001e86 <__fixsfsi>:
    1e86:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixunssfsi>
    1e8a:	68 94       	set
    1e8c:	b1 11       	cpse	r27, r1
    1e8e:	0c 94 25 10 	jmp	0x204a	; 0x204a <__fp_szero>
    1e92:	08 95       	ret

00001e94 <__fixunssfsi>:
    1e94:	0e 94 0a 10 	call	0x2014	; 0x2014 <__fp_splitA>
    1e98:	88 f0       	brcs	.+34     	; 0x1ebc <__fixunssfsi+0x28>
    1e9a:	9f 57       	subi	r25, 0x7F	; 127
    1e9c:	98 f0       	brcs	.+38     	; 0x1ec4 <__fixunssfsi+0x30>
    1e9e:	b9 2f       	mov	r27, r25
    1ea0:	99 27       	eor	r25, r25
    1ea2:	b7 51       	subi	r27, 0x17	; 23
    1ea4:	b0 f0       	brcs	.+44     	; 0x1ed2 <__fixunssfsi+0x3e>
    1ea6:	e1 f0       	breq	.+56     	; 0x1ee0 <__fixunssfsi+0x4c>
    1ea8:	66 0f       	add	r22, r22
    1eaa:	77 1f       	adc	r23, r23
    1eac:	88 1f       	adc	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	1a f0       	brmi	.+6      	; 0x1eb8 <__fixunssfsi+0x24>
    1eb2:	ba 95       	dec	r27
    1eb4:	c9 f7       	brne	.-14     	; 0x1ea8 <__fixunssfsi+0x14>
    1eb6:	14 c0       	rjmp	.+40     	; 0x1ee0 <__fixunssfsi+0x4c>
    1eb8:	b1 30       	cpi	r27, 0x01	; 1
    1eba:	91 f0       	breq	.+36     	; 0x1ee0 <__fixunssfsi+0x4c>
    1ebc:	0e 94 24 10 	call	0x2048	; 0x2048 <__fp_zero>
    1ec0:	b1 e0       	ldi	r27, 0x01	; 1
    1ec2:	08 95       	ret
    1ec4:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__fp_zero>
    1ec8:	67 2f       	mov	r22, r23
    1eca:	78 2f       	mov	r23, r24
    1ecc:	88 27       	eor	r24, r24
    1ece:	b8 5f       	subi	r27, 0xF8	; 248
    1ed0:	39 f0       	breq	.+14     	; 0x1ee0 <__fixunssfsi+0x4c>
    1ed2:	b9 3f       	cpi	r27, 0xF9	; 249
    1ed4:	cc f3       	brlt	.-14     	; 0x1ec8 <__fixunssfsi+0x34>
    1ed6:	86 95       	lsr	r24
    1ed8:	77 95       	ror	r23
    1eda:	67 95       	ror	r22
    1edc:	b3 95       	inc	r27
    1ede:	d9 f7       	brne	.-10     	; 0x1ed6 <__fixunssfsi+0x42>
    1ee0:	3e f4       	brtc	.+14     	; 0x1ef0 <__fixunssfsi+0x5c>
    1ee2:	90 95       	com	r25
    1ee4:	80 95       	com	r24
    1ee6:	70 95       	com	r23
    1ee8:	61 95       	neg	r22
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	8f 4f       	sbci	r24, 0xFF	; 255
    1eee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef0:	08 95       	ret

00001ef2 <__floatunsisf>:
    1ef2:	e8 94       	clt
    1ef4:	09 c0       	rjmp	.+18     	; 0x1f08 <__floatsisf+0x12>

00001ef6 <__floatsisf>:
    1ef6:	97 fb       	bst	r25, 7
    1ef8:	3e f4       	brtc	.+14     	; 0x1f08 <__floatsisf+0x12>
    1efa:	90 95       	com	r25
    1efc:	80 95       	com	r24
    1efe:	70 95       	com	r23
    1f00:	61 95       	neg	r22
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	8f 4f       	sbci	r24, 0xFF	; 255
    1f06:	9f 4f       	sbci	r25, 0xFF	; 255
    1f08:	99 23       	and	r25, r25
    1f0a:	a9 f0       	breq	.+42     	; 0x1f36 <__floatsisf+0x40>
    1f0c:	f9 2f       	mov	r31, r25
    1f0e:	96 e9       	ldi	r25, 0x96	; 150
    1f10:	bb 27       	eor	r27, r27
    1f12:	93 95       	inc	r25
    1f14:	f6 95       	lsr	r31
    1f16:	87 95       	ror	r24
    1f18:	77 95       	ror	r23
    1f1a:	67 95       	ror	r22
    1f1c:	b7 95       	ror	r27
    1f1e:	f1 11       	cpse	r31, r1
    1f20:	f8 cf       	rjmp	.-16     	; 0x1f12 <__floatsisf+0x1c>
    1f22:	fa f4       	brpl	.+62     	; 0x1f62 <__floatsisf+0x6c>
    1f24:	bb 0f       	add	r27, r27
    1f26:	11 f4       	brne	.+4      	; 0x1f2c <__floatsisf+0x36>
    1f28:	60 ff       	sbrs	r22, 0
    1f2a:	1b c0       	rjmp	.+54     	; 0x1f62 <__floatsisf+0x6c>
    1f2c:	6f 5f       	subi	r22, 0xFF	; 255
    1f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f30:	8f 4f       	sbci	r24, 0xFF	; 255
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	16 c0       	rjmp	.+44     	; 0x1f62 <__floatsisf+0x6c>
    1f36:	88 23       	and	r24, r24
    1f38:	11 f0       	breq	.+4      	; 0x1f3e <__floatsisf+0x48>
    1f3a:	96 e9       	ldi	r25, 0x96	; 150
    1f3c:	11 c0       	rjmp	.+34     	; 0x1f60 <__floatsisf+0x6a>
    1f3e:	77 23       	and	r23, r23
    1f40:	21 f0       	breq	.+8      	; 0x1f4a <__floatsisf+0x54>
    1f42:	9e e8       	ldi	r25, 0x8E	; 142
    1f44:	87 2f       	mov	r24, r23
    1f46:	76 2f       	mov	r23, r22
    1f48:	05 c0       	rjmp	.+10     	; 0x1f54 <__floatsisf+0x5e>
    1f4a:	66 23       	and	r22, r22
    1f4c:	71 f0       	breq	.+28     	; 0x1f6a <__floatsisf+0x74>
    1f4e:	96 e8       	ldi	r25, 0x86	; 134
    1f50:	86 2f       	mov	r24, r22
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	2a f0       	brmi	.+10     	; 0x1f62 <__floatsisf+0x6c>
    1f58:	9a 95       	dec	r25
    1f5a:	66 0f       	add	r22, r22
    1f5c:	77 1f       	adc	r23, r23
    1f5e:	88 1f       	adc	r24, r24
    1f60:	da f7       	brpl	.-10     	; 0x1f58 <__floatsisf+0x62>
    1f62:	88 0f       	add	r24, r24
    1f64:	96 95       	lsr	r25
    1f66:	87 95       	ror	r24
    1f68:	97 f9       	bld	r25, 7
    1f6a:	08 95       	ret

00001f6c <__fp_cmp>:
    1f6c:	99 0f       	add	r25, r25
    1f6e:	00 08       	sbc	r0, r0
    1f70:	55 0f       	add	r21, r21
    1f72:	aa 0b       	sbc	r26, r26
    1f74:	e0 e8       	ldi	r30, 0x80	; 128
    1f76:	fe ef       	ldi	r31, 0xFE	; 254
    1f78:	16 16       	cp	r1, r22
    1f7a:	17 06       	cpc	r1, r23
    1f7c:	e8 07       	cpc	r30, r24
    1f7e:	f9 07       	cpc	r31, r25
    1f80:	c0 f0       	brcs	.+48     	; 0x1fb2 <__fp_cmp+0x46>
    1f82:	12 16       	cp	r1, r18
    1f84:	13 06       	cpc	r1, r19
    1f86:	e4 07       	cpc	r30, r20
    1f88:	f5 07       	cpc	r31, r21
    1f8a:	98 f0       	brcs	.+38     	; 0x1fb2 <__fp_cmp+0x46>
    1f8c:	62 1b       	sub	r22, r18
    1f8e:	73 0b       	sbc	r23, r19
    1f90:	84 0b       	sbc	r24, r20
    1f92:	95 0b       	sbc	r25, r21
    1f94:	39 f4       	brne	.+14     	; 0x1fa4 <__fp_cmp+0x38>
    1f96:	0a 26       	eor	r0, r26
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <__fp_cmp+0x46>
    1f9a:	23 2b       	or	r18, r19
    1f9c:	24 2b       	or	r18, r20
    1f9e:	25 2b       	or	r18, r21
    1fa0:	21 f4       	brne	.+8      	; 0x1faa <__fp_cmp+0x3e>
    1fa2:	08 95       	ret
    1fa4:	0a 26       	eor	r0, r26
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <__fp_cmp+0x3e>
    1fa8:	a1 40       	sbci	r26, 0x01	; 1
    1faa:	a6 95       	lsr	r26
    1fac:	8f ef       	ldi	r24, 0xFF	; 255
    1fae:	81 1d       	adc	r24, r1
    1fb0:	81 1d       	adc	r24, r1
    1fb2:	08 95       	ret

00001fb4 <__fp_inf>:
    1fb4:	97 f9       	bld	r25, 7
    1fb6:	9f 67       	ori	r25, 0x7F	; 127
    1fb8:	80 e8       	ldi	r24, 0x80	; 128
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	08 95       	ret

00001fc0 <__fp_nan>:
    1fc0:	9f ef       	ldi	r25, 0xFF	; 255
    1fc2:	80 ec       	ldi	r24, 0xC0	; 192
    1fc4:	08 95       	ret

00001fc6 <__fp_pscA>:
    1fc6:	00 24       	eor	r0, r0
    1fc8:	0a 94       	dec	r0
    1fca:	16 16       	cp	r1, r22
    1fcc:	17 06       	cpc	r1, r23
    1fce:	18 06       	cpc	r1, r24
    1fd0:	09 06       	cpc	r0, r25
    1fd2:	08 95       	ret

00001fd4 <__fp_pscB>:
    1fd4:	00 24       	eor	r0, r0
    1fd6:	0a 94       	dec	r0
    1fd8:	12 16       	cp	r1, r18
    1fda:	13 06       	cpc	r1, r19
    1fdc:	14 06       	cpc	r1, r20
    1fde:	05 06       	cpc	r0, r21
    1fe0:	08 95       	ret

00001fe2 <__fp_round>:
    1fe2:	09 2e       	mov	r0, r25
    1fe4:	03 94       	inc	r0
    1fe6:	00 0c       	add	r0, r0
    1fe8:	11 f4       	brne	.+4      	; 0x1fee <__fp_round+0xc>
    1fea:	88 23       	and	r24, r24
    1fec:	52 f0       	brmi	.+20     	; 0x2002 <__fp_round+0x20>
    1fee:	bb 0f       	add	r27, r27
    1ff0:	40 f4       	brcc	.+16     	; 0x2002 <__fp_round+0x20>
    1ff2:	bf 2b       	or	r27, r31
    1ff4:	11 f4       	brne	.+4      	; 0x1ffa <__fp_round+0x18>
    1ff6:	60 ff       	sbrs	r22, 0
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <__fp_round+0x20>
    1ffa:	6f 5f       	subi	r22, 0xFF	; 255
    1ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	08 95       	ret

00002004 <__fp_split3>:
    2004:	57 fd       	sbrc	r21, 7
    2006:	90 58       	subi	r25, 0x80	; 128
    2008:	44 0f       	add	r20, r20
    200a:	55 1f       	adc	r21, r21
    200c:	59 f0       	breq	.+22     	; 0x2024 <__fp_splitA+0x10>
    200e:	5f 3f       	cpi	r21, 0xFF	; 255
    2010:	71 f0       	breq	.+28     	; 0x202e <__fp_splitA+0x1a>
    2012:	47 95       	ror	r20

00002014 <__fp_splitA>:
    2014:	88 0f       	add	r24, r24
    2016:	97 fb       	bst	r25, 7
    2018:	99 1f       	adc	r25, r25
    201a:	61 f0       	breq	.+24     	; 0x2034 <__fp_splitA+0x20>
    201c:	9f 3f       	cpi	r25, 0xFF	; 255
    201e:	79 f0       	breq	.+30     	; 0x203e <__fp_splitA+0x2a>
    2020:	87 95       	ror	r24
    2022:	08 95       	ret
    2024:	12 16       	cp	r1, r18
    2026:	13 06       	cpc	r1, r19
    2028:	14 06       	cpc	r1, r20
    202a:	55 1f       	adc	r21, r21
    202c:	f2 cf       	rjmp	.-28     	; 0x2012 <__fp_split3+0xe>
    202e:	46 95       	lsr	r20
    2030:	f1 df       	rcall	.-30     	; 0x2014 <__fp_splitA>
    2032:	08 c0       	rjmp	.+16     	; 0x2044 <__fp_splitA+0x30>
    2034:	16 16       	cp	r1, r22
    2036:	17 06       	cpc	r1, r23
    2038:	18 06       	cpc	r1, r24
    203a:	99 1f       	adc	r25, r25
    203c:	f1 cf       	rjmp	.-30     	; 0x2020 <__fp_splitA+0xc>
    203e:	86 95       	lsr	r24
    2040:	71 05       	cpc	r23, r1
    2042:	61 05       	cpc	r22, r1
    2044:	08 94       	sec
    2046:	08 95       	ret

00002048 <__fp_zero>:
    2048:	e8 94       	clt

0000204a <__fp_szero>:
    204a:	bb 27       	eor	r27, r27
    204c:	66 27       	eor	r22, r22
    204e:	77 27       	eor	r23, r23
    2050:	cb 01       	movw	r24, r22
    2052:	97 f9       	bld	r25, 7
    2054:	08 95       	ret

00002056 <__gesf2>:
    2056:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fp_cmp>
    205a:	08 f4       	brcc	.+2      	; 0x205e <__gesf2+0x8>
    205c:	8f ef       	ldi	r24, 0xFF	; 255
    205e:	08 95       	ret

00002060 <__mulsf3>:
    2060:	0e 94 43 10 	call	0x2086	; 0x2086 <__mulsf3x>
    2064:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_round>
    2068:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__fp_pscA>
    206c:	38 f0       	brcs	.+14     	; 0x207c <__mulsf3+0x1c>
    206e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fp_pscB>
    2072:	20 f0       	brcs	.+8      	; 0x207c <__mulsf3+0x1c>
    2074:	95 23       	and	r25, r21
    2076:	11 f0       	breq	.+4      	; 0x207c <__mulsf3+0x1c>
    2078:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__fp_inf>
    207c:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__fp_nan>
    2080:	11 24       	eor	r1, r1
    2082:	0c 94 25 10 	jmp	0x204a	; 0x204a <__fp_szero>

00002086 <__mulsf3x>:
    2086:	0e 94 02 10 	call	0x2004	; 0x2004 <__fp_split3>
    208a:	70 f3       	brcs	.-36     	; 0x2068 <__mulsf3+0x8>

0000208c <__mulsf3_pse>:
    208c:	95 9f       	mul	r25, r21
    208e:	c1 f3       	breq	.-16     	; 0x2080 <__mulsf3+0x20>
    2090:	95 0f       	add	r25, r21
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	55 1f       	adc	r21, r21
    2096:	62 9f       	mul	r22, r18
    2098:	f0 01       	movw	r30, r0
    209a:	72 9f       	mul	r23, r18
    209c:	bb 27       	eor	r27, r27
    209e:	f0 0d       	add	r31, r0
    20a0:	b1 1d       	adc	r27, r1
    20a2:	63 9f       	mul	r22, r19
    20a4:	aa 27       	eor	r26, r26
    20a6:	f0 0d       	add	r31, r0
    20a8:	b1 1d       	adc	r27, r1
    20aa:	aa 1f       	adc	r26, r26
    20ac:	64 9f       	mul	r22, r20
    20ae:	66 27       	eor	r22, r22
    20b0:	b0 0d       	add	r27, r0
    20b2:	a1 1d       	adc	r26, r1
    20b4:	66 1f       	adc	r22, r22
    20b6:	82 9f       	mul	r24, r18
    20b8:	22 27       	eor	r18, r18
    20ba:	b0 0d       	add	r27, r0
    20bc:	a1 1d       	adc	r26, r1
    20be:	62 1f       	adc	r22, r18
    20c0:	73 9f       	mul	r23, r19
    20c2:	b0 0d       	add	r27, r0
    20c4:	a1 1d       	adc	r26, r1
    20c6:	62 1f       	adc	r22, r18
    20c8:	83 9f       	mul	r24, r19
    20ca:	a0 0d       	add	r26, r0
    20cc:	61 1d       	adc	r22, r1
    20ce:	22 1f       	adc	r18, r18
    20d0:	74 9f       	mul	r23, r20
    20d2:	33 27       	eor	r19, r19
    20d4:	a0 0d       	add	r26, r0
    20d6:	61 1d       	adc	r22, r1
    20d8:	23 1f       	adc	r18, r19
    20da:	84 9f       	mul	r24, r20
    20dc:	60 0d       	add	r22, r0
    20de:	21 1d       	adc	r18, r1
    20e0:	82 2f       	mov	r24, r18
    20e2:	76 2f       	mov	r23, r22
    20e4:	6a 2f       	mov	r22, r26
    20e6:	11 24       	eor	r1, r1
    20e8:	9f 57       	subi	r25, 0x7F	; 127
    20ea:	50 40       	sbci	r21, 0x00	; 0
    20ec:	9a f0       	brmi	.+38     	; 0x2114 <__mulsf3_pse+0x88>
    20ee:	f1 f0       	breq	.+60     	; 0x212c <__mulsf3_pse+0xa0>
    20f0:	88 23       	and	r24, r24
    20f2:	4a f0       	brmi	.+18     	; 0x2106 <__mulsf3_pse+0x7a>
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	bb 1f       	adc	r27, r27
    20fa:	66 1f       	adc	r22, r22
    20fc:	77 1f       	adc	r23, r23
    20fe:	88 1f       	adc	r24, r24
    2100:	91 50       	subi	r25, 0x01	; 1
    2102:	50 40       	sbci	r21, 0x00	; 0
    2104:	a9 f7       	brne	.-22     	; 0x20f0 <__mulsf3_pse+0x64>
    2106:	9e 3f       	cpi	r25, 0xFE	; 254
    2108:	51 05       	cpc	r21, r1
    210a:	80 f0       	brcs	.+32     	; 0x212c <__mulsf3_pse+0xa0>
    210c:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__fp_inf>
    2110:	0c 94 25 10 	jmp	0x204a	; 0x204a <__fp_szero>
    2114:	5f 3f       	cpi	r21, 0xFF	; 255
    2116:	e4 f3       	brlt	.-8      	; 0x2110 <__mulsf3_pse+0x84>
    2118:	98 3e       	cpi	r25, 0xE8	; 232
    211a:	d4 f3       	brlt	.-12     	; 0x2110 <__mulsf3_pse+0x84>
    211c:	86 95       	lsr	r24
    211e:	77 95       	ror	r23
    2120:	67 95       	ror	r22
    2122:	b7 95       	ror	r27
    2124:	f7 95       	ror	r31
    2126:	e7 95       	ror	r30
    2128:	9f 5f       	subi	r25, 0xFF	; 255
    212a:	c1 f7       	brne	.-16     	; 0x211c <__mulsf3_pse+0x90>
    212c:	fe 2b       	or	r31, r30
    212e:	88 0f       	add	r24, r24
    2130:	91 1d       	adc	r25, r1
    2132:	96 95       	lsr	r25
    2134:	87 95       	ror	r24
    2136:	97 f9       	bld	r25, 7
    2138:	08 95       	ret

0000213a <__divmodhi4>:
    213a:	97 fb       	bst	r25, 7
    213c:	07 2e       	mov	r0, r23
    213e:	16 f4       	brtc	.+4      	; 0x2144 <__divmodhi4+0xa>
    2140:	00 94       	com	r0
    2142:	07 d0       	rcall	.+14     	; 0x2152 <__divmodhi4_neg1>
    2144:	77 fd       	sbrc	r23, 7
    2146:	09 d0       	rcall	.+18     	; 0x215a <__divmodhi4_neg2>
    2148:	0e 94 b1 10 	call	0x2162	; 0x2162 <__udivmodhi4>
    214c:	07 fc       	sbrc	r0, 7
    214e:	05 d0       	rcall	.+10     	; 0x215a <__divmodhi4_neg2>
    2150:	3e f4       	brtc	.+14     	; 0x2160 <__divmodhi4_exit>

00002152 <__divmodhi4_neg1>:
    2152:	90 95       	com	r25
    2154:	81 95       	neg	r24
    2156:	9f 4f       	sbci	r25, 0xFF	; 255
    2158:	08 95       	ret

0000215a <__divmodhi4_neg2>:
    215a:	70 95       	com	r23
    215c:	61 95       	neg	r22
    215e:	7f 4f       	sbci	r23, 0xFF	; 255

00002160 <__divmodhi4_exit>:
    2160:	08 95       	ret

00002162 <__udivmodhi4>:
    2162:	aa 1b       	sub	r26, r26
    2164:	bb 1b       	sub	r27, r27
    2166:	51 e1       	ldi	r21, 0x11	; 17
    2168:	07 c0       	rjmp	.+14     	; 0x2178 <__udivmodhi4_ep>

0000216a <__udivmodhi4_loop>:
    216a:	aa 1f       	adc	r26, r26
    216c:	bb 1f       	adc	r27, r27
    216e:	a6 17       	cp	r26, r22
    2170:	b7 07       	cpc	r27, r23
    2172:	10 f0       	brcs	.+4      	; 0x2178 <__udivmodhi4_ep>
    2174:	a6 1b       	sub	r26, r22
    2176:	b7 0b       	sbc	r27, r23

00002178 <__udivmodhi4_ep>:
    2178:	88 1f       	adc	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	5a 95       	dec	r21
    217e:	a9 f7       	brne	.-22     	; 0x216a <__udivmodhi4_loop>
    2180:	80 95       	com	r24
    2182:	90 95       	com	r25
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	08 95       	ret

0000218a <_exit>:
    218a:	f8 94       	cli

0000218c <__stop_program>:
    218c:	ff cf       	rjmp	.-2      	; 0x218c <__stop_program>
