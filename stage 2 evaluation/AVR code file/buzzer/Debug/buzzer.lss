
buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000040c  00800100  00000c56  00000cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080050c  0080050c  000010f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e60  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076f  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ec  00000000  00000000  0000276f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050d  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009cf  00000000  00000000  0000338d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	15 e0       	ldi	r17, 0x05	; 5
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b5 e0       	ldi	r27, 0x05	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2f 03 	call	0x65e	; 0x65e <main>
  9e:	0c 94 29 06 	jmp	0xc52	; 0xc52 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <NextMelody>:
}


// function to select a melody
void NextMelody()
{
  a6:	8f 92       	push	r8
  a8:	9f 92       	push	r9
  aa:	af 92       	push	r10
  ac:	bf 92       	push	r11
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
	// check whether the next button is pressed. if so, finding the index of the melody
	if ( BUTTON_PIN & (1<<NEXTBUTTON_PIN)){
  b6:	1e 9b       	sbis	0x03, 6	; 3
  b8:	56 c0       	rjmp	.+172    	; 0x166 <NextMelody+0xc0>
		_delay_ms(debouncing_delay);
  ba:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <debouncing_delay>
  be:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <debouncing_delay+0x1>
  c2:	07 2e       	mov	r0, r23
  c4:	00 0c       	add	r0, r0
  c6:	88 0b       	sbc	r24, r24
  c8:	99 0b       	sbc	r25, r25
  ca:	0e 94 df 04 	call	0x9be	; 0x9be <__floatsisf>
  ce:	4b 01       	movw	r8, r22
  d0:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	4a ef       	ldi	r20, 0xFA	; 250
  d8:	54 e4       	ldi	r21, 0x44	; 68
  da:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
  de:	6b 01       	movw	r12, r22
  e0:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	40 e8       	ldi	r20, 0x80	; 128
  e8:	5f e3       	ldi	r21, 0x3F	; 63
  ea:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
  ee:	88 23       	and	r24, r24
  f0:	24 f1       	brlt	.+72     	; 0x13a <NextMelody+0x94>
		__ticks = 1;
	else if (__tmp > 65535)
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	3f ef       	ldi	r19, 0xFF	; 255
  f6:	4f e7       	ldi	r20, 0x7F	; 127
  f8:	57 e4       	ldi	r21, 0x47	; 71
  fa:	c7 01       	movw	r24, r14
  fc:	b6 01       	movw	r22, r12
  fe:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 102:	18 16       	cp	r1, r24
 104:	ac f4       	brge	.+42     	; 0x130 <NextMelody+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	40 e2       	ldi	r20, 0x20	; 32
 10c:	51 e4       	ldi	r21, 0x41	; 65
 10e:	c5 01       	movw	r24, r10
 110:	b4 01       	movw	r22, r8
 112:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 116:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 11a:	06 c0       	rjmp	.+12     	; 0x128 <NextMelody+0x82>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11c:	88 ec       	ldi	r24, 0xC8	; 200
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <NextMelody+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 124:	61 50       	subi	r22, 0x01	; 1
 126:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	61 15       	cp	r22, r1
 12a:	71 05       	cpc	r23, r1
 12c:	b9 f7       	brne	.-18     	; 0x11c <NextMelody+0x76>
 12e:	0a c0       	rjmp	.+20     	; 0x144 <NextMelody+0x9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 130:	c7 01       	movw	r24, r14
 132:	b6 01       	movw	r22, r12
 134:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 138:	02 c0       	rjmp	.+4      	; 0x13e <NextMelody+0x98>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	cb 01       	movw	r24, r22
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <NextMelody+0x9a>
		playing += 1;
 144:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <playing>
 148:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <playing+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <playing+0x1>
 152:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <playing>
		selectedmelody = playing % 5;
 156:	65 e0       	ldi	r22, 0x05	; 5
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	0e 94 01 06 	call	0xc02	; 0xc02 <__divmodhi4>
 15e:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <__data_end+0x1>
 162:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <__data_end>
	}
}
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	df 90       	pop	r13
 16c:	cf 90       	pop	r12
 16e:	bf 90       	pop	r11
 170:	af 90       	pop	r10
 172:	9f 90       	pop	r9
 174:	8f 90       	pop	r8
 176:	08 95       	ret

00000178 <playthenote>:

// function to generate sound using square waves 
void playthenote(float frequency, float duration)
{
 178:	4f 92       	push	r4
 17a:	5f 92       	push	r5
 17c:	6f 92       	push	r6
 17e:	7f 92       	push	r7
 180:	8f 92       	push	r8
 182:	9f 92       	push	r9
 184:	af 92       	push	r10
 186:	bf 92       	push	r11
 188:	cf 92       	push	r12
 18a:	df 92       	push	r13
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	00 d0       	rcall	.+0      	; 0x196 <playthenote+0x1e>
 196:	00 d0       	rcall	.+0      	; 0x198 <playthenote+0x20>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	6b 01       	movw	r12, r22
 19e:	7c 01       	movw	r14, r24
 1a0:	49 01       	movw	r8, r18
 1a2:	5a 01       	movw	r10, r20
	float period;
	
	// "period" is the wavelength calculated from frequency using the formula "period" = 1 / f.
	// We output 5 V for a length of time determined by half period (period/2), and then output 0 V, for the same length of time.
	
	if (frequency != 0){
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	a9 01       	movw	r20, r18
 1aa:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 1ae:	88 23       	and	r24, r24
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <playthenote+0x3c>
 1b2:	b3 c0       	rjmp	.+358    	; 0x31a <playthenote+0x1a2>
		period=(1/frequency)*1000;  // period in mile seconds
 1b4:	a7 01       	movw	r20, r14
 1b6:	96 01       	movw	r18, r12
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	9f e3       	ldi	r25, 0x3F	; 63
 1c0:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	4a e7       	ldi	r20, 0x7A	; 122
 1ca:	54 e4       	ldi	r21, 0x44	; 68
 1cc:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 1d0:	6b 01       	movw	r12, r22
 1d2:	7c 01       	movw	r14, r24
	    cycles=duration/period;
 1d4:	9b 01       	movw	r18, r22
 1d6:	ac 01       	movw	r20, r24
 1d8:	c5 01       	movw	r24, r10
 1da:	b4 01       	movw	r22, r8
 1dc:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
 1e0:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixsfsi>
 1e4:	2b 01       	movw	r4, r22
 1e6:	3c 01       	movw	r6, r24
	    half_period = period/2;
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	5f e3       	ldi	r21, 0x3F	; 63
 1f0:	c7 01       	movw	r24, r14
 1f2:	b6 01       	movw	r22, r12
 1f4:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 1f8:	69 83       	std	Y+1, r22	; 0x01
 1fa:	7a 83       	std	Y+2, r23	; 0x02
 1fc:	8b 83       	std	Y+3, r24	; 0x03
 1fe:	9c 83       	std	Y+4, r25	; 0x04
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);
 200:	87 b1       	in	r24, 0x07	; 7
 202:	81 60       	ori	r24, 0x01	; 1
 204:	87 b9       	out	0x07, r24	; 7

	    for (i=0;i<cycles;i++)
 206:	81 2c       	mov	r8, r1
 208:	91 2c       	mov	r9, r1
 20a:	54 01       	movw	r10, r8
 20c:	7f c0       	rjmp	.+254    	; 0x30c <playthenote+0x194>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	4a ef       	ldi	r20, 0xFA	; 250
 214:	54 e4       	ldi	r21, 0x44	; 68
 216:	69 81       	ldd	r22, Y+1	; 0x01
 218:	7a 81       	ldd	r23, Y+2	; 0x02
 21a:	8b 81       	ldd	r24, Y+3	; 0x03
 21c:	9c 81       	ldd	r25, Y+4	; 0x04
 21e:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 222:	6b 01       	movw	r12, r22
 224:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	40 e8       	ldi	r20, 0x80	; 128
 22c:	5f e3       	ldi	r21, 0x3F	; 63
 22e:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 232:	88 23       	and	r24, r24
 234:	34 f1       	brlt	.+76     	; 0x282 <playthenote+0x10a>
		__ticks = 1;
	else if (__tmp > 65535)
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	3f ef       	ldi	r19, 0xFF	; 255
 23a:	4f e7       	ldi	r20, 0x7F	; 127
 23c:	57 e4       	ldi	r21, 0x47	; 71
 23e:	c7 01       	movw	r24, r14
 240:	b6 01       	movw	r22, r12
 242:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 246:	18 16       	cp	r1, r24
 248:	bc f4       	brge	.+46     	; 0x278 <playthenote+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e2       	ldi	r20, 0x20	; 32
 250:	51 e4       	ldi	r21, 0x41	; 65
 252:	69 81       	ldd	r22, Y+1	; 0x01
 254:	7a 81       	ldd	r23, Y+2	; 0x02
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 25e:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 262:	06 c0       	rjmp	.+12     	; 0x270 <playthenote+0xf8>
 264:	88 ec       	ldi	r24, 0xC8	; 200
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <playthenote+0xf0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26c:	61 50       	subi	r22, 0x01	; 1
 26e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 270:	61 15       	cp	r22, r1
 272:	71 05       	cpc	r23, r1
 274:	b9 f7       	brne	.-18     	; 0x264 <playthenote+0xec>
 276:	0a c0       	rjmp	.+20     	; 0x28c <playthenote+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 278:	c7 01       	movw	r24, r14
 27a:	b6 01       	movw	r22, r12
 27c:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 280:	02 c0       	rjmp	.+4      	; 0x286 <playthenote+0x10e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	cb 01       	movw	r24, r22
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <playthenote+0x110>
	    {
		    _delay_ms(half_period);
		    SPEAKER_PORT |= (1 << SPEAKER_PIN);
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	88 b9       	out	0x08, r24	; 8
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	40 e8       	ldi	r20, 0x80	; 128
 298:	5f e3       	ldi	r21, 0x3F	; 63
 29a:	c7 01       	movw	r24, r14
 29c:	b6 01       	movw	r22, r12
 29e:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 2a2:	88 23       	and	r24, r24
 2a4:	34 f1       	brlt	.+76     	; 0x2f2 <playthenote+0x17a>
		__ticks = 1;
	else if (__tmp > 65535)
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	3f ef       	ldi	r19, 0xFF	; 255
 2aa:	4f e7       	ldi	r20, 0x7F	; 127
 2ac:	57 e4       	ldi	r21, 0x47	; 71
 2ae:	c7 01       	movw	r24, r14
 2b0:	b6 01       	movw	r22, r12
 2b2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 2b6:	18 16       	cp	r1, r24
 2b8:	bc f4       	brge	.+46     	; 0x2e8 <playthenote+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	40 e2       	ldi	r20, 0x20	; 32
 2c0:	51 e4       	ldi	r21, 0x41	; 65
 2c2:	69 81       	ldd	r22, Y+1	; 0x01
 2c4:	7a 81       	ldd	r23, Y+2	; 0x02
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ca:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 2ce:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 2d2:	06 c0       	rjmp	.+12     	; 0x2e0 <playthenote+0x168>
 2d4:	88 ec       	ldi	r24, 0xC8	; 200
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <playthenote+0x160>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2dc:	61 50       	subi	r22, 0x01	; 1
 2de:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e0:	61 15       	cp	r22, r1
 2e2:	71 05       	cpc	r23, r1
 2e4:	b9 f7       	brne	.-18     	; 0x2d4 <playthenote+0x15c>
 2e6:	0a c0       	rjmp	.+20     	; 0x2fc <playthenote+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2e8:	c7 01       	movw	r24, r14
 2ea:	b6 01       	movw	r22, r12
 2ec:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <playthenote+0x17e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	cb 01       	movw	r24, r22
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <playthenote+0x180>
		    _delay_ms(half_period);
		    SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
 2fc:	88 b1       	in	r24, 0x08	; 8
 2fe:	8e 7f       	andi	r24, 0xFE	; 254
 300:	88 b9       	out	0x08, r24	; 8
	    cycles=duration/period;
	    half_period = period/2;
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);

	    for (i=0;i<cycles;i++)
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	88 1a       	sub	r8, r24
 306:	98 0a       	sbc	r9, r24
 308:	a8 0a       	sbc	r10, r24
 30a:	b8 0a       	sbc	r11, r24
 30c:	84 14       	cp	r8, r4
 30e:	95 04       	cpc	r9, r5
 310:	a6 04       	cpc	r10, r6
 312:	b7 04       	cpc	r11, r7
 314:	0c f4       	brge	.+2      	; 0x318 <playthenote+0x1a0>
 316:	7b cf       	rjmp	.-266    	; 0x20e <playthenote+0x96>
 318:	3b c0       	rjmp	.+118    	; 0x390 <playthenote+0x218>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	4a ef       	ldi	r20, 0xFA	; 250
 320:	54 e4       	ldi	r21, 0x44	; 68
 322:	c5 01       	movw	r24, r10
 324:	b4 01       	movw	r22, r8
 326:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	40 e8       	ldi	r20, 0x80	; 128
 334:	5f e3       	ldi	r21, 0x3F	; 63
 336:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 33a:	88 23       	and	r24, r24
 33c:	24 f1       	brlt	.+72     	; 0x386 <playthenote+0x20e>
		__ticks = 1;
	else if (__tmp > 65535)
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	3f ef       	ldi	r19, 0xFF	; 255
 342:	4f e7       	ldi	r20, 0x7F	; 127
 344:	57 e4       	ldi	r21, 0x47	; 71
 346:	c7 01       	movw	r24, r14
 348:	b6 01       	movw	r22, r12
 34a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 34e:	18 16       	cp	r1, r24
 350:	ac f4       	brge	.+42     	; 0x37c <playthenote+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	40 e2       	ldi	r20, 0x20	; 32
 358:	51 e4       	ldi	r21, 0x41	; 65
 35a:	c5 01       	movw	r24, r10
 35c:	b4 01       	movw	r22, r8
 35e:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 362:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 366:	06 c0       	rjmp	.+12     	; 0x374 <playthenote+0x1fc>
 368:	88 ec       	ldi	r24, 0xC8	; 200
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <playthenote+0x1f4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 370:	61 50       	subi	r22, 0x01	; 1
 372:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 374:	61 15       	cp	r22, r1
 376:	71 05       	cpc	r23, r1
 378:	b9 f7       	brne	.-18     	; 0x368 <playthenote+0x1f0>
 37a:	0a c0       	rjmp	.+20     	; 0x390 <playthenote+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 37c:	c7 01       	movw	r24, r14
 37e:	b6 01       	movw	r22, r12
 380:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 384:	02 c0       	rjmp	.+4      	; 0x38a <playthenote+0x212>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	cb 01       	movw	r24, r22
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <playthenote+0x214>
	else {
		_delay_ms(duration);   // rest 
	}

	return;
}
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	bf 90       	pop	r11
 3a6:	af 90       	pop	r10
 3a8:	9f 90       	pop	r9
 3aa:	8f 90       	pop	r8
 3ac:	7f 90       	pop	r7
 3ae:	6f 90       	pop	r6
 3b0:	5f 90       	pop	r5
 3b2:	4f 90       	pop	r4
 3b4:	08 95       	ret

000003b6 <playthemelody>:

// function to play the selected melody
void playthemelody(int Melody[], int MelodyDuration[], int size)
{ 
 3b6:	2f 92       	push	r2
 3b8:	3f 92       	push	r3
 3ba:	5f 92       	push	r5
 3bc:	6f 92       	push	r6
 3be:	7f 92       	push	r7
 3c0:	8f 92       	push	r8
 3c2:	9f 92       	push	r9
 3c4:	af 92       	push	r10
 3c6:	bf 92       	push	r11
 3c8:	cf 92       	push	r12
 3ca:	df 92       	push	r13
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	28 97       	sbiw	r28, 0x08	; 8
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	1c 01       	movw	r2, r24
 3ea:	8b 01       	movw	r16, r22
 3ec:	3a 01       	movw	r6, r20
	// melody will play until the pause button is pressed. 
	int still_playing = 1;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	9e 83       	std	Y+6, r25	; 0x06
 3f4:	8d 83       	std	Y+5, r24	; 0x05
	while(still_playing){
 3f6:	17 c1       	rjmp	.+558    	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
	for (int x=0; x<size; x++){
		playthenote(Melody[x],MelodyDuration[x]);
 3f8:	8f 81       	ldd	r24, Y+7	; 0x07
 3fa:	98 85       	ldd	r25, Y+8	; 0x08
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	78 01       	movw	r14, r16
 402:	e8 0e       	add	r14, r24
 404:	f9 1e       	adc	r15, r25
 406:	f7 01       	movw	r30, r14
 408:	60 81       	ld	r22, Z
 40a:	71 81       	ldd	r23, Z+1	; 0x01
 40c:	f1 01       	movw	r30, r2
 40e:	e8 0f       	add	r30, r24
 410:	f9 1f       	adc	r31, r25
 412:	c0 80       	ld	r12, Z
 414:	d1 80       	ldd	r13, Z+1	; 0x01
 416:	07 2e       	mov	r0, r23
 418:	00 0c       	add	r0, r0
 41a:	88 0b       	sbc	r24, r24
 41c:	99 0b       	sbc	r25, r25
 41e:	0e 94 df 04 	call	0x9be	; 0x9be <__floatsisf>
 422:	4b 01       	movw	r8, r22
 424:	5c 01       	movw	r10, r24
 426:	b6 01       	movw	r22, r12
 428:	dd 0c       	add	r13, r13
 42a:	88 0b       	sbc	r24, r24
 42c:	99 0b       	sbc	r25, r25
 42e:	0e 94 df 04 	call	0x9be	; 0x9be <__floatsisf>
 432:	a5 01       	movw	r20, r10
 434:	94 01       	movw	r18, r8
 436:	0e 94 bc 00 	call	0x178	; 0x178 <playthenote>
		_delay_us(MelodyDuration[x]);
 43a:	f7 01       	movw	r30, r14
 43c:	60 81       	ld	r22, Z
 43e:	71 81       	ldd	r23, Z+1	; 0x01
 440:	07 2e       	mov	r0, r23
 442:	00 0c       	add	r0, r0
 444:	88 0b       	sbc	r24, r24
 446:	99 0b       	sbc	r25, r25
 448:	0e 94 df 04 	call	0x9be	; 0x9be <__floatsisf>
 44c:	6b 01       	movw	r12, r22
 44e:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 450:	2b ea       	ldi	r18, 0xAB	; 171
 452:	3a ea       	ldi	r19, 0xAA	; 170
 454:	4a e2       	ldi	r20, 0x2A	; 42
 456:	50 e4       	ldi	r21, 0x40	; 64
 458:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 45c:	4b 01       	movw	r8, r22
 45e:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
 460:	a7 01       	movw	r20, r14
 462:	96 01       	movw	r18, r12
 464:	c7 01       	movw	r24, r14
 466:	b6 01       	movw	r22, r12
 468:	0e 94 c4 03 	call	0x788	; 0x788 <__addsf3>
 46c:	69 83       	std	Y+1, r22	; 0x01
 46e:	7a 83       	std	Y+2, r23	; 0x02
 470:	8b 83       	std	Y+3, r24	; 0x03
 472:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	40 e8       	ldi	r20, 0x80	; 128
 47a:	5f e3       	ldi	r21, 0x3F	; 63
 47c:	c5 01       	movw	r24, r10
 47e:	b4 01       	movw	r22, r8
 480:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 484:	88 23       	and	r24, r24
 486:	0c f4       	brge	.+2      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 488:	6b c0       	rjmp	.+214    	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
		__ticks = 1;
	else if (__tmp2 > 65535)
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	3f ef       	ldi	r19, 0xFF	; 255
 48e:	4f e7       	ldi	r20, 0x7F	; 127
 490:	57 e4       	ldi	r21, 0x47	; 71
 492:	69 81       	ldd	r22, Y+1	; 0x01
 494:	7a 81       	ldd	r23, Y+2	; 0x02
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	9c 81       	ldd	r25, Y+4	; 0x04
 49a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 49e:	18 16       	cp	r1, r24
 4a0:	0c f0       	brlt	.+2      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a2:	44 c0       	rjmp	.+136    	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
	{
		_delay_ms(__us / 1000.0);
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	4a e7       	ldi	r20, 0x7A	; 122
 4aa:	54 e4       	ldi	r21, 0x44	; 68
 4ac:	c7 01       	movw	r24, r14
 4ae:	b6 01       	movw	r22, r12
 4b0:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
 4b4:	4b 01       	movw	r8, r22
 4b6:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	4a ef       	ldi	r20, 0xFA	; 250
 4be:	54 e4       	ldi	r21, 0x44	; 68
 4c0:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 4c4:	6b 01       	movw	r12, r22
 4c6:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 4c8:	20 e0       	ldi	r18, 0x00	; 0
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	40 e8       	ldi	r20, 0x80	; 128
 4ce:	5f e3       	ldi	r21, 0x3F	; 63
 4d0:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 4d4:	88 23       	and	r24, r24
 4d6:	24 f1       	brlt	.+72     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
		__ticks = 1;
	else if (__tmp > 65535)
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	3f ef       	ldi	r19, 0xFF	; 255
 4dc:	4f e7       	ldi	r20, 0x7F	; 127
 4de:	57 e4       	ldi	r21, 0x47	; 71
 4e0:	c7 01       	movw	r24, r14
 4e2:	b6 01       	movw	r22, r12
 4e4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 4e8:	18 16       	cp	r1, r24
 4ea:	ac f4       	brge	.+42     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	40 e2       	ldi	r20, 0x20	; 32
 4f2:	51 e4       	ldi	r21, 0x41	; 65
 4f4:	c5 01       	movw	r24, r10
 4f6:	b4 01       	movw	r22, r8
 4f8:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 4fc:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 500:	06 c0       	rjmp	.+12     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 502:	88 ec       	ldi	r24, 0xC8	; 200
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 50a:	61 50       	subi	r22, 0x01	; 1
 50c:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 50e:	61 15       	cp	r22, r1
 510:	71 05       	cpc	r23, r1
 512:	b9 f7       	brne	.-18     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 514:	27 c0       	rjmp	.+78     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 516:	c7 01       	movw	r24, r14
 518:	b6 01       	movw	r22, r12
 51a:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 520:	61 e0       	ldi	r22, 0x01	; 1
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	cb 01       	movw	r24, r22
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 52a:	1c c0       	rjmp	.+56     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 52c:	20 e0       	ldi	r18, 0x00	; 0
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	4f e7       	ldi	r20, 0x7F	; 127
 532:	53 e4       	ldi	r21, 0x43	; 67
 534:	c5 01       	movw	r24, r10
 536:	b4 01       	movw	r22, r8
 538:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 53c:	18 16       	cp	r1, r24
 53e:	54 f4       	brge	.+20     	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 540:	69 81       	ldd	r22, Y+1	; 0x01
 542:	7a 81       	ldd	r23, Y+2	; 0x02
 544:	8b 81       	ldd	r24, Y+3	; 0x03
 546:	9c 81       	ldd	r25, Y+4	; 0x04
 548:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 54c:	cb 01       	movw	r24, r22
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 552:	0b c0       	rjmp	.+22     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 554:	c5 01       	movw	r24, r10
 556:	b4 01       	movw	r22, r8
 558:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 55c:	56 2e       	mov	r5, r22
 55e:	02 c0       	rjmp	.+4      	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 560:	55 24       	eor	r5, r5
 562:	53 94       	inc	r5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 564:	85 2d       	mov	r24, r5
 566:	8a 95       	dec	r24
 568:	f1 f7       	brne	.-4      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
		// check whether the pause button is pressed. if so, stopping the melody
		if ( BUTTON_PIN & (1<<PAUSEBUTTON_PIN)){
 56a:	1f 9b       	sbis	0x03, 7	; 3
 56c:	4c c0       	rjmp	.+152    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
			 _delay_ms(debouncing_delay);
 56e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <debouncing_delay>
 572:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <debouncing_delay+0x1>
 576:	07 2e       	mov	r0, r23
 578:	00 0c       	add	r0, r0
 57a:	88 0b       	sbc	r24, r24
 57c:	99 0b       	sbc	r25, r25
 57e:	0e 94 df 04 	call	0x9be	; 0x9be <__floatsisf>
 582:	4b 01       	movw	r8, r22
 584:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	4a ef       	ldi	r20, 0xFA	; 250
 58c:	54 e4       	ldi	r21, 0x44	; 68
 58e:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 592:	6b 01       	movw	r12, r22
 594:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	40 e8       	ldi	r20, 0x80	; 128
 59c:	5f e3       	ldi	r21, 0x3F	; 63
 59e:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 5a2:	88 23       	and	r24, r24
 5a4:	44 f1       	brlt	.+80     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
		__ticks = 1;
	else if (__tmp > 65535)
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	3f ef       	ldi	r19, 0xFF	; 255
 5aa:	4f e7       	ldi	r20, 0x7F	; 127
 5ac:	57 e4       	ldi	r21, 0x47	; 71
 5ae:	c7 01       	movw	r24, r14
 5b0:	b6 01       	movw	r22, r12
 5b2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 5b6:	18 16       	cp	r1, r24
 5b8:	cc f4       	brge	.+50     	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e2       	ldi	r20, 0x20	; 32
 5c0:	51 e4       	ldi	r21, 0x41	; 65
 5c2:	c5 01       	movw	r24, r10
 5c4:	b4 01       	movw	r22, r8
 5c6:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 5ca:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 5ce:	06 c0       	rjmp	.+12     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5d0:	88 ec       	ldi	r24, 0xC8	; 200
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5d8:	61 50       	subi	r22, 0x01	; 1
 5da:	71 09       	sbc	r23, r1
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5e0:	61 15       	cp	r22, r1
 5e2:	71 05       	cpc	r23, r1
 5e4:	a9 f7       	brne	.-22     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 5e6:	9e 83       	std	Y+6, r25	; 0x06
 5e8:	8d 83       	std	Y+5, r24	; 0x05
 5ea:	1d c0       	rjmp	.+58     	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5ec:	c7 01       	movw	r24, r14
 5ee:	b6 01       	movw	r22, r12
 5f0:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	cb 01       	movw	r24, r22
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
 600:	1e 82       	std	Y+6, r1	; 0x06
 602:	1d 82       	std	Y+5, r1	; 0x05
 604:	10 c0       	rjmp	.+32     	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
void playthemelody(int Melody[], int MelodyDuration[], int size)
{ 
	// melody will play until the pause button is pressed. 
	int still_playing = 1;
	while(still_playing){
	for (int x=0; x<size; x++){
 606:	8f 81       	ldd	r24, Y+7	; 0x07
 608:	98 85       	ldd	r25, Y+8	; 0x08
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	98 87       	std	Y+8, r25	; 0x08
 60e:	8f 83       	std	Y+7, r24	; 0x07
 610:	04 c0       	rjmp	.+8      	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 612:	e0 e0       	ldi	r30, 0x00	; 0
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	f8 87       	std	Y+8, r31	; 0x08
 618:	ef 83       	std	Y+7, r30	; 0x07
 61a:	8f 81       	ldd	r24, Y+7	; 0x07
 61c:	98 85       	ldd	r25, Y+8	; 0x08
 61e:	86 15       	cp	r24, r6
 620:	97 05       	cpc	r25, r7
 622:	0c f4       	brge	.+2      	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
 624:	e9 ce       	rjmp	.-558    	; 0x3f8 <playthemelody+0x42>
// function to play the selected melody
void playthemelody(int Melody[], int MelodyDuration[], int size)
{ 
	// melody will play until the pause button is pressed. 
	int still_playing = 1;
	while(still_playing){
 626:	ed 81       	ldd	r30, Y+5	; 0x05
 628:	fe 81       	ldd	r31, Y+6	; 0x06
 62a:	ef 2b       	or	r30, r31
 62c:	91 f7       	brne	.-28     	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
			 still_playing = 0;
			 break;
		 }
	 }
   }
}
 62e:	28 96       	adiw	r28, 0x08	; 8
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	1f 91       	pop	r17
 640:	0f 91       	pop	r16
 642:	ff 90       	pop	r15
 644:	ef 90       	pop	r14
 646:	df 90       	pop	r13
 648:	cf 90       	pop	r12
 64a:	bf 90       	pop	r11
 64c:	af 90       	pop	r10
 64e:	9f 90       	pop	r9
 650:	8f 90       	pop	r8
 652:	7f 90       	pop	r7
 654:	6f 90       	pop	r6
 656:	5f 90       	pop	r5
 658:	3f 90       	pop	r3
 65a:	2f 90       	pop	r2
 65c:	08 95       	ret

0000065e <main>:
int sizeoftakeonme = sizeof(TakeOnMe)/sizeof(TakeOnMe[0]);

int main(void)
{
	// declaring portB pin 6 & 7 as inputs
	DDRB=0b00111111;
 65e:	8f e3       	ldi	r24, 0x3F	; 63
 660:	84 b9       	out	0x04, r24	; 4
	
	
	while (1)
	 {
		 // selecting the melody that want to play
		 NextMelody();
 662:	0e 94 53 00 	call	0xa6	; 0xa6 <NextMelody>
		 // check whether the play button is pressed. if so, playing the selected melody
		 if ( BUTTON_PIN & (1<<PLAYBUTTON_PIN)){
 666:	1f 9b       	sbis	0x03, 7	; 3
 668:	fc cf       	rjmp	.-8      	; 0x662 <main+0x4>
			_delay_ms(debouncing_delay);
 66a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <debouncing_delay>
 66e:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <debouncing_delay+0x1>
 672:	07 2e       	mov	r0, r23
 674:	00 0c       	add	r0, r0
 676:	88 0b       	sbc	r24, r24
 678:	99 0b       	sbc	r25, r25
 67a:	0e 94 df 04 	call	0x9be	; 0x9be <__floatsisf>
 67e:	4b 01       	movw	r8, r22
 680:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 682:	20 e0       	ldi	r18, 0x00	; 0
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	4a ef       	ldi	r20, 0xFA	; 250
 688:	54 e4       	ldi	r21, 0x44	; 68
 68a:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 68e:	6b 01       	movw	r12, r22
 690:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	40 e8       	ldi	r20, 0x80	; 128
 698:	5f e3       	ldi	r21, 0x3F	; 63
 69a:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 69e:	88 23       	and	r24, r24
 6a0:	24 f1       	brlt	.+72     	; 0x6ea <main+0x8c>
		__ticks = 1;
	else if (__tmp > 65535)
 6a2:	20 e0       	ldi	r18, 0x00	; 0
 6a4:	3f ef       	ldi	r19, 0xFF	; 255
 6a6:	4f e7       	ldi	r20, 0x7F	; 127
 6a8:	57 e4       	ldi	r21, 0x47	; 71
 6aa:	c7 01       	movw	r24, r14
 6ac:	b6 01       	movw	r22, r12
 6ae:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__gesf2>
 6b2:	18 16       	cp	r1, r24
 6b4:	ac f4       	brge	.+42     	; 0x6e0 <main+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	40 e2       	ldi	r20, 0x20	; 32
 6bc:	51 e4       	ldi	r21, 0x41	; 65
 6be:	c5 01       	movw	r24, r10
 6c0:	b4 01       	movw	r22, r8
 6c2:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 6c6:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <main+0x7a>
 6cc:	88 ec       	ldi	r24, 0xC8	; 200
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <main+0x72>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6d4:	61 50       	subi	r22, 0x01	; 1
 6d6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6d8:	61 15       	cp	r22, r1
 6da:	71 05       	cpc	r23, r1
 6dc:	b9 f7       	brne	.-18     	; 0x6cc <main+0x6e>
 6de:	0a c0       	rjmp	.+20     	; 0x6f4 <main+0x96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6e0:	c7 01       	movw	r24, r14
 6e2:	b6 01       	movw	r22, r12
 6e4:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <main+0x90>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 6ea:	61 e0       	ldi	r22, 0x01	; 1
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	cb 01       	movw	r24, r22
 6f0:	01 97       	sbiw	r24, 0x01	; 1
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <main+0x92>
			if (selectedmelody == 0){
 6f4:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <__data_end>
 6f8:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <__data_end+0x1>
 6fc:	00 97       	sbiw	r24, 0x00	; 0
 6fe:	59 f4       	brne	.+22     	; 0x716 <main+0xb8>
				 playthemelody(GOT, GOTDurations, sizeofgot);
 700:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <sizeofgot>
 704:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <sizeofgot+0x1>
 708:	64 ec       	ldi	r22, 0xC4	; 196
 70a:	74 e0       	ldi	r23, 0x04	; 4
 70c:	88 ee       	ldi	r24, 0xE8	; 232
 70e:	94 e0       	ldi	r25, 0x04	; 4
 710:	0e 94 db 01 	call	0x3b6	; 0x3b6 <playthemelody>
 714:	a6 cf       	rjmp	.-180    	; 0x662 <main+0x4>
		    }
			else if (selectedmelody == 1){
 716:	81 30       	cpi	r24, 0x01	; 1
 718:	91 05       	cpc	r25, r1
 71a:	59 f4       	brne	.+22     	; 0x732 <main+0xd4>
				 playthemelody(Pirates, PiratesDurations, sizeofpirates);
 71c:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <sizeofpirates>
 720:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <sizeofpirates+0x1>
 724:	64 e9       	ldi	r22, 0x94	; 148
 726:	73 e0       	ldi	r23, 0x03	; 3
 728:	8c e2       	ldi	r24, 0x2C	; 44
 72a:	94 e0       	ldi	r25, 0x04	; 4
 72c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <playthemelody>
 730:	98 cf       	rjmp	.-208    	; 0x662 <main+0x4>
			}
			else if (selectedmelody == 2){
 732:	82 30       	cpi	r24, 0x02	; 2
 734:	91 05       	cpc	r25, r1
 736:	59 f4       	brne	.+22     	; 0x74e <main+0xf0>
				 playthemelody(StarWars, StarWarsDurations, sizeofstarwars);
 738:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <sizeofstarwars>
 73c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <sizeofstarwars+0x1>
 740:	6c ef       	ldi	r22, 0xFC	; 252
 742:	72 e0       	ldi	r23, 0x02	; 2
 744:	88 e4       	ldi	r24, 0x48	; 72
 746:	93 e0       	ldi	r25, 0x03	; 3
 748:	0e 94 db 01 	call	0x3b6	; 0x3b6 <playthemelody>
 74c:	8a cf       	rjmp	.-236    	; 0x662 <main+0x4>
			}
			else if (selectedmelody == 3){
 74e:	83 30       	cpi	r24, 0x03	; 3
 750:	91 05       	cpc	r25, r1
 752:	59 f4       	brne	.+22     	; 0x76a <main+0x10c>
				 playthemelody(CoffinDance, CoffinDanceDurations, sizeofcoffindance);
 754:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <sizeofcoffindance>
 758:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <sizeofcoffindance+0x1>
 75c:	6c e6       	ldi	r22, 0x6C	; 108
 75e:	71 e0       	ldi	r23, 0x01	; 1
 760:	84 e3       	ldi	r24, 0x34	; 52
 762:	92 e0       	ldi	r25, 0x02	; 2
 764:	0e 94 db 01 	call	0x3b6	; 0x3b6 <playthemelody>
 768:	7c cf       	rjmp	.-264    	; 0x662 <main+0x4>
		    }
			else if (selectedmelody == 4){
 76a:	04 97       	sbiw	r24, 0x04	; 4
 76c:	09 f0       	breq	.+2      	; 0x770 <main+0x112>
 76e:	79 cf       	rjmp	.-270    	; 0x662 <main+0x4>
				 playthemelody(TakeOnMe, TakeOnMeDurations, sizeoftakeonme);
 770:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 774:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 778:	6c e0       	ldi	r22, 0x0C	; 12
 77a:	71 e0       	ldi	r23, 0x01	; 1
 77c:	8c e3       	ldi	r24, 0x3C	; 60
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	0e 94 db 01 	call	0x3b6	; 0x3b6 <playthemelody>
 784:	6e cf       	rjmp	.-292    	; 0x662 <main+0x4>

00000786 <__subsf3>:
 786:	50 58       	subi	r21, 0x80	; 128

00000788 <__addsf3>:
 788:	bb 27       	eor	r27, r27
 78a:	aa 27       	eor	r26, r26
 78c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__addsf3x>
 790:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_round>
 794:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_pscA>
 798:	38 f0       	brcs	.+14     	; 0x7a8 <__addsf3+0x20>
 79a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscB>
 79e:	20 f0       	brcs	.+8      	; 0x7a8 <__addsf3+0x20>
 7a0:	39 f4       	brne	.+14     	; 0x7b0 <__addsf3+0x28>
 7a2:	9f 3f       	cpi	r25, 0xFF	; 255
 7a4:	19 f4       	brne	.+6      	; 0x7ac <__addsf3+0x24>
 7a6:	26 f4       	brtc	.+8      	; 0x7b0 <__addsf3+0x28>
 7a8:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__fp_nan>
 7ac:	0e f4       	brtc	.+2      	; 0x7b0 <__addsf3+0x28>
 7ae:	e0 95       	com	r30
 7b0:	e7 fb       	bst	r30, 7
 7b2:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_inf>

000007b6 <__addsf3x>:
 7b6:	e9 2f       	mov	r30, r25
 7b8:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_split3>
 7bc:	58 f3       	brcs	.-42     	; 0x794 <__addsf3+0xc>
 7be:	ba 17       	cp	r27, r26
 7c0:	62 07       	cpc	r22, r18
 7c2:	73 07       	cpc	r23, r19
 7c4:	84 07       	cpc	r24, r20
 7c6:	95 07       	cpc	r25, r21
 7c8:	20 f0       	brcs	.+8      	; 0x7d2 <__addsf3x+0x1c>
 7ca:	79 f4       	brne	.+30     	; 0x7ea <__addsf3x+0x34>
 7cc:	a6 f5       	brtc	.+104    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7ce:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_zero>
 7d2:	0e f4       	brtc	.+2      	; 0x7d6 <__addsf3x+0x20>
 7d4:	e0 95       	com	r30
 7d6:	0b 2e       	mov	r0, r27
 7d8:	ba 2f       	mov	r27, r26
 7da:	a0 2d       	mov	r26, r0
 7dc:	0b 01       	movw	r0, r22
 7de:	b9 01       	movw	r22, r18
 7e0:	90 01       	movw	r18, r0
 7e2:	0c 01       	movw	r0, r24
 7e4:	ca 01       	movw	r24, r20
 7e6:	a0 01       	movw	r20, r0
 7e8:	11 24       	eor	r1, r1
 7ea:	ff 27       	eor	r31, r31
 7ec:	59 1b       	sub	r21, r25
 7ee:	99 f0       	breq	.+38     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7f0:	59 3f       	cpi	r21, 0xF9	; 249
 7f2:	50 f4       	brcc	.+20     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f4:	50 3e       	cpi	r21, 0xE0	; 224
 7f6:	68 f1       	brcs	.+90     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 7f8:	1a 16       	cp	r1, r26
 7fa:	f0 40       	sbci	r31, 0x00	; 0
 7fc:	a2 2f       	mov	r26, r18
 7fe:	23 2f       	mov	r18, r19
 800:	34 2f       	mov	r19, r20
 802:	44 27       	eor	r20, r20
 804:	58 5f       	subi	r21, 0xF8	; 248
 806:	f3 cf       	rjmp	.-26     	; 0x7ee <__addsf3x+0x38>
 808:	46 95       	lsr	r20
 80a:	37 95       	ror	r19
 80c:	27 95       	ror	r18
 80e:	a7 95       	ror	r26
 810:	f0 40       	sbci	r31, 0x00	; 0
 812:	53 95       	inc	r21
 814:	c9 f7       	brne	.-14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 816:	7e f4       	brtc	.+30     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 818:	1f 16       	cp	r1, r31
 81a:	ba 0b       	sbc	r27, r26
 81c:	62 0b       	sbc	r22, r18
 81e:	73 0b       	sbc	r23, r19
 820:	84 0b       	sbc	r24, r20
 822:	ba f0       	brmi	.+46     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 824:	91 50       	subi	r25, 0x01	; 1
 826:	a1 f0       	breq	.+40     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 828:	ff 0f       	add	r31, r31
 82a:	bb 1f       	adc	r27, r27
 82c:	66 1f       	adc	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	c2 f7       	brpl	.-16     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 834:	0e c0       	rjmp	.+28     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 836:	ba 0f       	add	r27, r26
 838:	62 1f       	adc	r22, r18
 83a:	73 1f       	adc	r23, r19
 83c:	84 1f       	adc	r24, r20
 83e:	48 f4       	brcc	.+18     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 840:	87 95       	ror	r24
 842:	77 95       	ror	r23
 844:	67 95       	ror	r22
 846:	b7 95       	ror	r27
 848:	f7 95       	ror	r31
 84a:	9e 3f       	cpi	r25, 0xFE	; 254
 84c:	08 f0       	brcs	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84e:	b0 cf       	rjmp	.-160    	; 0x7b0 <__addsf3+0x28>
 850:	93 95       	inc	r25
 852:	88 0f       	add	r24, r24
 854:	08 f0       	brcs	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 856:	99 27       	eor	r25, r25
 858:	ee 0f       	add	r30, r30
 85a:	97 95       	ror	r25
 85c:	87 95       	ror	r24
 85e:	08 95       	ret

00000860 <__cmpsf2>:
 860:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_cmp>
 864:	08 f4       	brcc	.+2      	; 0x868 <__cmpsf2+0x8>
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	08 95       	ret

0000086a <__divsf3>:
 86a:	0e 94 49 04 	call	0x892	; 0x892 <__divsf3x>
 86e:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_round>
 872:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscB>
 876:	58 f0       	brcs	.+22     	; 0x88e <__divsf3+0x24>
 878:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_pscA>
 87c:	40 f0       	brcs	.+16     	; 0x88e <__divsf3+0x24>
 87e:	29 f4       	brne	.+10     	; 0x88a <__divsf3+0x20>
 880:	5f 3f       	cpi	r21, 0xFF	; 255
 882:	29 f0       	breq	.+10     	; 0x88e <__divsf3+0x24>
 884:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_inf>
 888:	51 11       	cpse	r21, r1
 88a:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_szero>
 88e:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__fp_nan>

00000892 <__divsf3x>:
 892:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_split3>
 896:	68 f3       	brcs	.-38     	; 0x872 <__divsf3+0x8>

00000898 <__divsf3_pse>:
 898:	99 23       	and	r25, r25
 89a:	b1 f3       	breq	.-20     	; 0x888 <__divsf3+0x1e>
 89c:	55 23       	and	r21, r21
 89e:	91 f3       	breq	.-28     	; 0x884 <__divsf3+0x1a>
 8a0:	95 1b       	sub	r25, r21
 8a2:	55 0b       	sbc	r21, r21
 8a4:	bb 27       	eor	r27, r27
 8a6:	aa 27       	eor	r26, r26
 8a8:	62 17       	cp	r22, r18
 8aa:	73 07       	cpc	r23, r19
 8ac:	84 07       	cpc	r24, r20
 8ae:	38 f0       	brcs	.+14     	; 0x8be <__divsf3_pse+0x26>
 8b0:	9f 5f       	subi	r25, 0xFF	; 255
 8b2:	5f 4f       	sbci	r21, 0xFF	; 255
 8b4:	22 0f       	add	r18, r18
 8b6:	33 1f       	adc	r19, r19
 8b8:	44 1f       	adc	r20, r20
 8ba:	aa 1f       	adc	r26, r26
 8bc:	a9 f3       	breq	.-22     	; 0x8a8 <__divsf3_pse+0x10>
 8be:	35 d0       	rcall	.+106    	; 0x92a <__stack+0x2b>
 8c0:	0e 2e       	mov	r0, r30
 8c2:	3a f0       	brmi	.+14     	; 0x8d2 <__divsf3_pse+0x3a>
 8c4:	e0 e8       	ldi	r30, 0x80	; 128
 8c6:	32 d0       	rcall	.+100    	; 0x92c <__stack+0x2d>
 8c8:	91 50       	subi	r25, 0x01	; 1
 8ca:	50 40       	sbci	r21, 0x00	; 0
 8cc:	e6 95       	lsr	r30
 8ce:	00 1c       	adc	r0, r0
 8d0:	ca f7       	brpl	.-14     	; 0x8c4 <__divsf3_pse+0x2c>
 8d2:	2b d0       	rcall	.+86     	; 0x92a <__stack+0x2b>
 8d4:	fe 2f       	mov	r31, r30
 8d6:	29 d0       	rcall	.+82     	; 0x92a <__stack+0x2b>
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	bb 1f       	adc	r27, r27
 8e0:	26 17       	cp	r18, r22
 8e2:	37 07       	cpc	r19, r23
 8e4:	48 07       	cpc	r20, r24
 8e6:	ab 07       	cpc	r26, r27
 8e8:	b0 e8       	ldi	r27, 0x80	; 128
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__divsf3_pse+0x56>
 8ec:	bb 0b       	sbc	r27, r27
 8ee:	80 2d       	mov	r24, r0
 8f0:	bf 01       	movw	r22, r30
 8f2:	ff 27       	eor	r31, r31
 8f4:	93 58       	subi	r25, 0x83	; 131
 8f6:	5f 4f       	sbci	r21, 0xFF	; 255
 8f8:	3a f0       	brmi	.+14     	; 0x908 <__stack+0x9>
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	51 05       	cpc	r21, r1
 8fe:	78 f0       	brcs	.+30     	; 0x91e <__stack+0x1f>
 900:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_inf>
 904:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_szero>
 908:	5f 3f       	cpi	r21, 0xFF	; 255
 90a:	e4 f3       	brlt	.-8      	; 0x904 <__stack+0x5>
 90c:	98 3e       	cpi	r25, 0xE8	; 232
 90e:	d4 f3       	brlt	.-12     	; 0x904 <__stack+0x5>
 910:	86 95       	lsr	r24
 912:	77 95       	ror	r23
 914:	67 95       	ror	r22
 916:	b7 95       	ror	r27
 918:	f7 95       	ror	r31
 91a:	9f 5f       	subi	r25, 0xFF	; 255
 91c:	c9 f7       	brne	.-14     	; 0x910 <__stack+0x11>
 91e:	88 0f       	add	r24, r24
 920:	91 1d       	adc	r25, r1
 922:	96 95       	lsr	r25
 924:	87 95       	ror	r24
 926:	97 f9       	bld	r25, 7
 928:	08 95       	ret
 92a:	e1 e0       	ldi	r30, 0x01	; 1
 92c:	66 0f       	add	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	88 1f       	adc	r24, r24
 932:	bb 1f       	adc	r27, r27
 934:	62 17       	cp	r22, r18
 936:	73 07       	cpc	r23, r19
 938:	84 07       	cpc	r24, r20
 93a:	ba 07       	cpc	r27, r26
 93c:	20 f0       	brcs	.+8      	; 0x946 <__stack+0x47>
 93e:	62 1b       	sub	r22, r18
 940:	73 0b       	sbc	r23, r19
 942:	84 0b       	sbc	r24, r20
 944:	ba 0b       	sbc	r27, r26
 946:	ee 1f       	adc	r30, r30
 948:	88 f7       	brcc	.-30     	; 0x92c <__stack+0x2d>
 94a:	e0 95       	com	r30
 94c:	08 95       	ret

0000094e <__fixsfsi>:
 94e:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 952:	68 94       	set
 954:	b1 11       	cpse	r27, r1
 956:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_szero>
 95a:	08 95       	ret

0000095c <__fixunssfsi>:
 95c:	0e 94 6e 05 	call	0xadc	; 0xadc <__fp_splitA>
 960:	88 f0       	brcs	.+34     	; 0x984 <__fixunssfsi+0x28>
 962:	9f 57       	subi	r25, 0x7F	; 127
 964:	98 f0       	brcs	.+38     	; 0x98c <__fixunssfsi+0x30>
 966:	b9 2f       	mov	r27, r25
 968:	99 27       	eor	r25, r25
 96a:	b7 51       	subi	r27, 0x17	; 23
 96c:	b0 f0       	brcs	.+44     	; 0x99a <__fixunssfsi+0x3e>
 96e:	e1 f0       	breq	.+56     	; 0x9a8 <__fixunssfsi+0x4c>
 970:	66 0f       	add	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	88 1f       	adc	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	1a f0       	brmi	.+6      	; 0x980 <__fixunssfsi+0x24>
 97a:	ba 95       	dec	r27
 97c:	c9 f7       	brne	.-14     	; 0x970 <__fixunssfsi+0x14>
 97e:	14 c0       	rjmp	.+40     	; 0x9a8 <__fixunssfsi+0x4c>
 980:	b1 30       	cpi	r27, 0x01	; 1
 982:	91 f0       	breq	.+36     	; 0x9a8 <__fixunssfsi+0x4c>
 984:	0e 94 88 05 	call	0xb10	; 0xb10 <__fp_zero>
 988:	b1 e0       	ldi	r27, 0x01	; 1
 98a:	08 95       	ret
 98c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_zero>
 990:	67 2f       	mov	r22, r23
 992:	78 2f       	mov	r23, r24
 994:	88 27       	eor	r24, r24
 996:	b8 5f       	subi	r27, 0xF8	; 248
 998:	39 f0       	breq	.+14     	; 0x9a8 <__fixunssfsi+0x4c>
 99a:	b9 3f       	cpi	r27, 0xF9	; 249
 99c:	cc f3       	brlt	.-14     	; 0x990 <__fixunssfsi+0x34>
 99e:	86 95       	lsr	r24
 9a0:	77 95       	ror	r23
 9a2:	67 95       	ror	r22
 9a4:	b3 95       	inc	r27
 9a6:	d9 f7       	brne	.-10     	; 0x99e <__fixunssfsi+0x42>
 9a8:	3e f4       	brtc	.+14     	; 0x9b8 <__fixunssfsi+0x5c>
 9aa:	90 95       	com	r25
 9ac:	80 95       	com	r24
 9ae:	70 95       	com	r23
 9b0:	61 95       	neg	r22
 9b2:	7f 4f       	sbci	r23, 0xFF	; 255
 9b4:	8f 4f       	sbci	r24, 0xFF	; 255
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	08 95       	ret

000009ba <__floatunsisf>:
 9ba:	e8 94       	clt
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <__floatsisf+0x12>

000009be <__floatsisf>:
 9be:	97 fb       	bst	r25, 7
 9c0:	3e f4       	brtc	.+14     	; 0x9d0 <__floatsisf+0x12>
 9c2:	90 95       	com	r25
 9c4:	80 95       	com	r24
 9c6:	70 95       	com	r23
 9c8:	61 95       	neg	r22
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	8f 4f       	sbci	r24, 0xFF	; 255
 9ce:	9f 4f       	sbci	r25, 0xFF	; 255
 9d0:	99 23       	and	r25, r25
 9d2:	a9 f0       	breq	.+42     	; 0x9fe <__floatsisf+0x40>
 9d4:	f9 2f       	mov	r31, r25
 9d6:	96 e9       	ldi	r25, 0x96	; 150
 9d8:	bb 27       	eor	r27, r27
 9da:	93 95       	inc	r25
 9dc:	f6 95       	lsr	r31
 9de:	87 95       	ror	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	b7 95       	ror	r27
 9e6:	f1 11       	cpse	r31, r1
 9e8:	f8 cf       	rjmp	.-16     	; 0x9da <__floatsisf+0x1c>
 9ea:	fa f4       	brpl	.+62     	; 0xa2a <__floatsisf+0x6c>
 9ec:	bb 0f       	add	r27, r27
 9ee:	11 f4       	brne	.+4      	; 0x9f4 <__floatsisf+0x36>
 9f0:	60 ff       	sbrs	r22, 0
 9f2:	1b c0       	rjmp	.+54     	; 0xa2a <__floatsisf+0x6c>
 9f4:	6f 5f       	subi	r22, 0xFF	; 255
 9f6:	7f 4f       	sbci	r23, 0xFF	; 255
 9f8:	8f 4f       	sbci	r24, 0xFF	; 255
 9fa:	9f 4f       	sbci	r25, 0xFF	; 255
 9fc:	16 c0       	rjmp	.+44     	; 0xa2a <__floatsisf+0x6c>
 9fe:	88 23       	and	r24, r24
 a00:	11 f0       	breq	.+4      	; 0xa06 <__floatsisf+0x48>
 a02:	96 e9       	ldi	r25, 0x96	; 150
 a04:	11 c0       	rjmp	.+34     	; 0xa28 <__floatsisf+0x6a>
 a06:	77 23       	and	r23, r23
 a08:	21 f0       	breq	.+8      	; 0xa12 <__floatsisf+0x54>
 a0a:	9e e8       	ldi	r25, 0x8E	; 142
 a0c:	87 2f       	mov	r24, r23
 a0e:	76 2f       	mov	r23, r22
 a10:	05 c0       	rjmp	.+10     	; 0xa1c <__floatsisf+0x5e>
 a12:	66 23       	and	r22, r22
 a14:	71 f0       	breq	.+28     	; 0xa32 <__floatsisf+0x74>
 a16:	96 e8       	ldi	r25, 0x86	; 134
 a18:	86 2f       	mov	r24, r22
 a1a:	70 e0       	ldi	r23, 0x00	; 0
 a1c:	60 e0       	ldi	r22, 0x00	; 0
 a1e:	2a f0       	brmi	.+10     	; 0xa2a <__floatsisf+0x6c>
 a20:	9a 95       	dec	r25
 a22:	66 0f       	add	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	88 1f       	adc	r24, r24
 a28:	da f7       	brpl	.-10     	; 0xa20 <__floatsisf+0x62>
 a2a:	88 0f       	add	r24, r24
 a2c:	96 95       	lsr	r25
 a2e:	87 95       	ror	r24
 a30:	97 f9       	bld	r25, 7
 a32:	08 95       	ret

00000a34 <__fp_cmp>:
 a34:	99 0f       	add	r25, r25
 a36:	00 08       	sbc	r0, r0
 a38:	55 0f       	add	r21, r21
 a3a:	aa 0b       	sbc	r26, r26
 a3c:	e0 e8       	ldi	r30, 0x80	; 128
 a3e:	fe ef       	ldi	r31, 0xFE	; 254
 a40:	16 16       	cp	r1, r22
 a42:	17 06       	cpc	r1, r23
 a44:	e8 07       	cpc	r30, r24
 a46:	f9 07       	cpc	r31, r25
 a48:	c0 f0       	brcs	.+48     	; 0xa7a <__fp_cmp+0x46>
 a4a:	12 16       	cp	r1, r18
 a4c:	13 06       	cpc	r1, r19
 a4e:	e4 07       	cpc	r30, r20
 a50:	f5 07       	cpc	r31, r21
 a52:	98 f0       	brcs	.+38     	; 0xa7a <__fp_cmp+0x46>
 a54:	62 1b       	sub	r22, r18
 a56:	73 0b       	sbc	r23, r19
 a58:	84 0b       	sbc	r24, r20
 a5a:	95 0b       	sbc	r25, r21
 a5c:	39 f4       	brne	.+14     	; 0xa6c <__fp_cmp+0x38>
 a5e:	0a 26       	eor	r0, r26
 a60:	61 f0       	breq	.+24     	; 0xa7a <__fp_cmp+0x46>
 a62:	23 2b       	or	r18, r19
 a64:	24 2b       	or	r18, r20
 a66:	25 2b       	or	r18, r21
 a68:	21 f4       	brne	.+8      	; 0xa72 <__fp_cmp+0x3e>
 a6a:	08 95       	ret
 a6c:	0a 26       	eor	r0, r26
 a6e:	09 f4       	brne	.+2      	; 0xa72 <__fp_cmp+0x3e>
 a70:	a1 40       	sbci	r26, 0x01	; 1
 a72:	a6 95       	lsr	r26
 a74:	8f ef       	ldi	r24, 0xFF	; 255
 a76:	81 1d       	adc	r24, r1
 a78:	81 1d       	adc	r24, r1
 a7a:	08 95       	ret

00000a7c <__fp_inf>:
 a7c:	97 f9       	bld	r25, 7
 a7e:	9f 67       	ori	r25, 0x7F	; 127
 a80:	80 e8       	ldi	r24, 0x80	; 128
 a82:	70 e0       	ldi	r23, 0x00	; 0
 a84:	60 e0       	ldi	r22, 0x00	; 0
 a86:	08 95       	ret

00000a88 <__fp_nan>:
 a88:	9f ef       	ldi	r25, 0xFF	; 255
 a8a:	80 ec       	ldi	r24, 0xC0	; 192
 a8c:	08 95       	ret

00000a8e <__fp_pscA>:
 a8e:	00 24       	eor	r0, r0
 a90:	0a 94       	dec	r0
 a92:	16 16       	cp	r1, r22
 a94:	17 06       	cpc	r1, r23
 a96:	18 06       	cpc	r1, r24
 a98:	09 06       	cpc	r0, r25
 a9a:	08 95       	ret

00000a9c <__fp_pscB>:
 a9c:	00 24       	eor	r0, r0
 a9e:	0a 94       	dec	r0
 aa0:	12 16       	cp	r1, r18
 aa2:	13 06       	cpc	r1, r19
 aa4:	14 06       	cpc	r1, r20
 aa6:	05 06       	cpc	r0, r21
 aa8:	08 95       	ret

00000aaa <__fp_round>:
 aaa:	09 2e       	mov	r0, r25
 aac:	03 94       	inc	r0
 aae:	00 0c       	add	r0, r0
 ab0:	11 f4       	brne	.+4      	; 0xab6 <__fp_round+0xc>
 ab2:	88 23       	and	r24, r24
 ab4:	52 f0       	brmi	.+20     	; 0xaca <__fp_round+0x20>
 ab6:	bb 0f       	add	r27, r27
 ab8:	40 f4       	brcc	.+16     	; 0xaca <__fp_round+0x20>
 aba:	bf 2b       	or	r27, r31
 abc:	11 f4       	brne	.+4      	; 0xac2 <__fp_round+0x18>
 abe:	60 ff       	sbrs	r22, 0
 ac0:	04 c0       	rjmp	.+8      	; 0xaca <__fp_round+0x20>
 ac2:	6f 5f       	subi	r22, 0xFF	; 255
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	8f 4f       	sbci	r24, 0xFF	; 255
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	08 95       	ret

00000acc <__fp_split3>:
 acc:	57 fd       	sbrc	r21, 7
 ace:	90 58       	subi	r25, 0x80	; 128
 ad0:	44 0f       	add	r20, r20
 ad2:	55 1f       	adc	r21, r21
 ad4:	59 f0       	breq	.+22     	; 0xaec <__fp_splitA+0x10>
 ad6:	5f 3f       	cpi	r21, 0xFF	; 255
 ad8:	71 f0       	breq	.+28     	; 0xaf6 <__fp_splitA+0x1a>
 ada:	47 95       	ror	r20

00000adc <__fp_splitA>:
 adc:	88 0f       	add	r24, r24
 ade:	97 fb       	bst	r25, 7
 ae0:	99 1f       	adc	r25, r25
 ae2:	61 f0       	breq	.+24     	; 0xafc <__fp_splitA+0x20>
 ae4:	9f 3f       	cpi	r25, 0xFF	; 255
 ae6:	79 f0       	breq	.+30     	; 0xb06 <__fp_splitA+0x2a>
 ae8:	87 95       	ror	r24
 aea:	08 95       	ret
 aec:	12 16       	cp	r1, r18
 aee:	13 06       	cpc	r1, r19
 af0:	14 06       	cpc	r1, r20
 af2:	55 1f       	adc	r21, r21
 af4:	f2 cf       	rjmp	.-28     	; 0xada <__fp_split3+0xe>
 af6:	46 95       	lsr	r20
 af8:	f1 df       	rcall	.-30     	; 0xadc <__fp_splitA>
 afa:	08 c0       	rjmp	.+16     	; 0xb0c <__fp_splitA+0x30>
 afc:	16 16       	cp	r1, r22
 afe:	17 06       	cpc	r1, r23
 b00:	18 06       	cpc	r1, r24
 b02:	99 1f       	adc	r25, r25
 b04:	f1 cf       	rjmp	.-30     	; 0xae8 <__fp_splitA+0xc>
 b06:	86 95       	lsr	r24
 b08:	71 05       	cpc	r23, r1
 b0a:	61 05       	cpc	r22, r1
 b0c:	08 94       	sec
 b0e:	08 95       	ret

00000b10 <__fp_zero>:
 b10:	e8 94       	clt

00000b12 <__fp_szero>:
 b12:	bb 27       	eor	r27, r27
 b14:	66 27       	eor	r22, r22
 b16:	77 27       	eor	r23, r23
 b18:	cb 01       	movw	r24, r22
 b1a:	97 f9       	bld	r25, 7
 b1c:	08 95       	ret

00000b1e <__gesf2>:
 b1e:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_cmp>
 b22:	08 f4       	brcc	.+2      	; 0xb26 <__gesf2+0x8>
 b24:	8f ef       	ldi	r24, 0xFF	; 255
 b26:	08 95       	ret

00000b28 <__mulsf3>:
 b28:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__mulsf3x>
 b2c:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__fp_round>
 b30:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_pscA>
 b34:	38 f0       	brcs	.+14     	; 0xb44 <__mulsf3+0x1c>
 b36:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscB>
 b3a:	20 f0       	brcs	.+8      	; 0xb44 <__mulsf3+0x1c>
 b3c:	95 23       	and	r25, r21
 b3e:	11 f0       	breq	.+4      	; 0xb44 <__mulsf3+0x1c>
 b40:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_inf>
 b44:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__fp_nan>
 b48:	11 24       	eor	r1, r1
 b4a:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_szero>

00000b4e <__mulsf3x>:
 b4e:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_split3>
 b52:	70 f3       	brcs	.-36     	; 0xb30 <__mulsf3+0x8>

00000b54 <__mulsf3_pse>:
 b54:	95 9f       	mul	r25, r21
 b56:	c1 f3       	breq	.-16     	; 0xb48 <__mulsf3+0x20>
 b58:	95 0f       	add	r25, r21
 b5a:	50 e0       	ldi	r21, 0x00	; 0
 b5c:	55 1f       	adc	r21, r21
 b5e:	62 9f       	mul	r22, r18
 b60:	f0 01       	movw	r30, r0
 b62:	72 9f       	mul	r23, r18
 b64:	bb 27       	eor	r27, r27
 b66:	f0 0d       	add	r31, r0
 b68:	b1 1d       	adc	r27, r1
 b6a:	63 9f       	mul	r22, r19
 b6c:	aa 27       	eor	r26, r26
 b6e:	f0 0d       	add	r31, r0
 b70:	b1 1d       	adc	r27, r1
 b72:	aa 1f       	adc	r26, r26
 b74:	64 9f       	mul	r22, r20
 b76:	66 27       	eor	r22, r22
 b78:	b0 0d       	add	r27, r0
 b7a:	a1 1d       	adc	r26, r1
 b7c:	66 1f       	adc	r22, r22
 b7e:	82 9f       	mul	r24, r18
 b80:	22 27       	eor	r18, r18
 b82:	b0 0d       	add	r27, r0
 b84:	a1 1d       	adc	r26, r1
 b86:	62 1f       	adc	r22, r18
 b88:	73 9f       	mul	r23, r19
 b8a:	b0 0d       	add	r27, r0
 b8c:	a1 1d       	adc	r26, r1
 b8e:	62 1f       	adc	r22, r18
 b90:	83 9f       	mul	r24, r19
 b92:	a0 0d       	add	r26, r0
 b94:	61 1d       	adc	r22, r1
 b96:	22 1f       	adc	r18, r18
 b98:	74 9f       	mul	r23, r20
 b9a:	33 27       	eor	r19, r19
 b9c:	a0 0d       	add	r26, r0
 b9e:	61 1d       	adc	r22, r1
 ba0:	23 1f       	adc	r18, r19
 ba2:	84 9f       	mul	r24, r20
 ba4:	60 0d       	add	r22, r0
 ba6:	21 1d       	adc	r18, r1
 ba8:	82 2f       	mov	r24, r18
 baa:	76 2f       	mov	r23, r22
 bac:	6a 2f       	mov	r22, r26
 bae:	11 24       	eor	r1, r1
 bb0:	9f 57       	subi	r25, 0x7F	; 127
 bb2:	50 40       	sbci	r21, 0x00	; 0
 bb4:	9a f0       	brmi	.+38     	; 0xbdc <__mulsf3_pse+0x88>
 bb6:	f1 f0       	breq	.+60     	; 0xbf4 <__mulsf3_pse+0xa0>
 bb8:	88 23       	and	r24, r24
 bba:	4a f0       	brmi	.+18     	; 0xbce <__mulsf3_pse+0x7a>
 bbc:	ee 0f       	add	r30, r30
 bbe:	ff 1f       	adc	r31, r31
 bc0:	bb 1f       	adc	r27, r27
 bc2:	66 1f       	adc	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	91 50       	subi	r25, 0x01	; 1
 bca:	50 40       	sbci	r21, 0x00	; 0
 bcc:	a9 f7       	brne	.-22     	; 0xbb8 <__mulsf3_pse+0x64>
 bce:	9e 3f       	cpi	r25, 0xFE	; 254
 bd0:	51 05       	cpc	r21, r1
 bd2:	80 f0       	brcs	.+32     	; 0xbf4 <__mulsf3_pse+0xa0>
 bd4:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_inf>
 bd8:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_szero>
 bdc:	5f 3f       	cpi	r21, 0xFF	; 255
 bde:	e4 f3       	brlt	.-8      	; 0xbd8 <__mulsf3_pse+0x84>
 be0:	98 3e       	cpi	r25, 0xE8	; 232
 be2:	d4 f3       	brlt	.-12     	; 0xbd8 <__mulsf3_pse+0x84>
 be4:	86 95       	lsr	r24
 be6:	77 95       	ror	r23
 be8:	67 95       	ror	r22
 bea:	b7 95       	ror	r27
 bec:	f7 95       	ror	r31
 bee:	e7 95       	ror	r30
 bf0:	9f 5f       	subi	r25, 0xFF	; 255
 bf2:	c1 f7       	brne	.-16     	; 0xbe4 <__mulsf3_pse+0x90>
 bf4:	fe 2b       	or	r31, r30
 bf6:	88 0f       	add	r24, r24
 bf8:	91 1d       	adc	r25, r1
 bfa:	96 95       	lsr	r25
 bfc:	87 95       	ror	r24
 bfe:	97 f9       	bld	r25, 7
 c00:	08 95       	ret

00000c02 <__divmodhi4>:
 c02:	97 fb       	bst	r25, 7
 c04:	07 2e       	mov	r0, r23
 c06:	16 f4       	brtc	.+4      	; 0xc0c <__divmodhi4+0xa>
 c08:	00 94       	com	r0
 c0a:	07 d0       	rcall	.+14     	; 0xc1a <__divmodhi4_neg1>
 c0c:	77 fd       	sbrc	r23, 7
 c0e:	09 d0       	rcall	.+18     	; 0xc22 <__divmodhi4_neg2>
 c10:	0e 94 15 06 	call	0xc2a	; 0xc2a <__udivmodhi4>
 c14:	07 fc       	sbrc	r0, 7
 c16:	05 d0       	rcall	.+10     	; 0xc22 <__divmodhi4_neg2>
 c18:	3e f4       	brtc	.+14     	; 0xc28 <__divmodhi4_exit>

00000c1a <__divmodhi4_neg1>:
 c1a:	90 95       	com	r25
 c1c:	81 95       	neg	r24
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	08 95       	ret

00000c22 <__divmodhi4_neg2>:
 c22:	70 95       	com	r23
 c24:	61 95       	neg	r22
 c26:	7f 4f       	sbci	r23, 0xFF	; 255

00000c28 <__divmodhi4_exit>:
 c28:	08 95       	ret

00000c2a <__udivmodhi4>:
 c2a:	aa 1b       	sub	r26, r26
 c2c:	bb 1b       	sub	r27, r27
 c2e:	51 e1       	ldi	r21, 0x11	; 17
 c30:	07 c0       	rjmp	.+14     	; 0xc40 <__udivmodhi4_ep>

00000c32 <__udivmodhi4_loop>:
 c32:	aa 1f       	adc	r26, r26
 c34:	bb 1f       	adc	r27, r27
 c36:	a6 17       	cp	r26, r22
 c38:	b7 07       	cpc	r27, r23
 c3a:	10 f0       	brcs	.+4      	; 0xc40 <__udivmodhi4_ep>
 c3c:	a6 1b       	sub	r26, r22
 c3e:	b7 0b       	sbc	r27, r23

00000c40 <__udivmodhi4_ep>:
 c40:	88 1f       	adc	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	5a 95       	dec	r21
 c46:	a9 f7       	brne	.-22     	; 0xc32 <__udivmodhi4_loop>
 c48:	80 95       	com	r24
 c4a:	90 95       	com	r25
 c4c:	bc 01       	movw	r22, r24
 c4e:	cd 01       	movw	r24, r26
 c50:	08 95       	ret

00000c52 <_exit>:
 c52:	f8 94       	cli

00000c54 <__stop_program>:
 c54:	ff cf       	rjmp	.-2      	; 0xc54 <__stop_program>
