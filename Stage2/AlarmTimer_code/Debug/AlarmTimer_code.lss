
AlarmTimer_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4f  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a2  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004dd  00000000  00000000  000015cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d2  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000242  00000000  00000000  00002056  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  78:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8i2c_initv>:
#define DS1307_H_

#include <avr/io.h>

void i2c_init(){
	TWBR = 0x48;	// set bit rate 72
  80:	88 e4       	ldi	r24, 0x48	; 72
  82:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1<<TWEN);
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWSR = 0x00;	//sets the prescaler value to 1
  8c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  90:	08 95       	ret

00000092 <_Z9i2c_startv>:
}

void i2c_start(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);	//initiate the start condition
  92:	84 ea       	ldi	r24, 0xA4	; 164
  94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));
  98:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  9c:	88 23       	and	r24, r24
  9e:	e4 f7       	brge	.-8      	; 0x98 <_Z9i2c_startv+0x6>
	
	if ((TWSR) & 0xF8 != 0x08){
  a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  a4:	80 ff       	sbrs	r24, 0
  a6:	03 c0       	rjmp	.+6      	; 0xae <_Z9i2c_startv+0x1c>
		PORTB = (1<<PORTB5);	//check if the start condition has been transmitted
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	08 95       	ret
	}
	else{
		PORTB |= (1<<PORTB0);
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	08 95       	ret

000000b6 <_Z9i2c_SLA_Wv>:
	}
}

void i2c_SLA_W(){
	TWDR = 0b11010000;
  b6:	80 ed       	ldi	r24, 0xD0	; 208
  b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
  bc:	84 e8       	ldi	r24, 0x84	; 132
  be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));
  c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c6:	88 23       	and	r24, r24
  c8:	e4 f7       	brge	.-8      	; 0xc2 <_Z9i2c_SLA_Wv+0xc>
	
	if ((TWSR & 0xF8) != 0x18){
  ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	88 31       	cpi	r24, 0x18	; 24
  d2:	19 f0       	breq	.+6      	; 0xda <_Z9i2c_SLA_Wv+0x24>
		PORTB = (1<<PORTB5);
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	08 95       	ret
	}
	else{
		PORTB |= (1<<PORTB1);	//confirm SLA_W has been recieved
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	85 b9       	out	0x05, r24	; 5
  e0:	08 95       	ret

000000e2 <_Z9i2c_SLA_Rv>:
	}
}

void i2c_SLA_R(){
	TWDR = 0b11010001;
  e2:	81 ed       	ldi	r24, 0xD1	; 209
  e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));
  ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f2:	88 23       	and	r24, r24
  f4:	e4 f7       	brge	.-8      	; 0xee <_Z9i2c_SLA_Rv+0xc>
	
	if ((TWSR & 0xF8) != 0x40){
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fa:	88 7f       	andi	r24, 0xF8	; 248
  fc:	80 34       	cpi	r24, 0x40	; 64
  fe:	19 f0       	breq	.+6      	; 0x106 <_Z9i2c_SLA_Rv+0x24>
		PORTB = (1<<PORTB5);
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	85 b9       	out	0x05, r24	; 5
 104:	08 95       	ret
	}
	else{
		PORTB |= (1<<PORTB3);	//confirm SLA_W has been recieved
 106:	85 b1       	in	r24, 0x05	; 5
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	08 95       	ret

0000010e <_Z9i2c_writeh>:
	}

}

void i2c_write(uint8_t x){
	TWDR = x;
 10e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));
 118:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	88 23       	and	r24, r24
 11e:	e4 f7       	brge	.-8      	; 0x118 <_Z9i2c_writeh+0xa>
	
	
	if ((TWSR & 0xF8) != 0x28){
 120:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	88 32       	cpi	r24, 0x28	; 40
 128:	19 f0       	breq	.+6      	; 0x130 <_Z9i2c_writeh+0x22>
		PORTB = (1<<PORTB5);
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	08 95       	ret
	}
	else{
		PORTB |= (1<<PORTB2);
 130:	85 b1       	in	r24, 0x05	; 5
 132:	84 60       	ori	r24, 0x04	; 4
 134:	85 b9       	out	0x05, r24	; 5
 136:	08 95       	ret

00000138 <_Z8i2c_readv>:
}


uint8_t i2c_read(){
	
	TWCR = (1<<TWINT) | (1<<TWEN);
 138:	84 e8       	ldi	r24, 0x84	; 132
 13a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));
 13e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 142:	88 23       	and	r24, r24
 144:	e4 f7       	brge	.-8      	; 0x13e <_Z8i2c_readv+0x6>
	return TWDR;
 146:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 14a:	08 95       	ret

0000014c <_Z8i2c_stopv>:



void i2c_stop(){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 14c:	84 e9       	ldi	r24, 0x94	; 148
 14e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 152:	08 95       	ret

00000154 <_Z8set_timeP5rtc_t>:
	uint8_t date;
	uint8_t month;
	uint8_t year;
}rtc_t;

void set_time(rtc_t * rtc){
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
	i2c_init();
 15a:	0e 94 40 00 	call	0x80	; 0x80 <_Z8i2c_initv>
	i2c_start();
 15e:	0e 94 49 00 	call	0x92	; 0x92 <_Z9i2c_startv>
	i2c_SLA_W();	//initiates the device ds1307
 162:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z9i2c_SLA_Wv>
	i2c_write(0x00);	//set the register pointer to 00(seconds reg)
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9i2c_writeh>
	
	i2c_write(rtc -> seconds);	//seconds -> 50
 16c:	88 81       	ld	r24, Y
 16e:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9i2c_writeh>
	i2c_write(rtc -> minute);	//minutes -> 17
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9i2c_writeh>
	i2c_write(rtc -> hour);	//hour -> 20
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9i2c_writeh>
	i2c_write(rtc -> weekDay);	//day -> Thursday(4)
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9i2c_writeh>
	i2c_write(rtc -> date);	//date -> 27
 184:	8c 81       	ldd	r24, Y+4	; 0x04
 186:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9i2c_writeh>
	i2c_write(rtc -> month);	//month -> May
 18a:	8d 81       	ldd	r24, Y+5	; 0x05
 18c:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9i2c_writeh>
	i2c_write(rtc -> year);	//year -> 2021
 190:	8e 81       	ldd	r24, Y+6	; 0x06
 192:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9i2c_writeh>
	
	//stop transmission
	i2c_stop();
 196:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z8i2c_stopv>
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <_Z9read_timeh>:



uint8_t read_time(uint8_t reg){
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
	//sets the register pointer to 00H
	uint8_t x;
	i2c_start();
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <_Z9i2c_startv>
	i2c_SLA_W();	//initiates the device ds1307
 1a8:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z9i2c_SLA_Wv>
	i2c_write(reg);	//set the register pointer to reg)
 1ac:	8c 2f       	mov	r24, r28
 1ae:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9i2c_writeh>
	i2c_stop();
 1b2:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z8i2c_stopv>
	
	i2c_start();
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <_Z9i2c_startv>
	i2c_SLA_R();
 1ba:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z9i2c_SLA_Rv>
	x = i2c_read();
 1be:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8i2c_readv>
 1c2:	c8 2f       	mov	r28, r24
	i2c_stop();
 1c4:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z8i2c_stopv>
	return x;
}
 1c8:	8c 2f       	mov	r24, r28
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <main>:
#include <util/delay.h>
#include "ds1307.h"


int main(void)
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	27 97       	sbiw	r28, 0x07	; 7
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
	DDRD = (1<<PORTD2) | (1<<PORTD3); // sets the pins PD2 & PD3 as outputs
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD4) | (1<<PORTD5); // enable the input pull ups for PD4 & PD4
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	80 63       	ori	r24, 0x30	; 48
 1ea:	8b b9       	out	0x0b, r24	; 11
	
	rtc_t rtc;
	
	rtc.seconds =  0x55;
 1ec:	85 e5       	ldi	r24, 0x55	; 85
 1ee:	89 83       	std	Y+1, r24	; 0x01
	rtc.minute =  0x00;
 1f0:	1a 82       	std	Y+2, r1	; 0x02
	rtc.hour = 0x20; //  20:17:00
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	8b 83       	std	Y+3, r24	; 0x03

	rtc.weekDay = 0x04;
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x27;
 1fa:	87 e2       	ldi	r24, 0x27	; 39
 1fc:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x05;
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21; //27th May 2021
 202:	81 e2       	ldi	r24, 0x21	; 33
 204:	8f 83       	std	Y+7, r24	; 0x07
	
	set_time(&rtc);
 206:	ce 01       	movw	r24, r28
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	0e 94 aa 00 	call	0x154	; 0x154 <_Z8set_timeP5rtc_t>
	uint8_t hr;
	bool off = false;
	bool snooze = false;
	
	
	uint8_t alarm_min = 0x01;
 20e:	11 e0       	ldi	r17, 0x01	; 1
	
	uint8_t sec;
	uint8_t min;
	uint8_t hr;
	bool off = false;
	bool snooze = false;
 210:	f1 2c       	mov	r15, r1
	set_time(&rtc);
	
	uint8_t sec;
	uint8_t min;
	uint8_t hr;
	bool off = false;
 212:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t alarm_hr = 0x20;
	
	while (1)
	{
		//read current time from the RTC
		sec = read_time(0x00);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z9read_timeh>
		min = read_time(0x01);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z9read_timeh>
 220:	e8 2e       	mov	r14, r24
		hr = read_time(0x02);
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z9read_timeh>
		
		
		if (min == alarm_min  & hr == alarm_hr & ~(off)){
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	1e 11       	cpse	r17, r14
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	80 32       	cpi	r24, 0x20	; 32
 232:	09 f0       	breq	.+2      	; 0x236 <main+0x68>
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	92 23       	and	r25, r18
 238:	29 2f       	mov	r18, r25
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	80 2f       	mov	r24, r16
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	80 95       	com	r24
 242:	90 95       	com	r25
 244:	82 23       	and	r24, r18
 246:	93 23       	and	r25, r19
 248:	89 2b       	or	r24, r25
 24a:	21 f0       	breq	.+8      	; 0x254 <main+0x86>
			
			PORTD |= (1<<PORTD2);
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	8b b9       	out	0x0b, r24	; 11
 252:	03 c0       	rjmp	.+6      	; 0x25a <main+0x8c>
		}
		
		else{
			PORTD &= ~(1<<PORTD2);
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	8b 7f       	andi	r24, 0xFB	; 251
 258:	8b b9       	out	0x0b, r24	; 11
		}
		
		
		//Alarm Stop button
		//STOP button is pressed and the Alarm is going
		if (!(PIND & (1<<PIND4)) & !(~PORTD & (1<<PORTD2))){
 25a:	89 b1       	in	r24, 0x09	; 9
 25c:	9b b1       	in	r25, 0x0b	; 11
 25e:	84 fd       	sbrc	r24, 4
 260:	06 c0       	rjmp	.+12     	; 0x26e <main+0xa0>
 262:	92 ff       	sbrs	r25, 2
 264:	04 c0       	rjmp	.+8      	; 0x26e <main+0xa0>
			PORTD &= ~(1<<PORTD2);
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	8b b9       	out	0x0b, r24	; 11
			off = true;
 26c:	01 e0       	ldi	r16, 0x01	; 1
			
		}
		
		//Alarm Snooze button
		if (!(PIND & (1<<PIND5))){
 26e:	4d 99       	sbic	0x09, 5	; 9
 270:	11 c0       	rjmp	.+34     	; 0x294 <main+0xc6>
			PORTD |= (1<<PORTD3);
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	88 60       	ori	r24, 0x08	; 8
 276:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	89 e6       	ldi	r24, 0x69	; 105
 27c:	98 e1       	ldi	r25, 0x18	; 24
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0xb0>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0xba>
 288:	00 00       	nop
			_delay_ms(500);
			PORTD &= ~(1<<PORTD3);
 28a:	8b b1       	in	r24, 0x0b	; 11
 28c:	87 7f       	andi	r24, 0xF7	; 247
 28e:	8b b9       	out	0x0b, r24	; 11
			snooze = true;
 290:	ff 24       	eor	r15, r15
 292:	f3 94       	inc	r15
		}
		
		if (snooze){
 294:	ff 20       	and	r15, r15
 296:	09 f4       	brne	.+2      	; 0x29a <main+0xcc>
 298:	bd cf       	rjmp	.-134    	; 0x214 <main+0x46>
			alarm_min++;
 29a:	1f 5f       	subi	r17, 0xFF	; 255
			PORTD &= ~(1<<PORTD2);
 29c:	8b b1       	in	r24, 0x0b	; 11
 29e:	8b 7f       	andi	r24, 0xFB	; 251
 2a0:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1<<PORTD5);
 2a2:	8b b1       	in	r24, 0x0b	; 11
 2a4:	80 62       	ori	r24, 0x20	; 32
 2a6:	8b b9       	out	0x0b, r24	; 11
			snooze = false;
 2a8:	f1 2c       	mov	r15, r1
 2aa:	b4 cf       	rjmp	.-152    	; 0x214 <main+0x46>

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
