
alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000072c  00800100  00001cd6  00001d6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  0080082c  0080082c  00002496  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002496  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e8f  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117d  00000000  00000000  0000652f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001652  00000000  00000000  000076ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000484  00000000  00000000  00008d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c7e  00000000  00000000  00009184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ed9  00000000  00000000  00009e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000bcdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	18 e0       	ldi	r17, 0x08	; 8
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ed       	ldi	r30, 0xD6	; 214
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 32       	cpi	r26, 0x2C	; 44
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	28 e0       	ldi	r18, 0x08	; 8
      8c:	ac e2       	ldi	r26, 0x2C	; 44
      8e:	b8 e0       	ldi	r27, 0x08	; 8
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 38       	cpi	r26, 0x87	; 135
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <main>
      9e:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN10AlarmClock11int_to_charEi>:
 
 ds1307 ds1307_1;
 LCD_Display lcd_1;
 Get_key keypad_1;

 char* AlarmClock::int_to_char(int num){
      a6:	9b 01       	movw	r18, r22
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
      a8:	6a 30       	cpi	r22, 0x0A	; 10
      aa:	71 05       	cpc	r23, r1
      ac:	ec f0       	brlt	.+58     	; 0xe8 <_ZN10AlarmClock11int_to_charEi+0x42>
		 chArr = "__";
		 x = num / 10;
      ae:	cb 01       	movw	r24, r22
      b0:	6a e0       	ldi	r22, 0x0A	; 10
      b2:	70 e0       	ldi	r23, 0x00	; 0
      b4:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
		 div = x + 48;
      b8:	ab 01       	movw	r20, r22
      ba:	40 5d       	subi	r20, 0xD0	; 208
      bc:	5f 4f       	sbci	r21, 0xFF	; 255
		 rem = (num % (10 * x)) + 48;
      be:	cb 01       	movw	r24, r22
      c0:	88 0f       	add	r24, r24
      c2:	99 1f       	adc	r25, r25
      c4:	66 0f       	add	r22, r22
      c6:	77 1f       	adc	r23, r23
      c8:	66 0f       	add	r22, r22
      ca:	77 1f       	adc	r23, r23
      cc:	66 0f       	add	r22, r22
      ce:	77 1f       	adc	r23, r23
      d0:	68 0f       	add	r22, r24
      d2:	79 1f       	adc	r23, r25
      d4:	c9 01       	movw	r24, r18
      d6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
      da:	c0 96       	adiw	r24, 0x30	; 48
		 char ch1 = div;
		 char ch2 = rem;
		 chArr[0] = ch1;
      dc:	e6 ea       	ldi	r30, 0xA6	; 166
      de:	f7 e0       	ldi	r31, 0x07	; 7
      e0:	40 83       	st	Z, r20
		 chArr[1] = ch2;
      e2:	81 83       	std	Z+1, r24	; 0x01

 char* AlarmClock::int_to_char(int num){
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
		 chArr = "__";
      e4:	cf 01       	movw	r24, r30
      e6:	08 95       	ret
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
		 temp = num + 48;
      e8:	20 5d       	subi	r18, 0xD0	; 208
      ea:	3f 4f       	sbci	r19, 0xFF	; 255
		 char ch = temp;
		 chArr[1] = ch;
      ec:	20 93 aa 07 	sts	0x07AA, r18	; 0x8007aa <GOT+0x34>
		 char ch2 = rem;
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
      f0:	89 ea       	ldi	r24, 0xA9	; 169
      f2:	97 e0       	ldi	r25, 0x07	; 7
		 temp = num + 48;
		 char ch = temp;
		 chArr[1] = ch;
	 }
	 return chArr;
 }
      f4:	08 95       	ret

000000f6 <_ZN10AlarmClock11displayTimeEv>:

 void AlarmClock::displayTime(){
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	8c 01       	movw	r16, r24

	 char* time1 = "    00:00:00     ";
	 int sec, min, hr;
	 //uint8_t sec_bcd, min_bcd, hr_bcd;

	 sec = ds1307_1.read_time(0x00);	//read from seconds reg
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	87 e3       	ldi	r24, 0x37	; 55
     10c:	98 e0       	ldi	r25, 0x08	; 8
     10e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN6ds13079read_timeEh>
     112:	7c 01       	movw	r14, r24
	 min = ds1307_1.read_time(0x01);	//read from minutes reg
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	87 e3       	ldi	r24, 0x37	; 55
     118:	98 e0       	ldi	r25, 0x08	; 8
     11a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN6ds13079read_timeEh>
     11e:	6c 01       	movw	r12, r24
	 hr = ds1307_1.read_time(0x02);		//read from hours reg
     120:	62 e0       	ldi	r22, 0x02	; 2
     122:	87 e3       	ldi	r24, 0x37	; 55
     124:	98 e0       	ldi	r25, 0x08	; 8
     126:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN6ds13079read_timeEh>
	 
	 str_hr = int_to_char(hr);
     12a:	bc 01       	movw	r22, r24
     12c:	c8 01       	movw	r24, r16
     12e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[4] = str_hr[0];
     132:	fc 01       	movw	r30, r24
     134:	20 81       	ld	r18, Z
     136:	cc ea       	ldi	r28, 0xAC	; 172
     138:	d7 e0       	ldi	r29, 0x07	; 7
     13a:	2c 83       	std	Y+4, r18	; 0x04
	 time1[5] = str_hr[1];
     13c:	81 81       	ldd	r24, Z+1	; 0x01
     13e:	8d 83       	std	Y+5, r24	; 0x05
	 
	 str_min = int_to_char(min);
     140:	b6 01       	movw	r22, r12
     142:	c8 01       	movw	r24, r16
     144:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[7] = str_min[0];
     148:	fc 01       	movw	r30, r24
     14a:	20 81       	ld	r18, Z
     14c:	2f 83       	std	Y+7, r18	; 0x07
	 time1[8] = str_min[1];
     14e:	81 81       	ldd	r24, Z+1	; 0x01
     150:	88 87       	std	Y+8, r24	; 0x08
	 
	 str_sec = int_to_char(sec);
     152:	b7 01       	movw	r22, r14
     154:	c8 01       	movw	r24, r16
     156:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[10] = str_sec[0];
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	2a 87       	std	Y+10, r18	; 0x0a
	 time1[11] = str_sec[1];
     160:	81 81       	ldd	r24, Z+1	; 0x01
     162:	8b 87       	std	Y+11, r24	; 0x0b
	 
	 lcd_1.LCD_String_xy(0, 0, time1);       //Write string on 1st line of LCD
     164:	9e 01       	movw	r18, r28
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	81 e3       	ldi	r24, 0x31	; 49
     16c:	98 e0       	ldi	r25, 0x08	; 8
     16e:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
	 lcd_1.LCD_String_xy(1, 0, "MENU");		//Write string on 2nd line
     172:	2e eb       	ldi	r18, 0xBE	; 190
     174:	37 e0       	ldi	r19, 0x07	; 7
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	81 e3       	ldi	r24, 0x31	; 49
     17c:	98 e0       	ldi	r25, 0x08	; 8
     17e:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     182:	ff ef       	ldi	r31, 0xFF	; 255
     184:	29 e6       	ldi	r18, 0x69	; 105
     186:	88 e1       	ldi	r24, 0x18	; 24
     188:	f1 50       	subi	r31, 0x01	; 1
     18a:	20 40       	sbci	r18, 0x00	; 0
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	e1 f7       	brne	.-8      	; 0x188 <_ZN10AlarmClock11displayTimeEv+0x92>
     190:	00 c0       	rjmp	.+0      	; 0x192 <_ZN10AlarmClock11displayTimeEv+0x9c>
     192:	00 00       	nop
	 _delay_ms(1000);
	 if (PINC & (1<<Ok)){
     194:	32 9b       	sbis	0x06, 2	; 6
     196:	b8 cf       	rjmp	.-144    	; 0x108 <_ZN10AlarmClock11displayTimeEv+0x12>
		 break;
	 }
	 }
	 }
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	ff 90       	pop	r15
     1a2:	ef 90       	pop	r14
     1a4:	df 90       	pop	r13
     1a6:	cf 90       	pop	r12
     1a8:	08 95       	ret

000001aa <_ZN10AlarmClock12setTimetoRTCEv>:

 void AlarmClock::setTimetoRTC(){
     1aa:	af 92       	push	r10
     1ac:	bf 92       	push	r11
     1ae:	cf 92       	push	r12
     1b0:	df 92       	push	r13
     1b2:	ef 92       	push	r14
     1b4:	ff 92       	push	r15
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	63 97       	sbiw	r28, 0x13	; 19
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	de bf       	out	0x3e, r29	; 62
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	cd bf       	out	0x3d, r28	; 61
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
	int n[6] = {4, 5, 7, 8, 10, 11};
     1ce:	8c e0       	ldi	r24, 0x0C	; 12
     1d0:	ea e9       	ldi	r30, 0x9A	; 154
     1d2:	f7 e0       	ldi	r31, 0x07	; 7
     1d4:	de 01       	movw	r26, r28
     1d6:	18 96       	adiw	r26, 0x08	; 8
     1d8:	01 90       	ld	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	8a 95       	dec	r24
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <_ZN10AlarmClock12setTimetoRTCEv+0x2e>
	lcd_1.LCD_Clear();
     1e0:	81 e3       	ldi	r24, 0x31	; 49
     1e2:	98 e0       	ldi	r25, 0x08	; 8
     1e4:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
	lcd_1.LCD_String_xy(0, 4, time);
     1e8:	23 ec       	ldi	r18, 0xC3	; 195
     1ea:	37 e0       	ldi	r19, 0x07	; 7
     1ec:	44 e0       	ldi	r20, 0x04	; 4
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	81 e3       	ldi	r24, 0x31	; 49
     1f2:	98 e0       	ldi	r25, 0x08	; 8
     1f4:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     1f8:	2f ef       	ldi	r18, 0xFF	; 255
     1fa:	84 e3       	ldi	r24, 0x34	; 52
     1fc:	9c e0       	ldi	r25, 0x0C	; 12
     1fe:	21 50       	subi	r18, 0x01	; 1
     200:	80 40       	sbci	r24, 0x00	; 0
     202:	90 40       	sbci	r25, 0x00	; 0
     204:	e1 f7       	brne	.-8      	; 0x1fe <_ZN10AlarmClock12setTimetoRTCEv+0x54>
     206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN10AlarmClock12setTimetoRTCEv+0x5e>
     208:	00 00       	nop
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     20a:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
     20c:	e1 2c       	mov	r14, r1
     20e:	f1 2c       	mov	r15, r1
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
     210:	a1 2c       	mov	r10, r1
     212:	b1 2c       	mov	r11, r1
	
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
     214:	c1 2c       	mov	r12, r1
     216:	d1 2c       	mov	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     218:	07 30       	cpi	r16, 0x07	; 7
     21a:	08 f0       	brcs	.+2      	; 0x21e <_ZN10AlarmClock12setTimetoRTCEv+0x74>
     21c:	1c c1       	rjmp	.+568    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	{
		while(1)
		{
			key = keypad_1.GetKey();
     21e:	80 e3       	ldi	r24, 0x30	; 48
     220:	98 e0       	ldi	r25, 0x08	; 8
     222:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN7Get_key6GetKeyEv>
     226:	18 2f       	mov	r17, r24
			if (key == 1) {lcd_1.LCD_String_xy(0,n[i],"1");break;}
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	99 f4       	brne	.+38     	; 0x252 <_ZN10AlarmClock12setTimetoRTCEv+0xa8>
     22c:	e0 2f       	mov	r30, r16
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	ee 0f       	add	r30, r30
     232:	ff 1f       	adc	r31, r31
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	8c 0f       	add	r24, r28
     23a:	9d 1f       	adc	r25, r29
     23c:	e8 0f       	add	r30, r24
     23e:	f9 1f       	adc	r31, r25
     240:	47 81       	ldd	r20, Z+7	; 0x07
     242:	2c ec       	ldi	r18, 0xCC	; 204
     244:	37 e0       	ldi	r19, 0x07	; 7
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	81 e3       	ldi	r24, 0x31	; 49
     24a:	98 e0       	ldi	r25, 0x08	; 8
     24c:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     250:	c1 c0       	rjmp	.+386    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 2) {lcd_1.LCD_String_xy(0,n[i],"2");break;}
     252:	82 30       	cpi	r24, 0x02	; 2
     254:	99 f4       	brne	.+38     	; 0x27c <_ZN10AlarmClock12setTimetoRTCEv+0xd2>
     256:	e0 2f       	mov	r30, r16
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	ee 0f       	add	r30, r30
     25c:	ff 1f       	adc	r31, r31
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	8c 0f       	add	r24, r28
     264:	9d 1f       	adc	r25, r29
     266:	e8 0f       	add	r30, r24
     268:	f9 1f       	adc	r31, r25
     26a:	47 81       	ldd	r20, Z+7	; 0x07
     26c:	2e ec       	ldi	r18, 0xCE	; 206
     26e:	37 e0       	ldi	r19, 0x07	; 7
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	81 e3       	ldi	r24, 0x31	; 49
     274:	98 e0       	ldi	r25, 0x08	; 8
     276:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     27a:	ac c0       	rjmp	.+344    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 3) {lcd_1.LCD_String_xy(0,n[i],"3");break;}
     27c:	83 30       	cpi	r24, 0x03	; 3
     27e:	99 f4       	brne	.+38     	; 0x2a6 <_ZN10AlarmClock12setTimetoRTCEv+0xfc>
     280:	e0 2f       	mov	r30, r16
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	ee 0f       	add	r30, r30
     286:	ff 1f       	adc	r31, r31
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	8c 0f       	add	r24, r28
     28e:	9d 1f       	adc	r25, r29
     290:	e8 0f       	add	r30, r24
     292:	f9 1f       	adc	r31, r25
     294:	47 81       	ldd	r20, Z+7	; 0x07
     296:	20 ed       	ldi	r18, 0xD0	; 208
     298:	37 e0       	ldi	r19, 0x07	; 7
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	81 e3       	ldi	r24, 0x31	; 49
     29e:	98 e0       	ldi	r25, 0x08	; 8
     2a0:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2a4:	97 c0       	rjmp	.+302    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 4) {lcd_1.LCD_String_xy(0,n[i],"4");break;}
     2a6:	84 30       	cpi	r24, 0x04	; 4
     2a8:	99 f4       	brne	.+38     	; 0x2d0 <_ZN10AlarmClock12setTimetoRTCEv+0x126>
     2aa:	e0 2f       	mov	r30, r16
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	ee 0f       	add	r30, r30
     2b0:	ff 1f       	adc	r31, r31
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	8c 0f       	add	r24, r28
     2b8:	9d 1f       	adc	r25, r29
     2ba:	e8 0f       	add	r30, r24
     2bc:	f9 1f       	adc	r31, r25
     2be:	47 81       	ldd	r20, Z+7	; 0x07
     2c0:	22 ed       	ldi	r18, 0xD2	; 210
     2c2:	37 e0       	ldi	r19, 0x07	; 7
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	81 e3       	ldi	r24, 0x31	; 49
     2c8:	98 e0       	ldi	r25, 0x08	; 8
     2ca:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2ce:	82 c0       	rjmp	.+260    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 5) {lcd_1.LCD_String_xy(0,n[i],"5");break;}
     2d0:	85 30       	cpi	r24, 0x05	; 5
     2d2:	99 f4       	brne	.+38     	; 0x2fa <_ZN10AlarmClock12setTimetoRTCEv+0x150>
     2d4:	e0 2f       	mov	r30, r16
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	ee 0f       	add	r30, r30
     2da:	ff 1f       	adc	r31, r31
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	8c 0f       	add	r24, r28
     2e2:	9d 1f       	adc	r25, r29
     2e4:	e8 0f       	add	r30, r24
     2e6:	f9 1f       	adc	r31, r25
     2e8:	47 81       	ldd	r20, Z+7	; 0x07
     2ea:	24 ed       	ldi	r18, 0xD4	; 212
     2ec:	37 e0       	ldi	r19, 0x07	; 7
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	81 e3       	ldi	r24, 0x31	; 49
     2f2:	98 e0       	ldi	r25, 0x08	; 8
     2f4:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2f8:	6d c0       	rjmp	.+218    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
     2fa:	86 30       	cpi	r24, 0x06	; 6
     2fc:	99 f4       	brne	.+38     	; 0x324 <_ZN10AlarmClock12setTimetoRTCEv+0x17a>
     2fe:	e0 2f       	mov	r30, r16
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ee 0f       	add	r30, r30
     304:	ff 1f       	adc	r31, r31
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	8c 0f       	add	r24, r28
     30c:	9d 1f       	adc	r25, r29
     30e:	e8 0f       	add	r30, r24
     310:	f9 1f       	adc	r31, r25
     312:	47 81       	ldd	r20, Z+7	; 0x07
     314:	26 ed       	ldi	r18, 0xD6	; 214
     316:	37 e0       	ldi	r19, 0x07	; 7
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	81 e3       	ldi	r24, 0x31	; 49
     31c:	98 e0       	ldi	r25, 0x08	; 8
     31e:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     322:	58 c0       	rjmp	.+176    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
     324:	87 30       	cpi	r24, 0x07	; 7
     326:	99 f4       	brne	.+38     	; 0x34e <_ZN10AlarmClock12setTimetoRTCEv+0x1a4>
     328:	e0 2f       	mov	r30, r16
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	ee 0f       	add	r30, r30
     32e:	ff 1f       	adc	r31, r31
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	8c 0f       	add	r24, r28
     336:	9d 1f       	adc	r25, r29
     338:	e8 0f       	add	r30, r24
     33a:	f9 1f       	adc	r31, r25
     33c:	47 81       	ldd	r20, Z+7	; 0x07
     33e:	28 ed       	ldi	r18, 0xD8	; 216
     340:	37 e0       	ldi	r19, 0x07	; 7
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	81 e3       	ldi	r24, 0x31	; 49
     346:	98 e0       	ldi	r25, 0x08	; 8
     348:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     34c:	43 c0       	rjmp	.+134    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
     34e:	88 30       	cpi	r24, 0x08	; 8
     350:	99 f4       	brne	.+38     	; 0x378 <_ZN10AlarmClock12setTimetoRTCEv+0x1ce>
     352:	e0 2f       	mov	r30, r16
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	8c 0f       	add	r24, r28
     360:	9d 1f       	adc	r25, r29
     362:	e8 0f       	add	r30, r24
     364:	f9 1f       	adc	r31, r25
     366:	47 81       	ldd	r20, Z+7	; 0x07
     368:	2a ed       	ldi	r18, 0xDA	; 218
     36a:	37 e0       	ldi	r19, 0x07	; 7
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	81 e3       	ldi	r24, 0x31	; 49
     370:	98 e0       	ldi	r25, 0x08	; 8
     372:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     376:	2e c0       	rjmp	.+92     	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
     378:	89 30       	cpi	r24, 0x09	; 9
     37a:	99 f4       	brne	.+38     	; 0x3a2 <_ZN10AlarmClock12setTimetoRTCEv+0x1f8>
     37c:	e0 2f       	mov	r30, r16
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	8c 0f       	add	r24, r28
     38a:	9d 1f       	adc	r25, r29
     38c:	e8 0f       	add	r30, r24
     38e:	f9 1f       	adc	r31, r25
     390:	47 81       	ldd	r20, Z+7	; 0x07
     392:	2c ed       	ldi	r18, 0xDC	; 220
     394:	37 e0       	ldi	r19, 0x07	; 7
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	81 e3       	ldi	r24, 0x31	; 49
     39a:	98 e0       	ldi	r25, 0x08	; 8
     39c:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     3a0:	19 c0       	rjmp	.+50     	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
     3a2:	8b 30       	cpi	r24, 0x0B	; 11
     3a4:	a1 f4       	brne	.+40     	; 0x3ce <_ZN10AlarmClock12setTimetoRTCEv+0x224>
     3a6:	e0 2f       	mov	r30, r16
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	ee 0f       	add	r30, r30
     3ac:	ff 1f       	adc	r31, r31
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	8c 0f       	add	r24, r28
     3b4:	9d 1f       	adc	r25, r29
     3b6:	e8 0f       	add	r30, r24
     3b8:	f9 1f       	adc	r31, r25
     3ba:	47 81       	ldd	r20, Z+7	; 0x07
     3bc:	2a ec       	ldi	r18, 0xCA	; 202
     3be:	37 e0       	ldi	r19, 0x07	; 7
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	81 e3       	ldi	r24, 0x31	; 49
     3c4:	98 e0       	ldi	r25, 0x08	; 8
     3c6:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     3ca:	10 e0       	ldi	r17, 0x00	; 0
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			//if (key == 10) {lcd.LCD_String_xy(0,n[i],"P");break;}
			if (PINC & (1<<Ok)){i=8; break;}
     3ce:	32 9b       	sbis	0x06, 2	; 6
     3d0:	26 cf       	rjmp	.-436    	; 0x21e <_ZN10AlarmClock12setTimetoRTCEv+0x74>
     3d2:	08 e0       	ldi	r16, 0x08	; 8
			//if (i == 6){i = 0;}
		}

		if (i == 0){hr+=key*10;}
     3d4:	01 11       	cpse	r16, r1
     3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
     3d8:	81 2f       	mov	r24, r17
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	9c 01       	movw	r18, r24
     3de:	22 0f       	add	r18, r18
     3e0:	33 1f       	adc	r19, r19
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	82 0f       	add	r24, r18
     3f0:	93 1f       	adc	r25, r19
     3f2:	e8 0e       	add	r14, r24
     3f4:	f9 1e       	adc	r15, r25
		if (i == 1){hr+=key;}
     3f6:	01 30       	cpi	r16, 0x01	; 1
     3f8:	11 f4       	brne	.+4      	; 0x3fe <_ZN10AlarmClock12setTimetoRTCEv+0x254>
     3fa:	e1 0e       	add	r14, r17
     3fc:	f1 1c       	adc	r15, r1
		if (i == 2){min+=key*10;}
     3fe:	02 30       	cpi	r16, 0x02	; 2
     400:	79 f4       	brne	.+30     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     402:	81 2f       	mov	r24, r17
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	9c 01       	movw	r18, r24
     408:	22 0f       	add	r18, r18
     40a:	33 1f       	adc	r19, r19
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	82 0f       	add	r24, r18
     41a:	93 1f       	adc	r25, r19
     41c:	a8 0e       	add	r10, r24
     41e:	b9 1e       	adc	r11, r25
		if (i == 3){min+=key;}
     420:	03 30       	cpi	r16, 0x03	; 3
     422:	11 f4       	brne	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     424:	a1 0e       	add	r10, r17
     426:	b1 1c       	adc	r11, r1
		if (i == 4){sec+=key*10;}
     428:	04 30       	cpi	r16, 0x04	; 4
     42a:	79 f4       	brne	.+30     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     42c:	81 2f       	mov	r24, r17
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	9c 01       	movw	r18, r24
     432:	22 0f       	add	r18, r18
     434:	33 1f       	adc	r19, r19
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	82 0f       	add	r24, r18
     444:	93 1f       	adc	r25, r19
     446:	c8 0e       	add	r12, r24
     448:	d9 1e       	adc	r13, r25
		if (i == 5){sec+=key;}
     44a:	05 30       	cpi	r16, 0x05	; 5
     44c:	11 f4       	brne	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     44e:	c1 0e       	add	r12, r17
     450:	d1 1c       	adc	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     452:	0f 5f       	subi	r16, 0xFF	; 255
     454:	e1 ce       	rjmp	.-574    	; 0x218 <_ZN10AlarmClock12setTimetoRTCEv+0x6e>
		if (i == 4){sec+=key*10;}
		if (i == 5){sec+=key;}

	}
	
	hour = ds1307_1.dec_to_bcd(hr);
     456:	b7 01       	movw	r22, r14
     458:	87 e3       	ldi	r24, 0x37	; 55
     45a:	98 e0       	ldi	r25, 0x08	; 8
     45c:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN6ds130710dec_to_bcdEi>
     460:	18 2f       	mov	r17, r24
	minutes = ds1307_1.dec_to_bcd(min);
     462:	b5 01       	movw	r22, r10
     464:	87 e3       	ldi	r24, 0x37	; 55
     466:	98 e0       	ldi	r25, 0x08	; 8
     468:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN6ds130710dec_to_bcdEi>
     46c:	08 2f       	mov	r16, r24
	seconds = ds1307_1.dec_to_bcd(sec);
     46e:	b6 01       	movw	r22, r12
     470:	87 e3       	ldi	r24, 0x37	; 55
     472:	98 e0       	ldi	r25, 0x08	; 8
     474:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN6ds130710dec_to_bcdEi>

	// Setting time to the RTC
	rtc.seconds =  seconds;
     478:	89 83       	std	Y+1, r24	; 0x01
	rtc.minute =  minutes;
     47a:	0a 83       	std	Y+2, r16	; 0x02
	rtc.hour = hour;
     47c:	1b 83       	std	Y+3, r17	; 0x03
	rtc.weekDay = 0x07;
     47e:	87 e0       	ldi	r24, 0x07	; 7
     480:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x20;
     482:	80 e2       	ldi	r24, 0x20	; 32
     484:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x06;
     486:	86 e0       	ldi	r24, 0x06	; 6
     488:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21;
     48a:	81 e2       	ldi	r24, 0x21	; 33
     48c:	8f 83       	std	Y+7, r24	; 0x07
	lcd_1.LCD_Clear();
     48e:	81 e3       	ldi	r24, 0x31	; 49
     490:	98 e0       	ldi	r25, 0x08	; 8
     492:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
	ds1307_1.set_time(&rtc);
     496:	be 01       	movw	r22, r28
     498:	6f 5f       	subi	r22, 0xFF	; 255
     49a:	7f 4f       	sbci	r23, 0xFF	; 255
     49c:	87 e3       	ldi	r24, 0x37	; 55
     49e:	98 e0       	ldi	r25, 0x08	; 8
     4a0:	0e 94 18 04 	call	0x830	; 0x830 <_ZN6ds13078set_timeEPNS_5rtc_tE>
	lcd_1.LCD_String_xy(0, 0, "Time Set");
     4a4:	2e ed       	ldi	r18, 0xDE	; 222
     4a6:	37 e0       	ldi	r19, 0x07	; 7
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	81 e3       	ldi	r24, 0x31	; 49
     4ae:	98 e0       	ldi	r25, 0x08	; 8
     4b0:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     4b4:	9f ef       	ldi	r25, 0xFF	; 255
     4b6:	24 e3       	ldi	r18, 0x34	; 52
     4b8:	8c e0       	ldi	r24, 0x0C	; 12
     4ba:	91 50       	subi	r25, 0x01	; 1
     4bc:	20 40       	sbci	r18, 0x00	; 0
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4c4:	00 00       	nop
	_delay_ms(500);
	lcd_1.LCD_Clear();
     4c6:	81 e3       	ldi	r24, 0x31	; 49
     4c8:	98 e0       	ldi	r25, 0x08	; 8
     4ca:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
 }
     4ce:	63 96       	adiw	r28, 0x13	; 19
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	df 90       	pop	r13
     4e8:	cf 90       	pop	r12
     4ea:	bf 90       	pop	r11
     4ec:	af 90       	pop	r10
     4ee:	08 95       	ret

000004f0 <_ZN10AlarmClock11setNewAlarmEv>:

 int* AlarmClock::setNewAlarm(){
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	2c 97       	sbiw	r28, 0x0c	; 12
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
	uint8_t key;
	char* alarmTime = "00:00";
	int min_al=0, hr_al=0;
	int n[6] = {6, 7, 9, 10};
     510:	fe 01       	movw	r30, r28
     512:	31 96       	adiw	r30, 0x01	; 1
     514:	8c e0       	ldi	r24, 0x0C	; 12
     516:	df 01       	movw	r26, r30
     518:	1d 92       	st	X+, r1
     51a:	8a 95       	dec	r24
     51c:	e9 f7       	brne	.-6      	; 0x518 <_ZN10AlarmClock11setNewAlarmEv+0x28>
     51e:	86 e0       	ldi	r24, 0x06	; 6
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	9a 83       	std	Y+2, r25	; 0x02
     524:	89 83       	std	Y+1, r24	; 0x01
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9c 83       	std	Y+4, r25	; 0x04
     52c:	8b 83       	std	Y+3, r24	; 0x03
     52e:	89 e0       	ldi	r24, 0x09	; 9
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	9e 83       	std	Y+6, r25	; 0x06
     534:	8d 83       	std	Y+5, r24	; 0x05
     536:	8a e0       	ldi	r24, 0x0A	; 10
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	98 87       	std	Y+8, r25	; 0x08
     53c:	8f 83       	std	Y+7, r24	; 0x07
	static int alarm[2];
			
	lcd_1.LCD_Clear();
     53e:	81 e3       	ldi	r24, 0x31	; 49
     540:	98 e0       	ldi	r25, 0x08	; 8
     542:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
	lcd_1.LCD_String_xy(0, 6, alarmTime);
     546:	26 ec       	ldi	r18, 0xC6	; 198
     548:	37 e0       	ldi	r19, 0x07	; 7
     54a:	46 e0       	ldi	r20, 0x06	; 6
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	81 e3       	ldi	r24, 0x31	; 49
     550:	98 e0       	ldi	r25, 0x08	; 8
     552:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     556:	bf ef       	ldi	r27, 0xFF	; 255
     558:	21 ee       	ldi	r18, 0xE1	; 225
     55a:	84 e0       	ldi	r24, 0x04	; 4
     55c:	b1 50       	subi	r27, 0x01	; 1
     55e:	20 40       	sbci	r18, 0x00	; 0
     560:	80 40       	sbci	r24, 0x00	; 0
     562:	e1 f7       	brne	.-8      	; 0x55c <_ZN10AlarmClock11setNewAlarmEv+0x6c>
     564:	00 c0       	rjmp	.+0      	; 0x566 <_ZN10AlarmClock11setNewAlarmEv+0x76>
     566:	00 00       	nop
	_delay_ms(200);	
	for(uint8_t i=0;i<5;i++)
     568:	00 e0       	ldi	r16, 0x00	; 0
 }

 int* AlarmClock::setNewAlarm(){
	uint8_t key;
	char* alarmTime = "00:00";
	int min_al=0, hr_al=0;
     56a:	e1 2c       	mov	r14, r1
     56c:	f1 2c       	mov	r15, r1
     56e:	c1 2c       	mov	r12, r1
     570:	d1 2c       	mov	r13, r1
	static int alarm[2];
			
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 6, alarmTime);
	_delay_ms(200);	
	for(uint8_t i=0;i<5;i++)
     572:	05 30       	cpi	r16, 0x05	; 5
     574:	08 f0       	brcs	.+2      	; 0x578 <_ZN10AlarmClock11setNewAlarmEv+0x88>
     576:	07 c1       	rjmp	.+526    	; 0x786 <_ZN10AlarmClock11setNewAlarmEv+0x296>
	{
		while(1)
		{
			key = keypad_1.GetKey();
     578:	80 e3       	ldi	r24, 0x30	; 48
     57a:	98 e0       	ldi	r25, 0x08	; 8
     57c:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN7Get_key6GetKeyEv>
     580:	18 2f       	mov	r17, r24
			if (key == 1) {lcd_1.LCD_String_xy(0,n[i],"1");break;}
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	99 f4       	brne	.+38     	; 0x5ac <_ZN10AlarmClock11setNewAlarmEv+0xbc>
     586:	e0 2f       	mov	r30, r16
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	a1 e0       	ldi	r26, 0x01	; 1
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	ac 0f       	add	r26, r28
     594:	bd 1f       	adc	r27, r29
     596:	ea 0f       	add	r30, r26
     598:	fb 1f       	adc	r31, r27
     59a:	40 81       	ld	r20, Z
     59c:	2c ec       	ldi	r18, 0xCC	; 204
     59e:	37 e0       	ldi	r19, 0x07	; 7
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	81 e3       	ldi	r24, 0x31	; 49
     5a4:	98 e0       	ldi	r25, 0x08	; 8
     5a6:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     5aa:	c1 c0       	rjmp	.+386    	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 2) {lcd_1.LCD_String_xy(0,n[i],"2");break;}
     5ac:	82 30       	cpi	r24, 0x02	; 2
     5ae:	99 f4       	brne	.+38     	; 0x5d6 <_ZN10AlarmClock11setNewAlarmEv+0xe6>
     5b0:	e0 2f       	mov	r30, r16
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	ee 0f       	add	r30, r30
     5b6:	ff 1f       	adc	r31, r31
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	8c 0f       	add	r24, r28
     5be:	9d 1f       	adc	r25, r29
     5c0:	e8 0f       	add	r30, r24
     5c2:	f9 1f       	adc	r31, r25
     5c4:	40 81       	ld	r20, Z
     5c6:	2e ec       	ldi	r18, 0xCE	; 206
     5c8:	37 e0       	ldi	r19, 0x07	; 7
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	81 e3       	ldi	r24, 0x31	; 49
     5ce:	98 e0       	ldi	r25, 0x08	; 8
     5d0:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     5d4:	ac c0       	rjmp	.+344    	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 3) {lcd_1.LCD_String_xy(0,n[i],"3");break;}
     5d6:	83 30       	cpi	r24, 0x03	; 3
     5d8:	99 f4       	brne	.+38     	; 0x600 <_ZN10AlarmClock11setNewAlarmEv+0x110>
     5da:	e0 2f       	mov	r30, r16
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	a1 e0       	ldi	r26, 0x01	; 1
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	ac 0f       	add	r26, r28
     5e8:	bd 1f       	adc	r27, r29
     5ea:	ea 0f       	add	r30, r26
     5ec:	fb 1f       	adc	r31, r27
     5ee:	40 81       	ld	r20, Z
     5f0:	20 ed       	ldi	r18, 0xD0	; 208
     5f2:	37 e0       	ldi	r19, 0x07	; 7
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	81 e3       	ldi	r24, 0x31	; 49
     5f8:	98 e0       	ldi	r25, 0x08	; 8
     5fa:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     5fe:	97 c0       	rjmp	.+302    	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 4) {lcd_1.LCD_String_xy(0,n[i],"4");break;}
     600:	84 30       	cpi	r24, 0x04	; 4
     602:	99 f4       	brne	.+38     	; 0x62a <_ZN10AlarmClock11setNewAlarmEv+0x13a>
     604:	e0 2f       	mov	r30, r16
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	8c 0f       	add	r24, r28
     612:	9d 1f       	adc	r25, r29
     614:	e8 0f       	add	r30, r24
     616:	f9 1f       	adc	r31, r25
     618:	40 81       	ld	r20, Z
     61a:	22 ed       	ldi	r18, 0xD2	; 210
     61c:	37 e0       	ldi	r19, 0x07	; 7
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	81 e3       	ldi	r24, 0x31	; 49
     622:	98 e0       	ldi	r25, 0x08	; 8
     624:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     628:	82 c0       	rjmp	.+260    	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 5) {lcd_1.LCD_String_xy(0,n[i],"5");break;}
     62a:	85 30       	cpi	r24, 0x05	; 5
     62c:	99 f4       	brne	.+38     	; 0x654 <_ZN10AlarmClock11setNewAlarmEv+0x164>
     62e:	e0 2f       	mov	r30, r16
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	a1 e0       	ldi	r26, 0x01	; 1
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	ac 0f       	add	r26, r28
     63c:	bd 1f       	adc	r27, r29
     63e:	ea 0f       	add	r30, r26
     640:	fb 1f       	adc	r31, r27
     642:	40 81       	ld	r20, Z
     644:	24 ed       	ldi	r18, 0xD4	; 212
     646:	37 e0       	ldi	r19, 0x07	; 7
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	81 e3       	ldi	r24, 0x31	; 49
     64c:	98 e0       	ldi	r25, 0x08	; 8
     64e:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     652:	6d c0       	rjmp	.+218    	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
     654:	86 30       	cpi	r24, 0x06	; 6
     656:	99 f4       	brne	.+38     	; 0x67e <_ZN10AlarmClock11setNewAlarmEv+0x18e>
     658:	e0 2f       	mov	r30, r16
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	8c 0f       	add	r24, r28
     666:	9d 1f       	adc	r25, r29
     668:	e8 0f       	add	r30, r24
     66a:	f9 1f       	adc	r31, r25
     66c:	40 81       	ld	r20, Z
     66e:	26 ed       	ldi	r18, 0xD6	; 214
     670:	37 e0       	ldi	r19, 0x07	; 7
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	81 e3       	ldi	r24, 0x31	; 49
     676:	98 e0       	ldi	r25, 0x08	; 8
     678:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     67c:	58 c0       	rjmp	.+176    	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
     67e:	87 30       	cpi	r24, 0x07	; 7
     680:	99 f4       	brne	.+38     	; 0x6a8 <_ZN10AlarmClock11setNewAlarmEv+0x1b8>
     682:	e0 2f       	mov	r30, r16
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	a1 e0       	ldi	r26, 0x01	; 1
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	ac 0f       	add	r26, r28
     690:	bd 1f       	adc	r27, r29
     692:	ea 0f       	add	r30, r26
     694:	fb 1f       	adc	r31, r27
     696:	40 81       	ld	r20, Z
     698:	28 ed       	ldi	r18, 0xD8	; 216
     69a:	37 e0       	ldi	r19, 0x07	; 7
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	81 e3       	ldi	r24, 0x31	; 49
     6a0:	98 e0       	ldi	r25, 0x08	; 8
     6a2:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     6a6:	43 c0       	rjmp	.+134    	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
     6a8:	88 30       	cpi	r24, 0x08	; 8
     6aa:	99 f4       	brne	.+38     	; 0x6d2 <_ZN10AlarmClock11setNewAlarmEv+0x1e2>
     6ac:	e0 2f       	mov	r30, r16
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	8c 0f       	add	r24, r28
     6ba:	9d 1f       	adc	r25, r29
     6bc:	e8 0f       	add	r30, r24
     6be:	f9 1f       	adc	r31, r25
     6c0:	40 81       	ld	r20, Z
     6c2:	2a ed       	ldi	r18, 0xDA	; 218
     6c4:	37 e0       	ldi	r19, 0x07	; 7
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	81 e3       	ldi	r24, 0x31	; 49
     6ca:	98 e0       	ldi	r25, 0x08	; 8
     6cc:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     6d0:	2e c0       	rjmp	.+92     	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
     6d2:	89 30       	cpi	r24, 0x09	; 9
     6d4:	99 f4       	brne	.+38     	; 0x6fc <_ZN10AlarmClock11setNewAlarmEv+0x20c>
     6d6:	e0 2f       	mov	r30, r16
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	ee 0f       	add	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	a1 e0       	ldi	r26, 0x01	; 1
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
     6e2:	ac 0f       	add	r26, r28
     6e4:	bd 1f       	adc	r27, r29
     6e6:	ea 0f       	add	r30, r26
     6e8:	fb 1f       	adc	r31, r27
     6ea:	40 81       	ld	r20, Z
     6ec:	2c ed       	ldi	r18, 0xDC	; 220
     6ee:	37 e0       	ldi	r19, 0x07	; 7
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	81 e3       	ldi	r24, 0x31	; 49
     6f4:	98 e0       	ldi	r25, 0x08	; 8
     6f6:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     6fa:	19 c0       	rjmp	.+50     	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
     6fc:	8b 30       	cpi	r24, 0x0B	; 11
     6fe:	a1 f4       	brne	.+40     	; 0x728 <_ZN10AlarmClock11setNewAlarmEv+0x238>
     700:	e0 2f       	mov	r30, r16
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	8c 0f       	add	r24, r28
     70e:	9d 1f       	adc	r25, r29
     710:	e8 0f       	add	r30, r24
     712:	f9 1f       	adc	r31, r25
     714:	40 81       	ld	r20, Z
     716:	2a ec       	ldi	r18, 0xCA	; 202
     718:	37 e0       	ldi	r19, 0x07	; 7
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	81 e3       	ldi	r24, 0x31	; 49
     71e:	98 e0       	ldi	r25, 0x08	; 8
     720:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
     724:	10 e0       	ldi	r17, 0x00	; 0
     726:	03 c0       	rjmp	.+6      	; 0x72e <_ZN10AlarmClock11setNewAlarmEv+0x23e>
			if (PINC & (1<<Ok)){i=8; break;}
     728:	32 9b       	sbis	0x06, 2	; 6
     72a:	26 cf       	rjmp	.-436    	; 0x578 <_ZN10AlarmClock11setNewAlarmEv+0x88>
     72c:	08 e0       	ldi	r16, 0x08	; 8
			//if (key == 10) {lcd.LCD_String_xy(0,n[i],"P");break;}
		}

		if (i == 0){hr_al+=key*10;}
     72e:	01 11       	cpse	r16, r1
     730:	0f c0       	rjmp	.+30     	; 0x750 <_ZN10AlarmClock11setNewAlarmEv+0x260>
     732:	81 2f       	mov	r24, r17
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	9c 01       	movw	r18, r24
     738:	22 0f       	add	r18, r18
     73a:	33 1f       	adc	r19, r19
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	82 0f       	add	r24, r18
     74a:	93 1f       	adc	r25, r19
     74c:	e8 0e       	add	r14, r24
     74e:	f9 1e       	adc	r15, r25
		if (i == 1){hr_al+=key;}
     750:	01 30       	cpi	r16, 0x01	; 1
     752:	11 f4       	brne	.+4      	; 0x758 <_ZN10AlarmClock11setNewAlarmEv+0x268>
     754:	e1 0e       	add	r14, r17
     756:	f1 1c       	adc	r15, r1
		if (i == 2){min_al+=key*10;}
     758:	02 30       	cpi	r16, 0x02	; 2
     75a:	79 f4       	brne	.+30     	; 0x77a <_ZN10AlarmClock11setNewAlarmEv+0x28a>
     75c:	81 2f       	mov	r24, r17
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	9c 01       	movw	r18, r24
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	82 0f       	add	r24, r18
     774:	93 1f       	adc	r25, r19
     776:	c8 0e       	add	r12, r24
     778:	d9 1e       	adc	r13, r25
		if (i == 3){min_al+=key;}	
     77a:	03 30       	cpi	r16, 0x03	; 3
     77c:	11 f4       	brne	.+4      	; 0x782 <_ZN10AlarmClock11setNewAlarmEv+0x292>
     77e:	c1 0e       	add	r12, r17
     780:	d1 1c       	adc	r13, r1
	static int alarm[2];
			
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 6, alarmTime);
	_delay_ms(200);	
	for(uint8_t i=0;i<5;i++)
     782:	0f 5f       	subi	r16, 0xFF	; 255
     784:	f6 ce       	rjmp	.-532    	; 0x572 <_ZN10AlarmClock11setNewAlarmEv+0x82>
		if (i == 1){hr_al+=key;}
		if (i == 2){min_al+=key*10;}
		if (i == 3){min_al+=key;}	
		
	}
	alarm[0] = hr_al;
     786:	ec e2       	ldi	r30, 0x2C	; 44
     788:	f8 e0       	ldi	r31, 0x08	; 8
     78a:	f1 82       	std	Z+1, r15	; 0x01
     78c:	e0 82       	st	Z, r14
	alarm[1] = min_al;
     78e:	d3 82       	std	Z+3, r13	; 0x03
     790:	c2 82       	std	Z+2, r12	; 0x02
	return alarm;
 }
     792:	cf 01       	movw	r24, r30
     794:	2c 96       	adiw	r28, 0x0c	; 12
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	08 95       	ret

000007b2 <_ZN6ds13078twi_initEv>:
  //-------------TWI initialization------------------------------------------

  void ds1307::twi_init(){
	  //TWBR = (F_CPU/SCL_freq - 16)/(2*prescalar)
	  //F_CPU = 16MHz, SCL_freq(for DS1307) = 100KHz, prescalar = 1 -> TWBR =72
	  TWBR = 0x48;	// set bit rate 72
     7b2:	88 e4       	ldi	r24, 0x48	; 72
     7b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	  TWCR = (1<<TWEN);	//enable TWI
     7b8:	84 e0       	ldi	r24, 0x04	; 4
     7ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  TWSR = 0x00;	//sets the prescalar value to 1
     7be:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     7c2:	08 95       	ret

000007c4 <_ZN6ds13079twi_startEv>:
  }

  //------------TWI Start----------------------------------------------------

  void ds1307::twi_start(){
	  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);	// initiate the start condition
     7c4:	84 ea       	ldi	r24, 0xA4	; 164
     7c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	// wait for the start condition to transmit
     7ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7ce:	88 23       	and	r24, r24
     7d0:	e4 f7       	brge	.-8      	; 0x7ca <_ZN6ds13079twi_startEv+0x6>
  }
     7d2:	08 95       	ret

000007d4 <_ZN6ds13079twi_SLA_WEv>:

  void ds1307::twi_SLA_W(){
	  //chooses the device address and sends the Write signal
	  //DS1307 address = 1101000
	  //Write = 0 (last bit)
	  TWDR = 0b11010000;	//SLA + W to data register
     7d4:	80 ed       	ldi	r24, 0xD0	; 208
     7d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     7da:	84 e8       	ldi	r24, 0x84	; 132
     7dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for SLA + W to transmit
     7e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7e4:	88 23       	and	r24, r24
     7e6:	e4 f7       	brge	.-8      	; 0x7e0 <_ZN6ds13079twi_SLA_WEv+0xc>
  }
     7e8:	08 95       	ret

000007ea <_ZN6ds13079twi_SLA_REv>:

  void ds1307::twi_SLA_R(){
	  //chooses the device address and sends the Read signal
	  //DS1307 address = 1101000
	  //Read = 1 (last bit)
	  TWDR = 0b11010001;	//SLA + R to data register
     7ea:	81 ed       	ldi	r24, 0xD1	; 209
     7ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     7f0:	84 e8       	ldi	r24, 0x84	; 132
     7f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	////wait for SLA + R to transmit
     7f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7fa:	88 23       	and	r24, r24
     7fc:	e4 f7       	brge	.-8      	; 0x7f6 <_ZN6ds13079twi_SLA_REv+0xc>
  }
     7fe:	08 95       	ret

00000800 <_ZN6ds13079twi_writeEh>:

  //-----------TWI Write(to Slave registers)----------------------------------

  void ds1307::twi_write(uint8_t x){
	  TWDR = x;	//data byte to be written to the slave
     800:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     804:	84 e8       	ldi	r24, 0x84	; 132
     806:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
     80a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     80e:	88 23       	and	r24, r24
     810:	e4 f7       	brge	.-8      	; 0x80a <_ZN6ds13079twi_writeEh+0xa>
  }
     812:	08 95       	ret

00000814 <_ZN6ds13078twi_readEv>:

  //------------TWI Read(from Slave registers)---------------------------------

  uint8_t ds1307::twi_read(){
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     814:	84 e8       	ldi	r24, 0x84	; 132
     816:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
     81a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     81e:	88 23       	and	r24, r24
     820:	e4 f7       	brge	.-8      	; 0x81a <_ZN6ds13078twi_readEv+0x6>
	  return TWDR;	//returns the data read from the slave which is stored in TWDR
     822:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  }
     826:	08 95       	ret

00000828 <_ZN6ds13078twi_stopEv>:

  //------------TWI Stop------------------------------------------------------

  void ds1307::twi_stop(){
	  //stops the transmission with TWSTO
	  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     828:	84 e9       	ldi	r24, 0x94	; 148
     82a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     82e:	08 95       	ret

00000830 <_ZN6ds13078set_timeEPNS_5rtc_tE>:

  //----------------Set time to DS1307---------------------------------------

  

  void ds1307::set_time(rtc_t * rtc){
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	8c 01       	movw	r16, r24
     83a:	eb 01       	movw	r28, r22
	  twi_init();
     83c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_ZN6ds13078twi_initEv>
	  twi_start();	//sending the start condition to DS1307
     840:	c8 01       	movw	r24, r16
     842:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN6ds13079twi_startEv>
	  twi_SLA_W();	//initiates the device ds1307 & sends write signal
     846:	c8 01       	movw	r24, r16
     848:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN6ds13079twi_SLA_WEv>

	  twi_write(0x00);	//set the register pointer to 00H(seconds reg)
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	c8 01       	movw	r24, r16
     850:	0e 94 00 04 	call	0x800	; 0x800 <_ZN6ds13079twi_writeEh>
	  
	  twi_write(rtc -> seconds);
     854:	68 81       	ld	r22, Y
     856:	c8 01       	movw	r24, r16
     858:	0e 94 00 04 	call	0x800	; 0x800 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> minute);
     85c:	69 81       	ldd	r22, Y+1	; 0x01
     85e:	c8 01       	movw	r24, r16
     860:	0e 94 00 04 	call	0x800	; 0x800 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> hour);
     864:	6a 81       	ldd	r22, Y+2	; 0x02
     866:	c8 01       	movw	r24, r16
     868:	0e 94 00 04 	call	0x800	; 0x800 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> weekDay);
     86c:	6b 81       	ldd	r22, Y+3	; 0x03
     86e:	c8 01       	movw	r24, r16
     870:	0e 94 00 04 	call	0x800	; 0x800 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> date);
     874:	6c 81       	ldd	r22, Y+4	; 0x04
     876:	c8 01       	movw	r24, r16
     878:	0e 94 00 04 	call	0x800	; 0x800 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> month);
     87c:	6d 81       	ldd	r22, Y+5	; 0x05
     87e:	c8 01       	movw	r24, r16
     880:	0e 94 00 04 	call	0x800	; 0x800 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> year);
     884:	6e 81       	ldd	r22, Y+6	; 0x06
     886:	c8 01       	movw	r24, r16
     888:	0e 94 00 04 	call	0x800	; 0x800 <_ZN6ds13079twi_writeEh>
	  
	  twi_stop(); //stop writing
     88c:	c8 01       	movw	r24, r16
     88e:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6ds13078twi_stopEv>
  }
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	08 95       	ret

0000089c <_ZN6ds130710bcd_to_decEh>:
  int ds1307::bcd_to_dec(uint8_t num){
	  //Data received from DS1307 are in Binary Coded Decimal
	  //This function converts these data to decimal integers
	  int first4, last4, decValue;
	  
	  first4 = num & 0b00001111;	//gets first 4 digits
     89c:	26 2f       	mov	r18, r22
     89e:	2f 70       	andi	r18, 0x0F	; 15
	  last4 = ((num & 0b11110000) >> 4); //get last 4 digits
     8a0:	62 95       	swap	r22
     8a2:	6f 70       	andi	r22, 0x0F	; 15
     8a4:	70 e0       	ldi	r23, 0x00	; 0
	  decValue = last4 * 10 + first4;	//gives the corresponding decimal value
     8a6:	cb 01       	movw	r24, r22
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	66 0f       	add	r22, r22
     8ae:	77 1f       	adc	r23, r23
     8b0:	66 0f       	add	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	66 0f       	add	r22, r22
     8b6:	77 1f       	adc	r23, r23
     8b8:	86 0f       	add	r24, r22
     8ba:	97 1f       	adc	r25, r23
	  
	  return decValue;
  }
     8bc:	82 0f       	add	r24, r18
     8be:	91 1d       	adc	r25, r1
     8c0:	08 95       	ret

000008c2 <_ZN6ds13079read_timeEh>:
  }


  //-----------------Read time from DS1307---------------------------------

  int ds1307::read_time(uint8_t reg){
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	ec 01       	movw	r28, r24
     8ca:	16 2f       	mov	r17, r22
	  //sets the register pointer to the register we want -> reg (00H, 01H, etc)
	  twi_start();
     8cc:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN6ds13079twi_startEv>
	  twi_SLA_W();	//initiates the device ds1307
     8d0:	ce 01       	movw	r24, r28
     8d2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN6ds13079twi_SLA_WEv>
	  twi_write(reg);	//set the register pointer to reg)
     8d6:	61 2f       	mov	r22, r17
     8d8:	ce 01       	movw	r24, r28
     8da:	0e 94 00 04 	call	0x800	; 0x800 <_ZN6ds13079twi_writeEh>
	  twi_stop();
     8de:	ce 01       	movw	r24, r28
     8e0:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6ds13078twi_stopEv>
	  
	  //reading from the particular register
	  uint8_t x;
	  int y;
	  twi_start();
     8e4:	ce 01       	movw	r24, r28
     8e6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN6ds13079twi_startEv>
	  twi_SLA_R();		//read from the reg
     8ea:	ce 01       	movw	r24, r28
     8ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN6ds13079twi_SLA_REv>
	  x = twi_read();		//value read from reg is stored in x
     8f0:	ce 01       	movw	r24, r28
     8f2:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN6ds13078twi_readEv>
     8f6:	18 2f       	mov	r17, r24
	  twi_stop();
     8f8:	ce 01       	movw	r24, r28
     8fa:	0e 94 14 04 	call	0x828	; 0x828 <_ZN6ds13078twi_stopEv>
	  y = bcd_to_dec(x);
     8fe:	61 2f       	mov	r22, r17
     900:	ce 01       	movw	r24, r28
     902:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN6ds130710bcd_to_decEh>
	  return y;
  }
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	08 95       	ret

0000090e <_ZN6ds130710dec_to_bcdEi>:
	  return decValue;
  }

  //-----------------Convert decimal to BCD----------------------------------

  uint8_t ds1307::dec_to_bcd(int number){
     90e:	9b 01       	movw	r18, r22
	int x;
	uint8_t div=0, rem=0;
	uint8_t bcd;
	if (number > 9){
     910:	6a 30       	cpi	r22, 0x0A	; 10
     912:	71 05       	cpc	r23, r1
     914:	c4 f0       	brlt	.+48     	; 0x946 <_ZN6ds130710dec_to_bcdEi+0x38>
		x = number / 10;
     916:	cb 01       	movw	r24, r22
     918:	6a e0       	ldi	r22, 0x0A	; 10
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
		div = (x<<4);
     920:	46 2f       	mov	r20, r22
     922:	42 95       	swap	r20
     924:	40 7f       	andi	r20, 0xF0	; 240
		rem = (number % (10 * x));
     926:	86 2f       	mov	r24, r22
     928:	97 2f       	mov	r25, r23
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	bc 01       	movw	r22, r24
     930:	66 0f       	add	r22, r22
     932:	77 1f       	adc	r23, r23
     934:	66 0f       	add	r22, r22
     936:	77 1f       	adc	r23, r23
     938:	68 0f       	add	r22, r24
     93a:	79 1f       	adc	r23, r25
     93c:	c9 01       	movw	r24, r18
     93e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__divmodhi4>
		bcd = div | rem;
     942:	84 2b       	or	r24, r20
     944:	08 95       	ret
	}
	else{
		bcd = number;
     946:	86 2f       	mov	r24, r22
	}
	return bcd;
     948:	08 95       	ret

0000094a <_ZN7Get_key6GetKeyEv>:

uint8_t Get_key::GetKey()

{
	uint8_t r,c;
	PORTD |= 0b00001111;
     94a:	8b b1       	in	r24, 0x0b	; 11
     94c:	8f 60       	ori	r24, 0x0F	; 15
     94e:	8b b9       	out	0x0b, r24	; 11
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	83 30       	cpi	r24, 0x03	; 3
     954:	80 f5       	brcc	.+96     	; 0x9b6 <_ZN7Get_key6GetKeyEv+0x6c>
	{
		DDRD &=~(0b01111111);
     956:	9a b1       	in	r25, 0x0a	; 10
     958:	90 78       	andi	r25, 0x80	; 128
     95a:	9a b9       	out	0x0a, r25	; 10
		DDRD |=(0b01000000>>c);
     95c:	9a b1       	in	r25, 0x0a	; 10
     95e:	20 e4       	ldi	r18, 0x40	; 64
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	08 2e       	mov	r0, r24
     964:	02 c0       	rjmp	.+4      	; 0x96a <_ZN7Get_key6GetKeyEv+0x20>
     966:	35 95       	asr	r19
     968:	27 95       	ror	r18
     96a:	0a 94       	dec	r0
     96c:	e2 f7       	brpl	.-8      	; 0x966 <_ZN7Get_key6GetKeyEv+0x1c>
     96e:	29 2b       	or	r18, r25
     970:	2a b9       	out	0x0a, r18	; 10
		for (r=0;r<4;r++)//identifying the row of the pressed key
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	94 30       	cpi	r25, 0x04	; 4
     976:	e8 f4       	brcc	.+58     	; 0x9b2 <_ZN7Get_key6GetKeyEv+0x68>
		{
			if(!(PIND & (0b00001000>>r)))
     978:	29 b1       	in	r18, 0x09	; 9
     97a:	48 e0       	ldi	r20, 0x08	; 8
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	09 2e       	mov	r0, r25
     980:	02 c0       	rjmp	.+4      	; 0x986 <_ZN7Get_key6GetKeyEv+0x3c>
     982:	55 95       	asr	r21
     984:	47 95       	ror	r20
     986:	0a 94       	dec	r0
     988:	e2 f7       	brpl	.-8      	; 0x982 <_ZN7Get_key6GetKeyEv+0x38>
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	24 23       	and	r18, r20
     98e:	35 23       	and	r19, r21
     990:	23 2b       	or	r18, r19
     992:	69 f4       	brne	.+26     	; 0x9ae <_ZN7Get_key6GetKeyEv+0x64>
			{
				while(!(PIND & (0b00001000>>r)));
     994:	29 b1       	in	r18, 0x09	; 9
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	24 23       	and	r18, r20
     99a:	35 23       	and	r19, r21
     99c:	23 2b       	or	r18, r19
     99e:	d1 f3       	breq	.-12     	; 0x994 <_ZN7Get_key6GetKeyEv+0x4a>
				return(r*3+c +1);// returning the pressed number by considering the row and the column pressed
     9a0:	29 2f       	mov	r18, r25
     9a2:	22 0f       	add	r18, r18
     9a4:	92 0f       	add	r25, r18
     9a6:	98 0f       	add	r25, r24
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	89 0f       	add	r24, r25
     9ac:	08 95       	ret
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
	{
		DDRD &=~(0b01111111);
		DDRD |=(0b01000000>>c);
		for (r=0;r<4;r++)//identifying the row of the pressed key
     9ae:	9f 5f       	subi	r25, 0xFF	; 255
     9b0:	e1 cf       	rjmp	.-62     	; 0x974 <_ZN7Get_key6GetKeyEv+0x2a>

{
	uint8_t r,c;
	PORTD |= 0b00001111;
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	ce cf       	rjmp	.-100    	; 0x952 <_ZN7Get_key6GetKeyEv+0x8>
				return(r*3+c +1);// returning the pressed number by considering the row and the column pressed
			}
		}
	}
	
	return 0xFF;
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	08 95       	ret

000009ba <_ZN11LCD_Display16LCD_CommandgiverEh>:
#define ENable        PORTB1


void LCD_Display::LCD_Commandgiver(unsigned char comand)      //function to give commands to the LCD
{
	LCDER_port=(LCDER_port & 0b11000011) | ((comand & 0xF0)>>2);         //Sending upper nibble
     9ba:	25 b1       	in	r18, 0x05	; 5
     9bc:	96 2f       	mov	r25, r22
     9be:	90 7f       	andi	r25, 0xF0	; 240
     9c0:	89 2f       	mov	r24, r25
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	95 95       	asr	r25
     9c6:	87 95       	ror	r24
     9c8:	95 95       	asr	r25
     9ca:	87 95       	ror	r24
     9cc:	92 2f       	mov	r25, r18
     9ce:	93 7c       	andi	r25, 0xC3	; 195
     9d0:	89 2b       	or	r24, r25
     9d2:	85 b9       	out	0x05, r24	; 5
	LCDER_port &= ~(1<<Rsel);							      //setting the pin0 of portB LOW to write
     9d4:	85 b1       	in	r24, 0x05	; 5
     9d6:	8e 7f       	andi	r24, 0xFE	; 254
     9d8:	85 b9       	out	0x05, r24	; 5
	LCDER_port |= (1<<ENable);                                //setting the pin1 of portB HIGH to read
     9da:	85 b1       	in	r24, 0x05	; 5
     9dc:	82 60       	ori	r24, 0x02	; 2
     9de:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9e0:	85 e0       	ldi	r24, 0x05	; 5
     9e2:	8a 95       	dec	r24
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <_ZN11LCD_Display16LCD_CommandgiverEh+0x28>
     9e6:	00 00       	nop
	_delay_us(2);
	LCDER_port &= ~(1<<ENable);						      //setting the pin1 of portB LOW to write
     9e8:	85 b1       	in	r24, 0x05	; 5
     9ea:	8d 7f       	andi	r24, 0xFD	; 253
     9ec:	85 b9       	out	0x05, r24	; 5
     9ee:	8f e8       	ldi	r24, 0x8F	; 143
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	f1 f7       	brne	.-4      	; 0x9f2 <_ZN11LCD_Display16LCD_CommandgiverEh+0x38>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <_ZN11LCD_Display16LCD_CommandgiverEh+0x3e>
     9f8:	00 00       	nop
	
	_delay_us(200);
	
	LCDER_port = (LCDER_port & 0b11000011) | ((comand & 0x0F)<<2);          //Sending lower nibble
     9fa:	85 b1       	in	r24, 0x05	; 5
     9fc:	6f 70       	andi	r22, 0x0F	; 15
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	66 0f       	add	r22, r22
     a02:	77 1f       	adc	r23, r23
     a04:	66 0f       	add	r22, r22
     a06:	77 1f       	adc	r23, r23
     a08:	83 7c       	andi	r24, 0xC3	; 195
     a0a:	68 2b       	or	r22, r24
     a0c:	65 b9       	out	0x05, r22	; 5
	LCDER_port |= (1 << ENable);                               //setting the pin1 of portB HIGH to read
     a0e:	85 b1       	in	r24, 0x05	; 5
     a10:	82 60       	ori	r24, 0x02	; 2
     a12:	85 b9       	out	0x05, r24	; 5
     a14:	95 e0       	ldi	r25, 0x05	; 5
     a16:	9a 95       	dec	r25
     a18:	f1 f7       	brne	.-4      	; 0xa16 <_ZN11LCD_Display16LCD_CommandgiverEh+0x5c>
     a1a:	00 00       	nop
	_delay_us(2);
	LCDER_port &= ~(1<< ENable);                               //setting the pin1 of portB LOW to write
     a1c:	85 b1       	in	r24, 0x05	; 5
     a1e:	8d 7f       	andi	r24, 0xFD	; 253
     a20:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a22:	8f e9       	ldi	r24, 0x9F	; 159
     a24:	9f e0       	ldi	r25, 0x0F	; 15
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <_ZN11LCD_Display16LCD_CommandgiverEh+0x6c>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <_ZN11LCD_Display16LCD_CommandgiverEh+0x72>
     a2c:	00 00       	nop
     a2e:	08 95       	ret

00000a30 <_ZN11LCD_Display15LCD_InitializerEv>:
	_delay_ms(2);
}

void LCD_Display::LCD_Initializer(){                           // function to output signal towards LCD
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	ec 01       	movw	r28, r24
	LCD_Dir_00 = 0xFF;                                         // setting the portB to be in Output mode
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	84 b9       	out	0x04, r24	; 4
     a3a:	8f e3       	ldi	r24, 0x3F	; 63
     a3c:	9c e9       	ldi	r25, 0x9C	; 156
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <_ZN11LCD_Display15LCD_InitializerEv+0xe>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <_ZN11LCD_Display15LCD_InitializerEv+0x14>
     a44:	00 00       	nop
	_delay_ms(20);
	
	LCD_Commandgiver(0x02);                                    //initializes LCD 16x2 in 4-bit mode
     a46:	62 e0       	ldi	r22, 0x02	; 2
     a48:	ce 01       	movw	r24, r28
     a4a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x28);                                    // configures LCD in 2-line, 4-bit mode, and 5x8 dots.
     a4e:	68 e2       	ldi	r22, 0x28	; 40
     a50:	ce 01       	movw	r24, r28
     a52:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x0c);                                    //Send any Display ON command
     a56:	6c e0       	ldi	r22, 0x0C	; 12
     a58:	ce 01       	movw	r24, r28
     a5a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x06);                                    //increment cursor)
     a5e:	66 e0       	ldi	r22, 0x06	; 6
     a60:	ce 01       	movw	r24, r28
     a62:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x01);                                    //Clear display screen
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	ce 01       	movw	r24, r28
     a6a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
     a6e:	8f e9       	ldi	r24, 0x9F	; 159
     a70:	9f e0       	ldi	r25, 0x0F	; 15
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <_ZN11LCD_Display15LCD_InitializerEv+0x42>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <_ZN11LCD_Display15LCD_InitializerEv+0x48>
     a78:	00 00       	nop
	_delay_ms(2);
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <_ZN11LCD_Display13LCD_CharacterEh>:

void LCD_Display::LCD_Character(unsigned char data_00)        //function to output characters towards LCD
{
	//LCDER_port = ( LCDER_port & 0x0F) | (data_00 & 0xF0 );    //Sending upper nibble
	LCDER_port=(LCDER_port & 0b11000011) | ((data_00 & 0xF0)>>2);
     a80:	25 b1       	in	r18, 0x05	; 5
     a82:	96 2f       	mov	r25, r22
     a84:	90 7f       	andi	r25, 0xF0	; 240
     a86:	89 2f       	mov	r24, r25
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	95 95       	asr	r25
     a8c:	87 95       	ror	r24
     a8e:	95 95       	asr	r25
     a90:	87 95       	ror	r24
     a92:	92 2f       	mov	r25, r18
     a94:	93 7c       	andi	r25, 0xC3	; 195
     a96:	89 2b       	or	r24, r25
     a98:	85 b9       	out	0x05, r24	; 5
	LCDER_port |= (1<<Rsel);                                  //setting the pin0 of portB HIGH to read
     a9a:	85 b1       	in	r24, 0x05	; 5
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	85 b9       	out	0x05, r24	; 5
	LCDER_port |=(1<<ENable);                                 //setting the pin1 of portB HIGH to read
     aa0:	85 b1       	in	r24, 0x05	; 5
     aa2:	82 60       	ori	r24, 0x02	; 2
     aa4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	8a 95       	dec	r24
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <_ZN11LCD_Display13LCD_CharacterEh+0x28>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <_ZN11LCD_Display13LCD_CharacterEh+0x2e>
	_delay_us(1);
	LCDER_port &= ~(1<<ENable);                               //setting the pin1 of portB LOW to write
     aae:	85 b1       	in	r24, 0x05	; 5
     ab0:	8d 7f       	andi	r24, 0xFD	; 253
     ab2:	85 b9       	out	0x05, r24	; 5
     ab4:	8f e8       	ldi	r24, 0x8F	; 143
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <_ZN11LCD_Display13LCD_CharacterEh+0x38>
     abc:	00 c0       	rjmp	.+0      	; 0xabe <_ZN11LCD_Display13LCD_CharacterEh+0x3e>
     abe:	00 00       	nop
	
	_delay_us(200);
		
	//LCDER_port = ( LCDER_port & 0x0F) | (data_00 <<4 );       //Sending lower nibble
	LCDER_port = (LCDER_port & 0b11000011) | ((data_00 & 0x0F)<<2);
     ac0:	85 b1       	in	r24, 0x05	; 5
     ac2:	6f 70       	andi	r22, 0x0F	; 15
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	66 0f       	add	r22, r22
     ac8:	77 1f       	adc	r23, r23
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	83 7c       	andi	r24, 0xC3	; 195
     ad0:	68 2b       	or	r22, r24
     ad2:	65 b9       	out	0x05, r22	; 5
	LCDER_port |= (1<< ENable);                               //setting the pin1 of portB HIGH to read
     ad4:	85 b1       	in	r24, 0x05	; 5
     ad6:	82 60       	ori	r24, 0x02	; 2
     ad8:	85 b9       	out	0x05, r24	; 5
     ada:	92 e0       	ldi	r25, 0x02	; 2
     adc:	9a 95       	dec	r25
     ade:	f1 f7       	brne	.-4      	; 0xadc <_ZN11LCD_Display13LCD_CharacterEh+0x5c>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <_ZN11LCD_Display13LCD_CharacterEh+0x62>
	_delay_us(1);
	LCDER_port &= ~(1<<ENable);                               //setting the pin1 of portB LOW to write
     ae2:	85 b1       	in	r24, 0x05	; 5
     ae4:	8d 7f       	andi	r24, 0xFD	; 253
     ae6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae8:	8f e9       	ldi	r24, 0x9F	; 159
     aea:	9f e0       	ldi	r25, 0x0F	; 15
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <_ZN11LCD_Display13LCD_CharacterEh+0x6c>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <_ZN11LCD_Display13LCD_CharacterEh+0x72>
     af2:	00 00       	nop
     af4:	08 95       	ret

00000af6 <_ZN11LCD_Display10LCD_StringEPc>:
	_delay_ms(2);
}

void LCD_Display::LCD_String(char* string_00)                 //function to output the set of characters as a string
{
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	7c 01       	movw	r14, r24
     b04:	8b 01       	movw	r16, r22
	for (int ci=0;string_00[ci] != 0; ci++)                   //for loop to accumulate characters to create string
     b06:	c0 e0       	ldi	r28, 0x00	; 0
     b08:	d0 e0       	ldi	r29, 0x00	; 0
     b0a:	f8 01       	movw	r30, r16
     b0c:	ec 0f       	add	r30, r28
     b0e:	fd 1f       	adc	r31, r29
     b10:	60 81       	ld	r22, Z
     b12:	66 23       	and	r22, r22
     b14:	29 f0       	breq	.+10     	; 0xb20 <_ZN11LCD_Display10LCD_StringEPc+0x2a>
	{
		LCD_Character (string_00[ci]);                        //calling the above defined function to create the string using characters
     b16:	c7 01       	movw	r24, r14
     b18:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN11LCD_Display13LCD_CharacterEh>
	_delay_ms(2);
}

void LCD_Display::LCD_String(char* string_00)                 //function to output the set of characters as a string
{
	for (int ci=0;string_00[ci] != 0; ci++)                   //for loop to accumulate characters to create string
     b1c:	21 96       	adiw	r28, 0x01	; 1
     b1e:	f5 cf       	rjmp	.-22     	; 0xb0a <_ZN11LCD_Display10LCD_StringEPc+0x14>
	{
		LCD_Character (string_00[ci]);                        //calling the above defined function to create the string using characters
	}
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	08 95       	ret

00000b2e <_ZN11LCD_Display9LCD_ClearEv>:


void LCD_Display::LCD_Clear()                                 //function to clear the LCD after displaying the output
{
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	ec 01       	movw	r28, r24
	LCD_Commandgiver(0x01);                                   //Clear display screen
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
     b3a:	8f e9       	ldi	r24, 0x9F	; 159
     b3c:	9f e0       	ldi	r25, 0x0F	; 15
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <_ZN11LCD_Display9LCD_ClearEv+0x10>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <_ZN11LCD_Display9LCD_ClearEv+0x16>
     b44:	00 00       	nop
	_delay_ms(2);
	LCD_Commandgiver(0x80);                                   //Cursor at home position
     b46:	60 e8       	ldi	r22, 0x80	; 128
     b48:	ce 01       	movw	r24, r28
     b4a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	08 95       	ret

00000b54 <_ZN11LCD_Display13LCD_String_xyEccPc>:

void LCD_Display::LCD_String_xy(char row_1, char position, char *string_00) //function to set the position of the LCD cursor
{
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	8c 01       	movw	r16, r24
     b5e:	e9 01       	movw	r28, r18
	if (row_1 == 0 && position<16)
     b60:	61 11       	cpse	r22, r1
     b62:	08 c0       	rjmp	.+16     	; 0xb74 <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     b64:	40 31       	cpi	r20, 0x10	; 16
     b66:	30 f4       	brcc	.+12     	; 0xb74 <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
	LCD_Commandgiver((position & 0x0F)| 0x80);                //Command of first row and required position<16
     b68:	4f 70       	andi	r20, 0x0F	; 15
     b6a:	64 2f       	mov	r22, r20
     b6c:	60 68       	ori	r22, 0x80	; 128
     b6e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
     b72:	0a c0       	rjmp	.+20     	; 0xb88 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
	else if (row_1 == 1 && position<16)
     b74:	61 30       	cpi	r22, 0x01	; 1
     b76:	41 f4       	brne	.+16     	; 0xb88 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     b78:	40 31       	cpi	r20, 0x10	; 16
     b7a:	30 f4       	brcc	.+12     	; 0xb88 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
	LCD_Commandgiver((position &0x0F) | 0xC0);                //Command of first row and required position<16
     b7c:	4f 70       	andi	r20, 0x0F	; 15
     b7e:	64 2f       	mov	r22, r20
     b80:	60 6c       	ori	r22, 0xC0	; 192
     b82:	c8 01       	movw	r24, r16
     b84:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_String(string_00);                                    //calling the above defined function
     b88:	be 01       	movw	r22, r28
     b8a:	c8 01       	movw	r24, r16
     b8c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	08 95       	ret

00000b9a <_Z7displayv>:
		dwnbtn();
		backbtn();
	}
}

void display(){
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29

	if (set == 1){
     b9e:	40 91 6c 08 	lds	r20, 0x086C	; 0x80086c <set>
     ba2:	50 91 6d 08 	lds	r21, 0x086D	; 0x80086d <set+0x1>
     ba6:	41 30       	cpi	r20, 0x01	; 1
     ba8:	51 05       	cpc	r21, r1
     baa:	b9 f5       	brne	.+110    	; 0xc1a <_Z7displayv+0x80>
		lcd.LCD_Clear();
     bac:	8c e7       	ldi	r24, 0x7C	; 124
     bae:	98 e0       	ldi	r25, 0x08	; 8
     bb0:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(Menu[currentscreenset1][0]);        //Write string on 1st line of LCD
     bb4:	60 91 6a 08 	lds	r22, 0x086A	; 0x80086a <currentscreenset1>
     bb8:	70 91 6b 08 	lds	r23, 0x086B	; 0x80086b <currentscreenset1+0x1>
     bbc:	66 0f       	add	r22, r22
     bbe:	77 1f       	adc	r23, r23
     bc0:	62 95       	swap	r22
     bc2:	72 95       	swap	r23
     bc4:	70 7f       	andi	r23, 0xF0	; 240
     bc6:	76 27       	eor	r23, r22
     bc8:	60 7f       	andi	r22, 0xF0	; 240
     bca:	76 27       	eor	r23, r22
     bcc:	60 51       	subi	r22, 0x10	; 16
     bce:	7d 4f       	sbci	r23, 0xFD	; 253
     bd0:	8c e7       	ldi	r24, 0x7C	; 124
     bd2:	98 e0       	ldi	r25, 0x08	; 8
     bd4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        //Go to 2nd line
     bd8:	60 ec       	ldi	r22, 0xC0	; 192
     bda:	8c e7       	ldi	r24, 0x7C	; 124
     bdc:	98 e0       	ldi	r25, 0x08	; 8
     bde:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(Menu[currentscreenset1][1]);
     be2:	60 91 6a 08 	lds	r22, 0x086A	; 0x80086a <currentscreenset1>
     be6:	70 91 6b 08 	lds	r23, 0x086B	; 0x80086b <currentscreenset1+0x1>
     bea:	66 0f       	add	r22, r22
     bec:	77 1f       	adc	r23, r23
     bee:	62 95       	swap	r22
     bf0:	72 95       	swap	r23
     bf2:	70 7f       	andi	r23, 0xF0	; 240
     bf4:	76 27       	eor	r23, r22
     bf6:	60 7f       	andi	r22, 0xF0	; 240
     bf8:	76 27       	eor	r23, r22
     bfa:	60 50       	subi	r22, 0x00	; 0
     bfc:	7d 4f       	sbci	r23, 0xFD	; 253
     bfe:	8c e7       	ldi	r24, 0x7C	; 124
     c00:	98 e0       	ldi	r25, 0x08	; 8
     c02:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
     c06:	2f ef       	ldi	r18, 0xFF	; 255
     c08:	89 e6       	ldi	r24, 0x69	; 105
     c0a:	98 e1       	ldi	r25, 0x18	; 24
     c0c:	21 50       	subi	r18, 0x01	; 1
     c0e:	80 40       	sbci	r24, 0x00	; 0
     c10:	90 40       	sbci	r25, 0x00	; 0
     c12:	e1 f7       	brne	.-8      	; 0xc0c <_Z7displayv+0x72>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <_Z7displayv+0x7c>
     c16:	00 00       	nop
     c18:	90 c1       	rjmp	.+800    	; 0xf3a <_Z7displayv+0x3a0>
		_delay_ms(1000);
	}
	else if ((set == 2) & (currentscreenset1 == 0)){
     c1a:	21 e0       	ldi	r18, 0x01	; 1
     c1c:	42 30       	cpi	r20, 0x02	; 2
     c1e:	51 05       	cpc	r21, r1
     c20:	09 f0       	breq	.+2      	; 0xc24 <_Z7displayv+0x8a>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <currentscreenset1>
     c28:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <currentscreenset1+0x1>
     c2c:	31 e0       	ldi	r19, 0x01	; 1
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	09 f0       	breq	.+2      	; 0xc34 <_Z7displayv+0x9a>
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	33 23       	and	r19, r19
     c36:	09 f4       	brne	.+2      	; 0xc3a <_Z7displayv+0xa0>
     c38:	6f c0       	rjmp	.+222    	; 0xd18 <_Z7displayv+0x17e>
     c3a:	22 23       	and	r18, r18
     c3c:	09 f4       	brne	.+2      	; 0xc40 <_Z7displayv+0xa6>
     c3e:	6c c0       	rjmp	.+216    	; 0xd18 <_Z7displayv+0x17e>
		char* txtHr;
		char* txtMin;
		lcd.LCD_Clear();
     c40:	8c e7       	ldi	r24, 0x7C	; 124
     c42:	98 e0       	ldi	r25, 0x08	; 8
     c44:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
		int* alarmTime = alarmclock.setNewAlarm();
     c48:	8a e7       	ldi	r24, 0x7A	; 122
     c4a:	98 e0       	ldi	r25, 0x08	; 8
     c4c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_ZN10AlarmClock11setNewAlarmEv>
     c50:	ec 01       	movw	r28, r24
		allAlarms[alarmCount][0] = alarmTime[0];
     c52:	e0 91 3c 08 	lds	r30, 0x083C	; 0x80083c <alarmCount>
     c56:	f0 91 3d 08 	lds	r31, 0x083D	; 0x80083d <alarmCount+0x1>
     c5a:	88 81       	ld	r24, Y
     c5c:	99 81       	ldd	r25, Y+1	; 0x01
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	ee 0f       	add	r30, r30
     c64:	ff 1f       	adc	r31, r31
     c66:	e2 5c       	subi	r30, 0xC2	; 194
     c68:	f7 4f       	sbci	r31, 0xF7	; 247
     c6a:	91 83       	std	Z+1, r25	; 0x01
     c6c:	80 83       	st	Z, r24
		allAlarms[alarmCount][1] = alarmTime[1];
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	9b 81       	ldd	r25, Y+3	; 0x03
     c72:	93 83       	std	Z+3, r25	; 0x03
     c74:	82 83       	std	Z+2, r24	; 0x02

		txtHr = alarmclock.int_to_char(alarmTime[0]);
     c76:	68 81       	ld	r22, Y
     c78:	79 81       	ldd	r23, Y+1	; 0x01
     c7a:	8a e7       	ldi	r24, 0x7A	; 122
     c7c:	98 e0       	ldi	r25, 0x08	; 8
     c7e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     c82:	dc 01       	movw	r26, r24
		allAlarmsMenu[alarmCount][0][7] = txtHr[0]; //optional
     c84:	e0 91 3c 08 	lds	r30, 0x083C	; 0x80083c <alarmCount>
     c88:	f0 91 3d 08 	lds	r31, 0x083D	; 0x80083d <alarmCount+0x1>
     c8c:	2c 91       	ld	r18, X
     c8e:	af 01       	movw	r20, r30
     c90:	44 0f       	add	r20, r20
     c92:	55 1f       	adc	r21, r21
     c94:	42 95       	swap	r20
     c96:	52 95       	swap	r21
     c98:	50 7f       	andi	r21, 0xF0	; 240
     c9a:	54 27       	eor	r21, r20
     c9c:	40 7f       	andi	r20, 0xF0	; 240
     c9e:	54 27       	eor	r21, r20
     ca0:	ca 01       	movw	r24, r20
     ca2:	80 5b       	subi	r24, 0xB0	; 176
     ca4:	9d 4f       	sbci	r25, 0xFD	; 253
     ca6:	fc 01       	movw	r30, r24
     ca8:	27 83       	std	Z+7, r18	; 0x07
		allAlarmsMenu[alarmCount][0][8] = txtHr[1]; //
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	2c 91       	ld	r18, X
     cae:	11 97       	sbiw	r26, 0x01	; 1
     cb0:	20 87       	std	Z+8, r18	; 0x08

		alarmChangeList[alarmCount][0][0] = txtHr[0]; 
     cb2:	8c 91       	ld	r24, X
     cb4:	fa 01       	movw	r30, r20
     cb6:	e0 55       	subi	r30, 0x50	; 80
     cb8:	fe 4f       	sbci	r31, 0xFE	; 254
     cba:	80 83       	st	Z, r24
		alarmChangeList[alarmCount][0][1] = txtHr[1];
     cbc:	11 96       	adiw	r26, 0x01	; 1
     cbe:	8c 91       	ld	r24, X
     cc0:	81 83       	std	Z+1, r24	; 0x01

		txtMin = alarmclock.int_to_char(alarmTime[1]);
     cc2:	6a 81       	ldd	r22, Y+2	; 0x02
     cc4:	7b 81       	ldd	r23, Y+3	; 0x03
     cc6:	8a e7       	ldi	r24, 0x7A	; 122
     cc8:	98 e0       	ldi	r25, 0x08	; 8
     cca:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     cce:	dc 01       	movw	r26, r24
		allAlarmsMenu[alarmCount][0][10] = txtMin[0]; // optional
     cd0:	20 91 3c 08 	lds	r18, 0x083C	; 0x80083c <alarmCount>
     cd4:	30 91 3d 08 	lds	r19, 0x083D	; 0x80083d <alarmCount+0x1>
     cd8:	8c 91       	ld	r24, X
     cda:	f9 01       	movw	r30, r18
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	e2 95       	swap	r30
     ce2:	f2 95       	swap	r31
     ce4:	f0 7f       	andi	r31, 0xF0	; 240
     ce6:	fe 27       	eor	r31, r30
     ce8:	e0 7f       	andi	r30, 0xF0	; 240
     cea:	fe 27       	eor	r31, r30
     cec:	ef 01       	movw	r28, r30
     cee:	c0 5b       	subi	r28, 0xB0	; 176
     cf0:	dd 4f       	sbci	r29, 0xFD	; 253
     cf2:	8a 87       	std	Y+10, r24	; 0x0a
		allAlarmsMenu[alarmCount][0][11] = txtMin[1]; //
     cf4:	11 96       	adiw	r26, 0x01	; 1
     cf6:	8c 91       	ld	r24, X
     cf8:	11 97       	sbiw	r26, 0x01	; 1
     cfa:	8b 87       	std	Y+11, r24	; 0x0b

		alarmChangeList[alarmCount][0][3] = txtMin[0];
     cfc:	8c 91       	ld	r24, X
     cfe:	e0 55       	subi	r30, 0x50	; 80
     d00:	fe 4f       	sbci	r31, 0xFE	; 254
     d02:	83 83       	std	Z+3, r24	; 0x03
		alarmChangeList[alarmCount][0][4] = txtMin[1];
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	8c 91       	ld	r24, X
     d08:	84 83       	std	Z+4, r24	; 0x04

		alarmCount += 1;
     d0a:	2f 5f       	subi	r18, 0xFF	; 255
     d0c:	3f 4f       	sbci	r19, 0xFF	; 255
     d0e:	30 93 3d 08 	sts	0x083D, r19	; 0x80083d <alarmCount+0x1>
     d12:	20 93 3c 08 	sts	0x083C, r18	; 0x80083c <alarmCount>
     d16:	11 c1       	rjmp	.+546    	; 0xf3a <_Z7displayv+0x3a0>
	}
	else if ((set == 2) & (currentscreenset1 == 1)){
     d18:	31 e0       	ldi	r19, 0x01	; 1
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	91 05       	cpc	r25, r1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <_Z7displayv+0x188>
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	22 23       	and	r18, r18
     d24:	c9 f1       	breq	.+114    	; 0xd98 <_Z7displayv+0x1fe>
     d26:	33 23       	and	r19, r19
     d28:	b9 f1       	breq	.+110    	; 0xd98 <_Z7displayv+0x1fe>
		//All alarms menu
		lcd.LCD_Clear();
     d2a:	8c e7       	ldi	r24, 0x7C	; 124
     d2c:	98 e0       	ldi	r25, 0x08	; 8
     d2e:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(allAlarmsMenu[currentscreenset21][0]);  
     d32:	60 91 68 08 	lds	r22, 0x0868	; 0x800868 <currentscreenset21>
     d36:	70 91 69 08 	lds	r23, 0x0869	; 0x800869 <currentscreenset21+0x1>
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	62 95       	swap	r22
     d40:	72 95       	swap	r23
     d42:	70 7f       	andi	r23, 0xF0	; 240
     d44:	76 27       	eor	r23, r22
     d46:	60 7f       	andi	r22, 0xF0	; 240
     d48:	76 27       	eor	r23, r22
     d4a:	60 5b       	subi	r22, 0xB0	; 176
     d4c:	7d 4f       	sbci	r23, 0xFD	; 253
     d4e:	8c e7       	ldi	r24, 0x7C	; 124
     d50:	98 e0       	ldi	r25, 0x08	; 8
     d52:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        
     d56:	60 ec       	ldi	r22, 0xC0	; 192
     d58:	8c e7       	ldi	r24, 0x7C	; 124
     d5a:	98 e0       	ldi	r25, 0x08	; 8
     d5c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(allAlarmsMenu[currentscreenset21][1]);
     d60:	60 91 68 08 	lds	r22, 0x0868	; 0x800868 <currentscreenset21>
     d64:	70 91 69 08 	lds	r23, 0x0869	; 0x800869 <currentscreenset21+0x1>
     d68:	66 0f       	add	r22, r22
     d6a:	77 1f       	adc	r23, r23
     d6c:	62 95       	swap	r22
     d6e:	72 95       	swap	r23
     d70:	70 7f       	andi	r23, 0xF0	; 240
     d72:	76 27       	eor	r23, r22
     d74:	60 7f       	andi	r22, 0xF0	; 240
     d76:	76 27       	eor	r23, r22
     d78:	60 5a       	subi	r22, 0xA0	; 160
     d7a:	7d 4f       	sbci	r23, 0xFD	; 253
     d7c:	8c e7       	ldi	r24, 0x7C	; 124
     d7e:	98 e0       	ldi	r25, 0x08	; 8
     d80:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
     d84:	ff ef       	ldi	r31, 0xFF	; 255
     d86:	29 e6       	ldi	r18, 0x69	; 105
     d88:	88 e1       	ldi	r24, 0x18	; 24
     d8a:	f1 50       	subi	r31, 0x01	; 1
     d8c:	20 40       	sbci	r18, 0x00	; 0
     d8e:	80 40       	sbci	r24, 0x00	; 0
     d90:	e1 f7       	brne	.-8      	; 0xd8a <_Z7displayv+0x1f0>
     d92:	00 c0       	rjmp	.+0      	; 0xd94 <_Z7displayv+0x1fa>
     d94:	00 00       	nop
     d96:	d1 c0       	rjmp	.+418    	; 0xf3a <_Z7displayv+0x3a0>
		//   |     16:30       |
		//   | OK        DELETE|
		
		_delay_ms(1000);
	}
	else if ((set==3) & (currentscreenset1==1) ){//& (currentscreenset21 == 0 or 1 or 2 or 3 or 4)){
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	43 30       	cpi	r20, 0x03	; 3
     d9c:	51 05       	cpc	r21, r1
     d9e:	09 f0       	breq	.+2      	; 0xda2 <_Z7displayv+0x208>
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	66 23       	and	r22, r22
     da4:	09 f1       	breq	.+66     	; 0xde8 <_Z7displayv+0x24e>
     da6:	33 23       	and	r19, r19
     da8:	f9 f0       	breq	.+62     	; 0xde8 <_Z7displayv+0x24e>
		lcd.LCD_Clear();
     daa:	8c e7       	ldi	r24, 0x7C	; 124
     dac:	98 e0       	ldi	r25, 0x08	; 8
     dae:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String("     16:30       ");                //Write string on 1st line of LCD
     db2:	67 ee       	ldi	r22, 0xE7	; 231
     db4:	77 e0       	ldi	r23, 0x07	; 7
     db6:	8c e7       	ldi	r24, 0x7C	; 124
     db8:	98 e0       	ldi	r25, 0x08	; 8
     dba:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);              //Go to 2nd line
     dbe:	60 ec       	ldi	r22, 0xC0	; 192
     dc0:	8c e7       	ldi	r24, 0x7C	; 124
     dc2:	98 e0       	ldi	r25, 0x08	; 8
     dc4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String("OK        DELETE");
     dc8:	69 ef       	ldi	r22, 0xF9	; 249
     dca:	77 e0       	ldi	r23, 0x07	; 7
     dcc:	8c e7       	ldi	r24, 0x7C	; 124
     dce:	98 e0       	ldi	r25, 0x08	; 8
     dd0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
     dd4:	9f ef       	ldi	r25, 0xFF	; 255
     dd6:	e9 e6       	ldi	r30, 0x69	; 105
     dd8:	f8 e1       	ldi	r31, 0x18	; 24
     dda:	91 50       	subi	r25, 0x01	; 1
     ddc:	e0 40       	sbci	r30, 0x00	; 0
     dde:	f0 40       	sbci	r31, 0x00	; 0
     de0:	e1 f7       	brne	.-8      	; 0xdda <_Z7displayv+0x240>
     de2:	00 c0       	rjmp	.+0      	; 0xde4 <_Z7displayv+0x24a>
     de4:	00 00       	nop
     de6:	a9 c0       	rjmp	.+338    	; 0xf3a <_Z7displayv+0x3a0>
		_delay_ms(1000);
		
	}
	else if ((set == 2) & (currentscreenset1 == 2)){
     de8:	31 e0       	ldi	r19, 0x01	; 1
     dea:	82 30       	cpi	r24, 0x02	; 2
     dec:	91 05       	cpc	r25, r1
     dee:	09 f0       	breq	.+2      	; 0xdf2 <_Z7displayv+0x258>
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	33 23       	and	r19, r19
     df4:	39 f0       	breq	.+14     	; 0xe04 <_Z7displayv+0x26a>
     df6:	22 23       	and	r18, r18
     df8:	29 f0       	breq	.+10     	; 0xe04 <_Z7displayv+0x26a>
		alarmclock.setTimetoRTC();
     dfa:	8a e7       	ldi	r24, 0x7A	; 122
     dfc:	98 e0       	ldi	r25, 0x08	; 8
     dfe:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN10AlarmClock12setTimetoRTCEv>
     e02:	9b c0       	rjmp	.+310    	; 0xf3a <_Z7displayv+0x3a0>
	}
	else if ((set == 2) & (currentscreenset1 == 3)){
     e04:	31 e0       	ldi	r19, 0x01	; 1
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	91 05       	cpc	r25, r1
     e0a:	09 f0       	breq	.+2      	; 0xe0e <_Z7displayv+0x274>
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	33 23       	and	r19, r19
     e10:	09 f4       	brne	.+2      	; 0xe14 <_Z7displayv+0x27a>
     e12:	6d c0       	rjmp	.+218    	; 0xeee <_Z7displayv+0x354>
     e14:	22 23       	and	r18, r18
     e16:	09 f4       	brne	.+2      	; 0xe1a <_Z7displayv+0x280>
     e18:	6a c0       	rjmp	.+212    	; 0xeee <_Z7displayv+0x354>
		lcd.LCD_Clear();
     e1a:	8c e7       	ldi	r24, 0x7C	; 124
     e1c:	98 e0       	ldi	r25, 0x08	; 8
     e1e:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(alarmtone[currentscreenset23][0]);                //Write string on 1st line of LCD
     e22:	60 91 66 08 	lds	r22, 0x0866	; 0x800866 <currentscreenset23>
     e26:	70 91 67 08 	lds	r23, 0x0867	; 0x800867 <currentscreenset23+0x1>
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	62 95       	swap	r22
     e30:	72 95       	swap	r23
     e32:	70 7f       	andi	r23, 0xF0	; 240
     e34:	76 27       	eor	r23, r22
     e36:	60 7f       	andi	r22, 0xF0	; 240
     e38:	76 27       	eor	r23, r22
     e3a:	60 5f       	subi	r22, 0xF0	; 240
     e3c:	7e 4f       	sbci	r23, 0xFE	; 254
     e3e:	8c e7       	ldi	r24, 0x7C	; 124
     e40:	98 e0       	ldi	r25, 0x08	; 8
     e42:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        //Go to 2nd line
     e46:	60 ec       	ldi	r22, 0xC0	; 192
     e48:	8c e7       	ldi	r24, 0x7C	; 124
     e4a:	98 e0       	ldi	r25, 0x08	; 8
     e4c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(alarmtone[currentscreenset23][1]);
     e50:	60 91 66 08 	lds	r22, 0x0866	; 0x800866 <currentscreenset23>
     e54:	70 91 67 08 	lds	r23, 0x0867	; 0x800867 <currentscreenset23+0x1>
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	62 95       	swap	r22
     e5e:	72 95       	swap	r23
     e60:	70 7f       	andi	r23, 0xF0	; 240
     e62:	76 27       	eor	r23, r22
     e64:	60 7f       	andi	r22, 0xF0	; 240
     e66:	76 27       	eor	r23, r22
     e68:	60 5e       	subi	r22, 0xE0	; 224
     e6a:	7e 4f       	sbci	r23, 0xFE	; 254
     e6c:	8c e7       	ldi	r24, 0x7C	; 124
     e6e:	98 e0       	ldi	r25, 0x08	; 8
     e70:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
     e74:	2f ef       	ldi	r18, 0xFF	; 255
     e76:	89 e6       	ldi	r24, 0x69	; 105
     e78:	98 e1       	ldi	r25, 0x18	; 24
     e7a:	21 50       	subi	r18, 0x01	; 1
     e7c:	80 40       	sbci	r24, 0x00	; 0
     e7e:	90 40       	sbci	r25, 0x00	; 0
     e80:	e1 f7       	brne	.-8      	; 0xe7a <_Z7displayv+0x2e0>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <_Z7displayv+0x2ea>
     e84:	00 00       	nop
		_delay_ms(1000);
		if (currentscreenset23==0){
     e86:	80 91 66 08 	lds	r24, 0x0866	; 0x800866 <currentscreenset23>
     e8a:	90 91 67 08 	lds	r25, 0x0867	; 0x800867 <currentscreenset23+0x1>
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	39 f4       	brne	.+14     	; 0xea0 <_Z7displayv+0x306>
			music.tone(0);
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	8e e6       	ldi	r24, 0x6E	; 110
     e98:	98 e0       	ldi	r25, 0x08	; 8
     e9a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN15music_notations4toneEi>
     e9e:	4d c0       	rjmp	.+154    	; 0xf3a <_Z7displayv+0x3a0>
		}
		else if (currentscreenset23==1){
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	91 05       	cpc	r25, r1
     ea4:	39 f4       	brne	.+14     	; 0xeb4 <_Z7displayv+0x31a>
			music.tone(1);
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	8e e6       	ldi	r24, 0x6E	; 110
     eac:	98 e0       	ldi	r25, 0x08	; 8
     eae:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN15music_notations4toneEi>
     eb2:	43 c0       	rjmp	.+134    	; 0xf3a <_Z7displayv+0x3a0>
		}
		else if (currentscreenset23==2){
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	91 05       	cpc	r25, r1
     eb8:	39 f4       	brne	.+14     	; 0xec8 <_Z7displayv+0x32e>
			music.tone(2);
     eba:	62 e0       	ldi	r22, 0x02	; 2
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	8e e6       	ldi	r24, 0x6E	; 110
     ec0:	98 e0       	ldi	r25, 0x08	; 8
     ec2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN15music_notations4toneEi>
     ec6:	39 c0       	rjmp	.+114    	; 0xf3a <_Z7displayv+0x3a0>
		}
		else if (currentscreenset23==3){
     ec8:	83 30       	cpi	r24, 0x03	; 3
     eca:	91 05       	cpc	r25, r1
     ecc:	39 f4       	brne	.+14     	; 0xedc <_Z7displayv+0x342>
			music.tone(3);
     ece:	63 e0       	ldi	r22, 0x03	; 3
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	8e e6       	ldi	r24, 0x6E	; 110
     ed4:	98 e0       	ldi	r25, 0x08	; 8
     ed6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN15music_notations4toneEi>
     eda:	2f c0       	rjmp	.+94     	; 0xf3a <_Z7displayv+0x3a0>
		}
		else if (currentscreenset23==4){
     edc:	04 97       	sbiw	r24, 0x04	; 4
     ede:	69 f5       	brne	.+90     	; 0xf3a <_Z7displayv+0x3a0>
			music.tone(4);
     ee0:	64 e0       	ldi	r22, 0x04	; 4
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	8e e6       	ldi	r24, 0x6E	; 110
     ee6:	98 e0       	ldi	r25, 0x08	; 8
     ee8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN15music_notations4toneEi>
     eec:	26 c0       	rjmp	.+76     	; 0xf3a <_Z7displayv+0x3a0>
		}
	}
	else if ((set == 2) & (currentscreenset1 == 4)){
     eee:	31 e0       	ldi	r19, 0x01	; 1
     ef0:	04 97       	sbiw	r24, 0x04	; 4
     ef2:	09 f0       	breq	.+2      	; 0xef6 <_Z7displayv+0x35c>
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	33 23       	and	r19, r19
     ef8:	01 f1       	breq	.+64     	; 0xf3a <_Z7displayv+0x3a0>
     efa:	22 23       	and	r18, r18
     efc:	f1 f0       	breq	.+60     	; 0xf3a <_Z7displayv+0x3a0>
		lcd.LCD_Clear();
     efe:	8c e7       	ldi	r24, 0x7C	; 124
     f00:	98 e0       	ldi	r25, 0x08	; 8
     f02:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(reset[0]);                //Write string on 1st line of LCD
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	71 e0       	ldi	r23, 0x01	; 1
     f0a:	8c e7       	ldi	r24, 0x7C	; 124
     f0c:	98 e0       	ldi	r25, 0x08	; 8
     f0e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);              //Go to 2nd line
     f12:	60 ec       	ldi	r22, 0xC0	; 192
     f14:	8c e7       	ldi	r24, 0x7C	; 124
     f16:	98 e0       	ldi	r25, 0x08	; 8
     f18:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(reset[0]);
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	8c e7       	ldi	r24, 0x7C	; 124
     f22:	98 e0       	ldi	r25, 0x08	; 8
     f24:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN11LCD_Display10LCD_StringEPc>
     f28:	ef ef       	ldi	r30, 0xFF	; 255
     f2a:	f9 e6       	ldi	r31, 0x69	; 105
     f2c:	28 e1       	ldi	r18, 0x18	; 24
     f2e:	e1 50       	subi	r30, 0x01	; 1
     f30:	f0 40       	sbci	r31, 0x00	; 0
     f32:	20 40       	sbci	r18, 0x00	; 0
     f34:	e1 f7       	brne	.-8      	; 0xf2e <_Z7displayv+0x394>
     f36:	00 c0       	rjmp	.+0      	; 0xf38 <_Z7displayv+0x39e>
     f38:	00 00       	nop
		_delay_ms(1000);
	}
	
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <_Z5upbtnv>:

void upbtn(){
	if (PINC &(1<<Up)){
     f40:	30 9b       	sbis	0x06, 0	; 6
     f42:	8a c0       	rjmp	.+276    	; 0x1058 <_Z5upbtnv+0x118>
		if ((set == 1) & (currentscreenset1==0)){
     f44:	40 91 6c 08 	lds	r20, 0x086C	; 0x80086c <set>
     f48:	50 91 6d 08 	lds	r21, 0x086D	; 0x80086d <set+0x1>
     f4c:	21 e0       	ldi	r18, 0x01	; 1
     f4e:	41 30       	cpi	r20, 0x01	; 1
     f50:	51 05       	cpc	r21, r1
     f52:	09 f0       	breq	.+2      	; 0xf56 <_Z5upbtnv+0x16>
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <currentscreenset1>
     f5a:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <currentscreenset1+0x1>
     f5e:	31 e0       	ldi	r19, 0x01	; 1
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	09 f0       	breq	.+2      	; 0xf66 <_Z5upbtnv+0x26>
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	33 23       	and	r19, r19
     f68:	59 f0       	breq	.+22     	; 0xf80 <_Z5upbtnv+0x40>
     f6a:	22 23       	and	r18, r18
     f6c:	49 f0       	breq	.+18     	; 0xf80 <_Z5upbtnv+0x40>
			currentscreenset1=numofscreens1-1;
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <currentscreenset1+0x1>
     f76:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <currentscreenset1>
			display();
     f7a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
     f7e:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 0)){
     f80:	31 e0       	ldi	r19, 0x01	; 1
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	09 f4       	brne	.+2      	; 0xf88 <_Z5upbtnv+0x48>
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	33 23       	and	r19, r19
     f8a:	51 f0       	breq	.+20     	; 0xfa0 <_Z5upbtnv+0x60>
     f8c:	22 23       	and	r18, r18
     f8e:	41 f0       	breq	.+16     	; 0xfa0 <_Z5upbtnv+0x60>
			currentscreenset1 -= 1;
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <currentscreenset1+0x1>
     f96:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <currentscreenset1>
			display();
     f9a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
     f9e:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 == 0)){
     fa0:	31 e0       	ldi	r19, 0x01	; 1
     fa2:	42 30       	cpi	r20, 0x02	; 2
     fa4:	51 05       	cpc	r21, r1
     fa6:	09 f0       	breq	.+2      	; 0xfaa <_Z5upbtnv+0x6a>
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	21 e0       	ldi	r18, 0x01	; 1
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	91 05       	cpc	r25, r1
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <_Z5upbtnv+0x74>
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	23 23       	and	r18, r19
     fb6:	40 91 68 08 	lds	r20, 0x0868	; 0x800868 <currentscreenset21>
     fba:	50 91 69 08 	lds	r21, 0x0869	; 0x800869 <currentscreenset21+0x1>
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	41 15       	cp	r20, r1
     fc2:	51 05       	cpc	r21, r1
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <_Z5upbtnv+0x88>
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	22 23       	and	r18, r18
     fca:	59 f0       	breq	.+22     	; 0xfe2 <_Z5upbtnv+0xa2>
     fcc:	66 23       	and	r22, r22
     fce:	49 f0       	breq	.+18     	; 0xfe2 <_Z5upbtnv+0xa2>
			currentscreenset21=numofscreens21-1;
     fd0:	84 e0       	ldi	r24, 0x04	; 4
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <currentscreenset21+0x1>
     fd8:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <currentscreenset21>
			display();
     fdc:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
     fe0:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 != 0)){
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	41 15       	cp	r20, r1
     fe6:	51 05       	cpc	r21, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <_Z5upbtnv+0xac>
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	22 23       	and	r18, r18
     fee:	59 f0       	breq	.+22     	; 0x1006 <_Z5upbtnv+0xc6>
     ff0:	66 23       	and	r22, r22
     ff2:	49 f0       	breq	.+18     	; 0x1006 <_Z5upbtnv+0xc6>
			currentscreenset21 -= 1;
     ff4:	41 50       	subi	r20, 0x01	; 1
     ff6:	51 09       	sbc	r21, r1
     ff8:	50 93 69 08 	sts	0x0869, r21	; 0x800869 <currentscreenset21+0x1>
     ffc:	40 93 68 08 	sts	0x0868, r20	; 0x800868 <currentscreenset21>
			display();
    1000:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    1004:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 == 0)){
    1006:	21 e0       	ldi	r18, 0x01	; 1
    1008:	03 97       	sbiw	r24, 0x03	; 3
    100a:	09 f0       	breq	.+2      	; 0x100e <_Z5upbtnv+0xce>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	32 23       	and	r19, r18
    1010:	80 91 66 08 	lds	r24, 0x0866	; 0x800866 <currentscreenset23>
    1014:	90 91 67 08 	lds	r25, 0x0867	; 0x800867 <currentscreenset23+0x1>
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	09 f0       	breq	.+2      	; 0x1020 <_Z5upbtnv+0xe0>
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	33 23       	and	r19, r19
    1022:	59 f0       	breq	.+22     	; 0x103a <_Z5upbtnv+0xfa>
    1024:	22 23       	and	r18, r18
    1026:	49 f0       	breq	.+18     	; 0x103a <_Z5upbtnv+0xfa>
			currentscreenset23=numofscreens21-1;
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <currentscreenset23+0x1>
    1030:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <currentscreenset23>
			display();
    1034:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    1038:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 != 0)){
    103a:	21 e0       	ldi	r18, 0x01	; 1
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	09 f4       	brne	.+2      	; 0x1042 <_Z5upbtnv+0x102>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	33 23       	and	r19, r19
    1044:	49 f0       	breq	.+18     	; 0x1058 <_Z5upbtnv+0x118>
    1046:	22 23       	and	r18, r18
    1048:	39 f0       	breq	.+14     	; 0x1058 <_Z5upbtnv+0x118>
			currentscreenset23 -= 1;
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <currentscreenset23+0x1>
    1050:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <currentscreenset23>
			display();
    1054:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    1058:	08 95       	ret

0000105a <_Z6dwnbtnv>:
		}
	}
}

void dwnbtn(){
	if (PINC &(1<<Down)){
    105a:	31 9b       	sbis	0x06, 1	; 6
    105c:	8e c0       	rjmp	.+284    	; 0x117a <_Z6dwnbtnv+0x120>
		if ((set == 1) & (currentscreenset1==4)){
    105e:	40 91 6c 08 	lds	r20, 0x086C	; 0x80086c <set>
    1062:	50 91 6d 08 	lds	r21, 0x086D	; 0x80086d <set+0x1>
    1066:	21 e0       	ldi	r18, 0x01	; 1
    1068:	41 30       	cpi	r20, 0x01	; 1
    106a:	51 05       	cpc	r21, r1
    106c:	09 f0       	breq	.+2      	; 0x1070 <_Z6dwnbtnv+0x16>
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <currentscreenset1>
    1074:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <currentscreenset1+0x1>
    1078:	31 e0       	ldi	r19, 0x01	; 1
    107a:	84 30       	cpi	r24, 0x04	; 4
    107c:	91 05       	cpc	r25, r1
    107e:	09 f0       	breq	.+2      	; 0x1082 <_Z6dwnbtnv+0x28>
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	33 23       	and	r19, r19
    1084:	49 f0       	breq	.+18     	; 0x1098 <_Z6dwnbtnv+0x3e>
    1086:	22 23       	and	r18, r18
    1088:	39 f0       	breq	.+14     	; 0x1098 <_Z6dwnbtnv+0x3e>
			currentscreenset1=0;
    108a:	10 92 6b 08 	sts	0x086B, r1	; 0x80086b <currentscreenset1+0x1>
    108e:	10 92 6a 08 	sts	0x086A, r1	; 0x80086a <currentscreenset1>
			display();
    1092:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    1096:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 4)){
    1098:	31 e0       	ldi	r19, 0x01	; 1
    109a:	84 30       	cpi	r24, 0x04	; 4
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <_Z6dwnbtnv+0x48>
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	33 23       	and	r19, r19
    10a4:	a1 f0       	breq	.+40     	; 0x10ce <_Z6dwnbtnv+0x74>
    10a6:	22 23       	and	r18, r18
    10a8:	91 f0       	breq	.+36     	; 0x10ce <_Z6dwnbtnv+0x74>
    10aa:	8f e1       	ldi	r24, 0x1F	; 31
    10ac:	9e e4       	ldi	r25, 0x4E	; 78
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <_Z6dwnbtnv+0x54>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <_Z6dwnbtnv+0x5a>
    10b4:	00 00       	nop
			_delay_ms(10);
			currentscreenset1 += 1;
    10b6:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <currentscreenset1>
    10ba:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <currentscreenset1+0x1>
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <currentscreenset1+0x1>
    10c4:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <currentscreenset1>
			display();
    10c8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    10cc:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 == 4)){
    10ce:	31 e0       	ldi	r19, 0x01	; 1
    10d0:	42 30       	cpi	r20, 0x02	; 2
    10d2:	51 05       	cpc	r21, r1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <_Z6dwnbtnv+0x7e>
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	21 e0       	ldi	r18, 0x01	; 1
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	09 f0       	breq	.+2      	; 0x10e2 <_Z6dwnbtnv+0x88>
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	23 23       	and	r18, r19
    10e4:	60 91 68 08 	lds	r22, 0x0868	; 0x800868 <currentscreenset21>
    10e8:	70 91 69 08 	lds	r23, 0x0869	; 0x800869 <currentscreenset21+0x1>
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	64 30       	cpi	r22, 0x04	; 4
    10f0:	71 05       	cpc	r23, r1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <_Z6dwnbtnv+0x9c>
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	22 23       	and	r18, r18
    10f8:	49 f0       	breq	.+18     	; 0x110c <_Z6dwnbtnv+0xb2>
    10fa:	44 23       	and	r20, r20
    10fc:	39 f0       	breq	.+14     	; 0x110c <_Z6dwnbtnv+0xb2>
			currentscreenset21=0;
    10fe:	10 92 69 08 	sts	0x0869, r1	; 0x800869 <currentscreenset21+0x1>
    1102:	10 92 68 08 	sts	0x0868, r1	; 0x800868 <currentscreenset21>
			display();
    1106:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    110a:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset23 != 4)){
    110c:	40 91 66 08 	lds	r20, 0x0866	; 0x800866 <currentscreenset23>
    1110:	50 91 67 08 	lds	r21, 0x0867	; 0x800867 <currentscreenset23+0x1>
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	44 30       	cpi	r20, 0x04	; 4
    1118:	51 05       	cpc	r21, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <_Z6dwnbtnv+0xc4>
    111c:	e0 e0       	ldi	r30, 0x00	; 0
    111e:	22 23       	and	r18, r18
    1120:	59 f0       	breq	.+22     	; 0x1138 <_Z6dwnbtnv+0xde>
    1122:	ee 23       	and	r30, r30
    1124:	49 f0       	breq	.+18     	; 0x1138 <_Z6dwnbtnv+0xde>
			currentscreenset21 += 1;
    1126:	6f 5f       	subi	r22, 0xFF	; 255
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	70 93 69 08 	sts	0x0869, r23	; 0x800869 <currentscreenset21+0x1>
    112e:	60 93 68 08 	sts	0x0868, r22	; 0x800868 <currentscreenset21>
			display();
    1132:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    1136:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 == 4)){
    1138:	21 e0       	ldi	r18, 0x01	; 1
    113a:	03 97       	sbiw	r24, 0x03	; 3
    113c:	09 f0       	breq	.+2      	; 0x1140 <_Z6dwnbtnv+0xe6>
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	32 23       	and	r19, r18
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	44 30       	cpi	r20, 0x04	; 4
    1146:	51 05       	cpc	r21, r1
    1148:	09 f0       	breq	.+2      	; 0x114c <_Z6dwnbtnv+0xf2>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	33 23       	and	r19, r19
    114e:	49 f0       	breq	.+18     	; 0x1162 <_Z6dwnbtnv+0x108>
    1150:	88 23       	and	r24, r24
    1152:	39 f0       	breq	.+14     	; 0x1162 <_Z6dwnbtnv+0x108>
			currentscreenset23 = 0;
    1154:	10 92 67 08 	sts	0x0867, r1	; 0x800867 <currentscreenset23+0x1>
    1158:	10 92 66 08 	sts	0x0866, r1	; 0x800866 <currentscreenset23>
			display();
    115c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    1160:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 != 4)){
    1162:	ee 23       	and	r30, r30
    1164:	51 f0       	breq	.+20     	; 0x117a <_Z6dwnbtnv+0x120>
    1166:	33 23       	and	r19, r19
    1168:	41 f0       	breq	.+16     	; 0x117a <_Z6dwnbtnv+0x120>
			currentscreenset23 += 1;
    116a:	4f 5f       	subi	r20, 0xFF	; 255
    116c:	5f 4f       	sbci	r21, 0xFF	; 255
    116e:	50 93 67 08 	sts	0x0867, r21	; 0x800867 <currentscreenset23+0x1>
    1172:	40 93 66 08 	sts	0x0866, r20	; 0x800866 <currentscreenset23>
			display();
    1176:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    117a:	08 95       	ret

0000117c <_Z5okbtnv>:
		}
	}
}

void okbtn(){
	if (PINC & (1<<Ok)){
    117c:	32 9b       	sbis	0x06, 2	; 6
    117e:	15 c0       	rjmp	.+42     	; 0x11aa <_Z5okbtnv+0x2e>
		if (set==3){
    1180:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <set>
    1184:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <set+0x1>
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	91 05       	cpc	r25, r1
    118c:	39 f4       	brne	.+14     	; 0x119c <_Z5okbtnv+0x20>
			set = 0;
    118e:	10 92 6d 08 	sts	0x086D, r1	; 0x80086d <set+0x1>
    1192:	10 92 6c 08 	sts	0x086C, r1	; 0x80086c <set>
		display();}
    1196:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    119a:	08 95       	ret
		else {
			set+= 1;
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	90 93 6d 08 	sts	0x086D, r25	; 0x80086d <set+0x1>
    11a2:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <set>
		display();}
    11a6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    11aa:	08 95       	ret

000011ac <_Z7backbtnv>:
	}
}

void backbtn(){
	if (PINC &(1<<Back)){
    11ac:	33 9b       	sbis	0x06, 3	; 6
    11ae:	14 c0       	rjmp	.+40     	; 0x11d8 <_Z7backbtnv+0x2c>
		if (set == 0){
    11b0:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <set>
    11b4:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <set+0x1>
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	39 f4       	brne	.+14     	; 0x11ca <_Z7backbtnv+0x1e>
			set = 0;
    11bc:	10 92 6d 08 	sts	0x086D, r1	; 0x80086d <set+0x1>
    11c0:	10 92 6c 08 	sts	0x086C, r1	; 0x80086c <set>
			display();
    11c4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    11c8:	08 95       	ret
		}
		else {
			set-= 1;
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	90 93 6d 08 	sts	0x086D, r25	; 0x80086d <set+0x1>
    11d0:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <set>
			display();
    11d4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z7displayv>
    11d8:	08 95       	ret

000011da <_Z10checkAlarmv>:
		}
	}
}

void checkAlarm(){
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
	int currentHr, currentMin, alarmHr, alarmMin, currentAlarm;
	//checking time and ringing an alarm
	for (int i=0; i<alarmCount;i++){
    11ea:	c1 2c       	mov	r12, r1
    11ec:	d1 2c       	mov	r13, r1
    11ee:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <alarmCount>
    11f2:	90 91 3d 08 	lds	r25, 0x083D	; 0x80083d <alarmCount+0x1>
    11f6:	c8 16       	cp	r12, r24
    11f8:	d9 06       	cpc	r13, r25
    11fa:	0c f0       	brlt	.+2      	; 0x11fe <_Z10checkAlarmv+0x24>
    11fc:	49 c0       	rjmp	.+146    	; 0x1290 <_Z10checkAlarmv+0xb6>
		alarmHr = allAlarms[i][0];
    11fe:	f6 01       	movw	r30, r12
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	e2 5c       	subi	r30, 0xC2	; 194
    120a:	f7 4f       	sbci	r31, 0xF7	; 247
    120c:	00 81       	ld	r16, Z
    120e:	11 81       	ldd	r17, Z+1	; 0x01
		alarmMin = allAlarms[i][1];
    1210:	e2 80       	ldd	r14, Z+2	; 0x02
    1212:	f3 80       	ldd	r15, Z+3	; 0x03
		if (((currentHr != alarmHr) || (currentMin != alarmMin)) & (currentAlarm==i)){
			stop = false;
		}	*/
		
		while (1){
			currentHr = DS1307.read_time(02);
    1214:	62 e0       	ldi	r22, 0x02	; 2
    1216:	82 e8       	ldi	r24, 0x82	; 130
    1218:	98 e0       	ldi	r25, 0x08	; 8
    121a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN6ds13079read_timeEh>
    121e:	ec 01       	movw	r28, r24
			currentMin = DS1307.read_time(01);
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	82 e8       	ldi	r24, 0x82	; 130
    1224:	98 e0       	ldi	r25, 0x08	; 8
    1226:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN6ds13079read_timeEh>
    122a:	9c 01       	movw	r18, r24
			if ((currentHr == alarmHr) & (currentMin == alarmMin)  /*& ~(stop)*/){
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0c 17       	cp	r16, r28
    1230:	1d 07       	cpc	r17, r29
    1232:	09 f0       	breq	.+2      	; 0x1236 <_Z10checkAlarmv+0x5c>
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	99 23       	and	r25, r25
    1238:	21 f1       	breq	.+72     	; 0x1282 <_Z10checkAlarmv+0xa8>
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	e2 16       	cp	r14, r18
    123e:	f3 06       	cpc	r15, r19
    1240:	09 f0       	breq	.+2      	; 0x1244 <_Z10checkAlarmv+0x6a>
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	99 23       	and	r25, r25
    1246:	e9 f0       	breq	.+58     	; 0x1282 <_Z10checkAlarmv+0xa8>
				lcd.LCD_Clear();
    1248:	8c e7       	ldi	r24, 0x7C	; 124
    124a:	98 e0       	ldi	r25, 0x08	; 8
    124c:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN11LCD_Display9LCD_ClearEv>
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
    1250:	2a e0       	ldi	r18, 0x0A	; 10
    1252:	38 e0       	ldi	r19, 0x08	; 8
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	8c e7       	ldi	r24, 0x7C	; 124
    125a:	98 e0       	ldi	r25, 0x08	; 8
    125c:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
				lcd.LCD_String_xy(1, 0, "STOP            ");
    1260:	2b e1       	ldi	r18, 0x1B	; 27
    1262:	38 e0       	ldi	r19, 0x08	; 8
    1264:	40 e0       	ldi	r20, 0x00	; 0
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	8c e7       	ldi	r24, 0x7C	; 124
    126a:	98 e0       	ldi	r25, 0x08	; 8
    126c:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN11LCD_Display13LCD_String_xyEccPc>
				//PORTD |= (1<<PORTD7);
				music.tone(currentscreenset23);
    1270:	60 91 66 08 	lds	r22, 0x0866	; 0x800866 <currentscreenset23>
    1274:	70 91 67 08 	lds	r23, 0x0867	; 0x800867 <currentscreenset23+0x1>
    1278:	8e e6       	ldi	r24, 0x6E	; 110
    127a:	98 e0       	ldi	r25, 0x08	; 8
    127c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_ZN15music_notations4toneEi>
		/*
		if (((currentHr != alarmHr) || (currentMin != alarmMin)) & (currentAlarm==i)){
			stop = false;
		}	*/
		
		while (1){
    1280:	c9 cf       	rjmp	.-110    	; 0x1214 <_Z10checkAlarmv+0x3a>
				//PORTD |= (1<<PORTD7);
				music.tone(currentscreenset23);
				currentAlarm = i;
			}
			else{
				PORTD &= ~(1<<PORTD7);
    1282:	8b b1       	in	r24, 0x0b	; 11
    1284:	8f 77       	andi	r24, 0x7F	; 127
    1286:	8b b9       	out	0x0b, r24	; 11
}

void checkAlarm(){
	int currentHr, currentMin, alarmHr, alarmMin, currentAlarm;
	//checking time and ringing an alarm
	for (int i=0; i<alarmCount;i++){
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	c8 1a       	sub	r12, r24
    128c:	d8 0a       	sbc	r13, r24
    128e:	af cf       	rjmp	.-162    	; 0x11ee <_Z10checkAlarmv+0x14>
				break;
			}
			*/			
		}
	}
}
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	08 95       	ret

000012a2 <main>:

//bool stop=false;	


int main(void)
{
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	27 97       	sbiw	r28, 0x07	; 7
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0b10000000;
    12b6:	80 e8       	ldi	r24, 0x80	; 128
    12b8:	8a b9       	out	0x0a, r24	; 10
	ds1307::rtc_t rtc;

	// Setting time to the RTC
	rtc.seconds =  0x00; //
    12ba:	19 82       	std	Y+1, r1	; 0x01
	rtc.minute =  0x00;
    12bc:	1a 82       	std	Y+2, r1	; 0x02
	rtc.hour = 0x12;	//  20:17:00
    12be:	82 e1       	ldi	r24, 0x12	; 18
    12c0:	8b 83       	std	Y+3, r24	; 0x03
	rtc.weekDay = 0x05;
    12c2:	85 e0       	ldi	r24, 0x05	; 5
    12c4:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x31;
    12c6:	91 e3       	ldi	r25, 0x31	; 49
    12c8:	9d 83       	std	Y+5, r25	; 0x05
	rtc.month = 0x05;
    12ca:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21;	//27th May 2021
    12cc:	81 e2       	ldi	r24, 0x21	; 33
    12ce:	8f 83       	std	Y+7, r24	; 0x07
	
	DS1307.set_time(&rtc);
    12d0:	be 01       	movw	r22, r28
    12d2:	6f 5f       	subi	r22, 0xFF	; 255
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	82 e8       	ldi	r24, 0x82	; 130
    12d8:	98 e0       	ldi	r25, 0x08	; 8
    12da:	0e 94 18 04 	call	0x830	; 0x830 <_ZN6ds13078set_timeEPNS_5rtc_tE>

	lcd.LCD_Initializer();	//initialize the display (PORTB)
    12de:	8c e7       	ldi	r24, 0x7C	; 124
    12e0:	98 e0       	ldi	r25, 0x08	; 8
    12e2:	0e 94 18 05 	call	0xa30	; 0xa30 <_ZN11LCD_Display15LCD_InitializerEv>

	while (1)
	{
		
		checkAlarm();
    12e6:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z10checkAlarmv>
		if (set==0){alarmclock.displayTime();}
    12ea:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <set>
    12ee:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <set+0x1>
    12f2:	89 2b       	or	r24, r25
    12f4:	21 f4       	brne	.+8      	; 0x12fe <main+0x5c>
    12f6:	8a e7       	ldi	r24, 0x7A	; 122
    12f8:	98 e0       	ldi	r25, 0x08	; 8
    12fa:	0e 94 7b 00 	call	0xf6	; 0xf6 <_ZN10AlarmClock11displayTimeEv>
		okbtn();
    12fe:	0e 94 be 08 	call	0x117c	; 0x117c <_Z5okbtnv>
		upbtn();
    1302:	0e 94 a0 07 	call	0xf40	; 0xf40 <_Z5upbtnv>
		dwnbtn();
    1306:	0e 94 2d 08 	call	0x105a	; 0x105a <_Z6dwnbtnv>
		backbtn();
    130a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_Z7backbtnv>
	
	DS1307.set_time(&rtc);

	lcd.LCD_Initializer();	//initialize the display (PORTB)

	while (1)
    130e:	eb cf       	rjmp	.-42     	; 0x12e6 <main+0x44>

00001310 <_ZN15music_notations11playthenoteEff>:
int sizeofstarwars = sizeof(StarWars)/sizeof(StarWars[0]);
int sizeofcoffindance = sizeof(CoffinDance)/sizeof(CoffinDance[0]);
int sizeoftakeonme = sizeof(TakeOnMe)/sizeof(TakeOnMe[0]);

void music_notations::playthenote(float frequency, float duration)
{
    1310:	4f 92       	push	r4
    1312:	5f 92       	push	r5
    1314:	6f 92       	push	r6
    1316:	7f 92       	push	r7
    1318:	8f 92       	push	r8
    131a:	9f 92       	push	r9
    131c:	af 92       	push	r10
    131e:	bf 92       	push	r11
    1320:	cf 92       	push	r12
    1322:	df 92       	push	r13
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	00 d0       	rcall	.+0      	; 0x1332 <_ZN15music_notations11playthenoteEff+0x22>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <_ZN15music_notations11playthenoteEff+0x24>
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	6a 01       	movw	r12, r20
    133a:	7b 01       	movw	r14, r22
    133c:	48 01       	movw	r8, r16
    133e:	59 01       	movw	r10, r18
	float period;
	
	// "period" is the wavelength calculated from frequency using the formula "period" = 1 / f.
	// We output 5 V for a length of time determined by half period (period/2), and then output 0 V, for the same length of time.
	
	if (frequency != 0){
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	a9 01       	movw	r20, r18
    1346:	c7 01       	movw	r24, r14
    1348:	b6 01       	movw	r22, r12
    134a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__cmpsf2>
    134e:	88 23       	and	r24, r24
    1350:	09 f4       	brne	.+2      	; 0x1354 <_ZN15music_notations11playthenoteEff+0x44>
    1352:	b0 c0       	rjmp	.+352    	; 0x14b4 <_ZN15music_notations11playthenoteEff+0x1a4>
		period=(1/frequency)*1000;  // period in mile seconds
    1354:	a7 01       	movw	r20, r14
    1356:	96 01       	movw	r18, r12
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	80 e8       	ldi	r24, 0x80	; 128
    135e:	9f e3       	ldi	r25, 0x3F	; 63
    1360:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__divsf3>
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	4a e7       	ldi	r20, 0x7A	; 122
    136a:	54 e4       	ldi	r21, 0x44	; 68
    136c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    1370:	6b 01       	movw	r12, r22
    1372:	7c 01       	movw	r14, r24
		cycles=duration/period;
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	c5 01       	movw	r24, r10
    137a:	b4 01       	movw	r22, r8
    137c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__divsf3>
    1380:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__fixsfsi>
    1384:	2b 01       	movw	r4, r22
    1386:	3c 01       	movw	r6, r24
		half_period = period/2;
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	5f e3       	ldi	r21, 0x3F	; 63
    1390:	c7 01       	movw	r24, r14
    1392:	b6 01       	movw	r22, r12
    1394:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    1398:	69 83       	std	Y+1, r22	; 0x01
    139a:	7a 83       	std	Y+2, r23	; 0x02
    139c:	8b 83       	std	Y+3, r24	; 0x03
    139e:	9c 83       	std	Y+4, r25	; 0x04
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);
    13a0:	8a b1       	in	r24, 0x0a	; 10
    13a2:	80 68       	ori	r24, 0x80	; 128
    13a4:	8a b9       	out	0x0a, r24	; 10

		for (i=0;i<cycles;i++)
    13a6:	81 2c       	mov	r8, r1
    13a8:	91 2c       	mov	r9, r1
    13aa:	54 01       	movw	r10, r8
    13ac:	84 14       	cp	r8, r4
    13ae:	95 04       	cpc	r9, r5
    13b0:	a6 04       	cpc	r10, r6
    13b2:	b7 04       	cpc	r11, r7
    13b4:	0c f0       	brlt	.+2      	; 0x13b8 <_ZN15music_notations11playthenoteEff+0xa8>
    13b6:	b8 c0       	rjmp	.+368    	; 0x1528 <_ZN15music_notations11playthenoteEff+0x218>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a ef       	ldi	r20, 0xFA	; 250
    13be:	54 e4       	ldi	r21, 0x44	; 68
    13c0:	69 81       	ldd	r22, Y+1	; 0x01
    13c2:	7a 81       	ldd	r23, Y+2	; 0x02
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    13cc:	6b 01       	movw	r12, r22
    13ce:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__cmpsf2>
    13dc:	88 23       	and	r24, r24
    13de:	2c f1       	brlt	.+74     	; 0x142a <_ZN15music_notations11playthenoteEff+0x11a>
		__ticks = 1;
	else if (__tmp > 65535)
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	3f ef       	ldi	r19, 0xFF	; 255
    13e4:	4f e7       	ldi	r20, 0x7F	; 127
    13e6:	57 e4       	ldi	r21, 0x47	; 71
    13e8:	c7 01       	movw	r24, r14
    13ea:	b6 01       	movw	r22, r12
    13ec:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__gesf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	b4 f4       	brge	.+44     	; 0x1420 <_ZN15music_notations11playthenoteEff+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e2       	ldi	r20, 0x20	; 32
    13fa:	51 e4       	ldi	r21, 0x41	; 65
    13fc:	69 81       	ldd	r22, Y+1	; 0x01
    13fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    1408:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
		while(__ticks)
    140c:	61 15       	cp	r22, r1
    140e:	71 05       	cpc	r23, r1
    1410:	89 f0       	breq	.+34     	; 0x1434 <_ZN15music_notations11playthenoteEff+0x124>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1412:	88 ec       	ldi	r24, 0xC8	; 200
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <_ZN15music_notations11playthenoteEff+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141a:	61 50       	subi	r22, 0x01	; 1
    141c:	71 09       	sbc	r23, r1
    141e:	f6 cf       	rjmp	.-20     	; 0x140c <_ZN15music_notations11playthenoteEff+0xfc>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1420:	c7 01       	movw	r24, r14
    1422:	b6 01       	movw	r22, r12
    1424:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
    1428:	02 c0       	rjmp	.+4      	; 0x142e <_ZN15music_notations11playthenoteEff+0x11e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	cb 01       	movw	r24, r22
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <_ZN15music_notations11playthenoteEff+0x120>
		{
			_delay_ms(half_period);
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
    1434:	8b b1       	in	r24, 0x0b	; 11
    1436:	80 68       	ori	r24, 0x80	; 128
    1438:	8b b9       	out	0x0b, r24	; 11
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e8       	ldi	r20, 0x80	; 128
    1440:	5f e3       	ldi	r21, 0x3F	; 63
    1442:	c7 01       	movw	r24, r14
    1444:	b6 01       	movw	r22, r12
    1446:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__cmpsf2>
    144a:	88 23       	and	r24, r24
    144c:	2c f1       	brlt	.+74     	; 0x1498 <_ZN15music_notations11playthenoteEff+0x188>
		__ticks = 1;
	else if (__tmp > 65535)
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	3f ef       	ldi	r19, 0xFF	; 255
    1452:	4f e7       	ldi	r20, 0x7F	; 127
    1454:	57 e4       	ldi	r21, 0x47	; 71
    1456:	c7 01       	movw	r24, r14
    1458:	b6 01       	movw	r22, r12
    145a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__gesf2>
    145e:	18 16       	cp	r1, r24
    1460:	b4 f4       	brge	.+44     	; 0x148e <_ZN15music_notations11playthenoteEff+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e2       	ldi	r20, 0x20	; 32
    1468:	51 e4       	ldi	r21, 0x41	; 65
    146a:	69 81       	ldd	r22, Y+1	; 0x01
    146c:	7a 81       	ldd	r23, Y+2	; 0x02
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    1476:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
		while(__ticks)
    147a:	61 15       	cp	r22, r1
    147c:	71 05       	cpc	r23, r1
    147e:	89 f0       	breq	.+34     	; 0x14a2 <_ZN15music_notations11playthenoteEff+0x192>
    1480:	88 ec       	ldi	r24, 0xC8	; 200
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <_ZN15music_notations11playthenoteEff+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1488:	61 50       	subi	r22, 0x01	; 1
    148a:	71 09       	sbc	r23, r1
    148c:	f6 cf       	rjmp	.-20     	; 0x147a <_ZN15music_notations11playthenoteEff+0x16a>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148e:	c7 01       	movw	r24, r14
    1490:	b6 01       	movw	r22, r12
    1492:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
    1496:	02 c0       	rjmp	.+4      	; 0x149c <_ZN15music_notations11playthenoteEff+0x18c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1498:	61 e0       	ldi	r22, 0x01	; 1
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	cb 01       	movw	r24, r22
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <_ZN15music_notations11playthenoteEff+0x18e>
			_delay_ms(half_period);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
    14a2:	8b b1       	in	r24, 0x0b	; 11
    14a4:	8f 77       	andi	r24, 0x7F	; 127
    14a6:	8b b9       	out	0x0b, r24	; 11
		cycles=duration/period;
		half_period = period/2;
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);

		for (i=0;i<cycles;i++)
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	88 1a       	sub	r8, r24
    14ac:	98 0a       	sbc	r9, r24
    14ae:	a8 0a       	sbc	r10, r24
    14b0:	b8 0a       	sbc	r11, r24
    14b2:	7c cf       	rjmp	.-264    	; 0x13ac <_ZN15music_notations11playthenoteEff+0x9c>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a ef       	ldi	r20, 0xFA	; 250
    14ba:	54 e4       	ldi	r21, 0x44	; 68
    14bc:	c5 01       	movw	r24, r10
    14be:	b4 01       	movw	r22, r8
    14c0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    14c4:	6b 01       	movw	r12, r22
    14c6:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__cmpsf2>
    14d4:	88 23       	and	r24, r24
    14d6:	1c f1       	brlt	.+70     	; 0x151e <_ZN15music_notations11playthenoteEff+0x20e>
		__ticks = 1;
	else if (__tmp > 65535)
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	3f ef       	ldi	r19, 0xFF	; 255
    14dc:	4f e7       	ldi	r20, 0x7F	; 127
    14de:	57 e4       	ldi	r21, 0x47	; 71
    14e0:	c7 01       	movw	r24, r14
    14e2:	b6 01       	movw	r22, r12
    14e4:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__gesf2>
    14e8:	18 16       	cp	r1, r24
    14ea:	a4 f4       	brge	.+40     	; 0x1514 <_ZN15music_notations11playthenoteEff+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e2       	ldi	r20, 0x20	; 32
    14f2:	51 e4       	ldi	r21, 0x41	; 65
    14f4:	c5 01       	movw	r24, r10
    14f6:	b4 01       	movw	r22, r8
    14f8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    14fc:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
		while(__ticks)
    1500:	61 15       	cp	r22, r1
    1502:	71 05       	cpc	r23, r1
    1504:	89 f0       	breq	.+34     	; 0x1528 <_ZN15music_notations11playthenoteEff+0x218>
    1506:	88 ec       	ldi	r24, 0xC8	; 200
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <_ZN15music_notations11playthenoteEff+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	61 50       	subi	r22, 0x01	; 1
    1510:	71 09       	sbc	r23, r1
    1512:	f6 cf       	rjmp	.-20     	; 0x1500 <_ZN15music_notations11playthenoteEff+0x1f0>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1514:	c7 01       	movw	r24, r14
    1516:	b6 01       	movw	r22, r12
    1518:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <_ZN15music_notations11playthenoteEff+0x212>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	cb 01       	movw	r24, r22
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <_ZN15music_notations11playthenoteEff+0x214>
	else {
		_delay_ms(duration);   // rest
	}

	return;
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	cf 90       	pop	r12
    1540:	bf 90       	pop	r11
    1542:	af 90       	pop	r10
    1544:	9f 90       	pop	r9
    1546:	8f 90       	pop	r8
    1548:	7f 90       	pop	r7
    154a:	6f 90       	pop	r6
    154c:	5f 90       	pop	r5
    154e:	4f 90       	pop	r4
    1550:	08 95       	ret

00001552 <_ZN15music_notations13playthemelodyEPiS0_i>:
void music_notations::playthemelody(int Melody[], int MelodyDuration[], int size)
{
    1552:	2f 92       	push	r2
    1554:	3f 92       	push	r3
    1556:	4f 92       	push	r4
    1558:	5f 92       	push	r5
    155a:	6f 92       	push	r6
    155c:	7f 92       	push	r7
    155e:	8f 92       	push	r8
    1560:	9f 92       	push	r9
    1562:	af 92       	push	r10
    1564:	bf 92       	push	r11
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	29 97       	sbiw	r28, 0x09	; 9
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	9f 83       	std	Y+7, r25	; 0x07
    1588:	8e 83       	std	Y+6, r24	; 0x06
    158a:	2b 01       	movw	r4, r22
    158c:	1a 01       	movw	r2, r20
    158e:	39 01       	movw	r6, r18
	// melody will play until the stop button is pressed.
	//int still_playing = 1;
	//while(still_playing){
	for (int x=0; x<size; x++){
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	99 87       	std	Y+9, r25	; 0x09
    1596:	88 87       	std	Y+8, r24	; 0x08
    1598:	e8 85       	ldd	r30, Y+8	; 0x08
    159a:	f9 85       	ldd	r31, Y+9	; 0x09
    159c:	e6 15       	cp	r30, r6
    159e:	f7 05       	cpc	r31, r7
    15a0:	0c f0       	brlt	.+2      	; 0x15a4 <_ZN15music_notations13playthemelodyEPiS0_i+0x52>
    15a2:	d5 c0       	rjmp	.+426    	; 0x174e <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
		playthenote(Melody[x],MelodyDuration[x]);
    15a4:	7f 01       	movw	r14, r30
    15a6:	ee 0c       	add	r14, r14
    15a8:	ff 1c       	adc	r15, r15
    15aa:	61 01       	movw	r12, r2
    15ac:	ce 0c       	add	r12, r14
    15ae:	df 1c       	adc	r13, r15
    15b0:	f6 01       	movw	r30, r12
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	07 2e       	mov	r0, r23
    15b8:	00 0c       	add	r0, r0
    15ba:	88 0b       	sbc	r24, r24
    15bc:	99 0b       	sbc	r25, r25
    15be:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__floatsisf>
    15c2:	4b 01       	movw	r8, r22
    15c4:	5c 01       	movw	r10, r24
    15c6:	f2 01       	movw	r30, r4
    15c8:	ee 0d       	add	r30, r14
    15ca:	ff 1d       	adc	r31, r15
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	07 2e       	mov	r0, r23
    15d2:	00 0c       	add	r0, r0
    15d4:	88 0b       	sbc	r24, r24
    15d6:	99 0b       	sbc	r25, r25
    15d8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__floatsisf>
    15dc:	ab 01       	movw	r20, r22
    15de:	bc 01       	movw	r22, r24
    15e0:	95 01       	movw	r18, r10
    15e2:	84 01       	movw	r16, r8
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	9f 81       	ldd	r25, Y+7	; 0x07
    15e8:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN15music_notations11playthenoteEff>
		_delay_us(MelodyDuration[x]);
    15ec:	f6 01       	movw	r30, r12
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	07 2e       	mov	r0, r23
    15f4:	00 0c       	add	r0, r0
    15f6:	88 0b       	sbc	r24, r24
    15f8:	99 0b       	sbc	r25, r25
    15fa:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__floatsisf>
    15fe:	6b 01       	movw	r12, r22
    1600:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1602:	2b ea       	ldi	r18, 0xAB	; 171
    1604:	3a ea       	ldi	r19, 0xAA	; 170
    1606:	4a e2       	ldi	r20, 0x2A	; 42
    1608:	50 e4       	ldi	r21, 0x40	; 64
    160a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    160e:	4b 01       	movw	r8, r22
    1610:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1612:	a7 01       	movw	r20, r14
    1614:	96 01       	movw	r18, r12
    1616:	c7 01       	movw	r24, r14
    1618:	b6 01       	movw	r22, r12
    161a:	0e 94 04 0c 	call	0x1808	; 0x1808 <__addsf3>
    161e:	69 83       	std	Y+1, r22	; 0x01
    1620:	7a 83       	std	Y+2, r23	; 0x02
    1622:	8b 83       	std	Y+3, r24	; 0x03
    1624:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	c5 01       	movw	r24, r10
    1630:	b4 01       	movw	r22, r8
    1632:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__cmpsf2>
    1636:	88 23       	and	r24, r24
    1638:	0c f4       	brge	.+2      	; 0x163c <_ZN15music_notations13playthemelodyEPiS0_i+0xea>
    163a:	6a c0       	rjmp	.+212    	; 0x1710 <_ZN15music_notations13playthemelodyEPiS0_i+0x1be>
		__ticks = 1;
	else if (__tmp2 > 65535)
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	3f ef       	ldi	r19, 0xFF	; 255
    1640:	4f e7       	ldi	r20, 0x7F	; 127
    1642:	57 e4       	ldi	r21, 0x47	; 71
    1644:	69 81       	ldd	r22, Y+1	; 0x01
    1646:	7a 81       	ldd	r23, Y+2	; 0x02
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__gesf2>
    1650:	18 16       	cp	r1, r24
    1652:	0c f0       	brlt	.+2      	; 0x1656 <_ZN15music_notations13playthemelodyEPiS0_i+0x104>
    1654:	43 c0       	rjmp	.+134    	; 0x16dc <_ZN15music_notations13playthemelodyEPiS0_i+0x18a>
	{
		_delay_ms(__us / 1000.0);
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4a e7       	ldi	r20, 0x7A	; 122
    165c:	54 e4       	ldi	r21, 0x44	; 68
    165e:	c7 01       	movw	r24, r14
    1660:	b6 01       	movw	r22, r12
    1662:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__divsf3>
    1666:	4b 01       	movw	r8, r22
    1668:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	4a ef       	ldi	r20, 0xFA	; 250
    1670:	54 e4       	ldi	r21, 0x44	; 68
    1672:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    1676:	6b 01       	movw	r12, r22
    1678:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e8       	ldi	r20, 0x80	; 128
    1680:	5f e3       	ldi	r21, 0x3F	; 63
    1682:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__cmpsf2>
    1686:	88 23       	and	r24, r24
    1688:	1c f1       	brlt	.+70     	; 0x16d0 <_ZN15music_notations13playthemelodyEPiS0_i+0x17e>
		__ticks = 1;
	else if (__tmp > 65535)
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	57 e4       	ldi	r21, 0x47	; 71
    1692:	c7 01       	movw	r24, r14
    1694:	b6 01       	movw	r22, r12
    1696:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__gesf2>
    169a:	18 16       	cp	r1, r24
    169c:	a4 f4       	brge	.+40     	; 0x16c6 <_ZN15music_notations13playthemelodyEPiS0_i+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	c5 01       	movw	r24, r10
    16a8:	b4 01       	movw	r22, r8
    16aa:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    16ae:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
		while(__ticks)
    16b2:	61 15       	cp	r22, r1
    16b4:	71 05       	cpc	r23, r1
    16b6:	79 f1       	breq	.+94     	; 0x1716 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
    16b8:	88 ec       	ldi	r24, 0xC8	; 200
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <_ZN15music_notations13playthemelodyEPiS0_i+0x16a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c0:	61 50       	subi	r22, 0x01	; 1
    16c2:	71 09       	sbc	r23, r1
    16c4:	f6 cf       	rjmp	.-20     	; 0x16b2 <_ZN15music_notations13playthemelodyEPiS0_i+0x160>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c6:	c7 01       	movw	r24, r14
    16c8:	b6 01       	movw	r22, r12
    16ca:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <_ZN15music_notations13playthemelodyEPiS0_i+0x182>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	cb 01       	movw	r24, r22
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <_ZN15music_notations13playthemelodyEPiS0_i+0x184>
    16da:	1d c0       	rjmp	.+58     	; 0x1716 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	53 e4       	ldi	r21, 0x43	; 67
    16e4:	c5 01       	movw	r24, r10
    16e6:	b4 01       	movw	r22, r8
    16e8:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__gesf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	54 f4       	brge	.+20     	; 0x1704 <_ZN15music_notations13playthemelodyEPiS0_i+0x1b2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    16f0:	69 81       	ldd	r22, Y+1	; 0x01
    16f2:	7a 81       	ldd	r23, Y+2	; 0x02
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
    16fc:	cb 01       	movw	r24, r22
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <_ZN15music_notations13playthemelodyEPiS0_i+0x1ac>
    1702:	0c c0       	rjmp	.+24     	; 0x171c <_ZN15music_notations13playthemelodyEPiS0_i+0x1ca>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1704:	c5 01       	movw	r24, r10
    1706:	b4 01       	movw	r22, r8
    1708:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
    170c:	6d 83       	std	Y+5, r22	; 0x05
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	9d 83       	std	Y+5, r25	; 0x05
    1714:	00 c0       	rjmp	.+0      	; 0x1716 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	8a 95       	dec	r24
    171a:	f1 f7       	brne	.-4      	; 0x1718 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c6>
		if ((PINC &(1<<Ok)) or (PINC &(1<<Up)) or (PINC &(1<<Down)) or (PINC &(1<<Back))){
    171c:	32 99       	sbic	0x06, 2	; 6
    171e:	08 c0       	rjmp	.+16     	; 0x1730 <_ZN15music_notations13playthemelodyEPiS0_i+0x1de>
    1720:	30 99       	sbic	0x06, 0	; 6
    1722:	08 c0       	rjmp	.+16     	; 0x1734 <_ZN15music_notations13playthemelodyEPiS0_i+0x1e2>
    1724:	31 99       	sbic	0x06, 1	; 6
    1726:	08 c0       	rjmp	.+16     	; 0x1738 <_ZN15music_notations13playthemelodyEPiS0_i+0x1e6>
    1728:	33 9b       	sbis	0x06, 3	; 6
    172a:	08 c0       	rjmp	.+16     	; 0x173c <_ZN15music_notations13playthemelodyEPiS0_i+0x1ea>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	07 c0       	rjmp	.+14     	; 0x173e <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	05 c0       	rjmp	.+10     	; 0x173e <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	03 c0       	rjmp	.+6      	; 0x173e <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	01 c0       	rjmp	.+2      	; 0x173e <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	81 11       	cpse	r24, r1
    1740:	06 c0       	rjmp	.+12     	; 0x174e <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
void music_notations::playthemelody(int Melody[], int MelodyDuration[], int size)
{
	// melody will play until the stop button is pressed.
	//int still_playing = 1;
	//while(still_playing){
	for (int x=0; x<size; x++){
    1742:	88 85       	ldd	r24, Y+8	; 0x08
    1744:	99 85       	ldd	r25, Y+9	; 0x09
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	99 87       	std	Y+9, r25	; 0x09
    174a:	88 87       	std	Y+8, r24	; 0x08
    174c:	25 cf       	rjmp	.-438    	; 0x1598 <_ZN15music_notations13playthemelodyEPiS0_i+0x46>
		}
		
	}
	
	
}
    174e:	29 96       	adiw	r28, 0x09	; 9
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	bf 90       	pop	r11
    176c:	af 90       	pop	r10
    176e:	9f 90       	pop	r9
    1770:	8f 90       	pop	r8
    1772:	7f 90       	pop	r7
    1774:	6f 90       	pop	r6
    1776:	5f 90       	pop	r5
    1778:	4f 90       	pop	r4
    177a:	3f 90       	pop	r3
    177c:	2f 90       	pop	r2
    177e:	08 95       	ret

00001780 <_ZN15music_notations4toneEi>:
void music_notations::tone(int x){
	if (x==0){
    1780:	61 15       	cp	r22, r1
    1782:	71 05       	cpc	r23, r1
    1784:	59 f4       	brne	.+22     	; 0x179c <_ZN15music_notations4toneEi+0x1c>
		playthemelody(GOT,GOTDurations,sizeofgot);
    1786:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <sizeofgot>
    178a:	30 91 99 03 	lds	r19, 0x0399	; 0x800399 <sizeofgot+0x1>
    178e:	42 e5       	ldi	r20, 0x52	; 82
    1790:	57 e0       	ldi	r21, 0x07	; 7
    1792:	66 e7       	ldi	r22, 0x76	; 118
    1794:	77 e0       	ldi	r23, 0x07	; 7
    1796:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN15music_notations13playthemelodyEPiS0_i>
    179a:	08 95       	ret
	}
	else if (x==1){
    179c:	61 30       	cpi	r22, 0x01	; 1
    179e:	71 05       	cpc	r23, r1
    17a0:	59 f4       	brne	.+22     	; 0x17b8 <_ZN15music_notations4toneEi+0x38>
		playthemelody(Pirates,PiratesDurations,sizeofpirates);
    17a2:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <sizeofpirates>
    17a6:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <sizeofpirates+0x1>
    17aa:	42 e2       	ldi	r20, 0x22	; 34
    17ac:	56 e0       	ldi	r21, 0x06	; 6
    17ae:	6a eb       	ldi	r22, 0xBA	; 186
    17b0:	76 e0       	ldi	r23, 0x06	; 6
    17b2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN15music_notations13playthemelodyEPiS0_i>
    17b6:	08 95       	ret
	}
	else if (x==2){
    17b8:	62 30       	cpi	r22, 0x02	; 2
    17ba:	71 05       	cpc	r23, r1
    17bc:	59 f4       	brne	.+22     	; 0x17d4 <_ZN15music_notations4toneEi+0x54>
		playthemelody(StarWars,StarWarsDurations,sizeofstarwars);
    17be:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <sizeofstarwars>
    17c2:	30 91 95 03 	lds	r19, 0x0395	; 0x800395 <sizeofstarwars+0x1>
    17c6:	4a e8       	ldi	r20, 0x8A	; 138
    17c8:	55 e0       	ldi	r21, 0x05	; 5
    17ca:	66 ed       	ldi	r22, 0xD6	; 214
    17cc:	75 e0       	ldi	r23, 0x05	; 5
    17ce:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN15music_notations13playthemelodyEPiS0_i>
    17d2:	08 95       	ret
	}
	else if (x==3){
    17d4:	63 30       	cpi	r22, 0x03	; 3
    17d6:	71 05       	cpc	r23, r1
    17d8:	59 f4       	brne	.+22     	; 0x17f0 <_ZN15music_notations4toneEi+0x70>
		playthemelody(CoffinDance,CoffinDanceDurations,sizeofcoffindance);
    17da:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <sizeofcoffindance>
    17de:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <sizeofcoffindance+0x1>
    17e2:	4a ef       	ldi	r20, 0xFA	; 250
    17e4:	53 e0       	ldi	r21, 0x03	; 3
    17e6:	62 ec       	ldi	r22, 0xC2	; 194
    17e8:	74 e0       	ldi	r23, 0x04	; 4
    17ea:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN15music_notations13playthemelodyEPiS0_i>
    17ee:	08 95       	ret
	}
	else{
		playthemelody(TakeOnMe,TakeOnMeDurations,sizeoftakeonme);
    17f0:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <sizeoftakeonme>
    17f4:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <sizeoftakeonme+0x1>
    17f8:	4a e9       	ldi	r20, 0x9A	; 154
    17fa:	53 e0       	ldi	r21, 0x03	; 3
    17fc:	6a ec       	ldi	r22, 0xCA	; 202
    17fe:	73 e0       	ldi	r23, 0x03	; 3
    1800:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN15music_notations13playthemelodyEPiS0_i>
    1804:	08 95       	ret

00001806 <__subsf3>:
    1806:	50 58       	subi	r21, 0x80	; 128

00001808 <__addsf3>:
    1808:	bb 27       	eor	r27, r27
    180a:	aa 27       	eor	r26, r26
    180c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__addsf3x>
    1810:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__fp_round>
    1814:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__fp_pscA>
    1818:	38 f0       	brcs	.+14     	; 0x1828 <__addsf3+0x20>
    181a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fp_pscB>
    181e:	20 f0       	brcs	.+8      	; 0x1828 <__addsf3+0x20>
    1820:	39 f4       	brne	.+14     	; 0x1830 <__addsf3+0x28>
    1822:	9f 3f       	cpi	r25, 0xFF	; 255
    1824:	19 f4       	brne	.+6      	; 0x182c <__addsf3+0x24>
    1826:	26 f4       	brtc	.+8      	; 0x1830 <__addsf3+0x28>
    1828:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__fp_nan>
    182c:	0e f4       	brtc	.+2      	; 0x1830 <__addsf3+0x28>
    182e:	e0 95       	com	r30
    1830:	e7 fb       	bst	r30, 7
    1832:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_inf>

00001836 <__addsf3x>:
    1836:	e9 2f       	mov	r30, r25
    1838:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__fp_split3>
    183c:	58 f3       	brcs	.-42     	; 0x1814 <__addsf3+0xc>
    183e:	ba 17       	cp	r27, r26
    1840:	62 07       	cpc	r22, r18
    1842:	73 07       	cpc	r23, r19
    1844:	84 07       	cpc	r24, r20
    1846:	95 07       	cpc	r25, r21
    1848:	20 f0       	brcs	.+8      	; 0x1852 <__addsf3x+0x1c>
    184a:	79 f4       	brne	.+30     	; 0x186a <__addsf3x+0x34>
    184c:	a6 f5       	brtc	.+104    	; 0x18b6 <__addsf3x+0x80>
    184e:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_zero>
    1852:	0e f4       	brtc	.+2      	; 0x1856 <__addsf3x+0x20>
    1854:	e0 95       	com	r30
    1856:	0b 2e       	mov	r0, r27
    1858:	ba 2f       	mov	r27, r26
    185a:	a0 2d       	mov	r26, r0
    185c:	0b 01       	movw	r0, r22
    185e:	b9 01       	movw	r22, r18
    1860:	90 01       	movw	r18, r0
    1862:	0c 01       	movw	r0, r24
    1864:	ca 01       	movw	r24, r20
    1866:	a0 01       	movw	r20, r0
    1868:	11 24       	eor	r1, r1
    186a:	ff 27       	eor	r31, r31
    186c:	59 1b       	sub	r21, r25
    186e:	99 f0       	breq	.+38     	; 0x1896 <__addsf3x+0x60>
    1870:	59 3f       	cpi	r21, 0xF9	; 249
    1872:	50 f4       	brcc	.+20     	; 0x1888 <__addsf3x+0x52>
    1874:	50 3e       	cpi	r21, 0xE0	; 224
    1876:	68 f1       	brcs	.+90     	; 0x18d2 <__addsf3x+0x9c>
    1878:	1a 16       	cp	r1, r26
    187a:	f0 40       	sbci	r31, 0x00	; 0
    187c:	a2 2f       	mov	r26, r18
    187e:	23 2f       	mov	r18, r19
    1880:	34 2f       	mov	r19, r20
    1882:	44 27       	eor	r20, r20
    1884:	58 5f       	subi	r21, 0xF8	; 248
    1886:	f3 cf       	rjmp	.-26     	; 0x186e <__addsf3x+0x38>
    1888:	46 95       	lsr	r20
    188a:	37 95       	ror	r19
    188c:	27 95       	ror	r18
    188e:	a7 95       	ror	r26
    1890:	f0 40       	sbci	r31, 0x00	; 0
    1892:	53 95       	inc	r21
    1894:	c9 f7       	brne	.-14     	; 0x1888 <__addsf3x+0x52>
    1896:	7e f4       	brtc	.+30     	; 0x18b6 <__addsf3x+0x80>
    1898:	1f 16       	cp	r1, r31
    189a:	ba 0b       	sbc	r27, r26
    189c:	62 0b       	sbc	r22, r18
    189e:	73 0b       	sbc	r23, r19
    18a0:	84 0b       	sbc	r24, r20
    18a2:	ba f0       	brmi	.+46     	; 0x18d2 <__addsf3x+0x9c>
    18a4:	91 50       	subi	r25, 0x01	; 1
    18a6:	a1 f0       	breq	.+40     	; 0x18d0 <__addsf3x+0x9a>
    18a8:	ff 0f       	add	r31, r31
    18aa:	bb 1f       	adc	r27, r27
    18ac:	66 1f       	adc	r22, r22
    18ae:	77 1f       	adc	r23, r23
    18b0:	88 1f       	adc	r24, r24
    18b2:	c2 f7       	brpl	.-16     	; 0x18a4 <__addsf3x+0x6e>
    18b4:	0e c0       	rjmp	.+28     	; 0x18d2 <__addsf3x+0x9c>
    18b6:	ba 0f       	add	r27, r26
    18b8:	62 1f       	adc	r22, r18
    18ba:	73 1f       	adc	r23, r19
    18bc:	84 1f       	adc	r24, r20
    18be:	48 f4       	brcc	.+18     	; 0x18d2 <__addsf3x+0x9c>
    18c0:	87 95       	ror	r24
    18c2:	77 95       	ror	r23
    18c4:	67 95       	ror	r22
    18c6:	b7 95       	ror	r27
    18c8:	f7 95       	ror	r31
    18ca:	9e 3f       	cpi	r25, 0xFE	; 254
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <__addsf3x+0x9a>
    18ce:	b0 cf       	rjmp	.-160    	; 0x1830 <__addsf3+0x28>
    18d0:	93 95       	inc	r25
    18d2:	88 0f       	add	r24, r24
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <__addsf3x+0xa2>
    18d6:	99 27       	eor	r25, r25
    18d8:	ee 0f       	add	r30, r30
    18da:	97 95       	ror	r25
    18dc:	87 95       	ror	r24
    18de:	08 95       	ret

000018e0 <__cmpsf2>:
    18e0:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__fp_cmp>
    18e4:	08 f4       	brcc	.+2      	; 0x18e8 <__cmpsf2+0x8>
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	08 95       	ret

000018ea <__divsf3>:
    18ea:	0e 94 89 0c 	call	0x1912	; 0x1912 <__divsf3x>
    18ee:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__fp_round>
    18f2:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fp_pscB>
    18f6:	58 f0       	brcs	.+22     	; 0x190e <__divsf3+0x24>
    18f8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__fp_pscA>
    18fc:	40 f0       	brcs	.+16     	; 0x190e <__divsf3+0x24>
    18fe:	29 f4       	brne	.+10     	; 0x190a <__divsf3+0x20>
    1900:	5f 3f       	cpi	r21, 0xFF	; 255
    1902:	29 f0       	breq	.+10     	; 0x190e <__divsf3+0x24>
    1904:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_inf>
    1908:	51 11       	cpse	r21, r1
    190a:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_szero>
    190e:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__fp_nan>

00001912 <__divsf3x>:
    1912:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__fp_split3>
    1916:	68 f3       	brcs	.-38     	; 0x18f2 <__divsf3+0x8>

00001918 <__divsf3_pse>:
    1918:	99 23       	and	r25, r25
    191a:	b1 f3       	breq	.-20     	; 0x1908 <__divsf3+0x1e>
    191c:	55 23       	and	r21, r21
    191e:	91 f3       	breq	.-28     	; 0x1904 <__divsf3+0x1a>
    1920:	95 1b       	sub	r25, r21
    1922:	55 0b       	sbc	r21, r21
    1924:	bb 27       	eor	r27, r27
    1926:	aa 27       	eor	r26, r26
    1928:	62 17       	cp	r22, r18
    192a:	73 07       	cpc	r23, r19
    192c:	84 07       	cpc	r24, r20
    192e:	38 f0       	brcs	.+14     	; 0x193e <__divsf3_pse+0x26>
    1930:	9f 5f       	subi	r25, 0xFF	; 255
    1932:	5f 4f       	sbci	r21, 0xFF	; 255
    1934:	22 0f       	add	r18, r18
    1936:	33 1f       	adc	r19, r19
    1938:	44 1f       	adc	r20, r20
    193a:	aa 1f       	adc	r26, r26
    193c:	a9 f3       	breq	.-22     	; 0x1928 <__divsf3_pse+0x10>
    193e:	35 d0       	rcall	.+106    	; 0x19aa <__divsf3_pse+0x92>
    1940:	0e 2e       	mov	r0, r30
    1942:	3a f0       	brmi	.+14     	; 0x1952 <__divsf3_pse+0x3a>
    1944:	e0 e8       	ldi	r30, 0x80	; 128
    1946:	32 d0       	rcall	.+100    	; 0x19ac <__divsf3_pse+0x94>
    1948:	91 50       	subi	r25, 0x01	; 1
    194a:	50 40       	sbci	r21, 0x00	; 0
    194c:	e6 95       	lsr	r30
    194e:	00 1c       	adc	r0, r0
    1950:	ca f7       	brpl	.-14     	; 0x1944 <__divsf3_pse+0x2c>
    1952:	2b d0       	rcall	.+86     	; 0x19aa <__divsf3_pse+0x92>
    1954:	fe 2f       	mov	r31, r30
    1956:	29 d0       	rcall	.+82     	; 0x19aa <__divsf3_pse+0x92>
    1958:	66 0f       	add	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	88 1f       	adc	r24, r24
    195e:	bb 1f       	adc	r27, r27
    1960:	26 17       	cp	r18, r22
    1962:	37 07       	cpc	r19, r23
    1964:	48 07       	cpc	r20, r24
    1966:	ab 07       	cpc	r26, r27
    1968:	b0 e8       	ldi	r27, 0x80	; 128
    196a:	09 f0       	breq	.+2      	; 0x196e <__divsf3_pse+0x56>
    196c:	bb 0b       	sbc	r27, r27
    196e:	80 2d       	mov	r24, r0
    1970:	bf 01       	movw	r22, r30
    1972:	ff 27       	eor	r31, r31
    1974:	93 58       	subi	r25, 0x83	; 131
    1976:	5f 4f       	sbci	r21, 0xFF	; 255
    1978:	3a f0       	brmi	.+14     	; 0x1988 <__divsf3_pse+0x70>
    197a:	9e 3f       	cpi	r25, 0xFE	; 254
    197c:	51 05       	cpc	r21, r1
    197e:	78 f0       	brcs	.+30     	; 0x199e <__divsf3_pse+0x86>
    1980:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_inf>
    1984:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_szero>
    1988:	5f 3f       	cpi	r21, 0xFF	; 255
    198a:	e4 f3       	brlt	.-8      	; 0x1984 <__divsf3_pse+0x6c>
    198c:	98 3e       	cpi	r25, 0xE8	; 232
    198e:	d4 f3       	brlt	.-12     	; 0x1984 <__divsf3_pse+0x6c>
    1990:	86 95       	lsr	r24
    1992:	77 95       	ror	r23
    1994:	67 95       	ror	r22
    1996:	b7 95       	ror	r27
    1998:	f7 95       	ror	r31
    199a:	9f 5f       	subi	r25, 0xFF	; 255
    199c:	c9 f7       	brne	.-14     	; 0x1990 <__divsf3_pse+0x78>
    199e:	88 0f       	add	r24, r24
    19a0:	91 1d       	adc	r25, r1
    19a2:	96 95       	lsr	r25
    19a4:	87 95       	ror	r24
    19a6:	97 f9       	bld	r25, 7
    19a8:	08 95       	ret
    19aa:	e1 e0       	ldi	r30, 0x01	; 1
    19ac:	66 0f       	add	r22, r22
    19ae:	77 1f       	adc	r23, r23
    19b0:	88 1f       	adc	r24, r24
    19b2:	bb 1f       	adc	r27, r27
    19b4:	62 17       	cp	r22, r18
    19b6:	73 07       	cpc	r23, r19
    19b8:	84 07       	cpc	r24, r20
    19ba:	ba 07       	cpc	r27, r26
    19bc:	20 f0       	brcs	.+8      	; 0x19c6 <__divsf3_pse+0xae>
    19be:	62 1b       	sub	r22, r18
    19c0:	73 0b       	sbc	r23, r19
    19c2:	84 0b       	sbc	r24, r20
    19c4:	ba 0b       	sbc	r27, r26
    19c6:	ee 1f       	adc	r30, r30
    19c8:	88 f7       	brcc	.-30     	; 0x19ac <__divsf3_pse+0x94>
    19ca:	e0 95       	com	r30
    19cc:	08 95       	ret

000019ce <__fixsfsi>:
    19ce:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixunssfsi>
    19d2:	68 94       	set
    19d4:	b1 11       	cpse	r27, r1
    19d6:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_szero>
    19da:	08 95       	ret

000019dc <__fixunssfsi>:
    19dc:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__fp_splitA>
    19e0:	88 f0       	brcs	.+34     	; 0x1a04 <__fixunssfsi+0x28>
    19e2:	9f 57       	subi	r25, 0x7F	; 127
    19e4:	98 f0       	brcs	.+38     	; 0x1a0c <__fixunssfsi+0x30>
    19e6:	b9 2f       	mov	r27, r25
    19e8:	99 27       	eor	r25, r25
    19ea:	b7 51       	subi	r27, 0x17	; 23
    19ec:	b0 f0       	brcs	.+44     	; 0x1a1a <__fixunssfsi+0x3e>
    19ee:	e1 f0       	breq	.+56     	; 0x1a28 <__fixunssfsi+0x4c>
    19f0:	66 0f       	add	r22, r22
    19f2:	77 1f       	adc	r23, r23
    19f4:	88 1f       	adc	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	1a f0       	brmi	.+6      	; 0x1a00 <__fixunssfsi+0x24>
    19fa:	ba 95       	dec	r27
    19fc:	c9 f7       	brne	.-14     	; 0x19f0 <__fixunssfsi+0x14>
    19fe:	14 c0       	rjmp	.+40     	; 0x1a28 <__fixunssfsi+0x4c>
    1a00:	b1 30       	cpi	r27, 0x01	; 1
    1a02:	91 f0       	breq	.+36     	; 0x1a28 <__fixunssfsi+0x4c>
    1a04:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__fp_zero>
    1a08:	b1 e0       	ldi	r27, 0x01	; 1
    1a0a:	08 95       	ret
    1a0c:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_zero>
    1a10:	67 2f       	mov	r22, r23
    1a12:	78 2f       	mov	r23, r24
    1a14:	88 27       	eor	r24, r24
    1a16:	b8 5f       	subi	r27, 0xF8	; 248
    1a18:	39 f0       	breq	.+14     	; 0x1a28 <__fixunssfsi+0x4c>
    1a1a:	b9 3f       	cpi	r27, 0xF9	; 249
    1a1c:	cc f3       	brlt	.-14     	; 0x1a10 <__fixunssfsi+0x34>
    1a1e:	86 95       	lsr	r24
    1a20:	77 95       	ror	r23
    1a22:	67 95       	ror	r22
    1a24:	b3 95       	inc	r27
    1a26:	d9 f7       	brne	.-10     	; 0x1a1e <__fixunssfsi+0x42>
    1a28:	3e f4       	brtc	.+14     	; 0x1a38 <__fixunssfsi+0x5c>
    1a2a:	90 95       	com	r25
    1a2c:	80 95       	com	r24
    1a2e:	70 95       	com	r23
    1a30:	61 95       	neg	r22
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	8f 4f       	sbci	r24, 0xFF	; 255
    1a36:	9f 4f       	sbci	r25, 0xFF	; 255
    1a38:	08 95       	ret

00001a3a <__floatunsisf>:
    1a3a:	e8 94       	clt
    1a3c:	09 c0       	rjmp	.+18     	; 0x1a50 <__floatsisf+0x12>

00001a3e <__floatsisf>:
    1a3e:	97 fb       	bst	r25, 7
    1a40:	3e f4       	brtc	.+14     	; 0x1a50 <__floatsisf+0x12>
    1a42:	90 95       	com	r25
    1a44:	80 95       	com	r24
    1a46:	70 95       	com	r23
    1a48:	61 95       	neg	r22
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	99 23       	and	r25, r25
    1a52:	a9 f0       	breq	.+42     	; 0x1a7e <__floatsisf+0x40>
    1a54:	f9 2f       	mov	r31, r25
    1a56:	96 e9       	ldi	r25, 0x96	; 150
    1a58:	bb 27       	eor	r27, r27
    1a5a:	93 95       	inc	r25
    1a5c:	f6 95       	lsr	r31
    1a5e:	87 95       	ror	r24
    1a60:	77 95       	ror	r23
    1a62:	67 95       	ror	r22
    1a64:	b7 95       	ror	r27
    1a66:	f1 11       	cpse	r31, r1
    1a68:	f8 cf       	rjmp	.-16     	; 0x1a5a <__floatsisf+0x1c>
    1a6a:	fa f4       	brpl	.+62     	; 0x1aaa <__floatsisf+0x6c>
    1a6c:	bb 0f       	add	r27, r27
    1a6e:	11 f4       	brne	.+4      	; 0x1a74 <__floatsisf+0x36>
    1a70:	60 ff       	sbrs	r22, 0
    1a72:	1b c0       	rjmp	.+54     	; 0x1aaa <__floatsisf+0x6c>
    1a74:	6f 5f       	subi	r22, 0xFF	; 255
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	16 c0       	rjmp	.+44     	; 0x1aaa <__floatsisf+0x6c>
    1a7e:	88 23       	and	r24, r24
    1a80:	11 f0       	breq	.+4      	; 0x1a86 <__floatsisf+0x48>
    1a82:	96 e9       	ldi	r25, 0x96	; 150
    1a84:	11 c0       	rjmp	.+34     	; 0x1aa8 <__floatsisf+0x6a>
    1a86:	77 23       	and	r23, r23
    1a88:	21 f0       	breq	.+8      	; 0x1a92 <__floatsisf+0x54>
    1a8a:	9e e8       	ldi	r25, 0x8E	; 142
    1a8c:	87 2f       	mov	r24, r23
    1a8e:	76 2f       	mov	r23, r22
    1a90:	05 c0       	rjmp	.+10     	; 0x1a9c <__floatsisf+0x5e>
    1a92:	66 23       	and	r22, r22
    1a94:	71 f0       	breq	.+28     	; 0x1ab2 <__floatsisf+0x74>
    1a96:	96 e8       	ldi	r25, 0x86	; 134
    1a98:	86 2f       	mov	r24, r22
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	2a f0       	brmi	.+10     	; 0x1aaa <__floatsisf+0x6c>
    1aa0:	9a 95       	dec	r25
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	da f7       	brpl	.-10     	; 0x1aa0 <__floatsisf+0x62>
    1aaa:	88 0f       	add	r24, r24
    1aac:	96 95       	lsr	r25
    1aae:	87 95       	ror	r24
    1ab0:	97 f9       	bld	r25, 7
    1ab2:	08 95       	ret

00001ab4 <__fp_cmp>:
    1ab4:	99 0f       	add	r25, r25
    1ab6:	00 08       	sbc	r0, r0
    1ab8:	55 0f       	add	r21, r21
    1aba:	aa 0b       	sbc	r26, r26
    1abc:	e0 e8       	ldi	r30, 0x80	; 128
    1abe:	fe ef       	ldi	r31, 0xFE	; 254
    1ac0:	16 16       	cp	r1, r22
    1ac2:	17 06       	cpc	r1, r23
    1ac4:	e8 07       	cpc	r30, r24
    1ac6:	f9 07       	cpc	r31, r25
    1ac8:	c0 f0       	brcs	.+48     	; 0x1afa <__fp_cmp+0x46>
    1aca:	12 16       	cp	r1, r18
    1acc:	13 06       	cpc	r1, r19
    1ace:	e4 07       	cpc	r30, r20
    1ad0:	f5 07       	cpc	r31, r21
    1ad2:	98 f0       	brcs	.+38     	; 0x1afa <__fp_cmp+0x46>
    1ad4:	62 1b       	sub	r22, r18
    1ad6:	73 0b       	sbc	r23, r19
    1ad8:	84 0b       	sbc	r24, r20
    1ada:	95 0b       	sbc	r25, r21
    1adc:	39 f4       	brne	.+14     	; 0x1aec <__fp_cmp+0x38>
    1ade:	0a 26       	eor	r0, r26
    1ae0:	61 f0       	breq	.+24     	; 0x1afa <__fp_cmp+0x46>
    1ae2:	23 2b       	or	r18, r19
    1ae4:	24 2b       	or	r18, r20
    1ae6:	25 2b       	or	r18, r21
    1ae8:	21 f4       	brne	.+8      	; 0x1af2 <__fp_cmp+0x3e>
    1aea:	08 95       	ret
    1aec:	0a 26       	eor	r0, r26
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <__fp_cmp+0x3e>
    1af0:	a1 40       	sbci	r26, 0x01	; 1
    1af2:	a6 95       	lsr	r26
    1af4:	8f ef       	ldi	r24, 0xFF	; 255
    1af6:	81 1d       	adc	r24, r1
    1af8:	81 1d       	adc	r24, r1
    1afa:	08 95       	ret

00001afc <__fp_inf>:
    1afc:	97 f9       	bld	r25, 7
    1afe:	9f 67       	ori	r25, 0x7F	; 127
    1b00:	80 e8       	ldi	r24, 0x80	; 128
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	08 95       	ret

00001b08 <__fp_nan>:
    1b08:	9f ef       	ldi	r25, 0xFF	; 255
    1b0a:	80 ec       	ldi	r24, 0xC0	; 192
    1b0c:	08 95       	ret

00001b0e <__fp_pscA>:
    1b0e:	00 24       	eor	r0, r0
    1b10:	0a 94       	dec	r0
    1b12:	16 16       	cp	r1, r22
    1b14:	17 06       	cpc	r1, r23
    1b16:	18 06       	cpc	r1, r24
    1b18:	09 06       	cpc	r0, r25
    1b1a:	08 95       	ret

00001b1c <__fp_pscB>:
    1b1c:	00 24       	eor	r0, r0
    1b1e:	0a 94       	dec	r0
    1b20:	12 16       	cp	r1, r18
    1b22:	13 06       	cpc	r1, r19
    1b24:	14 06       	cpc	r1, r20
    1b26:	05 06       	cpc	r0, r21
    1b28:	08 95       	ret

00001b2a <__fp_round>:
    1b2a:	09 2e       	mov	r0, r25
    1b2c:	03 94       	inc	r0
    1b2e:	00 0c       	add	r0, r0
    1b30:	11 f4       	brne	.+4      	; 0x1b36 <__fp_round+0xc>
    1b32:	88 23       	and	r24, r24
    1b34:	52 f0       	brmi	.+20     	; 0x1b4a <__fp_round+0x20>
    1b36:	bb 0f       	add	r27, r27
    1b38:	40 f4       	brcc	.+16     	; 0x1b4a <__fp_round+0x20>
    1b3a:	bf 2b       	or	r27, r31
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <__fp_round+0x18>
    1b3e:	60 ff       	sbrs	r22, 0
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <__fp_round+0x20>
    1b42:	6f 5f       	subi	r22, 0xFF	; 255
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	8f 4f       	sbci	r24, 0xFF	; 255
    1b48:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4a:	08 95       	ret

00001b4c <__fp_split3>:
    1b4c:	57 fd       	sbrc	r21, 7
    1b4e:	90 58       	subi	r25, 0x80	; 128
    1b50:	44 0f       	add	r20, r20
    1b52:	55 1f       	adc	r21, r21
    1b54:	59 f0       	breq	.+22     	; 0x1b6c <__fp_splitA+0x10>
    1b56:	5f 3f       	cpi	r21, 0xFF	; 255
    1b58:	71 f0       	breq	.+28     	; 0x1b76 <__fp_splitA+0x1a>
    1b5a:	47 95       	ror	r20

00001b5c <__fp_splitA>:
    1b5c:	88 0f       	add	r24, r24
    1b5e:	97 fb       	bst	r25, 7
    1b60:	99 1f       	adc	r25, r25
    1b62:	61 f0       	breq	.+24     	; 0x1b7c <__fp_splitA+0x20>
    1b64:	9f 3f       	cpi	r25, 0xFF	; 255
    1b66:	79 f0       	breq	.+30     	; 0x1b86 <__fp_splitA+0x2a>
    1b68:	87 95       	ror	r24
    1b6a:	08 95       	ret
    1b6c:	12 16       	cp	r1, r18
    1b6e:	13 06       	cpc	r1, r19
    1b70:	14 06       	cpc	r1, r20
    1b72:	55 1f       	adc	r21, r21
    1b74:	f2 cf       	rjmp	.-28     	; 0x1b5a <__fp_split3+0xe>
    1b76:	46 95       	lsr	r20
    1b78:	f1 df       	rcall	.-30     	; 0x1b5c <__fp_splitA>
    1b7a:	08 c0       	rjmp	.+16     	; 0x1b8c <__fp_splitA+0x30>
    1b7c:	16 16       	cp	r1, r22
    1b7e:	17 06       	cpc	r1, r23
    1b80:	18 06       	cpc	r1, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	f1 cf       	rjmp	.-30     	; 0x1b68 <__fp_splitA+0xc>
    1b86:	86 95       	lsr	r24
    1b88:	71 05       	cpc	r23, r1
    1b8a:	61 05       	cpc	r22, r1
    1b8c:	08 94       	sec
    1b8e:	08 95       	ret

00001b90 <__fp_zero>:
    1b90:	e8 94       	clt

00001b92 <__fp_szero>:
    1b92:	bb 27       	eor	r27, r27
    1b94:	66 27       	eor	r22, r22
    1b96:	77 27       	eor	r23, r23
    1b98:	cb 01       	movw	r24, r22
    1b9a:	97 f9       	bld	r25, 7
    1b9c:	08 95       	ret

00001b9e <__gesf2>:
    1b9e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__fp_cmp>
    1ba2:	08 f4       	brcc	.+2      	; 0x1ba6 <__gesf2+0x8>
    1ba4:	8f ef       	ldi	r24, 0xFF	; 255
    1ba6:	08 95       	ret

00001ba8 <__mulsf3>:
    1ba8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__mulsf3x>
    1bac:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__fp_round>
    1bb0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__fp_pscA>
    1bb4:	38 f0       	brcs	.+14     	; 0x1bc4 <__mulsf3+0x1c>
    1bb6:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fp_pscB>
    1bba:	20 f0       	brcs	.+8      	; 0x1bc4 <__mulsf3+0x1c>
    1bbc:	95 23       	and	r25, r21
    1bbe:	11 f0       	breq	.+4      	; 0x1bc4 <__mulsf3+0x1c>
    1bc0:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_inf>
    1bc4:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__fp_nan>
    1bc8:	11 24       	eor	r1, r1
    1bca:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_szero>

00001bce <__mulsf3x>:
    1bce:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__fp_split3>
    1bd2:	70 f3       	brcs	.-36     	; 0x1bb0 <__mulsf3+0x8>

00001bd4 <__mulsf3_pse>:
    1bd4:	95 9f       	mul	r25, r21
    1bd6:	c1 f3       	breq	.-16     	; 0x1bc8 <__mulsf3+0x20>
    1bd8:	95 0f       	add	r25, r21
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	55 1f       	adc	r21, r21
    1bde:	62 9f       	mul	r22, r18
    1be0:	f0 01       	movw	r30, r0
    1be2:	72 9f       	mul	r23, r18
    1be4:	bb 27       	eor	r27, r27
    1be6:	f0 0d       	add	r31, r0
    1be8:	b1 1d       	adc	r27, r1
    1bea:	63 9f       	mul	r22, r19
    1bec:	aa 27       	eor	r26, r26
    1bee:	f0 0d       	add	r31, r0
    1bf0:	b1 1d       	adc	r27, r1
    1bf2:	aa 1f       	adc	r26, r26
    1bf4:	64 9f       	mul	r22, r20
    1bf6:	66 27       	eor	r22, r22
    1bf8:	b0 0d       	add	r27, r0
    1bfa:	a1 1d       	adc	r26, r1
    1bfc:	66 1f       	adc	r22, r22
    1bfe:	82 9f       	mul	r24, r18
    1c00:	22 27       	eor	r18, r18
    1c02:	b0 0d       	add	r27, r0
    1c04:	a1 1d       	adc	r26, r1
    1c06:	62 1f       	adc	r22, r18
    1c08:	73 9f       	mul	r23, r19
    1c0a:	b0 0d       	add	r27, r0
    1c0c:	a1 1d       	adc	r26, r1
    1c0e:	62 1f       	adc	r22, r18
    1c10:	83 9f       	mul	r24, r19
    1c12:	a0 0d       	add	r26, r0
    1c14:	61 1d       	adc	r22, r1
    1c16:	22 1f       	adc	r18, r18
    1c18:	74 9f       	mul	r23, r20
    1c1a:	33 27       	eor	r19, r19
    1c1c:	a0 0d       	add	r26, r0
    1c1e:	61 1d       	adc	r22, r1
    1c20:	23 1f       	adc	r18, r19
    1c22:	84 9f       	mul	r24, r20
    1c24:	60 0d       	add	r22, r0
    1c26:	21 1d       	adc	r18, r1
    1c28:	82 2f       	mov	r24, r18
    1c2a:	76 2f       	mov	r23, r22
    1c2c:	6a 2f       	mov	r22, r26
    1c2e:	11 24       	eor	r1, r1
    1c30:	9f 57       	subi	r25, 0x7F	; 127
    1c32:	50 40       	sbci	r21, 0x00	; 0
    1c34:	9a f0       	brmi	.+38     	; 0x1c5c <__mulsf3_pse+0x88>
    1c36:	f1 f0       	breq	.+60     	; 0x1c74 <__mulsf3_pse+0xa0>
    1c38:	88 23       	and	r24, r24
    1c3a:	4a f0       	brmi	.+18     	; 0x1c4e <__mulsf3_pse+0x7a>
    1c3c:	ee 0f       	add	r30, r30
    1c3e:	ff 1f       	adc	r31, r31
    1c40:	bb 1f       	adc	r27, r27
    1c42:	66 1f       	adc	r22, r22
    1c44:	77 1f       	adc	r23, r23
    1c46:	88 1f       	adc	r24, r24
    1c48:	91 50       	subi	r25, 0x01	; 1
    1c4a:	50 40       	sbci	r21, 0x00	; 0
    1c4c:	a9 f7       	brne	.-22     	; 0x1c38 <__mulsf3_pse+0x64>
    1c4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c50:	51 05       	cpc	r21, r1
    1c52:	80 f0       	brcs	.+32     	; 0x1c74 <__mulsf3_pse+0xa0>
    1c54:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__fp_inf>
    1c58:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__fp_szero>
    1c5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5e:	e4 f3       	brlt	.-8      	; 0x1c58 <__mulsf3_pse+0x84>
    1c60:	98 3e       	cpi	r25, 0xE8	; 232
    1c62:	d4 f3       	brlt	.-12     	; 0x1c58 <__mulsf3_pse+0x84>
    1c64:	86 95       	lsr	r24
    1c66:	77 95       	ror	r23
    1c68:	67 95       	ror	r22
    1c6a:	b7 95       	ror	r27
    1c6c:	f7 95       	ror	r31
    1c6e:	e7 95       	ror	r30
    1c70:	9f 5f       	subi	r25, 0xFF	; 255
    1c72:	c1 f7       	brne	.-16     	; 0x1c64 <__mulsf3_pse+0x90>
    1c74:	fe 2b       	or	r31, r30
    1c76:	88 0f       	add	r24, r24
    1c78:	91 1d       	adc	r25, r1
    1c7a:	96 95       	lsr	r25
    1c7c:	87 95       	ror	r24
    1c7e:	97 f9       	bld	r25, 7
    1c80:	08 95       	ret

00001c82 <__divmodhi4>:
    1c82:	97 fb       	bst	r25, 7
    1c84:	07 2e       	mov	r0, r23
    1c86:	16 f4       	brtc	.+4      	; 0x1c8c <__divmodhi4+0xa>
    1c88:	00 94       	com	r0
    1c8a:	07 d0       	rcall	.+14     	; 0x1c9a <__divmodhi4_neg1>
    1c8c:	77 fd       	sbrc	r23, 7
    1c8e:	09 d0       	rcall	.+18     	; 0x1ca2 <__divmodhi4_neg2>
    1c90:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__udivmodhi4>
    1c94:	07 fc       	sbrc	r0, 7
    1c96:	05 d0       	rcall	.+10     	; 0x1ca2 <__divmodhi4_neg2>
    1c98:	3e f4       	brtc	.+14     	; 0x1ca8 <__divmodhi4_exit>

00001c9a <__divmodhi4_neg1>:
    1c9a:	90 95       	com	r25
    1c9c:	81 95       	neg	r24
    1c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca0:	08 95       	ret

00001ca2 <__divmodhi4_neg2>:
    1ca2:	70 95       	com	r23
    1ca4:	61 95       	neg	r22
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255

00001ca8 <__divmodhi4_exit>:
    1ca8:	08 95       	ret

00001caa <__udivmodhi4>:
    1caa:	aa 1b       	sub	r26, r26
    1cac:	bb 1b       	sub	r27, r27
    1cae:	51 e1       	ldi	r21, 0x11	; 17
    1cb0:	07 c0       	rjmp	.+14     	; 0x1cc0 <__udivmodhi4_ep>

00001cb2 <__udivmodhi4_loop>:
    1cb2:	aa 1f       	adc	r26, r26
    1cb4:	bb 1f       	adc	r27, r27
    1cb6:	a6 17       	cp	r26, r22
    1cb8:	b7 07       	cpc	r27, r23
    1cba:	10 f0       	brcs	.+4      	; 0x1cc0 <__udivmodhi4_ep>
    1cbc:	a6 1b       	sub	r26, r22
    1cbe:	b7 0b       	sbc	r27, r23

00001cc0 <__udivmodhi4_ep>:
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	5a 95       	dec	r21
    1cc6:	a9 f7       	brne	.-22     	; 0x1cb2 <__udivmodhi4_loop>
    1cc8:	80 95       	com	r24
    1cca:	90 95       	com	r25
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	08 95       	ret

00001cd2 <_exit>:
    1cd2:	f8 94       	cli

00001cd4 <__stop_program>:
    1cd4:	ff cf       	rjmp	.-2      	; 0x1cd4 <__stop_program>
