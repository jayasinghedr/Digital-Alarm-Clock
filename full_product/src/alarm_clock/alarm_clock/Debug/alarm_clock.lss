
alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000648  00800100  0000180e  000018a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000180e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800748  00800748  00001eea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001eea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000401f  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f4  00000000  00000000  0000611b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001627  00000000  00000000  0000730f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  00008938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c30  00000000  00000000  00008d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ebc  00000000  00000000  0000999c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000b858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	17 e0       	ldi	r17, 0x07	; 7
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e0       	ldi	r30, 0x0E	; 14
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 34       	cpi	r26, 0x48	; 72
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a8 e4       	ldi	r26, 0x48	; 72
      8e:	b7 e0       	ldi	r27, 0x07	; 7
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 37       	cpi	r26, 0x77	; 119
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <main>
      9e:	0c 94 05 0c 	jmp	0x180a	; 0x180a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN10AlarmClock11int_to_charEi>:
 
 ds1307 ds1307_1;
 LCD_Display lcd_1;
 Get_key keypad_1;

 char* AlarmClock::int_to_char(int num){
      a6:	9b 01       	movw	r18, r22
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
      a8:	6a 30       	cpi	r22, 0x0A	; 10
      aa:	71 05       	cpc	r23, r1
      ac:	ec f0       	brlt	.+58     	; 0xe8 <_ZN10AlarmClock11int_to_charEi+0x42>
		 chArr = "__";
		 x = num / 10;
      ae:	cb 01       	movw	r24, r22
      b0:	6a e0       	ldi	r22, 0x0A	; 10
      b2:	70 e0       	ldi	r23, 0x00	; 0
      b4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__divmodhi4>
		 div = x + 48;
      b8:	ab 01       	movw	r20, r22
      ba:	40 5d       	subi	r20, 0xD0	; 208
      bc:	5f 4f       	sbci	r21, 0xFF	; 255
		 rem = (num % (10 * x)) + 48;
      be:	cb 01       	movw	r24, r22
      c0:	88 0f       	add	r24, r24
      c2:	99 1f       	adc	r25, r25
      c4:	66 0f       	add	r22, r22
      c6:	77 1f       	adc	r23, r23
      c8:	66 0f       	add	r22, r22
      ca:	77 1f       	adc	r23, r23
      cc:	66 0f       	add	r22, r22
      ce:	77 1f       	adc	r23, r23
      d0:	68 0f       	add	r22, r24
      d2:	79 1f       	adc	r23, r25
      d4:	c9 01       	movw	r24, r18
      d6:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__divmodhi4>
      da:	c0 96       	adiw	r24, 0x30	; 48
		 char ch1 = div;
		 char ch2 = rem;
		 chArr[0] = ch1;
      dc:	e6 e0       	ldi	r30, 0x06	; 6
      de:	f7 e0       	ldi	r31, 0x07	; 7
      e0:	40 83       	st	Z, r20
		 chArr[1] = ch2;
      e2:	81 83       	std	Z+1, r24	; 0x01

 char* AlarmClock::int_to_char(int num){
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
		 chArr = "__";
      e4:	cf 01       	movw	r24, r30
      e6:	08 95       	ret
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
		 temp = num + 48;
      e8:	20 5d       	subi	r18, 0xD0	; 208
      ea:	3f 4f       	sbci	r19, 0xFF	; 255
		 char ch = temp;
		 chArr[1] = ch;
      ec:	20 93 0a 07 	sts	0x070A, r18	; 0x80070a <GOT+0x34>
		 char ch2 = rem;
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
      f0:	89 e0       	ldi	r24, 0x09	; 9
      f2:	97 e0       	ldi	r25, 0x07	; 7
		 temp = num + 48;
		 char ch = temp;
		 chArr[1] = ch;
	 }
	 return chArr;
 }
      f4:	08 95       	ret

000000f6 <_ZN10AlarmClock11displayTimeEv>:

 void AlarmClock::displayTime(){
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	8c 01       	movw	r16, r24

	 char* time1 = "    00:00:00     ";
	 int sec, min, hr;
	 //uint8_t sec_bcd, min_bcd, hr_bcd;

	 sec = ds1307_1.read_time(0x00);	//read from seconds reg
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	8f e4       	ldi	r24, 0x4F	; 79
     10c:	97 e0       	ldi	r25, 0x07	; 7
     10e:	0e 94 00 03 	call	0x600	; 0x600 <_ZN6ds13079read_timeEh>
     112:	7c 01       	movw	r14, r24
	 min = ds1307_1.read_time(0x01);	//read from minutes reg
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	8f e4       	ldi	r24, 0x4F	; 79
     118:	97 e0       	ldi	r25, 0x07	; 7
     11a:	0e 94 00 03 	call	0x600	; 0x600 <_ZN6ds13079read_timeEh>
     11e:	6c 01       	movw	r12, r24
	 hr = ds1307_1.read_time(0x02);		//read from hours reg
     120:	62 e0       	ldi	r22, 0x02	; 2
     122:	8f e4       	ldi	r24, 0x4F	; 79
     124:	97 e0       	ldi	r25, 0x07	; 7
     126:	0e 94 00 03 	call	0x600	; 0x600 <_ZN6ds13079read_timeEh>
	 
	 str_hr = int_to_char(hr);
     12a:	bc 01       	movw	r22, r24
     12c:	c8 01       	movw	r24, r16
     12e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[4] = str_hr[0];
     132:	fc 01       	movw	r30, r24
     134:	20 81       	ld	r18, Z
     136:	cc e0       	ldi	r28, 0x0C	; 12
     138:	d7 e0       	ldi	r29, 0x07	; 7
     13a:	2c 83       	std	Y+4, r18	; 0x04
	 time1[5] = str_hr[1];
     13c:	81 81       	ldd	r24, Z+1	; 0x01
     13e:	8d 83       	std	Y+5, r24	; 0x05
	 
	 str_min = int_to_char(min);
     140:	b6 01       	movw	r22, r12
     142:	c8 01       	movw	r24, r16
     144:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[7] = str_min[0];
     148:	fc 01       	movw	r30, r24
     14a:	20 81       	ld	r18, Z
     14c:	2f 83       	std	Y+7, r18	; 0x07
	 time1[8] = str_min[1];
     14e:	81 81       	ldd	r24, Z+1	; 0x01
     150:	88 87       	std	Y+8, r24	; 0x08
	 
	 str_sec = int_to_char(sec);
     152:	b7 01       	movw	r22, r14
     154:	c8 01       	movw	r24, r16
     156:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[10] = str_sec[0];
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	2a 87       	std	Y+10, r18	; 0x0a
	 time1[11] = str_sec[1];
     160:	81 81       	ldd	r24, Z+1	; 0x01
     162:	8b 87       	std	Y+11, r24	; 0x0b
	 
	 lcd_1.LCD_String_xy(0, 0, time1);       //Write string on 1st line of LCD
     164:	9e 01       	movw	r18, r28
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	89 e4       	ldi	r24, 0x49	; 73
     16c:	97 e0       	ldi	r25, 0x07	; 7
     16e:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
	 lcd_1.LCD_String_xy(1, 0, "MENU");		//Write string on 2nd line
     172:	2e e1       	ldi	r18, 0x1E	; 30
     174:	37 e0       	ldi	r19, 0x07	; 7
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	89 e4       	ldi	r24, 0x49	; 73
     17c:	97 e0       	ldi	r25, 0x07	; 7
     17e:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     182:	ff ef       	ldi	r31, 0xFF	; 255
     184:	29 e6       	ldi	r18, 0x69	; 105
     186:	88 e1       	ldi	r24, 0x18	; 24
     188:	f1 50       	subi	r31, 0x01	; 1
     18a:	20 40       	sbci	r18, 0x00	; 0
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	e1 f7       	brne	.-8      	; 0x188 <_ZN10AlarmClock11displayTimeEv+0x92>
     190:	00 c0       	rjmp	.+0      	; 0x192 <_ZN10AlarmClock11displayTimeEv+0x9c>
     192:	00 00       	nop
	 _delay_ms(1000);
	 if (PINC & (1<<Ok)){
     194:	32 9b       	sbis	0x06, 2	; 6
     196:	b8 cf       	rjmp	.-144    	; 0x108 <_ZN10AlarmClock11displayTimeEv+0x12>
		 break;
	 }
	 }
	 }
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	ff 90       	pop	r15
     1a2:	ef 90       	pop	r14
     1a4:	df 90       	pop	r13
     1a6:	cf 90       	pop	r12
     1a8:	08 95       	ret

000001aa <_ZN10AlarmClock12setTimetoRTCEv>:

 void AlarmClock::setTimetoRTC(){
     1aa:	af 92       	push	r10
     1ac:	bf 92       	push	r11
     1ae:	cf 92       	push	r12
     1b0:	df 92       	push	r13
     1b2:	ef 92       	push	r14
     1b4:	ff 92       	push	r15
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	63 97       	sbiw	r28, 0x13	; 19
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	de bf       	out	0x3e, r29	; 62
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	cd bf       	out	0x3d, r28	; 61
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
	int n[6] = {4, 5, 7, 8, 10, 11};
     1ce:	8c e0       	ldi	r24, 0x0C	; 12
     1d0:	ea ef       	ldi	r30, 0xFA	; 250
     1d2:	f6 e0       	ldi	r31, 0x06	; 6
     1d4:	de 01       	movw	r26, r28
     1d6:	18 96       	adiw	r26, 0x08	; 8
     1d8:	01 90       	ld	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	8a 95       	dec	r24
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <_ZN10AlarmClock12setTimetoRTCEv+0x2e>
	lcd_1.LCD_Clear();
     1e0:	89 e4       	ldi	r24, 0x49	; 73
     1e2:	97 e0       	ldi	r25, 0x07	; 7
     1e4:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN11LCD_Display9LCD_ClearEv>
	lcd_1.LCD_String_xy(0, 4, time);
     1e8:	23 e2       	ldi	r18, 0x23	; 35
     1ea:	37 e0       	ldi	r19, 0x07	; 7
     1ec:	44 e0       	ldi	r20, 0x04	; 4
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	89 e4       	ldi	r24, 0x49	; 73
     1f2:	97 e0       	ldi	r25, 0x07	; 7
     1f4:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     1f8:	2f ef       	ldi	r18, 0xFF	; 255
     1fa:	84 e3       	ldi	r24, 0x34	; 52
     1fc:	9c e0       	ldi	r25, 0x0C	; 12
     1fe:	21 50       	subi	r18, 0x01	; 1
     200:	80 40       	sbci	r24, 0x00	; 0
     202:	90 40       	sbci	r25, 0x00	; 0
     204:	e1 f7       	brne	.-8      	; 0x1fe <_ZN10AlarmClock12setTimetoRTCEv+0x54>
     206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN10AlarmClock12setTimetoRTCEv+0x5e>
     208:	00 00       	nop
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     20a:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
     20c:	e1 2c       	mov	r14, r1
     20e:	f1 2c       	mov	r15, r1
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
     210:	a1 2c       	mov	r10, r1
     212:	b1 2c       	mov	r11, r1
	
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
     214:	c1 2c       	mov	r12, r1
     216:	d1 2c       	mov	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     218:	07 30       	cpi	r16, 0x07	; 7
     21a:	08 f0       	brcs	.+2      	; 0x21e <_ZN10AlarmClock12setTimetoRTCEv+0x74>
     21c:	1c c1       	rjmp	.+568    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	{
		while(1)
		{
			key = keypad_1.GetKey();
     21e:	88 e4       	ldi	r24, 0x48	; 72
     220:	97 e0       	ldi	r25, 0x07	; 7
     222:	0e 94 44 03 	call	0x688	; 0x688 <_ZN7Get_key6GetKeyEv>
     226:	18 2f       	mov	r17, r24
			if (key == 1) {lcd_1.LCD_String_xy(0,n[i],"1");break;}
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	99 f4       	brne	.+38     	; 0x252 <_ZN10AlarmClock12setTimetoRTCEv+0xa8>
     22c:	e0 2f       	mov	r30, r16
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	ee 0f       	add	r30, r30
     232:	ff 1f       	adc	r31, r31
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	8c 0f       	add	r24, r28
     23a:	9d 1f       	adc	r25, r29
     23c:	e8 0f       	add	r30, r24
     23e:	f9 1f       	adc	r31, r25
     240:	47 81       	ldd	r20, Z+7	; 0x07
     242:	2c e2       	ldi	r18, 0x2C	; 44
     244:	37 e0       	ldi	r19, 0x07	; 7
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	89 e4       	ldi	r24, 0x49	; 73
     24a:	97 e0       	ldi	r25, 0x07	; 7
     24c:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     250:	c1 c0       	rjmp	.+386    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 2) {lcd_1.LCD_String_xy(0,n[i],"2");break;}
     252:	82 30       	cpi	r24, 0x02	; 2
     254:	99 f4       	brne	.+38     	; 0x27c <_ZN10AlarmClock12setTimetoRTCEv+0xd2>
     256:	e0 2f       	mov	r30, r16
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	ee 0f       	add	r30, r30
     25c:	ff 1f       	adc	r31, r31
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	8c 0f       	add	r24, r28
     264:	9d 1f       	adc	r25, r29
     266:	e8 0f       	add	r30, r24
     268:	f9 1f       	adc	r31, r25
     26a:	47 81       	ldd	r20, Z+7	; 0x07
     26c:	2e e2       	ldi	r18, 0x2E	; 46
     26e:	37 e0       	ldi	r19, 0x07	; 7
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	89 e4       	ldi	r24, 0x49	; 73
     274:	97 e0       	ldi	r25, 0x07	; 7
     276:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     27a:	ac c0       	rjmp	.+344    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 3) {lcd_1.LCD_String_xy(0,n[i],"3");break;}
     27c:	83 30       	cpi	r24, 0x03	; 3
     27e:	99 f4       	brne	.+38     	; 0x2a6 <_ZN10AlarmClock12setTimetoRTCEv+0xfc>
     280:	e0 2f       	mov	r30, r16
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	ee 0f       	add	r30, r30
     286:	ff 1f       	adc	r31, r31
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	8c 0f       	add	r24, r28
     28e:	9d 1f       	adc	r25, r29
     290:	e8 0f       	add	r30, r24
     292:	f9 1f       	adc	r31, r25
     294:	47 81       	ldd	r20, Z+7	; 0x07
     296:	20 e3       	ldi	r18, 0x30	; 48
     298:	37 e0       	ldi	r19, 0x07	; 7
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	89 e4       	ldi	r24, 0x49	; 73
     29e:	97 e0       	ldi	r25, 0x07	; 7
     2a0:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2a4:	97 c0       	rjmp	.+302    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 4) {lcd_1.LCD_String_xy(0,n[i],"4");break;}
     2a6:	84 30       	cpi	r24, 0x04	; 4
     2a8:	99 f4       	brne	.+38     	; 0x2d0 <_ZN10AlarmClock12setTimetoRTCEv+0x126>
     2aa:	e0 2f       	mov	r30, r16
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	ee 0f       	add	r30, r30
     2b0:	ff 1f       	adc	r31, r31
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	8c 0f       	add	r24, r28
     2b8:	9d 1f       	adc	r25, r29
     2ba:	e8 0f       	add	r30, r24
     2bc:	f9 1f       	adc	r31, r25
     2be:	47 81       	ldd	r20, Z+7	; 0x07
     2c0:	22 e3       	ldi	r18, 0x32	; 50
     2c2:	37 e0       	ldi	r19, 0x07	; 7
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	89 e4       	ldi	r24, 0x49	; 73
     2c8:	97 e0       	ldi	r25, 0x07	; 7
     2ca:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2ce:	82 c0       	rjmp	.+260    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 5) {lcd_1.LCD_String_xy(0,n[i],"5");break;}
     2d0:	85 30       	cpi	r24, 0x05	; 5
     2d2:	99 f4       	brne	.+38     	; 0x2fa <_ZN10AlarmClock12setTimetoRTCEv+0x150>
     2d4:	e0 2f       	mov	r30, r16
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	ee 0f       	add	r30, r30
     2da:	ff 1f       	adc	r31, r31
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	8c 0f       	add	r24, r28
     2e2:	9d 1f       	adc	r25, r29
     2e4:	e8 0f       	add	r30, r24
     2e6:	f9 1f       	adc	r31, r25
     2e8:	47 81       	ldd	r20, Z+7	; 0x07
     2ea:	24 e3       	ldi	r18, 0x34	; 52
     2ec:	37 e0       	ldi	r19, 0x07	; 7
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	89 e4       	ldi	r24, 0x49	; 73
     2f2:	97 e0       	ldi	r25, 0x07	; 7
     2f4:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2f8:	6d c0       	rjmp	.+218    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
     2fa:	86 30       	cpi	r24, 0x06	; 6
     2fc:	99 f4       	brne	.+38     	; 0x324 <_ZN10AlarmClock12setTimetoRTCEv+0x17a>
     2fe:	e0 2f       	mov	r30, r16
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ee 0f       	add	r30, r30
     304:	ff 1f       	adc	r31, r31
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	8c 0f       	add	r24, r28
     30c:	9d 1f       	adc	r25, r29
     30e:	e8 0f       	add	r30, r24
     310:	f9 1f       	adc	r31, r25
     312:	47 81       	ldd	r20, Z+7	; 0x07
     314:	26 e3       	ldi	r18, 0x36	; 54
     316:	37 e0       	ldi	r19, 0x07	; 7
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	89 e4       	ldi	r24, 0x49	; 73
     31c:	97 e0       	ldi	r25, 0x07	; 7
     31e:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     322:	58 c0       	rjmp	.+176    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
     324:	87 30       	cpi	r24, 0x07	; 7
     326:	99 f4       	brne	.+38     	; 0x34e <_ZN10AlarmClock12setTimetoRTCEv+0x1a4>
     328:	e0 2f       	mov	r30, r16
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	ee 0f       	add	r30, r30
     32e:	ff 1f       	adc	r31, r31
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	8c 0f       	add	r24, r28
     336:	9d 1f       	adc	r25, r29
     338:	e8 0f       	add	r30, r24
     33a:	f9 1f       	adc	r31, r25
     33c:	47 81       	ldd	r20, Z+7	; 0x07
     33e:	28 e3       	ldi	r18, 0x38	; 56
     340:	37 e0       	ldi	r19, 0x07	; 7
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	89 e4       	ldi	r24, 0x49	; 73
     346:	97 e0       	ldi	r25, 0x07	; 7
     348:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     34c:	43 c0       	rjmp	.+134    	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
     34e:	88 30       	cpi	r24, 0x08	; 8
     350:	99 f4       	brne	.+38     	; 0x378 <_ZN10AlarmClock12setTimetoRTCEv+0x1ce>
     352:	e0 2f       	mov	r30, r16
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	8c 0f       	add	r24, r28
     360:	9d 1f       	adc	r25, r29
     362:	e8 0f       	add	r30, r24
     364:	f9 1f       	adc	r31, r25
     366:	47 81       	ldd	r20, Z+7	; 0x07
     368:	2a e3       	ldi	r18, 0x3A	; 58
     36a:	37 e0       	ldi	r19, 0x07	; 7
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	89 e4       	ldi	r24, 0x49	; 73
     370:	97 e0       	ldi	r25, 0x07	; 7
     372:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     376:	2e c0       	rjmp	.+92     	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
     378:	89 30       	cpi	r24, 0x09	; 9
     37a:	99 f4       	brne	.+38     	; 0x3a2 <_ZN10AlarmClock12setTimetoRTCEv+0x1f8>
     37c:	e0 2f       	mov	r30, r16
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	8c 0f       	add	r24, r28
     38a:	9d 1f       	adc	r25, r29
     38c:	e8 0f       	add	r30, r24
     38e:	f9 1f       	adc	r31, r25
     390:	47 81       	ldd	r20, Z+7	; 0x07
     392:	2c e3       	ldi	r18, 0x3C	; 60
     394:	37 e0       	ldi	r19, 0x07	; 7
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	89 e4       	ldi	r24, 0x49	; 73
     39a:	97 e0       	ldi	r25, 0x07	; 7
     39c:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     3a0:	19 c0       	rjmp	.+50     	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
     3a2:	8b 30       	cpi	r24, 0x0B	; 11
     3a4:	a1 f4       	brne	.+40     	; 0x3ce <_ZN10AlarmClock12setTimetoRTCEv+0x224>
     3a6:	e0 2f       	mov	r30, r16
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	ee 0f       	add	r30, r30
     3ac:	ff 1f       	adc	r31, r31
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	8c 0f       	add	r24, r28
     3b4:	9d 1f       	adc	r25, r29
     3b6:	e8 0f       	add	r30, r24
     3b8:	f9 1f       	adc	r31, r25
     3ba:	47 81       	ldd	r20, Z+7	; 0x07
     3bc:	2a e2       	ldi	r18, 0x2A	; 42
     3be:	37 e0       	ldi	r19, 0x07	; 7
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	89 e4       	ldi	r24, 0x49	; 73
     3c4:	97 e0       	ldi	r25, 0x07	; 7
     3c6:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     3ca:	10 e0       	ldi	r17, 0x00	; 0
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22a>
			//if (key == 10) {lcd.LCD_String_xy(0,n[i],"P");break;}
			if (PINC & (1<<Ok)){i=8; break;}
     3ce:	32 9b       	sbis	0x06, 2	; 6
     3d0:	26 cf       	rjmp	.-436    	; 0x21e <_ZN10AlarmClock12setTimetoRTCEv+0x74>
     3d2:	08 e0       	ldi	r16, 0x08	; 8
			//if (i == 6){i = 0;}
		}

		if (i == 0){hr+=key*10;}
     3d4:	01 11       	cpse	r16, r1
     3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
     3d8:	81 2f       	mov	r24, r17
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	9c 01       	movw	r18, r24
     3de:	22 0f       	add	r18, r18
     3e0:	33 1f       	adc	r19, r19
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	82 0f       	add	r24, r18
     3f0:	93 1f       	adc	r25, r19
     3f2:	e8 0e       	add	r14, r24
     3f4:	f9 1e       	adc	r15, r25
		if (i == 1){hr+=key;}
     3f6:	01 30       	cpi	r16, 0x01	; 1
     3f8:	11 f4       	brne	.+4      	; 0x3fe <_ZN10AlarmClock12setTimetoRTCEv+0x254>
     3fa:	e1 0e       	add	r14, r17
     3fc:	f1 1c       	adc	r15, r1
		if (i == 2){min+=key*10;}
     3fe:	02 30       	cpi	r16, 0x02	; 2
     400:	79 f4       	brne	.+30     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     402:	81 2f       	mov	r24, r17
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	9c 01       	movw	r18, r24
     408:	22 0f       	add	r18, r18
     40a:	33 1f       	adc	r19, r19
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	82 0f       	add	r24, r18
     41a:	93 1f       	adc	r25, r19
     41c:	a8 0e       	add	r10, r24
     41e:	b9 1e       	adc	r11, r25
		if (i == 3){min+=key;}
     420:	03 30       	cpi	r16, 0x03	; 3
     422:	11 f4       	brne	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     424:	a1 0e       	add	r10, r17
     426:	b1 1c       	adc	r11, r1
		if (i == 4){sec+=key*10;}
     428:	04 30       	cpi	r16, 0x04	; 4
     42a:	79 f4       	brne	.+30     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     42c:	81 2f       	mov	r24, r17
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	9c 01       	movw	r18, r24
     432:	22 0f       	add	r18, r18
     434:	33 1f       	adc	r19, r19
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	82 0f       	add	r24, r18
     444:	93 1f       	adc	r25, r19
     446:	c8 0e       	add	r12, r24
     448:	d9 1e       	adc	r13, r25
		if (i == 5){sec+=key;}
     44a:	05 30       	cpi	r16, 0x05	; 5
     44c:	11 f4       	brne	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     44e:	c1 0e       	add	r12, r17
     450:	d1 1c       	adc	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	_delay_ms(500);

	for(uint8_t i=0;i<7;i++)
     452:	0f 5f       	subi	r16, 0xFF	; 255
     454:	e1 ce       	rjmp	.-574    	; 0x218 <_ZN10AlarmClock12setTimetoRTCEv+0x6e>
		if (i == 4){sec+=key*10;}
		if (i == 5){sec+=key;}

	}
	
	hour = ds1307_1.dec_to_bcd(hr);
     456:	b7 01       	movw	r22, r14
     458:	8f e4       	ldi	r24, 0x4F	; 79
     45a:	97 e0       	ldi	r25, 0x07	; 7
     45c:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN6ds130710dec_to_bcdEi>
     460:	18 2f       	mov	r17, r24
	minutes = ds1307_1.dec_to_bcd(min);
     462:	b5 01       	movw	r22, r10
     464:	8f e4       	ldi	r24, 0x4F	; 79
     466:	97 e0       	ldi	r25, 0x07	; 7
     468:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN6ds130710dec_to_bcdEi>
     46c:	08 2f       	mov	r16, r24
	seconds = ds1307_1.dec_to_bcd(sec);
     46e:	b6 01       	movw	r22, r12
     470:	8f e4       	ldi	r24, 0x4F	; 79
     472:	97 e0       	ldi	r25, 0x07	; 7
     474:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN6ds130710dec_to_bcdEi>

	// Setting time to the RTC
	rtc.seconds =  seconds;
     478:	89 83       	std	Y+1, r24	; 0x01
	rtc.minute =  minutes;
     47a:	0a 83       	std	Y+2, r16	; 0x02
	rtc.hour = hour;
     47c:	1b 83       	std	Y+3, r17	; 0x03
	rtc.weekDay = 0x07;
     47e:	87 e0       	ldi	r24, 0x07	; 7
     480:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x20;
     482:	80 e2       	ldi	r24, 0x20	; 32
     484:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x06;
     486:	86 e0       	ldi	r24, 0x06	; 6
     488:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21;
     48a:	81 e2       	ldi	r24, 0x21	; 33
     48c:	8f 83       	std	Y+7, r24	; 0x07
	lcd_1.LCD_Clear();
     48e:	89 e4       	ldi	r24, 0x49	; 73
     490:	97 e0       	ldi	r25, 0x07	; 7
     492:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN11LCD_Display9LCD_ClearEv>
	ds1307_1.set_time(&rtc);
     496:	be 01       	movw	r22, r28
     498:	6f 5f       	subi	r22, 0xFF	; 255
     49a:	7f 4f       	sbci	r23, 0xFF	; 255
     49c:	8f e4       	ldi	r24, 0x4F	; 79
     49e:	97 e0       	ldi	r25, 0x07	; 7
     4a0:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN6ds13078set_timeEPNS_5rtc_tE>
	lcd_1.LCD_String_xy(0, 0, "Time Set");
     4a4:	2e e3       	ldi	r18, 0x3E	; 62
     4a6:	37 e0       	ldi	r19, 0x07	; 7
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	89 e4       	ldi	r24, 0x49	; 73
     4ae:	97 e0       	ldi	r25, 0x07	; 7
     4b0:	0e 94 49 04 	call	0x892	; 0x892 <_ZN11LCD_Display13LCD_String_xyEccPc>
     4b4:	9f ef       	ldi	r25, 0xFF	; 255
     4b6:	24 e3       	ldi	r18, 0x34	; 52
     4b8:	8c e0       	ldi	r24, 0x0C	; 12
     4ba:	91 50       	subi	r25, 0x01	; 1
     4bc:	20 40       	sbci	r18, 0x00	; 0
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4c4:	00 00       	nop
	_delay_ms(500);
	lcd_1.LCD_Clear();
     4c6:	89 e4       	ldi	r24, 0x49	; 73
     4c8:	97 e0       	ldi	r25, 0x07	; 7
     4ca:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN11LCD_Display9LCD_ClearEv>
 }
     4ce:	63 96       	adiw	r28, 0x13	; 19
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	df 90       	pop	r13
     4e8:	cf 90       	pop	r12
     4ea:	bf 90       	pop	r11
     4ec:	af 90       	pop	r10
     4ee:	08 95       	ret

000004f0 <_ZN6ds13078twi_initEv>:
  //-------------TWI initialization------------------------------------------

  void ds1307::twi_init(){
	  //TWBR = (F_CPU/SCL_freq - 16)/(2*prescalar)
	  //F_CPU = 16MHz, SCL_freq(for DS1307) = 100KHz, prescalar = 1 -> TWBR =72
	  TWBR = 0x48;	// set bit rate 72
     4f0:	88 e4       	ldi	r24, 0x48	; 72
     4f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	  TWCR = (1<<TWEN);	//enable TWI
     4f6:	84 e0       	ldi	r24, 0x04	; 4
     4f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  TWSR = 0x00;	//sets the prescalar value to 1
     4fc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     500:	08 95       	ret

00000502 <_ZN6ds13079twi_startEv>:
  }

  //------------TWI Start----------------------------------------------------

  void ds1307::twi_start(){
	  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);	// initiate the start condition
     502:	84 ea       	ldi	r24, 0xA4	; 164
     504:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	// wait for the start condition to transmit
     508:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     50c:	88 23       	and	r24, r24
     50e:	e4 f7       	brge	.-8      	; 0x508 <_ZN6ds13079twi_startEv+0x6>
  }
     510:	08 95       	ret

00000512 <_ZN6ds13079twi_SLA_WEv>:

  void ds1307::twi_SLA_W(){
	  //chooses the device address and sends the Write signal
	  //DS1307 address = 1101000
	  //Write = 0 (last bit)
	  TWDR = 0b11010000;	//SLA + W to data register
     512:	80 ed       	ldi	r24, 0xD0	; 208
     514:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     518:	84 e8       	ldi	r24, 0x84	; 132
     51a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for SLA + W to transmit
     51e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     522:	88 23       	and	r24, r24
     524:	e4 f7       	brge	.-8      	; 0x51e <_ZN6ds13079twi_SLA_WEv+0xc>
  }
     526:	08 95       	ret

00000528 <_ZN6ds13079twi_SLA_REv>:

  void ds1307::twi_SLA_R(){
	  //chooses the device address and sends the Read signal
	  //DS1307 address = 1101000
	  //Read = 1 (last bit)
	  TWDR = 0b11010001;	//SLA + R to data register
     528:	81 ed       	ldi	r24, 0xD1	; 209
     52a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     52e:	84 e8       	ldi	r24, 0x84	; 132
     530:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	////wait for SLA + R to transmit
     534:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     538:	88 23       	and	r24, r24
     53a:	e4 f7       	brge	.-8      	; 0x534 <_ZN6ds13079twi_SLA_REv+0xc>
  }
     53c:	08 95       	ret

0000053e <_ZN6ds13079twi_writeEh>:

  //-----------TWI Write(to Slave registers)----------------------------------

  void ds1307::twi_write(uint8_t x){
	  TWDR = x;	//data byte to be written to the slave
     53e:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     542:	84 e8       	ldi	r24, 0x84	; 132
     544:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
     548:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     54c:	88 23       	and	r24, r24
     54e:	e4 f7       	brge	.-8      	; 0x548 <_ZN6ds13079twi_writeEh+0xa>
  }
     550:	08 95       	ret

00000552 <_ZN6ds13078twi_readEv>:

  //------------TWI Read(from Slave registers)---------------------------------

  uint8_t ds1307::twi_read(){
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     552:	84 e8       	ldi	r24, 0x84	; 132
     554:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
     558:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     55c:	88 23       	and	r24, r24
     55e:	e4 f7       	brge	.-8      	; 0x558 <_ZN6ds13078twi_readEv+0x6>
	  return TWDR;	//returns the data read from the slave which is stored in TWDR
     560:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  }
     564:	08 95       	ret

00000566 <_ZN6ds13078twi_stopEv>:

  //------------TWI Stop------------------------------------------------------

  void ds1307::twi_stop(){
	  //stops the transmission with TWSTO
	  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     566:	84 e9       	ldi	r24, 0x94	; 148
     568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     56c:	08 95       	ret

0000056e <_ZN6ds13078set_timeEPNS_5rtc_tE>:

  //----------------Set time to DS1307---------------------------------------

  

  void ds1307::set_time(rtc_t * rtc){
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	8c 01       	movw	r16, r24
     578:	eb 01       	movw	r28, r22
	  twi_init();
     57a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_ZN6ds13078twi_initEv>
	  twi_start();	//sending the start condition to DS1307
     57e:	c8 01       	movw	r24, r16
     580:	0e 94 81 02 	call	0x502	; 0x502 <_ZN6ds13079twi_startEv>
	  twi_SLA_W();	//initiates the device ds1307 & sends write signal
     584:	c8 01       	movw	r24, r16
     586:	0e 94 89 02 	call	0x512	; 0x512 <_ZN6ds13079twi_SLA_WEv>

	  twi_write(0x00);	//set the register pointer to 00H(seconds reg)
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	c8 01       	movw	r24, r16
     58e:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN6ds13079twi_writeEh>
	  
	  twi_write(rtc -> seconds);
     592:	68 81       	ld	r22, Y
     594:	c8 01       	movw	r24, r16
     596:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> minute);
     59a:	69 81       	ldd	r22, Y+1	; 0x01
     59c:	c8 01       	movw	r24, r16
     59e:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> hour);
     5a2:	6a 81       	ldd	r22, Y+2	; 0x02
     5a4:	c8 01       	movw	r24, r16
     5a6:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> weekDay);
     5aa:	6b 81       	ldd	r22, Y+3	; 0x03
     5ac:	c8 01       	movw	r24, r16
     5ae:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> date);
     5b2:	6c 81       	ldd	r22, Y+4	; 0x04
     5b4:	c8 01       	movw	r24, r16
     5b6:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> month);
     5ba:	6d 81       	ldd	r22, Y+5	; 0x05
     5bc:	c8 01       	movw	r24, r16
     5be:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> year);
     5c2:	6e 81       	ldd	r22, Y+6	; 0x06
     5c4:	c8 01       	movw	r24, r16
     5c6:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN6ds13079twi_writeEh>
	  
	  twi_stop(); //stop writing
     5ca:	c8 01       	movw	r24, r16
     5cc:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN6ds13078twi_stopEv>
  }
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	08 95       	ret

000005da <_ZN6ds130710bcd_to_decEh>:
  int ds1307::bcd_to_dec(uint8_t num){
	  //Data received from DS1307 are in Binary Coded Decimal
	  //This function converts these data to decimal integers
	  int first4, last4, decValue;
	  
	  first4 = num & 0b00001111;	//gets first 4 digits
     5da:	26 2f       	mov	r18, r22
     5dc:	2f 70       	andi	r18, 0x0F	; 15
	  last4 = ((num & 0b11110000) >> 4); //get last 4 digits
     5de:	62 95       	swap	r22
     5e0:	6f 70       	andi	r22, 0x0F	; 15
     5e2:	70 e0       	ldi	r23, 0x00	; 0
	  decValue = last4 * 10 + first4;	//gives the corresponding decimal value
     5e4:	cb 01       	movw	r24, r22
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	66 0f       	add	r22, r22
     5ec:	77 1f       	adc	r23, r23
     5ee:	66 0f       	add	r22, r22
     5f0:	77 1f       	adc	r23, r23
     5f2:	66 0f       	add	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	86 0f       	add	r24, r22
     5f8:	97 1f       	adc	r25, r23
	  
	  return decValue;
  }
     5fa:	82 0f       	add	r24, r18
     5fc:	91 1d       	adc	r25, r1
     5fe:	08 95       	ret

00000600 <_ZN6ds13079read_timeEh>:
  }


  //-----------------Read time from DS1307---------------------------------

  int ds1307::read_time(uint8_t reg){
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	ec 01       	movw	r28, r24
     608:	16 2f       	mov	r17, r22
	  //sets the register pointer to the register we want -> reg (00H, 01H, etc)
	  twi_start();
     60a:	0e 94 81 02 	call	0x502	; 0x502 <_ZN6ds13079twi_startEv>
	  twi_SLA_W();	//initiates the device ds1307
     60e:	ce 01       	movw	r24, r28
     610:	0e 94 89 02 	call	0x512	; 0x512 <_ZN6ds13079twi_SLA_WEv>
	  twi_write(reg);	//set the register pointer to reg)
     614:	61 2f       	mov	r22, r17
     616:	ce 01       	movw	r24, r28
     618:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN6ds13079twi_writeEh>
	  twi_stop();
     61c:	ce 01       	movw	r24, r28
     61e:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN6ds13078twi_stopEv>
	  
	  //reading from the particular register
	  uint8_t x;
	  int y;
	  twi_start();
     622:	ce 01       	movw	r24, r28
     624:	0e 94 81 02 	call	0x502	; 0x502 <_ZN6ds13079twi_startEv>
	  twi_SLA_R();		//read from the reg
     628:	ce 01       	movw	r24, r28
     62a:	0e 94 94 02 	call	0x528	; 0x528 <_ZN6ds13079twi_SLA_REv>
	  x = twi_read();		//value read from reg is stored in x
     62e:	ce 01       	movw	r24, r28
     630:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN6ds13078twi_readEv>
     634:	18 2f       	mov	r17, r24
	  twi_stop();
     636:	ce 01       	movw	r24, r28
     638:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN6ds13078twi_stopEv>
	  y = bcd_to_dec(x);
     63c:	61 2f       	mov	r22, r17
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 ed 02 	call	0x5da	; 0x5da <_ZN6ds130710bcd_to_decEh>
	  return y;
  }
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	08 95       	ret

0000064c <_ZN6ds130710dec_to_bcdEi>:
	  return decValue;
  }

  //-----------------Convert decimal to BCD----------------------------------

  uint8_t ds1307::dec_to_bcd(int number){
     64c:	9b 01       	movw	r18, r22
	int x;
	uint8_t div=0, rem=0;
	uint8_t bcd;
	if (number > 9){
     64e:	6a 30       	cpi	r22, 0x0A	; 10
     650:	71 05       	cpc	r23, r1
     652:	c4 f0       	brlt	.+48     	; 0x684 <_ZN6ds130710dec_to_bcdEi+0x38>
		x = number / 10;
     654:	cb 01       	movw	r24, r22
     656:	6a e0       	ldi	r22, 0x0A	; 10
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__divmodhi4>
		div = (x<<4);
     65e:	46 2f       	mov	r20, r22
     660:	42 95       	swap	r20
     662:	40 7f       	andi	r20, 0xF0	; 240
		rem = (number % (10 * x));
     664:	86 2f       	mov	r24, r22
     666:	97 2f       	mov	r25, r23
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	bc 01       	movw	r22, r24
     66e:	66 0f       	add	r22, r22
     670:	77 1f       	adc	r23, r23
     672:	66 0f       	add	r22, r22
     674:	77 1f       	adc	r23, r23
     676:	68 0f       	add	r22, r24
     678:	79 1f       	adc	r23, r25
     67a:	c9 01       	movw	r24, r18
     67c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__divmodhi4>
		bcd = div | rem;
     680:	84 2b       	or	r24, r20
     682:	08 95       	ret
	}
	else{
		bcd = number;
     684:	86 2f       	mov	r24, r22
	}
	return bcd;
     686:	08 95       	ret

00000688 <_ZN7Get_key6GetKeyEv>:

uint8_t Get_key::GetKey()

{
	uint8_t r,c;
	PORTD |= 0b00001111;
     688:	8b b1       	in	r24, 0x0b	; 11
     68a:	8f 60       	ori	r24, 0x0F	; 15
     68c:	8b b9       	out	0x0b, r24	; 11
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	83 30       	cpi	r24, 0x03	; 3
     692:	80 f5       	brcc	.+96     	; 0x6f4 <_ZN7Get_key6GetKeyEv+0x6c>
	{
		DDRD &=~(0b01111111);
     694:	9a b1       	in	r25, 0x0a	; 10
     696:	90 78       	andi	r25, 0x80	; 128
     698:	9a b9       	out	0x0a, r25	; 10
		DDRD |=(0b01000000>>c);
     69a:	9a b1       	in	r25, 0x0a	; 10
     69c:	20 e4       	ldi	r18, 0x40	; 64
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	08 2e       	mov	r0, r24
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <_ZN7Get_key6GetKeyEv+0x20>
     6a4:	35 95       	asr	r19
     6a6:	27 95       	ror	r18
     6a8:	0a 94       	dec	r0
     6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <_ZN7Get_key6GetKeyEv+0x1c>
     6ac:	29 2b       	or	r18, r25
     6ae:	2a b9       	out	0x0a, r18	; 10
		for (r=0;r<4;r++)//identifying the row of the pressed key
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	94 30       	cpi	r25, 0x04	; 4
     6b4:	e8 f4       	brcc	.+58     	; 0x6f0 <_ZN7Get_key6GetKeyEv+0x68>
		{
			if(!(PIND & (0b00001000>>r)))
     6b6:	29 b1       	in	r18, 0x09	; 9
     6b8:	48 e0       	ldi	r20, 0x08	; 8
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	09 2e       	mov	r0, r25
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <_ZN7Get_key6GetKeyEv+0x3c>
     6c0:	55 95       	asr	r21
     6c2:	47 95       	ror	r20
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <_ZN7Get_key6GetKeyEv+0x38>
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	24 23       	and	r18, r20
     6cc:	35 23       	and	r19, r21
     6ce:	23 2b       	or	r18, r19
     6d0:	69 f4       	brne	.+26     	; 0x6ec <_ZN7Get_key6GetKeyEv+0x64>
			{
				while(!(PIND & (0b00001000>>r)));
     6d2:	29 b1       	in	r18, 0x09	; 9
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	24 23       	and	r18, r20
     6d8:	35 23       	and	r19, r21
     6da:	23 2b       	or	r18, r19
     6dc:	d1 f3       	breq	.-12     	; 0x6d2 <_ZN7Get_key6GetKeyEv+0x4a>
				return(r*3+c +1);// returning the pressed number by considering the row and the column pressed
     6de:	29 2f       	mov	r18, r25
     6e0:	22 0f       	add	r18, r18
     6e2:	92 0f       	add	r25, r18
     6e4:	98 0f       	add	r25, r24
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	89 0f       	add	r24, r25
     6ea:	08 95       	ret
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
	{
		DDRD &=~(0b01111111);
		DDRD |=(0b01000000>>c);
		for (r=0;r<4;r++)//identifying the row of the pressed key
     6ec:	9f 5f       	subi	r25, 0xFF	; 255
     6ee:	e1 cf       	rjmp	.-62     	; 0x6b2 <_ZN7Get_key6GetKeyEv+0x2a>

{
	uint8_t r,c;
	PORTD |= 0b00001111;
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	ce cf       	rjmp	.-100    	; 0x690 <_ZN7Get_key6GetKeyEv+0x8>
				return(r*3+c +1);// returning the pressed number by considering the row and the column pressed
			}
		}
	}
	
	return 0xFF;
     6f4:	8f ef       	ldi	r24, 0xFF	; 255
     6f6:	08 95       	ret

000006f8 <_ZN11LCD_Display16LCD_CommandgiverEh>:
#define ENable        PORTB1


void LCD_Display::LCD_Commandgiver(unsigned char comand)      //function to give commands to the LCD
{
	LCDER_port=(LCDER_port & 0b11000011) | ((comand & 0xF0)>>2);         //Sending upper nibble
     6f8:	25 b1       	in	r18, 0x05	; 5
     6fa:	96 2f       	mov	r25, r22
     6fc:	90 7f       	andi	r25, 0xF0	; 240
     6fe:	89 2f       	mov	r24, r25
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	95 95       	asr	r25
     704:	87 95       	ror	r24
     706:	95 95       	asr	r25
     708:	87 95       	ror	r24
     70a:	92 2f       	mov	r25, r18
     70c:	93 7c       	andi	r25, 0xC3	; 195
     70e:	89 2b       	or	r24, r25
     710:	85 b9       	out	0x05, r24	; 5
	LCDER_port &= ~(1<<Rsel);							      //setting the pin0 of portB LOW to write
     712:	85 b1       	in	r24, 0x05	; 5
     714:	8e 7f       	andi	r24, 0xFE	; 254
     716:	85 b9       	out	0x05, r24	; 5
	LCDER_port |= (1<<ENable);                                //setting the pin1 of portB HIGH to read
     718:	85 b1       	in	r24, 0x05	; 5
     71a:	82 60       	ori	r24, 0x02	; 2
     71c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71e:	85 e0       	ldi	r24, 0x05	; 5
     720:	8a 95       	dec	r24
     722:	f1 f7       	brne	.-4      	; 0x720 <_ZN11LCD_Display16LCD_CommandgiverEh+0x28>
     724:	00 00       	nop
	_delay_us(2);
	LCDER_port &= ~(1<<ENable);						      //setting the pin1 of portB LOW to write
     726:	85 b1       	in	r24, 0x05	; 5
     728:	8d 7f       	andi	r24, 0xFD	; 253
     72a:	85 b9       	out	0x05, r24	; 5
     72c:	8f e8       	ldi	r24, 0x8F	; 143
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <_ZN11LCD_Display16LCD_CommandgiverEh+0x38>
     734:	00 c0       	rjmp	.+0      	; 0x736 <_ZN11LCD_Display16LCD_CommandgiverEh+0x3e>
     736:	00 00       	nop
	
	_delay_us(200);
	
	LCDER_port = (LCDER_port & 0b11000011) | ((comand & 0x0F)<<2);          //Sending lower nibble
     738:	85 b1       	in	r24, 0x05	; 5
     73a:	6f 70       	andi	r22, 0x0F	; 15
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	66 0f       	add	r22, r22
     740:	77 1f       	adc	r23, r23
     742:	66 0f       	add	r22, r22
     744:	77 1f       	adc	r23, r23
     746:	83 7c       	andi	r24, 0xC3	; 195
     748:	68 2b       	or	r22, r24
     74a:	65 b9       	out	0x05, r22	; 5
	LCDER_port |= (1 << ENable);                               //setting the pin1 of portB HIGH to read
     74c:	85 b1       	in	r24, 0x05	; 5
     74e:	82 60       	ori	r24, 0x02	; 2
     750:	85 b9       	out	0x05, r24	; 5
     752:	95 e0       	ldi	r25, 0x05	; 5
     754:	9a 95       	dec	r25
     756:	f1 f7       	brne	.-4      	; 0x754 <_ZN11LCD_Display16LCD_CommandgiverEh+0x5c>
     758:	00 00       	nop
	_delay_us(2);
	LCDER_port &= ~(1<< ENable);                               //setting the pin1 of portB LOW to write
     75a:	85 b1       	in	r24, 0x05	; 5
     75c:	8d 7f       	andi	r24, 0xFD	; 253
     75e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     760:	8f e9       	ldi	r24, 0x9F	; 159
     762:	9f e0       	ldi	r25, 0x0F	; 15
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <_ZN11LCD_Display16LCD_CommandgiverEh+0x6c>
     768:	00 c0       	rjmp	.+0      	; 0x76a <_ZN11LCD_Display16LCD_CommandgiverEh+0x72>
     76a:	00 00       	nop
     76c:	08 95       	ret

0000076e <_ZN11LCD_Display15LCD_InitializerEv>:
	_delay_ms(2);
}

void LCD_Display::LCD_Initializer(){                           // function to output signal towards LCD
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
	LCD_Dir_00 = 0xFF;                                         // setting the portB to be in Output mode
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	84 b9       	out	0x04, r24	; 4
     778:	8f e3       	ldi	r24, 0x3F	; 63
     77a:	9c e9       	ldi	r25, 0x9C	; 156
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <_ZN11LCD_Display15LCD_InitializerEv+0xe>
     780:	00 c0       	rjmp	.+0      	; 0x782 <_ZN11LCD_Display15LCD_InitializerEv+0x14>
     782:	00 00       	nop
	_delay_ms(20);
	
	LCD_Commandgiver(0x02);                                    //initializes LCD 16x2 in 4-bit mode
     784:	62 e0       	ldi	r22, 0x02	; 2
     786:	ce 01       	movw	r24, r28
     788:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x28);                                    // configures LCD in 2-line, 4-bit mode, and 5x8 dots.
     78c:	68 e2       	ldi	r22, 0x28	; 40
     78e:	ce 01       	movw	r24, r28
     790:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x0c);                                    //Send any Display ON command
     794:	6c e0       	ldi	r22, 0x0C	; 12
     796:	ce 01       	movw	r24, r28
     798:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x06);                                    //increment cursor)
     79c:	66 e0       	ldi	r22, 0x06	; 6
     79e:	ce 01       	movw	r24, r28
     7a0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x01);                                    //Clear display screen
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	ce 01       	movw	r24, r28
     7a8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7ac:	8f e9       	ldi	r24, 0x9F	; 159
     7ae:	9f e0       	ldi	r25, 0x0F	; 15
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <_ZN11LCD_Display15LCD_InitializerEv+0x42>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <_ZN11LCD_Display15LCD_InitializerEv+0x48>
     7b6:	00 00       	nop
	_delay_ms(2);
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <_ZN11LCD_Display13LCD_CharacterEh>:

void LCD_Display::LCD_Character(unsigned char data_00)        //function to output characters towards LCD
{
	//LCDER_port = ( LCDER_port & 0x0F) | (data_00 & 0xF0 );    //Sending upper nibble
	LCDER_port=(LCDER_port & 0b11000011) | ((data_00 & 0xF0)>>2);
     7be:	25 b1       	in	r18, 0x05	; 5
     7c0:	96 2f       	mov	r25, r22
     7c2:	90 7f       	andi	r25, 0xF0	; 240
     7c4:	89 2f       	mov	r24, r25
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	95 95       	asr	r25
     7ca:	87 95       	ror	r24
     7cc:	95 95       	asr	r25
     7ce:	87 95       	ror	r24
     7d0:	92 2f       	mov	r25, r18
     7d2:	93 7c       	andi	r25, 0xC3	; 195
     7d4:	89 2b       	or	r24, r25
     7d6:	85 b9       	out	0x05, r24	; 5
	LCDER_port |= (1<<Rsel);                                  //setting the pin0 of portB HIGH to read
     7d8:	85 b1       	in	r24, 0x05	; 5
     7da:	81 60       	ori	r24, 0x01	; 1
     7dc:	85 b9       	out	0x05, r24	; 5
	LCDER_port |=(1<<ENable);                                 //setting the pin1 of portB HIGH to read
     7de:	85 b1       	in	r24, 0x05	; 5
     7e0:	82 60       	ori	r24, 0x02	; 2
     7e2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	8a 95       	dec	r24
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <_ZN11LCD_Display13LCD_CharacterEh+0x28>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <_ZN11LCD_Display13LCD_CharacterEh+0x2e>
	_delay_us(1);
	LCDER_port &= ~(1<<ENable);                               //setting the pin1 of portB LOW to write
     7ec:	85 b1       	in	r24, 0x05	; 5
     7ee:	8d 7f       	andi	r24, 0xFD	; 253
     7f0:	85 b9       	out	0x05, r24	; 5
     7f2:	8f e8       	ldi	r24, 0x8F	; 143
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <_ZN11LCD_Display13LCD_CharacterEh+0x38>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <_ZN11LCD_Display13LCD_CharacterEh+0x3e>
     7fc:	00 00       	nop
	
	_delay_us(200);
		
	//LCDER_port = ( LCDER_port & 0x0F) | (data_00 <<4 );       //Sending lower nibble
	LCDER_port = (LCDER_port & 0b11000011) | ((data_00 & 0x0F)<<2);
     7fe:	85 b1       	in	r24, 0x05	; 5
     800:	6f 70       	andi	r22, 0x0F	; 15
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	66 0f       	add	r22, r22
     806:	77 1f       	adc	r23, r23
     808:	66 0f       	add	r22, r22
     80a:	77 1f       	adc	r23, r23
     80c:	83 7c       	andi	r24, 0xC3	; 195
     80e:	68 2b       	or	r22, r24
     810:	65 b9       	out	0x05, r22	; 5
	LCDER_port |= (1<< ENable);                               //setting the pin1 of portB HIGH to read
     812:	85 b1       	in	r24, 0x05	; 5
     814:	82 60       	ori	r24, 0x02	; 2
     816:	85 b9       	out	0x05, r24	; 5
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	9a 95       	dec	r25
     81c:	f1 f7       	brne	.-4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
	_delay_us(1);
	LCDER_port &= ~(1<<ENable);                               //setting the pin1 of portB LOW to write
     820:	85 b1       	in	r24, 0x05	; 5
     822:	8d 7f       	andi	r24, 0xFD	; 253
     824:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     826:	8f e9       	ldi	r24, 0x9F	; 159
     828:	9f e0       	ldi	r25, 0x0F	; 15
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     830:	00 00       	nop
     832:	08 95       	ret

00000834 <_ZN11LCD_Display10LCD_StringEPc>:
	_delay_ms(2);
}

void LCD_Display::LCD_String(char* string_00)                 //function to output the set of characters as a string
{
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	7c 01       	movw	r14, r24
     842:	8b 01       	movw	r16, r22
	for (int ci=0;string_00[ci] != 0; ci++)                   //for loop to accumulate characters to create string
     844:	c0 e0       	ldi	r28, 0x00	; 0
     846:	d0 e0       	ldi	r29, 0x00	; 0
     848:	f8 01       	movw	r30, r16
     84a:	ec 0f       	add	r30, r28
     84c:	fd 1f       	adc	r31, r29
     84e:	60 81       	ld	r22, Z
     850:	66 23       	and	r22, r22
     852:	29 f0       	breq	.+10     	; 0x85e <_ZN11LCD_Display10LCD_StringEPc+0x2a>
	{
		LCD_Character (string_00[ci]);                        //calling the above defined function to create the string using characters
     854:	c7 01       	movw	r24, r14
     856:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN11LCD_Display13LCD_CharacterEh>
	_delay_ms(2);
}

void LCD_Display::LCD_String(char* string_00)                 //function to output the set of characters as a string
{
	for (int ci=0;string_00[ci] != 0; ci++)                   //for loop to accumulate characters to create string
     85a:	21 96       	adiw	r28, 0x01	; 1
     85c:	f5 cf       	rjmp	.-22     	; 0x848 <_ZN11LCD_Display10LCD_StringEPc+0x14>
	{
		LCD_Character (string_00[ci]);                        //calling the above defined function to create the string using characters
	}
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	08 95       	ret

0000086c <_ZN11LCD_Display9LCD_ClearEv>:


void LCD_Display::LCD_Clear()                                 //function to clear the LCD after displaying the output
{
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	ec 01       	movw	r28, r24
	LCD_Commandgiver(0x01);                                   //Clear display screen
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
     878:	8f e9       	ldi	r24, 0x9F	; 159
     87a:	9f e0       	ldi	r25, 0x0F	; 15
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <_ZN11LCD_Display9LCD_ClearEv+0x10>
     880:	00 c0       	rjmp	.+0      	; 0x882 <_ZN11LCD_Display9LCD_ClearEv+0x16>
     882:	00 00       	nop
	_delay_ms(2);
	LCD_Commandgiver(0x80);                                   //Cursor at home position
     884:	60 e8       	ldi	r22, 0x80	; 128
     886:	ce 01       	movw	r24, r28
     888:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <_ZN11LCD_Display13LCD_String_xyEccPc>:

void LCD_Display::LCD_String_xy(char row_1, char position, char *string_00) //function to set the position of the LCD cursor
{
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	8c 01       	movw	r16, r24
     89c:	e9 01       	movw	r28, r18
	if (row_1 == 0 && position<16)
     89e:	61 11       	cpse	r22, r1
     8a0:	08 c0       	rjmp	.+16     	; 0x8b2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     8a2:	40 31       	cpi	r20, 0x10	; 16
     8a4:	30 f4       	brcc	.+12     	; 0x8b2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
	LCD_Commandgiver((position & 0x0F)| 0x80);                //Command of first row and required position<16
     8a6:	4f 70       	andi	r20, 0x0F	; 15
     8a8:	64 2f       	mov	r22, r20
     8aa:	60 68       	ori	r22, 0x80	; 128
     8ac:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
     8b0:	0a c0       	rjmp	.+20     	; 0x8c6 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
	else if (row_1 == 1 && position<16)
     8b2:	61 30       	cpi	r22, 0x01	; 1
     8b4:	41 f4       	brne	.+16     	; 0x8c6 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     8b6:	40 31       	cpi	r20, 0x10	; 16
     8b8:	30 f4       	brcc	.+12     	; 0x8c6 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
	LCD_Commandgiver((position &0x0F) | 0xC0);                //Command of first row and required position<16
     8ba:	4f 70       	andi	r20, 0x0F	; 15
     8bc:	64 2f       	mov	r22, r20
     8be:	60 6c       	ori	r22, 0xC0	; 192
     8c0:	c8 01       	movw	r24, r16
     8c2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_String(string_00);                                    //calling the above defined function
     8c6:	be 01       	movw	r22, r28
     8c8:	c8 01       	movw	r24, r16
     8ca:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN11LCD_Display10LCD_StringEPc>
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	08 95       	ret

000008d8 <main>:
 AlarmClock alarmclock;
 menu MENU;

int main(void)
{
	lcd.LCD_Initializer();                                     //alization Initiof LCD
     8d8:	85 e5       	ldi	r24, 0x55	; 85
     8da:	97 e0       	ldi	r25, 0x07	; 7
     8dc:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN11LCD_Display15LCD_InitializerEv>
	rtc.month = 0x05;
	rtc.year = 0x21;	//27th May 2021
	
	DS1307.set_time(&rtc);*/
                                               //0x38=0b00111000 set d3,d4,d5 as high so it can read the value(button's)
	MENU.display();
     8e0:	84 e5       	ldi	r24, 0x54	; 84
     8e2:	97 e0       	ldi	r25, 0x07	; 7
     8e4:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
	//lcd.LCD_String();
	while (1)
	{
		
		MENU.okbtn();
     8e8:	84 e5       	ldi	r24, 0x54	; 84
     8ea:	97 e0       	ldi	r25, 0x07	; 7
     8ec:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN4menu5okbtnEv>
		MENU.upbtn();
     8f0:	84 e5       	ldi	r24, 0x54	; 84
     8f2:	97 e0       	ldi	r25, 0x07	; 7
     8f4:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN4menu5upbtnEv>
		MENU.dwnbtn();
     8f8:	84 e5       	ldi	r24, 0x54	; 84
     8fa:	97 e0       	ldi	r25, 0x07	; 7
     8fc:	0e 94 66 06 	call	0xccc	; 0xccc <_ZN4menu6dwnbtnEv>
		MENU.backbtn();
     900:	84 e5       	ldi	r24, 0x54	; 84
     902:	97 e0       	ldi	r25, 0x07	; 7
     904:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN4menu7backbtnEv>
     908:	ef cf       	rjmp	.-34     	; 0x8e8 <main+0x10>

0000090a <_ZN4menu7displayEv>:
char reset[][16] = {"reset all"};

int alarms[10][2]={};

void menu::display(){
	if (set == 0){
     90a:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <set>
     90e:	90 91 62 07 	lds	r25, 0x0762	; 0x800762 <set+0x1>
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	49 f4       	brne	.+18     	; 0x928 <_ZN4menu7displayEv+0x1e>
		/*lcd_2.LCD_Clear();
		lcd_2.LCD_String(initialdis[0]);                //Write string on 1st line of LCD
		lcd_2.LCD_Commandgiver(0xC0);                        //Go to 2nd line
		lcd_2.LCD_String(initialdis[1]);
		_delay_ms(1000);*/
		lcd_2.LCD_Clear();
     916:	81 e7       	ldi	r24, 0x71	; 113
     918:	97 e0       	ldi	r25, 0x07	; 7
     91a:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN11LCD_Display9LCD_ClearEv>
		alarmclock_1.displayTime();
     91e:	83 e6       	ldi	r24, 0x63	; 99
     920:	97 e0       	ldi	r25, 0x07	; 7
     922:	0e 94 7b 00 	call	0xf6	; 0xf6 <_ZN10AlarmClock11displayTimeEv>
     926:	08 95       	ret
		//lcd_2.LCD_Clear();
	}
	else if (set == 1){
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	91 05       	cpc	r25, r1
     92c:	c1 f5       	brne	.+112    	; 0x99e <_ZN4menu7displayEv+0x94>
		lcd_2.LCD_Clear();
     92e:	81 e7       	ldi	r24, 0x71	; 113
     930:	97 e0       	ldi	r25, 0x07	; 7
     932:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN11LCD_Display9LCD_ClearEv>
		lcd_2.LCD_String(Menu[currentscreenset1][0]);                //Write string on 1st line of LCD
     936:	60 91 5f 07 	lds	r22, 0x075F	; 0x80075f <currentscreenset1>
     93a:	70 91 60 07 	lds	r23, 0x0760	; 0x800760 <currentscreenset1+0x1>
     93e:	66 0f       	add	r22, r22
     940:	77 1f       	adc	r23, r23
     942:	62 95       	swap	r22
     944:	72 95       	swap	r23
     946:	70 7f       	andi	r23, 0xF0	; 240
     948:	76 27       	eor	r23, r22
     94a:	60 7f       	andi	r22, 0xF0	; 240
     94c:	76 27       	eor	r23, r22
     94e:	60 5b       	subi	r22, 0xB0	; 176
     950:	7d 4f       	sbci	r23, 0xFD	; 253
     952:	81 e7       	ldi	r24, 0x71	; 113
     954:	97 e0       	ldi	r25, 0x07	; 7
     956:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN11LCD_Display10LCD_StringEPc>
		lcd_2.LCD_Commandgiver(0xC0);                        //Go to 2nd line
     95a:	60 ec       	ldi	r22, 0xC0	; 192
     95c:	81 e7       	ldi	r24, 0x71	; 113
     95e:	97 e0       	ldi	r25, 0x07	; 7
     960:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd_2.LCD_String(Menu[currentscreenset1][1]);
     964:	60 91 5f 07 	lds	r22, 0x075F	; 0x80075f <currentscreenset1>
     968:	70 91 60 07 	lds	r23, 0x0760	; 0x800760 <currentscreenset1+0x1>
     96c:	66 0f       	add	r22, r22
     96e:	77 1f       	adc	r23, r23
     970:	62 95       	swap	r22
     972:	72 95       	swap	r23
     974:	70 7f       	andi	r23, 0xF0	; 240
     976:	76 27       	eor	r23, r22
     978:	60 7f       	andi	r22, 0xF0	; 240
     97a:	76 27       	eor	r23, r22
     97c:	60 5a       	subi	r22, 0xA0	; 160
     97e:	7d 4f       	sbci	r23, 0xFD	; 253
     980:	81 e7       	ldi	r24, 0x71	; 113
     982:	97 e0       	ldi	r25, 0x07	; 7
     984:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN11LCD_Display10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     988:	80 e1       	ldi	r24, 0x10	; 16
     98a:	97 e2       	ldi	r25, 0x27	; 39
		while(__ticks)
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	09 f4       	brne	.+2      	; 0x992 <_ZN4menu7displayEv+0x88>
     990:	07 c1       	rjmp	.+526    	; 0xba0 <_ZN4menu7displayEv+0x296>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     992:	e8 ec       	ldi	r30, 0xC8	; 200
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	31 97       	sbiw	r30, 0x01	; 1
     998:	f1 f7       	brne	.-4      	; 0x996 <_ZN4menu7displayEv+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	f7 cf       	rjmp	.-18     	; 0x98c <_ZN4menu7displayEv+0x82>
		_delay_ms(1000);
	}
	else if ((set == 2) & (currentscreenset1 == 0)){
     99e:	21 e0       	ldi	r18, 0x01	; 1
     9a0:	02 97       	sbiw	r24, 0x02	; 2
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <_ZN4menu7displayEv+0x9c>
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <currentscreenset1>
     9aa:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <currentscreenset1+0x1>
     9ae:	31 e0       	ldi	r19, 0x01	; 1
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <_ZN4menu7displayEv+0xac>
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	33 23       	and	r19, r19
     9b8:	39 f0       	breq	.+14     	; 0x9c8 <_ZN4menu7displayEv+0xbe>
     9ba:	22 23       	and	r18, r18
     9bc:	29 f0       	breq	.+10     	; 0x9c8 <_ZN4menu7displayEv+0xbe>
		lcd_2.LCD_Clear();
     9be:	81 e7       	ldi	r24, 0x71	; 113
     9c0:	97 e0       	ldi	r25, 0x07	; 7
     9c2:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN11LCD_Display9LCD_ClearEv>
     9c6:	08 95       	ret
		_delay_ms(1000);*/
		
		//int alarm=alarmclock_1.setNewAlarm();
		
	}
	else if ((set == 2) & (currentscreenset1 == 1)){
     9c8:	31 e0       	ldi	r19, 0x01	; 1
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	91 05       	cpc	r25, r1
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <_ZN4menu7displayEv+0xc8>
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	33 23       	and	r19, r19
     9d4:	d1 f1       	breq	.+116    	; 0xa4a <_ZN4menu7displayEv+0x140>
     9d6:	22 23       	and	r18, r18
     9d8:	c1 f1       	breq	.+112    	; 0xa4a <_ZN4menu7displayEv+0x140>
		lcd_2.LCD_Clear();
     9da:	81 e7       	ldi	r24, 0x71	; 113
     9dc:	97 e0       	ldi	r25, 0x07	; 7
     9de:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN11LCD_Display9LCD_ClearEv>
		lcd_2.LCD_String(allalarms[currentscreenset21][0]);                //Write string on 1st line of LCD
     9e2:	60 91 5d 07 	lds	r22, 0x075D	; 0x80075d <currentscreenset21>
     9e6:	70 91 5e 07 	lds	r23, 0x075E	; 0x80075e <currentscreenset21+0x1>
     9ea:	66 0f       	add	r22, r22
     9ec:	77 1f       	adc	r23, r23
     9ee:	62 95       	swap	r22
     9f0:	72 95       	swap	r23
     9f2:	70 7f       	andi	r23, 0xF0	; 240
     9f4:	76 27       	eor	r23, r22
     9f6:	60 7f       	andi	r22, 0xF0	; 240
     9f8:	76 27       	eor	r23, r22
     9fa:	60 55       	subi	r22, 0x50	; 80
     9fc:	7e 4f       	sbci	r23, 0xFE	; 254
     9fe:	81 e7       	ldi	r24, 0x71	; 113
     a00:	97 e0       	ldi	r25, 0x07	; 7
     a02:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN11LCD_Display10LCD_StringEPc>
		lcd_2.LCD_Commandgiver(0xC0);                        //Go to 2nd line
     a06:	60 ec       	ldi	r22, 0xC0	; 192
     a08:	81 e7       	ldi	r24, 0x71	; 113
     a0a:	97 e0       	ldi	r25, 0x07	; 7
     a0c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd_2.LCD_String(allalarms[currentscreenset21][1]);
     a10:	60 91 5d 07 	lds	r22, 0x075D	; 0x80075d <currentscreenset21>
     a14:	70 91 5e 07 	lds	r23, 0x075E	; 0x80075e <currentscreenset21+0x1>
     a18:	66 0f       	add	r22, r22
     a1a:	77 1f       	adc	r23, r23
     a1c:	62 95       	swap	r22
     a1e:	72 95       	swap	r23
     a20:	70 7f       	andi	r23, 0xF0	; 240
     a22:	76 27       	eor	r23, r22
     a24:	60 7f       	andi	r22, 0xF0	; 240
     a26:	76 27       	eor	r23, r22
     a28:	60 54       	subi	r22, 0x40	; 64
     a2a:	7e 4f       	sbci	r23, 0xFE	; 254
     a2c:	81 e7       	ldi	r24, 0x71	; 113
     a2e:	97 e0       	ldi	r25, 0x07	; 7
     a30:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN11LCD_Display10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a34:	80 e1       	ldi	r24, 0x10	; 16
     a36:	97 e2       	ldi	r25, 0x27	; 39
		while(__ticks)
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	09 f4       	brne	.+2      	; 0xa3e <_ZN4menu7displayEv+0x134>
     a3c:	b1 c0       	rjmp	.+354    	; 0xba0 <_ZN4menu7displayEv+0x296>
     a3e:	e8 ec       	ldi	r30, 0xC8	; 200
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <_ZN4menu7displayEv+0x138>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	f7 cf       	rjmp	.-18     	; 0xa38 <_ZN4menu7displayEv+0x12e>
		_delay_ms(1000);
	}
	else if ((set == 2) & (currentscreenset1 == 2)){
     a4a:	31 e0       	ldi	r19, 0x01	; 1
     a4c:	82 30       	cpi	r24, 0x02	; 2
     a4e:	91 05       	cpc	r25, r1
     a50:	09 f0       	breq	.+2      	; 0xa54 <_ZN4menu7displayEv+0x14a>
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	33 23       	and	r19, r19
     a56:	39 f0       	breq	.+14     	; 0xa66 <_ZN4menu7displayEv+0x15c>
     a58:	22 23       	and	r18, r18
     a5a:	29 f0       	breq	.+10     	; 0xa66 <_ZN4menu7displayEv+0x15c>
		//lcd_2.LCD_Clear();
		/*lcd_2.LCD_String(settime[0]);                //Write string on 1st line of LCD
		lcd_2.LCD_Commandgiver(0xC0);                        //Go to 2nd line
		lcd_2.LCD_String(settime[1]);
		_delay_ms(1000);*/
		alarmclock_1.setTimetoRTC();
     a5c:	83 e6       	ldi	r24, 0x63	; 99
     a5e:	97 e0       	ldi	r25, 0x07	; 7
     a60:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN10AlarmClock12setTimetoRTCEv>
     a64:	08 95       	ret
	}
	else if ((set == 2) & (currentscreenset1 == 3)){
     a66:	31 e0       	ldi	r19, 0x01	; 1
     a68:	83 30       	cpi	r24, 0x03	; 3
     a6a:	91 05       	cpc	r25, r1
     a6c:	09 f0       	breq	.+2      	; 0xa70 <_ZN4menu7displayEv+0x166>
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	33 23       	and	r19, r19
     a72:	09 f4       	brne	.+2      	; 0xa76 <_ZN4menu7displayEv+0x16c>
     a74:	6e c0       	rjmp	.+220    	; 0xb52 <_ZN4menu7displayEv+0x248>
     a76:	22 23       	and	r18, r18
     a78:	09 f4       	brne	.+2      	; 0xa7c <_ZN4menu7displayEv+0x172>
     a7a:	6b c0       	rjmp	.+214    	; 0xb52 <_ZN4menu7displayEv+0x248>
		lcd_2.LCD_Clear();
     a7c:	81 e7       	ldi	r24, 0x71	; 113
     a7e:	97 e0       	ldi	r25, 0x07	; 7
     a80:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN11LCD_Display9LCD_ClearEv>
		lcd_2.LCD_String(alarmtone[currentscreenset23][0]);                //Write string on 1st line of LCD
     a84:	60 91 5b 07 	lds	r22, 0x075B	; 0x80075b <currentscreenset23>
     a88:	70 91 5c 07 	lds	r23, 0x075C	; 0x80075c <currentscreenset23+0x1>
     a8c:	66 0f       	add	r22, r22
     a8e:	77 1f       	adc	r23, r23
     a90:	62 95       	swap	r22
     a92:	72 95       	swap	r23
     a94:	70 7f       	andi	r23, 0xF0	; 240
     a96:	76 27       	eor	r23, r22
     a98:	60 7f       	andi	r22, 0xF0	; 240
     a9a:	76 27       	eor	r23, r22
     a9c:	60 5f       	subi	r22, 0xF0	; 240
     a9e:	7e 4f       	sbci	r23, 0xFE	; 254
     aa0:	81 e7       	ldi	r24, 0x71	; 113
     aa2:	97 e0       	ldi	r25, 0x07	; 7
     aa4:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN11LCD_Display10LCD_StringEPc>
		lcd_2.LCD_Commandgiver(0xC0);                        //Go to 2nd line
     aa8:	60 ec       	ldi	r22, 0xC0	; 192
     aaa:	81 e7       	ldi	r24, 0x71	; 113
     aac:	97 e0       	ldi	r25, 0x07	; 7
     aae:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd_2.LCD_String(alarmtone[currentscreenset23][1]);
     ab2:	60 91 5b 07 	lds	r22, 0x075B	; 0x80075b <currentscreenset23>
     ab6:	70 91 5c 07 	lds	r23, 0x075C	; 0x80075c <currentscreenset23+0x1>
     aba:	66 0f       	add	r22, r22
     abc:	77 1f       	adc	r23, r23
     abe:	62 95       	swap	r22
     ac0:	72 95       	swap	r23
     ac2:	70 7f       	andi	r23, 0xF0	; 240
     ac4:	76 27       	eor	r23, r22
     ac6:	60 7f       	andi	r22, 0xF0	; 240
     ac8:	76 27       	eor	r23, r22
     aca:	60 5e       	subi	r22, 0xE0	; 224
     acc:	7e 4f       	sbci	r23, 0xFE	; 254
     ace:	81 e7       	ldi	r24, 0x71	; 113
     ad0:	97 e0       	ldi	r25, 0x07	; 7
     ad2:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN11LCD_Display10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ad6:	80 e1       	ldi	r24, 0x10	; 16
     ad8:	97 e2       	ldi	r25, 0x27	; 39
		while(__ticks)
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	31 f0       	breq	.+12     	; 0xaea <_ZN4menu7displayEv+0x1e0>
     ade:	e8 ec       	ldi	r30, 0xC8	; 200
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <_ZN4menu7displayEv+0x1d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f8 cf       	rjmp	.-16     	; 0xada <_ZN4menu7displayEv+0x1d0>
		_delay_ms(1000);
		if (currentscreenset23==0){
     aea:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <currentscreenset23>
     aee:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <currentscreenset23+0x1>
     af2:	00 97       	sbiw	r24, 0x00	; 0
     af4:	39 f4       	brne	.+14     	; 0xb04 <_ZN4menu7displayEv+0x1fa>
			music.tone(0);
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	85 e6       	ldi	r24, 0x65	; 101
     afc:	97 e0       	ldi	r25, 0x07	; 7
     afe:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN15music_notations4toneEi>
     b02:	08 95       	ret
		}
		else if (currentscreenset23==1){
     b04:	81 30       	cpi	r24, 0x01	; 1
     b06:	91 05       	cpc	r25, r1
     b08:	39 f4       	brne	.+14     	; 0xb18 <_ZN4menu7displayEv+0x20e>
			music.tone(1);
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	85 e6       	ldi	r24, 0x65	; 101
     b10:	97 e0       	ldi	r25, 0x07	; 7
     b12:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN15music_notations4toneEi>
     b16:	08 95       	ret
		}
		else if (currentscreenset23==2){
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	91 05       	cpc	r25, r1
     b1c:	39 f4       	brne	.+14     	; 0xb2c <_ZN4menu7displayEv+0x222>
			music.tone(2);
     b1e:	62 e0       	ldi	r22, 0x02	; 2
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	85 e6       	ldi	r24, 0x65	; 101
     b24:	97 e0       	ldi	r25, 0x07	; 7
     b26:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN15music_notations4toneEi>
     b2a:	08 95       	ret
		}
		else if (currentscreenset23==3){
     b2c:	83 30       	cpi	r24, 0x03	; 3
     b2e:	91 05       	cpc	r25, r1
     b30:	39 f4       	brne	.+14     	; 0xb40 <_ZN4menu7displayEv+0x236>
			music.tone(3);
     b32:	63 e0       	ldi	r22, 0x03	; 3
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	85 e6       	ldi	r24, 0x65	; 101
     b38:	97 e0       	ldi	r25, 0x07	; 7
     b3a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN15music_notations4toneEi>
     b3e:	08 95       	ret
		}
		else if (currentscreenset23==4){
     b40:	04 97       	sbiw	r24, 0x04	; 4
     b42:	71 f5       	brne	.+92     	; 0xba0 <_ZN4menu7displayEv+0x296>
			music.tone(4);
     b44:	64 e0       	ldi	r22, 0x04	; 4
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	85 e6       	ldi	r24, 0x65	; 101
     b4a:	97 e0       	ldi	r25, 0x07	; 7
     b4c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN15music_notations4toneEi>
     b50:	08 95       	ret
		}
	}
	else if ((set == 2) & (currentscreenset1 == 4)){
     b52:	31 e0       	ldi	r19, 0x01	; 1
     b54:	04 97       	sbiw	r24, 0x04	; 4
     b56:	09 f0       	breq	.+2      	; 0xb5a <_ZN4menu7displayEv+0x250>
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	33 23       	and	r19, r19
     b5c:	09 f1       	breq	.+66     	; 0xba0 <_ZN4menu7displayEv+0x296>
     b5e:	22 23       	and	r18, r18
     b60:	f9 f0       	breq	.+62     	; 0xba0 <_ZN4menu7displayEv+0x296>
		lcd_2.LCD_Clear();
     b62:	81 e7       	ldi	r24, 0x71	; 113
     b64:	97 e0       	ldi	r25, 0x07	; 7
     b66:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN11LCD_Display9LCD_ClearEv>
		lcd_2.LCD_String(reset[0]);                //Write string on 1st line of LCD
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	81 e7       	ldi	r24, 0x71	; 113
     b70:	97 e0       	ldi	r25, 0x07	; 7
     b72:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN11LCD_Display10LCD_StringEPc>
		lcd_2.LCD_Commandgiver(0xC0);                        //Go to 2nd line
     b76:	60 ec       	ldi	r22, 0xC0	; 192
     b78:	81 e7       	ldi	r24, 0x71	; 113
     b7a:	97 e0       	ldi	r25, 0x07	; 7
     b7c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd_2.LCD_String(reset[0]);
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	71 e0       	ldi	r23, 0x01	; 1
     b84:	81 e7       	ldi	r24, 0x71	; 113
     b86:	97 e0       	ldi	r25, 0x07	; 7
     b88:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN11LCD_Display10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b8c:	80 e1       	ldi	r24, 0x10	; 16
     b8e:	97 e2       	ldi	r25, 0x27	; 39
		while(__ticks)
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	31 f0       	breq	.+12     	; 0xba0 <_ZN4menu7displayEv+0x296>
     b94:	e8 ec       	ldi	r30, 0xC8	; 200
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <_ZN4menu7displayEv+0x28e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f8 cf       	rjmp	.-16     	; 0xb90 <_ZN4menu7displayEv+0x286>
     ba0:	08 95       	ret

00000ba2 <_ZN4menu5upbtnEv>:
		_delay_ms(1000);
	}
}
void menu::upbtn(){
     ba2:	ac 01       	movw	r20, r24
	if (PINC &(1<<Up)){
     ba4:	30 9b       	sbis	0x06, 0	; 6
     ba6:	91 c0       	rjmp	.+290    	; 0xcca <_ZN4menu5upbtnEv+0x128>
		if ((set == 1) & (currentscreenset1==0)){
     ba8:	e0 91 61 07 	lds	r30, 0x0761	; 0x800761 <set>
     bac:	f0 91 62 07 	lds	r31, 0x0762	; 0x800762 <set+0x1>
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	e1 30       	cpi	r30, 0x01	; 1
     bb4:	f1 05       	cpc	r31, r1
     bb6:	09 f0       	breq	.+2      	; 0xbba <_ZN4menu5upbtnEv+0x18>
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	20 91 5f 07 	lds	r18, 0x075F	; 0x80075f <currentscreenset1>
     bbe:	30 91 60 07 	lds	r19, 0x0760	; 0x800760 <currentscreenset1+0x1>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	21 15       	cp	r18, r1
     bc6:	31 05       	cpc	r19, r1
     bc8:	09 f0       	breq	.+2      	; 0xbcc <_ZN4menu5upbtnEv+0x2a>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	ba 01       	movw	r22, r20
     bce:	88 23       	and	r24, r24
     bd0:	61 f0       	breq	.+24     	; 0xbea <_ZN4menu5upbtnEv+0x48>
     bd2:	99 23       	and	r25, r25
     bd4:	51 f0       	breq	.+20     	; 0xbea <_ZN4menu5upbtnEv+0x48>
			currentscreenset1=numofscreens1-1;
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	90 93 60 07 	sts	0x0760, r25	; 0x800760 <currentscreenset1+0x1>
     bde:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <currentscreenset1>
			display();
     be2:	ca 01       	movw	r24, r20
     be4:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     be8:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 0)){
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	21 15       	cp	r18, r1
     bee:	31 05       	cpc	r19, r1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <_ZN4menu5upbtnEv+0x52>
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	88 23       	and	r24, r24
     bf6:	61 f0       	breq	.+24     	; 0xc10 <_ZN4menu5upbtnEv+0x6e>
     bf8:	99 23       	and	r25, r25
     bfa:	51 f0       	breq	.+20     	; 0xc10 <_ZN4menu5upbtnEv+0x6e>
			currentscreenset1 -= 1;
     bfc:	21 50       	subi	r18, 0x01	; 1
     bfe:	31 09       	sbc	r19, r1
     c00:	30 93 60 07 	sts	0x0760, r19	; 0x800760 <currentscreenset1+0x1>
     c04:	20 93 5f 07 	sts	0x075F, r18	; 0x80075f <currentscreenset1>
			display();
     c08:	cb 01       	movw	r24, r22
     c0a:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     c0e:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 == 0)){
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	32 97       	sbiw	r30, 0x02	; 2
     c14:	09 f0       	breq	.+2      	; 0xc18 <_ZN4menu5upbtnEv+0x76>
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	21 30       	cpi	r18, 0x01	; 1
     c1c:	31 05       	cpc	r19, r1
     c1e:	09 f0       	breq	.+2      	; 0xc22 <_ZN4menu5upbtnEv+0x80>
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	94 23       	and	r25, r20
     c24:	e0 91 5d 07 	lds	r30, 0x075D	; 0x80075d <currentscreenset21>
     c28:	f0 91 5e 07 	lds	r31, 0x075E	; 0x80075e <currentscreenset21+0x1>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	30 97       	sbiw	r30, 0x00	; 0
     c30:	09 f0       	breq	.+2      	; 0xc34 <_ZN4menu5upbtnEv+0x92>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	99 23       	and	r25, r25
     c36:	61 f0       	breq	.+24     	; 0xc50 <_ZN4menu5upbtnEv+0xae>
     c38:	88 23       	and	r24, r24
     c3a:	51 f0       	breq	.+20     	; 0xc50 <_ZN4menu5upbtnEv+0xae>
			currentscreenset21=numofscreens21-1;
     c3c:	84 e0       	ldi	r24, 0x04	; 4
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	90 93 5e 07 	sts	0x075E, r25	; 0x80075e <currentscreenset21+0x1>
     c44:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <currentscreenset21>
			display();
     c48:	cb 01       	movw	r24, r22
     c4a:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     c4e:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 != 0)){
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	30 97       	sbiw	r30, 0x00	; 0
     c54:	09 f4       	brne	.+2      	; 0xc58 <_ZN4menu5upbtnEv+0xb6>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	99 23       	and	r25, r25
     c5a:	59 f0       	breq	.+22     	; 0xc72 <_ZN4menu5upbtnEv+0xd0>
     c5c:	88 23       	and	r24, r24
     c5e:	49 f0       	breq	.+18     	; 0xc72 <_ZN4menu5upbtnEv+0xd0>
			currentscreenset21 -= 1;
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	f0 93 5e 07 	sts	0x075E, r31	; 0x80075e <currentscreenset21+0x1>
     c66:	e0 93 5d 07 	sts	0x075D, r30	; 0x80075d <currentscreenset21>
			display();
     c6a:	cb 01       	movw	r24, r22
     c6c:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     c70:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 == 0)){
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	23 30       	cpi	r18, 0x03	; 3
     c76:	31 05       	cpc	r19, r1
     c78:	09 f0       	breq	.+2      	; 0xc7c <_ZN4menu5upbtnEv+0xda>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	48 23       	and	r20, r24
     c7e:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <currentscreenset23>
     c82:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <currentscreenset23+0x1>
     c86:	21 e0       	ldi	r18, 0x01	; 1
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	09 f0       	breq	.+2      	; 0xc8e <_ZN4menu5upbtnEv+0xec>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	44 23       	and	r20, r20
     c90:	61 f0       	breq	.+24     	; 0xcaa <_ZN4menu5upbtnEv+0x108>
     c92:	22 23       	and	r18, r18
     c94:	51 f0       	breq	.+20     	; 0xcaa <_ZN4menu5upbtnEv+0x108>
			currentscreenset23=numofscreens21-1;
     c96:	84 e0       	ldi	r24, 0x04	; 4
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	90 93 5c 07 	sts	0x075C, r25	; 0x80075c <currentscreenset23+0x1>
     c9e:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <currentscreenset23>
			display();
     ca2:	cb 01       	movw	r24, r22
     ca4:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     ca8:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 != 0)){
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	09 f4       	brne	.+2      	; 0xcb2 <_ZN4menu5upbtnEv+0x110>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	44 23       	and	r20, r20
     cb4:	51 f0       	breq	.+20     	; 0xcca <_ZN4menu5upbtnEv+0x128>
     cb6:	22 23       	and	r18, r18
     cb8:	41 f0       	breq	.+16     	; 0xcca <_ZN4menu5upbtnEv+0x128>
			currentscreenset23 -= 1;
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	90 93 5c 07 	sts	0x075C, r25	; 0x80075c <currentscreenset23+0x1>
     cc0:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <currentscreenset23>
			display();
     cc4:	cb 01       	movw	r24, r22
     cc6:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     cca:	08 95       	ret

00000ccc <_ZN4menu6dwnbtnEv>:
		}
	}
}
void menu::dwnbtn(){
	if (PINC &(1<<Down)){
     ccc:	31 9b       	sbis	0x06, 1	; 6
     cce:	89 c0       	rjmp	.+274    	; 0xde2 <_ZN4menu6dwnbtnEv+0x116>
		if ((set == 1) & (currentscreenset1==4)){
     cd0:	e0 91 61 07 	lds	r30, 0x0761	; 0x800761 <set>
     cd4:	f0 91 62 07 	lds	r31, 0x0762	; 0x800762 <set+0x1>
     cd8:	51 e0       	ldi	r21, 0x01	; 1
     cda:	e1 30       	cpi	r30, 0x01	; 1
     cdc:	f1 05       	cpc	r31, r1
     cde:	09 f0       	breq	.+2      	; 0xce2 <_ZN4menu6dwnbtnEv+0x16>
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	20 91 5f 07 	lds	r18, 0x075F	; 0x80075f <currentscreenset1>
     ce6:	30 91 60 07 	lds	r19, 0x0760	; 0x800760 <currentscreenset1+0x1>
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	24 30       	cpi	r18, 0x04	; 4
     cee:	31 05       	cpc	r19, r1
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <_ZN4menu6dwnbtnEv+0x28>
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	bc 01       	movw	r22, r24
     cf6:	44 23       	and	r20, r20
     cf8:	49 f0       	breq	.+18     	; 0xd0c <_ZN4menu6dwnbtnEv+0x40>
     cfa:	55 23       	and	r21, r21
     cfc:	39 f0       	breq	.+14     	; 0xd0c <_ZN4menu6dwnbtnEv+0x40>
			currentscreenset1=0;
     cfe:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <currentscreenset1+0x1>
     d02:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <currentscreenset1>
			display();
     d06:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     d0a:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 4)){
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	24 30       	cpi	r18, 0x04	; 4
     d10:	31 05       	cpc	r19, r1
     d12:	09 f4       	brne	.+2      	; 0xd16 <_ZN4menu6dwnbtnEv+0x4a>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	88 23       	and	r24, r24
     d18:	61 f0       	breq	.+24     	; 0xd32 <_ZN4menu6dwnbtnEv+0x66>
     d1a:	55 23       	and	r21, r21
     d1c:	51 f0       	breq	.+20     	; 0xd32 <_ZN4menu6dwnbtnEv+0x66>
			currentscreenset1 += 1;
     d1e:	2f 5f       	subi	r18, 0xFF	; 255
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	30 93 60 07 	sts	0x0760, r19	; 0x800760 <currentscreenset1+0x1>
     d26:	20 93 5f 07 	sts	0x075F, r18	; 0x80075f <currentscreenset1>
			display();
     d2a:	cb 01       	movw	r24, r22
     d2c:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     d30:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset21 == 4)){
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	32 97       	sbiw	r30, 0x02	; 2
     d36:	09 f0       	breq	.+2      	; 0xd3a <_ZN4menu6dwnbtnEv+0x6e>
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	21 30       	cpi	r18, 0x01	; 1
     d3e:	31 05       	cpc	r19, r1
     d40:	09 f0       	breq	.+2      	; 0xd44 <_ZN4menu6dwnbtnEv+0x78>
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	94 23       	and	r25, r20
     d46:	a0 91 5d 07 	lds	r26, 0x075D	; 0x80075d <currentscreenset21>
     d4a:	b0 91 5e 07 	lds	r27, 0x075E	; 0x80075e <currentscreenset21+0x1>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	a4 30       	cpi	r26, 0x04	; 4
     d52:	b1 05       	cpc	r27, r1
     d54:	09 f0       	breq	.+2      	; 0xd58 <_ZN4menu6dwnbtnEv+0x8c>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	99 23       	and	r25, r25
     d5a:	51 f0       	breq	.+20     	; 0xd70 <_ZN4menu6dwnbtnEv+0xa4>
     d5c:	88 23       	and	r24, r24
     d5e:	41 f0       	breq	.+16     	; 0xd70 <_ZN4menu6dwnbtnEv+0xa4>
			currentscreenset21=0;
     d60:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <currentscreenset21+0x1>
     d64:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <currentscreenset21>
			display();
     d68:	cb 01       	movw	r24, r22
     d6a:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     d6e:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==1) & (currentscreenset23 != 4)){
     d70:	e0 91 5b 07 	lds	r30, 0x075B	; 0x80075b <currentscreenset23>
     d74:	f0 91 5c 07 	lds	r31, 0x075C	; 0x80075c <currentscreenset23+0x1>
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	e4 30       	cpi	r30, 0x04	; 4
     d7c:	f1 05       	cpc	r31, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <_ZN4menu6dwnbtnEv+0xb6>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	99 23       	and	r25, r25
     d84:	59 f0       	breq	.+22     	; 0xd9c <_ZN4menu6dwnbtnEv+0xd0>
     d86:	88 23       	and	r24, r24
     d88:	49 f0       	breq	.+18     	; 0xd9c <_ZN4menu6dwnbtnEv+0xd0>
			currentscreenset21 += 1;
     d8a:	11 96       	adiw	r26, 0x01	; 1
     d8c:	b0 93 5e 07 	sts	0x075E, r27	; 0x80075e <currentscreenset21+0x1>
     d90:	a0 93 5d 07 	sts	0x075D, r26	; 0x80075d <currentscreenset21>
			display();
     d94:	cb 01       	movw	r24, r22
     d96:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     d9a:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 == 4)){
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	23 30       	cpi	r18, 0x03	; 3
     da0:	31 05       	cpc	r19, r1
     da2:	09 f0       	breq	.+2      	; 0xda6 <_ZN4menu6dwnbtnEv+0xda>
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	49 23       	and	r20, r25
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	e4 30       	cpi	r30, 0x04	; 4
     dac:	f1 05       	cpc	r31, r1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <_ZN4menu6dwnbtnEv+0xe6>
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	44 23       	and	r20, r20
     db4:	51 f0       	breq	.+20     	; 0xdca <_ZN4menu6dwnbtnEv+0xfe>
     db6:	99 23       	and	r25, r25
     db8:	41 f0       	breq	.+16     	; 0xdca <_ZN4menu6dwnbtnEv+0xfe>
			currentscreenset23 = 0;
     dba:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <currentscreenset23+0x1>
     dbe:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <currentscreenset23>
			display();
     dc2:	cb 01       	movw	r24, r22
     dc4:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     dc8:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==3) & (currentscreenset23 != 4)){
     dca:	88 23       	and	r24, r24
     dcc:	51 f0       	breq	.+20     	; 0xde2 <_ZN4menu6dwnbtnEv+0x116>
     dce:	44 23       	and	r20, r20
     dd0:	41 f0       	breq	.+16     	; 0xde2 <_ZN4menu6dwnbtnEv+0x116>
			currentscreenset23 += 1;
     dd2:	31 96       	adiw	r30, 0x01	; 1
     dd4:	f0 93 5c 07 	sts	0x075C, r31	; 0x80075c <currentscreenset23+0x1>
     dd8:	e0 93 5b 07 	sts	0x075B, r30	; 0x80075b <currentscreenset23>
			display();
     ddc:	cb 01       	movw	r24, r22
     dde:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     de2:	08 95       	ret

00000de4 <_ZN4menu5okbtnEv>:
		}
	}
}
void menu::okbtn(){
	if (PINC &(1<<Ok)){
     de4:	32 9b       	sbis	0x06, 2	; 6
     de6:	16 c0       	rjmp	.+44     	; 0xe14 <_ZN4menu5okbtnEv+0x30>
		if (set==2){
     de8:	20 91 61 07 	lds	r18, 0x0761	; 0x800761 <set>
     dec:	30 91 62 07 	lds	r19, 0x0762	; 0x800762 <set+0x1>
     df0:	22 30       	cpi	r18, 0x02	; 2
     df2:	31 05       	cpc	r19, r1
     df4:	39 f4       	brne	.+14     	; 0xe04 <_ZN4menu5okbtnEv+0x20>
			set = 0;
     df6:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <set+0x1>
     dfa:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <set>
		display();}
     dfe:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     e02:	08 95       	ret
		else {
			set+= 1;
     e04:	2f 5f       	subi	r18, 0xFF	; 255
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	30 93 62 07 	sts	0x0762, r19	; 0x800762 <set+0x1>
     e0c:	20 93 61 07 	sts	0x0761, r18	; 0x800761 <set>
		display();}
     e10:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     e14:	08 95       	ret

00000e16 <_ZN4menu7backbtnEv>:
	}
}
void menu::backbtn(){
	if (PINC &(1<<Back)){
     e16:	33 9b       	sbis	0x06, 3	; 6
     e18:	16 c0       	rjmp	.+44     	; 0xe46 <_ZN4menu7backbtnEv+0x30>
		if (set == 0){
     e1a:	20 91 61 07 	lds	r18, 0x0761	; 0x800761 <set>
     e1e:	30 91 62 07 	lds	r19, 0x0762	; 0x800762 <set+0x1>
     e22:	21 15       	cp	r18, r1
     e24:	31 05       	cpc	r19, r1
     e26:	39 f4       	brne	.+14     	; 0xe36 <_ZN4menu7backbtnEv+0x20>
			set = 0;
     e28:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <set+0x1>
     e2c:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <set>
			display();
     e30:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     e34:	08 95       	ret
		}
		else {
			set-= 1;
     e36:	21 50       	subi	r18, 0x01	; 1
     e38:	31 09       	sbc	r19, r1
     e3a:	30 93 62 07 	sts	0x0762, r19	; 0x800762 <set+0x1>
     e3e:	20 93 61 07 	sts	0x0761, r18	; 0x800761 <set>
			display();
     e42:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4menu7displayEv>
     e46:	08 95       	ret

00000e48 <_ZN15music_notations11playthenoteEff>:
int sizeofstarwars = sizeof(StarWars)/sizeof(StarWars[0]);
int sizeofcoffindance = sizeof(CoffinDance)/sizeof(CoffinDance[0]);
int sizeoftakeonme = sizeof(TakeOnMe)/sizeof(TakeOnMe[0]);

void music_notations::playthenote(float frequency, float duration)
{
     e48:	4f 92       	push	r4
     e4a:	5f 92       	push	r5
     e4c:	6f 92       	push	r6
     e4e:	7f 92       	push	r7
     e50:	8f 92       	push	r8
     e52:	9f 92       	push	r9
     e54:	af 92       	push	r10
     e56:	bf 92       	push	r11
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	00 d0       	rcall	.+0      	; 0xe6a <_ZN15music_notations11playthenoteEff+0x22>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <_ZN15music_notations11playthenoteEff+0x24>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	6a 01       	movw	r12, r20
     e72:	7b 01       	movw	r14, r22
     e74:	48 01       	movw	r8, r16
     e76:	59 01       	movw	r10, r18
	float period;
	
	// "period" is the wavelength calculated from frequency using the formula "period" = 1 / f.
	// We output 5 V for a length of time determined by half period (period/2), and then output 0 V, for the same length of time.
	
	if (frequency != 0){
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	a9 01       	movw	r20, r18
     e7e:	c7 01       	movw	r24, r14
     e80:	b6 01       	movw	r22, r12
     e82:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__cmpsf2>
     e86:	88 23       	and	r24, r24
     e88:	09 f4       	brne	.+2      	; 0xe8c <_ZN15music_notations11playthenoteEff+0x44>
     e8a:	b0 c0       	rjmp	.+352    	; 0xfec <_ZN15music_notations11playthenoteEff+0x1a4>
		period=(1/frequency)*1000;  // period in mile seconds
     e8c:	a7 01       	movw	r20, r14
     e8e:	96 01       	movw	r18, r12
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	80 e8       	ldi	r24, 0x80	; 128
     e96:	9f e3       	ldi	r25, 0x3F	; 63
     e98:	0e 94 11 0a 	call	0x1422	; 0x1422 <__divsf3>
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4a e7       	ldi	r20, 0x7A	; 122
     ea2:	54 e4       	ldi	r21, 0x44	; 68
     ea4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     ea8:	6b 01       	movw	r12, r22
     eaa:	7c 01       	movw	r14, r24
		cycles=duration/period;
     eac:	9b 01       	movw	r18, r22
     eae:	ac 01       	movw	r20, r24
     eb0:	c5 01       	movw	r24, r10
     eb2:	b4 01       	movw	r22, r8
     eb4:	0e 94 11 0a 	call	0x1422	; 0x1422 <__divsf3>
     eb8:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fixsfsi>
     ebc:	2b 01       	movw	r4, r22
     ebe:	3c 01       	movw	r6, r24
		half_period = period/2;
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	c7 01       	movw	r24, r14
     eca:	b6 01       	movw	r22, r12
     ecc:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     ed0:	69 83       	std	Y+1, r22	; 0x01
     ed2:	7a 83       	std	Y+2, r23	; 0x02
     ed4:	8b 83       	std	Y+3, r24	; 0x03
     ed6:	9c 83       	std	Y+4, r25	; 0x04
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);
     ed8:	8a b1       	in	r24, 0x0a	; 10
     eda:	80 68       	ori	r24, 0x80	; 128
     edc:	8a b9       	out	0x0a, r24	; 10

		for (i=0;i<cycles;i++)
     ede:	81 2c       	mov	r8, r1
     ee0:	91 2c       	mov	r9, r1
     ee2:	54 01       	movw	r10, r8
     ee4:	84 14       	cp	r8, r4
     ee6:	95 04       	cpc	r9, r5
     ee8:	a6 04       	cpc	r10, r6
     eea:	b7 04       	cpc	r11, r7
     eec:	0c f0       	brlt	.+2      	; 0xef0 <_ZN15music_notations11playthenoteEff+0xa8>
     eee:	b8 c0       	rjmp	.+368    	; 0x1060 <_ZN15music_notations11playthenoteEff+0x218>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a ef       	ldi	r20, 0xFA	; 250
     ef6:	54 e4       	ldi	r21, 0x44	; 68
     ef8:	69 81       	ldd	r22, Y+1	; 0x01
     efa:	7a 81       	ldd	r23, Y+2	; 0x02
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     f04:	6b 01       	movw	r12, r22
     f06:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	5f e3       	ldi	r21, 0x3F	; 63
     f10:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__cmpsf2>
     f14:	88 23       	and	r24, r24
     f16:	2c f1       	brlt	.+74     	; 0xf62 <_ZN15music_notations11playthenoteEff+0x11a>
		__ticks = 1;
	else if (__tmp > 65535)
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	3f ef       	ldi	r19, 0xFF	; 255
     f1c:	4f e7       	ldi	r20, 0x7F	; 127
     f1e:	57 e4       	ldi	r21, 0x47	; 71
     f20:	c7 01       	movw	r24, r14
     f22:	b6 01       	movw	r22, r12
     f24:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     f28:	18 16       	cp	r1, r24
     f2a:	b4 f4       	brge	.+44     	; 0xf58 <_ZN15music_notations11playthenoteEff+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e2       	ldi	r20, 0x20	; 32
     f32:	51 e4       	ldi	r21, 0x41	; 65
     f34:	69 81       	ldd	r22, Y+1	; 0x01
     f36:	7a 81       	ldd	r23, Y+2	; 0x02
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	9c 81       	ldd	r25, Y+4	; 0x04
     f3c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     f40:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
		while(__ticks)
     f44:	61 15       	cp	r22, r1
     f46:	71 05       	cpc	r23, r1
     f48:	89 f0       	breq	.+34     	; 0xf6c <_ZN15music_notations11playthenoteEff+0x124>
     f4a:	88 ec       	ldi	r24, 0xC8	; 200
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <_ZN15music_notations11playthenoteEff+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f52:	61 50       	subi	r22, 0x01	; 1
     f54:	71 09       	sbc	r23, r1
     f56:	f6 cf       	rjmp	.-20     	; 0xf44 <_ZN15music_notations11playthenoteEff+0xfc>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	c7 01       	movw	r24, r14
     f5a:	b6 01       	movw	r22, r12
     f5c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <_ZN15music_notations11playthenoteEff+0x11e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	cb 01       	movw	r24, r22
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <_ZN15music_notations11playthenoteEff+0x120>
		{
			_delay_ms(half_period);
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
     f6c:	8b b1       	in	r24, 0x0b	; 11
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	8b b9       	out	0x0b, r24	; 11
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e8       	ldi	r20, 0x80	; 128
     f78:	5f e3       	ldi	r21, 0x3F	; 63
     f7a:	c7 01       	movw	r24, r14
     f7c:	b6 01       	movw	r22, r12
     f7e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__cmpsf2>
     f82:	88 23       	and	r24, r24
     f84:	2c f1       	brlt	.+74     	; 0xfd0 <_ZN15music_notations11playthenoteEff+0x188>
		__ticks = 1;
	else if (__tmp > 65535)
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	3f ef       	ldi	r19, 0xFF	; 255
     f8a:	4f e7       	ldi	r20, 0x7F	; 127
     f8c:	57 e4       	ldi	r21, 0x47	; 71
     f8e:	c7 01       	movw	r24, r14
     f90:	b6 01       	movw	r22, r12
     f92:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     f96:	18 16       	cp	r1, r24
     f98:	b4 f4       	brge	.+44     	; 0xfc6 <_ZN15music_notations11playthenoteEff+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e2       	ldi	r20, 0x20	; 32
     fa0:	51 e4       	ldi	r21, 0x41	; 65
     fa2:	69 81       	ldd	r22, Y+1	; 0x01
     fa4:	7a 81       	ldd	r23, Y+2	; 0x02
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     fae:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
		while(__ticks)
     fb2:	61 15       	cp	r22, r1
     fb4:	71 05       	cpc	r23, r1
     fb6:	89 f0       	breq	.+34     	; 0xfda <_ZN15music_notations11playthenoteEff+0x192>
     fb8:	88 ec       	ldi	r24, 0xC8	; 200
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <_ZN15music_notations11playthenoteEff+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc0:	61 50       	subi	r22, 0x01	; 1
     fc2:	71 09       	sbc	r23, r1
     fc4:	f6 cf       	rjmp	.-20     	; 0xfb2 <_ZN15music_notations11playthenoteEff+0x16a>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc6:	c7 01       	movw	r24, r14
     fc8:	b6 01       	movw	r22, r12
     fca:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <_ZN15music_notations11playthenoteEff+0x18c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	cb 01       	movw	r24, r22
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <_ZN15music_notations11playthenoteEff+0x18e>
			_delay_ms(half_period);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
     fda:	8b b1       	in	r24, 0x0b	; 11
     fdc:	8f 77       	andi	r24, 0x7F	; 127
     fde:	8b b9       	out	0x0b, r24	; 11
		cycles=duration/period;
		half_period = period/2;
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);

		for (i=0;i<cycles;i++)
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	88 1a       	sub	r8, r24
     fe4:	98 0a       	sbc	r9, r24
     fe6:	a8 0a       	sbc	r10, r24
     fe8:	b8 0a       	sbc	r11, r24
     fea:	7c cf       	rjmp	.-264    	; 0xee4 <_ZN15music_notations11playthenoteEff+0x9c>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a ef       	ldi	r20, 0xFA	; 250
     ff2:	54 e4       	ldi	r21, 0x44	; 68
     ff4:	c5 01       	movw	r24, r10
     ff6:	b4 01       	movw	r22, r8
     ff8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     ffc:	6b 01       	movw	r12, r22
     ffe:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e8       	ldi	r20, 0x80	; 128
    1006:	5f e3       	ldi	r21, 0x3F	; 63
    1008:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__cmpsf2>
    100c:	88 23       	and	r24, r24
    100e:	1c f1       	brlt	.+70     	; 0x1056 <_ZN15music_notations11playthenoteEff+0x20e>
		__ticks = 1;
	else if (__tmp > 65535)
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	c7 01       	movw	r24, r14
    101a:	b6 01       	movw	r22, r12
    101c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
    1020:	18 16       	cp	r1, r24
    1022:	a4 f4       	brge	.+40     	; 0x104c <_ZN15music_notations11playthenoteEff+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e2       	ldi	r20, 0x20	; 32
    102a:	51 e4       	ldi	r21, 0x41	; 65
    102c:	c5 01       	movw	r24, r10
    102e:	b4 01       	movw	r22, r8
    1030:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
    1034:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
		while(__ticks)
    1038:	61 15       	cp	r22, r1
    103a:	71 05       	cpc	r23, r1
    103c:	89 f0       	breq	.+34     	; 0x1060 <_ZN15music_notations11playthenoteEff+0x218>
    103e:	88 ec       	ldi	r24, 0xC8	; 200
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <_ZN15music_notations11playthenoteEff+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1046:	61 50       	subi	r22, 0x01	; 1
    1048:	71 09       	sbc	r23, r1
    104a:	f6 cf       	rjmp	.-20     	; 0x1038 <_ZN15music_notations11playthenoteEff+0x1f0>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104c:	c7 01       	movw	r24, r14
    104e:	b6 01       	movw	r22, r12
    1050:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
    1054:	02 c0       	rjmp	.+4      	; 0x105a <_ZN15music_notations11playthenoteEff+0x212>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	cb 01       	movw	r24, r22
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <_ZN15music_notations11playthenoteEff+0x214>
	else {
		_delay_ms(duration);   // rest
	}

	return;
}
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	cf 90       	pop	r12
    1078:	bf 90       	pop	r11
    107a:	af 90       	pop	r10
    107c:	9f 90       	pop	r9
    107e:	8f 90       	pop	r8
    1080:	7f 90       	pop	r7
    1082:	6f 90       	pop	r6
    1084:	5f 90       	pop	r5
    1086:	4f 90       	pop	r4
    1088:	08 95       	ret

0000108a <_ZN15music_notations13playthemelodyEPiS0_i>:
void music_notations::playthemelody(int Melody[], int MelodyDuration[], int size)
{
    108a:	2f 92       	push	r2
    108c:	3f 92       	push	r3
    108e:	4f 92       	push	r4
    1090:	5f 92       	push	r5
    1092:	6f 92       	push	r6
    1094:	7f 92       	push	r7
    1096:	8f 92       	push	r8
    1098:	9f 92       	push	r9
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	29 97       	sbiw	r28, 0x09	; 9
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	9f 83       	std	Y+7, r25	; 0x07
    10c0:	8e 83       	std	Y+6, r24	; 0x06
    10c2:	2b 01       	movw	r4, r22
    10c4:	1a 01       	movw	r2, r20
    10c6:	39 01       	movw	r6, r18
	// melody will play until the stop button is pressed.
	//int still_playing = 1;
	//while(still_playing){
	for (int x=0; x<size; x++){
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	99 87       	std	Y+9, r25	; 0x09
    10ce:	88 87       	std	Y+8, r24	; 0x08
    10d0:	e8 85       	ldd	r30, Y+8	; 0x08
    10d2:	f9 85       	ldd	r31, Y+9	; 0x09
    10d4:	e6 15       	cp	r30, r6
    10d6:	f7 05       	cpc	r31, r7
    10d8:	0c f0       	brlt	.+2      	; 0x10dc <_ZN15music_notations13playthemelodyEPiS0_i+0x52>
    10da:	d5 c0       	rjmp	.+426    	; 0x1286 <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
		playthenote(Melody[x],MelodyDuration[x]);
    10dc:	7f 01       	movw	r14, r30
    10de:	ee 0c       	add	r14, r14
    10e0:	ff 1c       	adc	r15, r15
    10e2:	61 01       	movw	r12, r2
    10e4:	ce 0c       	add	r12, r14
    10e6:	df 1c       	adc	r13, r15
    10e8:	f6 01       	movw	r30, r12
    10ea:	60 81       	ld	r22, Z
    10ec:	71 81       	ldd	r23, Z+1	; 0x01
    10ee:	07 2e       	mov	r0, r23
    10f0:	00 0c       	add	r0, r0
    10f2:	88 0b       	sbc	r24, r24
    10f4:	99 0b       	sbc	r25, r25
    10f6:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatsisf>
    10fa:	4b 01       	movw	r8, r22
    10fc:	5c 01       	movw	r10, r24
    10fe:	f2 01       	movw	r30, r4
    1100:	ee 0d       	add	r30, r14
    1102:	ff 1d       	adc	r31, r15
    1104:	60 81       	ld	r22, Z
    1106:	71 81       	ldd	r23, Z+1	; 0x01
    1108:	07 2e       	mov	r0, r23
    110a:	00 0c       	add	r0, r0
    110c:	88 0b       	sbc	r24, r24
    110e:	99 0b       	sbc	r25, r25
    1110:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatsisf>
    1114:	ab 01       	movw	r20, r22
    1116:	bc 01       	movw	r22, r24
    1118:	95 01       	movw	r18, r10
    111a:	84 01       	movw	r16, r8
    111c:	8e 81       	ldd	r24, Y+6	; 0x06
    111e:	9f 81       	ldd	r25, Y+7	; 0x07
    1120:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN15music_notations11playthenoteEff>
		_delay_us(MelodyDuration[x]);
    1124:	f6 01       	movw	r30, r12
    1126:	60 81       	ld	r22, Z
    1128:	71 81       	ldd	r23, Z+1	; 0x01
    112a:	07 2e       	mov	r0, r23
    112c:	00 0c       	add	r0, r0
    112e:	88 0b       	sbc	r24, r24
    1130:	99 0b       	sbc	r25, r25
    1132:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatsisf>
    1136:	6b 01       	movw	r12, r22
    1138:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    113a:	2b ea       	ldi	r18, 0xAB	; 171
    113c:	3a ea       	ldi	r19, 0xAA	; 170
    113e:	4a e2       	ldi	r20, 0x2A	; 42
    1140:	50 e4       	ldi	r21, 0x40	; 64
    1142:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
    1146:	4b 01       	movw	r8, r22
    1148:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    114a:	a7 01       	movw	r20, r14
    114c:	96 01       	movw	r18, r12
    114e:	c7 01       	movw	r24, r14
    1150:	b6 01       	movw	r22, r12
    1152:	0e 94 a0 09 	call	0x1340	; 0x1340 <__addsf3>
    1156:	69 83       	std	Y+1, r22	; 0x01
    1158:	7a 83       	std	Y+2, r23	; 0x02
    115a:	8b 83       	std	Y+3, r24	; 0x03
    115c:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e8       	ldi	r20, 0x80	; 128
    1164:	5f e3       	ldi	r21, 0x3F	; 63
    1166:	c5 01       	movw	r24, r10
    1168:	b4 01       	movw	r22, r8
    116a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__cmpsf2>
    116e:	88 23       	and	r24, r24
    1170:	0c f4       	brge	.+2      	; 0x1174 <_ZN15music_notations13playthemelodyEPiS0_i+0xea>
    1172:	6a c0       	rjmp	.+212    	; 0x1248 <_ZN15music_notations13playthemelodyEPiS0_i+0x1be>
		__ticks = 1;
	else if (__tmp2 > 65535)
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	69 81       	ldd	r22, Y+1	; 0x01
    117e:	7a 81       	ldd	r23, Y+2	; 0x02
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
    1188:	18 16       	cp	r1, r24
    118a:	0c f0       	brlt	.+2      	; 0x118e <_ZN15music_notations13playthemelodyEPiS0_i+0x104>
    118c:	43 c0       	rjmp	.+134    	; 0x1214 <_ZN15music_notations13playthemelodyEPiS0_i+0x18a>
	{
		_delay_ms(__us / 1000.0);
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	4a e7       	ldi	r20, 0x7A	; 122
    1194:	54 e4       	ldi	r21, 0x44	; 68
    1196:	c7 01       	movw	r24, r14
    1198:	b6 01       	movw	r22, r12
    119a:	0e 94 11 0a 	call	0x1422	; 0x1422 <__divsf3>
    119e:	4b 01       	movw	r8, r22
    11a0:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	4a ef       	ldi	r20, 0xFA	; 250
    11a8:	54 e4       	ldi	r21, 0x44	; 68
    11aa:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
    11ae:	6b 01       	movw	r12, r22
    11b0:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e8       	ldi	r20, 0x80	; 128
    11b8:	5f e3       	ldi	r21, 0x3F	; 63
    11ba:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__cmpsf2>
    11be:	88 23       	and	r24, r24
    11c0:	1c f1       	brlt	.+70     	; 0x1208 <_ZN15music_notations13playthemelodyEPiS0_i+0x17e>
		__ticks = 1;
	else if (__tmp > 65535)
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	3f ef       	ldi	r19, 0xFF	; 255
    11c6:	4f e7       	ldi	r20, 0x7F	; 127
    11c8:	57 e4       	ldi	r21, 0x47	; 71
    11ca:	c7 01       	movw	r24, r14
    11cc:	b6 01       	movw	r22, r12
    11ce:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
    11d2:	18 16       	cp	r1, r24
    11d4:	a4 f4       	brge	.+40     	; 0x11fe <_ZN15music_notations13playthemelodyEPiS0_i+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	c5 01       	movw	r24, r10
    11e0:	b4 01       	movw	r22, r8
    11e2:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
    11e6:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
		while(__ticks)
    11ea:	61 15       	cp	r22, r1
    11ec:	71 05       	cpc	r23, r1
    11ee:	79 f1       	breq	.+94     	; 0x124e <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
    11f0:	88 ec       	ldi	r24, 0xC8	; 200
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <_ZN15music_notations13playthemelodyEPiS0_i+0x16a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f8:	61 50       	subi	r22, 0x01	; 1
    11fa:	71 09       	sbc	r23, r1
    11fc:	f6 cf       	rjmp	.-20     	; 0x11ea <_ZN15music_notations13playthemelodyEPiS0_i+0x160>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fe:	c7 01       	movw	r24, r14
    1200:	b6 01       	movw	r22, r12
    1202:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
    1206:	02 c0       	rjmp	.+4      	; 0x120c <_ZN15music_notations13playthemelodyEPiS0_i+0x182>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1208:	61 e0       	ldi	r22, 0x01	; 1
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	cb 01       	movw	r24, r22
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <_ZN15music_notations13playthemelodyEPiS0_i+0x184>
    1212:	1d c0       	rjmp	.+58     	; 0x124e <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4f e7       	ldi	r20, 0x7F	; 127
    121a:	53 e4       	ldi	r21, 0x43	; 67
    121c:	c5 01       	movw	r24, r10
    121e:	b4 01       	movw	r22, r8
    1220:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
    1224:	18 16       	cp	r1, r24
    1226:	54 f4       	brge	.+20     	; 0x123c <_ZN15music_notations13playthemelodyEPiS0_i+0x1b2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1228:	69 81       	ldd	r22, Y+1	; 0x01
    122a:	7a 81       	ldd	r23, Y+2	; 0x02
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
    1234:	cb 01       	movw	r24, r22
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ac>
    123a:	0c c0       	rjmp	.+24     	; 0x1254 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ca>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    123c:	c5 01       	movw	r24, r10
    123e:	b4 01       	movw	r22, r8
    1240:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
    1244:	6d 83       	std	Y+5, r22	; 0x05
    1246:	03 c0       	rjmp	.+6      	; 0x124e <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	9d 83       	std	Y+5, r25	; 0x05
    124c:	00 c0       	rjmp	.+0      	; 0x124e <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	8a 95       	dec	r24
    1252:	f1 f7       	brne	.-4      	; 0x1250 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c6>
		if ((PINC &(1<<Ok)) or (PINC &(1<<Up)) or (PINC &(1<<Down)) or (PINC &(1<<Back))){
    1254:	32 99       	sbic	0x06, 2	; 6
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <_ZN15music_notations13playthemelodyEPiS0_i+0x1de>
    1258:	30 99       	sbic	0x06, 0	; 6
    125a:	08 c0       	rjmp	.+16     	; 0x126c <_ZN15music_notations13playthemelodyEPiS0_i+0x1e2>
    125c:	31 99       	sbic	0x06, 1	; 6
    125e:	08 c0       	rjmp	.+16     	; 0x1270 <_ZN15music_notations13playthemelodyEPiS0_i+0x1e6>
    1260:	33 9b       	sbis	0x06, 3	; 6
    1262:	08 c0       	rjmp	.+16     	; 0x1274 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ea>
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	07 c0       	rjmp	.+14     	; 0x1276 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	81 11       	cpse	r24, r1
    1278:	06 c0       	rjmp	.+12     	; 0x1286 <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
void music_notations::playthemelody(int Melody[], int MelodyDuration[], int size)
{
	// melody will play until the stop button is pressed.
	//int still_playing = 1;
	//while(still_playing){
	for (int x=0; x<size; x++){
    127a:	88 85       	ldd	r24, Y+8	; 0x08
    127c:	99 85       	ldd	r25, Y+9	; 0x09
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	99 87       	std	Y+9, r25	; 0x09
    1282:	88 87       	std	Y+8, r24	; 0x08
    1284:	25 cf       	rjmp	.-438    	; 0x10d0 <_ZN15music_notations13playthemelodyEPiS0_i+0x46>
		}
		
	}
	
	
}
    1286:	29 96       	adiw	r28, 0x09	; 9
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	bf 90       	pop	r11
    12a4:	af 90       	pop	r10
    12a6:	9f 90       	pop	r9
    12a8:	8f 90       	pop	r8
    12aa:	7f 90       	pop	r7
    12ac:	6f 90       	pop	r6
    12ae:	5f 90       	pop	r5
    12b0:	4f 90       	pop	r4
    12b2:	3f 90       	pop	r3
    12b4:	2f 90       	pop	r2
    12b6:	08 95       	ret

000012b8 <_ZN15music_notations4toneEi>:
void music_notations::tone(int x){
	if (x==0){
    12b8:	61 15       	cp	r22, r1
    12ba:	71 05       	cpc	r23, r1
    12bc:	59 f4       	brne	.+22     	; 0x12d4 <_ZN15music_notations4toneEi+0x1c>
		playthemelody(GOT,GOTDurations,sizeofgot);
    12be:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <sizeofgot>
    12c2:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <sizeofgot+0x1>
    12c6:	42 eb       	ldi	r20, 0xB2	; 178
    12c8:	56 e0       	ldi	r21, 0x06	; 6
    12ca:	66 ed       	ldi	r22, 0xD6	; 214
    12cc:	76 e0       	ldi	r23, 0x06	; 6
    12ce:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN15music_notations13playthemelodyEPiS0_i>
    12d2:	08 95       	ret
	}
	else if (x==1){
    12d4:	61 30       	cpi	r22, 0x01	; 1
    12d6:	71 05       	cpc	r23, r1
    12d8:	59 f4       	brne	.+22     	; 0x12f0 <_ZN15music_notations4toneEi+0x38>
		playthemelody(Pirates,PiratesDurations,sizeofpirates);
    12da:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <sizeofpirates>
    12de:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <sizeofpirates+0x1>
    12e2:	42 e8       	ldi	r20, 0x82	; 130
    12e4:	55 e0       	ldi	r21, 0x05	; 5
    12e6:	6a e1       	ldi	r22, 0x1A	; 26
    12e8:	76 e0       	ldi	r23, 0x06	; 6
    12ea:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN15music_notations13playthemelodyEPiS0_i>
    12ee:	08 95       	ret
	}
	else if (x==2){
    12f0:	62 30       	cpi	r22, 0x02	; 2
    12f2:	71 05       	cpc	r23, r1
    12f4:	59 f4       	brne	.+22     	; 0x130c <_ZN15music_notations4toneEi+0x54>
		playthemelody(StarWars,StarWarsDurations,sizeofstarwars);
    12f6:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <sizeofstarwars>
    12fa:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <sizeofstarwars+0x1>
    12fe:	4a ee       	ldi	r20, 0xEA	; 234
    1300:	54 e0       	ldi	r21, 0x04	; 4
    1302:	66 e3       	ldi	r22, 0x36	; 54
    1304:	75 e0       	ldi	r23, 0x05	; 5
    1306:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN15music_notations13playthemelodyEPiS0_i>
    130a:	08 95       	ret
	}
	else if (x==3){
    130c:	63 30       	cpi	r22, 0x03	; 3
    130e:	71 05       	cpc	r23, r1
    1310:	59 f4       	brne	.+22     	; 0x1328 <_ZN15music_notations4toneEi+0x70>
		playthemelody(CoffinDance,CoffinDanceDurations,sizeofcoffindance);
    1312:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <sizeofcoffindance>
    1316:	30 91 f3 02 	lds	r19, 0x02F3	; 0x8002f3 <sizeofcoffindance+0x1>
    131a:	4a e5       	ldi	r20, 0x5A	; 90
    131c:	53 e0       	ldi	r21, 0x03	; 3
    131e:	62 e2       	ldi	r22, 0x22	; 34
    1320:	74 e0       	ldi	r23, 0x04	; 4
    1322:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN15music_notations13playthemelodyEPiS0_i>
    1326:	08 95       	ret
	}
	else{
		playthemelody(TakeOnMe,TakeOnMeDurations,sizeoftakeonme);
    1328:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <sizeoftakeonme>
    132c:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <sizeoftakeonme+0x1>
    1330:	4a ef       	ldi	r20, 0xFA	; 250
    1332:	52 e0       	ldi	r21, 0x02	; 2
    1334:	6a e2       	ldi	r22, 0x2A	; 42
    1336:	73 e0       	ldi	r23, 0x03	; 3
    1338:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN15music_notations13playthemelodyEPiS0_i>
    133c:	08 95       	ret

0000133e <__subsf3>:
    133e:	50 58       	subi	r21, 0x80	; 128

00001340 <__addsf3>:
    1340:	bb 27       	eor	r27, r27
    1342:	aa 27       	eor	r26, r26
    1344:	0e 94 b7 09 	call	0x136e	; 0x136e <__addsf3x>
    1348:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__fp_round>
    134c:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fp_pscA>
    1350:	38 f0       	brcs	.+14     	; 0x1360 <__addsf3+0x20>
    1352:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_pscB>
    1356:	20 f0       	brcs	.+8      	; 0x1360 <__addsf3+0x20>
    1358:	39 f4       	brne	.+14     	; 0x1368 <__addsf3+0x28>
    135a:	9f 3f       	cpi	r25, 0xFF	; 255
    135c:	19 f4       	brne	.+6      	; 0x1364 <__addsf3+0x24>
    135e:	26 f4       	brtc	.+8      	; 0x1368 <__addsf3+0x28>
    1360:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_nan>
    1364:	0e f4       	brtc	.+2      	; 0x1368 <__addsf3+0x28>
    1366:	e0 95       	com	r30
    1368:	e7 fb       	bst	r30, 7
    136a:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_inf>

0000136e <__addsf3x>:
    136e:	e9 2f       	mov	r30, r25
    1370:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_split3>
    1374:	58 f3       	brcs	.-42     	; 0x134c <__addsf3+0xc>
    1376:	ba 17       	cp	r27, r26
    1378:	62 07       	cpc	r22, r18
    137a:	73 07       	cpc	r23, r19
    137c:	84 07       	cpc	r24, r20
    137e:	95 07       	cpc	r25, r21
    1380:	20 f0       	brcs	.+8      	; 0x138a <__addsf3x+0x1c>
    1382:	79 f4       	brne	.+30     	; 0x13a2 <__addsf3x+0x34>
    1384:	a6 f5       	brtc	.+104    	; 0x13ee <__addsf3x+0x80>
    1386:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_zero>
    138a:	0e f4       	brtc	.+2      	; 0x138e <__addsf3x+0x20>
    138c:	e0 95       	com	r30
    138e:	0b 2e       	mov	r0, r27
    1390:	ba 2f       	mov	r27, r26
    1392:	a0 2d       	mov	r26, r0
    1394:	0b 01       	movw	r0, r22
    1396:	b9 01       	movw	r22, r18
    1398:	90 01       	movw	r18, r0
    139a:	0c 01       	movw	r0, r24
    139c:	ca 01       	movw	r24, r20
    139e:	a0 01       	movw	r20, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	ff 27       	eor	r31, r31
    13a4:	59 1b       	sub	r21, r25
    13a6:	99 f0       	breq	.+38     	; 0x13ce <__addsf3x+0x60>
    13a8:	59 3f       	cpi	r21, 0xF9	; 249
    13aa:	50 f4       	brcc	.+20     	; 0x13c0 <__addsf3x+0x52>
    13ac:	50 3e       	cpi	r21, 0xE0	; 224
    13ae:	68 f1       	brcs	.+90     	; 0x140a <__addsf3x+0x9c>
    13b0:	1a 16       	cp	r1, r26
    13b2:	f0 40       	sbci	r31, 0x00	; 0
    13b4:	a2 2f       	mov	r26, r18
    13b6:	23 2f       	mov	r18, r19
    13b8:	34 2f       	mov	r19, r20
    13ba:	44 27       	eor	r20, r20
    13bc:	58 5f       	subi	r21, 0xF8	; 248
    13be:	f3 cf       	rjmp	.-26     	; 0x13a6 <__addsf3x+0x38>
    13c0:	46 95       	lsr	r20
    13c2:	37 95       	ror	r19
    13c4:	27 95       	ror	r18
    13c6:	a7 95       	ror	r26
    13c8:	f0 40       	sbci	r31, 0x00	; 0
    13ca:	53 95       	inc	r21
    13cc:	c9 f7       	brne	.-14     	; 0x13c0 <__addsf3x+0x52>
    13ce:	7e f4       	brtc	.+30     	; 0x13ee <__addsf3x+0x80>
    13d0:	1f 16       	cp	r1, r31
    13d2:	ba 0b       	sbc	r27, r26
    13d4:	62 0b       	sbc	r22, r18
    13d6:	73 0b       	sbc	r23, r19
    13d8:	84 0b       	sbc	r24, r20
    13da:	ba f0       	brmi	.+46     	; 0x140a <__addsf3x+0x9c>
    13dc:	91 50       	subi	r25, 0x01	; 1
    13de:	a1 f0       	breq	.+40     	; 0x1408 <__addsf3x+0x9a>
    13e0:	ff 0f       	add	r31, r31
    13e2:	bb 1f       	adc	r27, r27
    13e4:	66 1f       	adc	r22, r22
    13e6:	77 1f       	adc	r23, r23
    13e8:	88 1f       	adc	r24, r24
    13ea:	c2 f7       	brpl	.-16     	; 0x13dc <__addsf3x+0x6e>
    13ec:	0e c0       	rjmp	.+28     	; 0x140a <__addsf3x+0x9c>
    13ee:	ba 0f       	add	r27, r26
    13f0:	62 1f       	adc	r22, r18
    13f2:	73 1f       	adc	r23, r19
    13f4:	84 1f       	adc	r24, r20
    13f6:	48 f4       	brcc	.+18     	; 0x140a <__addsf3x+0x9c>
    13f8:	87 95       	ror	r24
    13fa:	77 95       	ror	r23
    13fc:	67 95       	ror	r22
    13fe:	b7 95       	ror	r27
    1400:	f7 95       	ror	r31
    1402:	9e 3f       	cpi	r25, 0xFE	; 254
    1404:	08 f0       	brcs	.+2      	; 0x1408 <__addsf3x+0x9a>
    1406:	b0 cf       	rjmp	.-160    	; 0x1368 <__addsf3+0x28>
    1408:	93 95       	inc	r25
    140a:	88 0f       	add	r24, r24
    140c:	08 f0       	brcs	.+2      	; 0x1410 <__addsf3x+0xa2>
    140e:	99 27       	eor	r25, r25
    1410:	ee 0f       	add	r30, r30
    1412:	97 95       	ror	r25
    1414:	87 95       	ror	r24
    1416:	08 95       	ret

00001418 <__cmpsf2>:
    1418:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_cmp>
    141c:	08 f4       	brcc	.+2      	; 0x1420 <__cmpsf2+0x8>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	08 95       	ret

00001422 <__divsf3>:
    1422:	0e 94 25 0a 	call	0x144a	; 0x144a <__divsf3x>
    1426:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__fp_round>
    142a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_pscB>
    142e:	58 f0       	brcs	.+22     	; 0x1446 <__divsf3+0x24>
    1430:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fp_pscA>
    1434:	40 f0       	brcs	.+16     	; 0x1446 <__divsf3+0x24>
    1436:	29 f4       	brne	.+10     	; 0x1442 <__divsf3+0x20>
    1438:	5f 3f       	cpi	r21, 0xFF	; 255
    143a:	29 f0       	breq	.+10     	; 0x1446 <__divsf3+0x24>
    143c:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_inf>
    1440:	51 11       	cpse	r21, r1
    1442:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__fp_szero>
    1446:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_nan>

0000144a <__divsf3x>:
    144a:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_split3>
    144e:	68 f3       	brcs	.-38     	; 0x142a <__divsf3+0x8>

00001450 <__divsf3_pse>:
    1450:	99 23       	and	r25, r25
    1452:	b1 f3       	breq	.-20     	; 0x1440 <__divsf3+0x1e>
    1454:	55 23       	and	r21, r21
    1456:	91 f3       	breq	.-28     	; 0x143c <__divsf3+0x1a>
    1458:	95 1b       	sub	r25, r21
    145a:	55 0b       	sbc	r21, r21
    145c:	bb 27       	eor	r27, r27
    145e:	aa 27       	eor	r26, r26
    1460:	62 17       	cp	r22, r18
    1462:	73 07       	cpc	r23, r19
    1464:	84 07       	cpc	r24, r20
    1466:	38 f0       	brcs	.+14     	; 0x1476 <__divsf3_pse+0x26>
    1468:	9f 5f       	subi	r25, 0xFF	; 255
    146a:	5f 4f       	sbci	r21, 0xFF	; 255
    146c:	22 0f       	add	r18, r18
    146e:	33 1f       	adc	r19, r19
    1470:	44 1f       	adc	r20, r20
    1472:	aa 1f       	adc	r26, r26
    1474:	a9 f3       	breq	.-22     	; 0x1460 <__divsf3_pse+0x10>
    1476:	35 d0       	rcall	.+106    	; 0x14e2 <__divsf3_pse+0x92>
    1478:	0e 2e       	mov	r0, r30
    147a:	3a f0       	brmi	.+14     	; 0x148a <__divsf3_pse+0x3a>
    147c:	e0 e8       	ldi	r30, 0x80	; 128
    147e:	32 d0       	rcall	.+100    	; 0x14e4 <__divsf3_pse+0x94>
    1480:	91 50       	subi	r25, 0x01	; 1
    1482:	50 40       	sbci	r21, 0x00	; 0
    1484:	e6 95       	lsr	r30
    1486:	00 1c       	adc	r0, r0
    1488:	ca f7       	brpl	.-14     	; 0x147c <__divsf3_pse+0x2c>
    148a:	2b d0       	rcall	.+86     	; 0x14e2 <__divsf3_pse+0x92>
    148c:	fe 2f       	mov	r31, r30
    148e:	29 d0       	rcall	.+82     	; 0x14e2 <__divsf3_pse+0x92>
    1490:	66 0f       	add	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	bb 1f       	adc	r27, r27
    1498:	26 17       	cp	r18, r22
    149a:	37 07       	cpc	r19, r23
    149c:	48 07       	cpc	r20, r24
    149e:	ab 07       	cpc	r26, r27
    14a0:	b0 e8       	ldi	r27, 0x80	; 128
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <__divsf3_pse+0x56>
    14a4:	bb 0b       	sbc	r27, r27
    14a6:	80 2d       	mov	r24, r0
    14a8:	bf 01       	movw	r22, r30
    14aa:	ff 27       	eor	r31, r31
    14ac:	93 58       	subi	r25, 0x83	; 131
    14ae:	5f 4f       	sbci	r21, 0xFF	; 255
    14b0:	3a f0       	brmi	.+14     	; 0x14c0 <__divsf3_pse+0x70>
    14b2:	9e 3f       	cpi	r25, 0xFE	; 254
    14b4:	51 05       	cpc	r21, r1
    14b6:	78 f0       	brcs	.+30     	; 0x14d6 <__divsf3_pse+0x86>
    14b8:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_inf>
    14bc:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__fp_szero>
    14c0:	5f 3f       	cpi	r21, 0xFF	; 255
    14c2:	e4 f3       	brlt	.-8      	; 0x14bc <__divsf3_pse+0x6c>
    14c4:	98 3e       	cpi	r25, 0xE8	; 232
    14c6:	d4 f3       	brlt	.-12     	; 0x14bc <__divsf3_pse+0x6c>
    14c8:	86 95       	lsr	r24
    14ca:	77 95       	ror	r23
    14cc:	67 95       	ror	r22
    14ce:	b7 95       	ror	r27
    14d0:	f7 95       	ror	r31
    14d2:	9f 5f       	subi	r25, 0xFF	; 255
    14d4:	c9 f7       	brne	.-14     	; 0x14c8 <__divsf3_pse+0x78>
    14d6:	88 0f       	add	r24, r24
    14d8:	91 1d       	adc	r25, r1
    14da:	96 95       	lsr	r25
    14dc:	87 95       	ror	r24
    14de:	97 f9       	bld	r25, 7
    14e0:	08 95       	ret
    14e2:	e1 e0       	ldi	r30, 0x01	; 1
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	bb 1f       	adc	r27, r27
    14ec:	62 17       	cp	r22, r18
    14ee:	73 07       	cpc	r23, r19
    14f0:	84 07       	cpc	r24, r20
    14f2:	ba 07       	cpc	r27, r26
    14f4:	20 f0       	brcs	.+8      	; 0x14fe <__divsf3_pse+0xae>
    14f6:	62 1b       	sub	r22, r18
    14f8:	73 0b       	sbc	r23, r19
    14fa:	84 0b       	sbc	r24, r20
    14fc:	ba 0b       	sbc	r27, r26
    14fe:	ee 1f       	adc	r30, r30
    1500:	88 f7       	brcc	.-30     	; 0x14e4 <__divsf3_pse+0x94>
    1502:	e0 95       	com	r30
    1504:	08 95       	ret

00001506 <__fixsfsi>:
    1506:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fixunssfsi>
    150a:	68 94       	set
    150c:	b1 11       	cpse	r27, r1
    150e:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__fp_szero>
    1512:	08 95       	ret

00001514 <__fixunssfsi>:
    1514:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fp_splitA>
    1518:	88 f0       	brcs	.+34     	; 0x153c <__fixunssfsi+0x28>
    151a:	9f 57       	subi	r25, 0x7F	; 127
    151c:	98 f0       	brcs	.+38     	; 0x1544 <__fixunssfsi+0x30>
    151e:	b9 2f       	mov	r27, r25
    1520:	99 27       	eor	r25, r25
    1522:	b7 51       	subi	r27, 0x17	; 23
    1524:	b0 f0       	brcs	.+44     	; 0x1552 <__fixunssfsi+0x3e>
    1526:	e1 f0       	breq	.+56     	; 0x1560 <__fixunssfsi+0x4c>
    1528:	66 0f       	add	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	88 1f       	adc	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	1a f0       	brmi	.+6      	; 0x1538 <__fixunssfsi+0x24>
    1532:	ba 95       	dec	r27
    1534:	c9 f7       	brne	.-14     	; 0x1528 <__fixunssfsi+0x14>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <__fixunssfsi+0x4c>
    1538:	b1 30       	cpi	r27, 0x01	; 1
    153a:	91 f0       	breq	.+36     	; 0x1560 <__fixunssfsi+0x4c>
    153c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__fp_zero>
    1540:	b1 e0       	ldi	r27, 0x01	; 1
    1542:	08 95       	ret
    1544:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_zero>
    1548:	67 2f       	mov	r22, r23
    154a:	78 2f       	mov	r23, r24
    154c:	88 27       	eor	r24, r24
    154e:	b8 5f       	subi	r27, 0xF8	; 248
    1550:	39 f0       	breq	.+14     	; 0x1560 <__fixunssfsi+0x4c>
    1552:	b9 3f       	cpi	r27, 0xF9	; 249
    1554:	cc f3       	brlt	.-14     	; 0x1548 <__fixunssfsi+0x34>
    1556:	86 95       	lsr	r24
    1558:	77 95       	ror	r23
    155a:	67 95       	ror	r22
    155c:	b3 95       	inc	r27
    155e:	d9 f7       	brne	.-10     	; 0x1556 <__fixunssfsi+0x42>
    1560:	3e f4       	brtc	.+14     	; 0x1570 <__fixunssfsi+0x5c>
    1562:	90 95       	com	r25
    1564:	80 95       	com	r24
    1566:	70 95       	com	r23
    1568:	61 95       	neg	r22
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	8f 4f       	sbci	r24, 0xFF	; 255
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	08 95       	ret

00001572 <__floatunsisf>:
    1572:	e8 94       	clt
    1574:	09 c0       	rjmp	.+18     	; 0x1588 <__floatsisf+0x12>

00001576 <__floatsisf>:
    1576:	97 fb       	bst	r25, 7
    1578:	3e f4       	brtc	.+14     	; 0x1588 <__floatsisf+0x12>
    157a:	90 95       	com	r25
    157c:	80 95       	com	r24
    157e:	70 95       	com	r23
    1580:	61 95       	neg	r22
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	99 23       	and	r25, r25
    158a:	a9 f0       	breq	.+42     	; 0x15b6 <__floatsisf+0x40>
    158c:	f9 2f       	mov	r31, r25
    158e:	96 e9       	ldi	r25, 0x96	; 150
    1590:	bb 27       	eor	r27, r27
    1592:	93 95       	inc	r25
    1594:	f6 95       	lsr	r31
    1596:	87 95       	ror	r24
    1598:	77 95       	ror	r23
    159a:	67 95       	ror	r22
    159c:	b7 95       	ror	r27
    159e:	f1 11       	cpse	r31, r1
    15a0:	f8 cf       	rjmp	.-16     	; 0x1592 <__floatsisf+0x1c>
    15a2:	fa f4       	brpl	.+62     	; 0x15e2 <__floatsisf+0x6c>
    15a4:	bb 0f       	add	r27, r27
    15a6:	11 f4       	brne	.+4      	; 0x15ac <__floatsisf+0x36>
    15a8:	60 ff       	sbrs	r22, 0
    15aa:	1b c0       	rjmp	.+54     	; 0x15e2 <__floatsisf+0x6c>
    15ac:	6f 5f       	subi	r22, 0xFF	; 255
    15ae:	7f 4f       	sbci	r23, 0xFF	; 255
    15b0:	8f 4f       	sbci	r24, 0xFF	; 255
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	16 c0       	rjmp	.+44     	; 0x15e2 <__floatsisf+0x6c>
    15b6:	88 23       	and	r24, r24
    15b8:	11 f0       	breq	.+4      	; 0x15be <__floatsisf+0x48>
    15ba:	96 e9       	ldi	r25, 0x96	; 150
    15bc:	11 c0       	rjmp	.+34     	; 0x15e0 <__floatsisf+0x6a>
    15be:	77 23       	and	r23, r23
    15c0:	21 f0       	breq	.+8      	; 0x15ca <__floatsisf+0x54>
    15c2:	9e e8       	ldi	r25, 0x8E	; 142
    15c4:	87 2f       	mov	r24, r23
    15c6:	76 2f       	mov	r23, r22
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <__floatsisf+0x5e>
    15ca:	66 23       	and	r22, r22
    15cc:	71 f0       	breq	.+28     	; 0x15ea <__floatsisf+0x74>
    15ce:	96 e8       	ldi	r25, 0x86	; 134
    15d0:	86 2f       	mov	r24, r22
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	2a f0       	brmi	.+10     	; 0x15e2 <__floatsisf+0x6c>
    15d8:	9a 95       	dec	r25
    15da:	66 0f       	add	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	88 1f       	adc	r24, r24
    15e0:	da f7       	brpl	.-10     	; 0x15d8 <__floatsisf+0x62>
    15e2:	88 0f       	add	r24, r24
    15e4:	96 95       	lsr	r25
    15e6:	87 95       	ror	r24
    15e8:	97 f9       	bld	r25, 7
    15ea:	08 95       	ret

000015ec <__fp_cmp>:
    15ec:	99 0f       	add	r25, r25
    15ee:	00 08       	sbc	r0, r0
    15f0:	55 0f       	add	r21, r21
    15f2:	aa 0b       	sbc	r26, r26
    15f4:	e0 e8       	ldi	r30, 0x80	; 128
    15f6:	fe ef       	ldi	r31, 0xFE	; 254
    15f8:	16 16       	cp	r1, r22
    15fa:	17 06       	cpc	r1, r23
    15fc:	e8 07       	cpc	r30, r24
    15fe:	f9 07       	cpc	r31, r25
    1600:	c0 f0       	brcs	.+48     	; 0x1632 <__fp_cmp+0x46>
    1602:	12 16       	cp	r1, r18
    1604:	13 06       	cpc	r1, r19
    1606:	e4 07       	cpc	r30, r20
    1608:	f5 07       	cpc	r31, r21
    160a:	98 f0       	brcs	.+38     	; 0x1632 <__fp_cmp+0x46>
    160c:	62 1b       	sub	r22, r18
    160e:	73 0b       	sbc	r23, r19
    1610:	84 0b       	sbc	r24, r20
    1612:	95 0b       	sbc	r25, r21
    1614:	39 f4       	brne	.+14     	; 0x1624 <__fp_cmp+0x38>
    1616:	0a 26       	eor	r0, r26
    1618:	61 f0       	breq	.+24     	; 0x1632 <__fp_cmp+0x46>
    161a:	23 2b       	or	r18, r19
    161c:	24 2b       	or	r18, r20
    161e:	25 2b       	or	r18, r21
    1620:	21 f4       	brne	.+8      	; 0x162a <__fp_cmp+0x3e>
    1622:	08 95       	ret
    1624:	0a 26       	eor	r0, r26
    1626:	09 f4       	brne	.+2      	; 0x162a <__fp_cmp+0x3e>
    1628:	a1 40       	sbci	r26, 0x01	; 1
    162a:	a6 95       	lsr	r26
    162c:	8f ef       	ldi	r24, 0xFF	; 255
    162e:	81 1d       	adc	r24, r1
    1630:	81 1d       	adc	r24, r1
    1632:	08 95       	ret

00001634 <__fp_inf>:
    1634:	97 f9       	bld	r25, 7
    1636:	9f 67       	ori	r25, 0x7F	; 127
    1638:	80 e8       	ldi	r24, 0x80	; 128
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	08 95       	ret

00001640 <__fp_nan>:
    1640:	9f ef       	ldi	r25, 0xFF	; 255
    1642:	80 ec       	ldi	r24, 0xC0	; 192
    1644:	08 95       	ret

00001646 <__fp_pscA>:
    1646:	00 24       	eor	r0, r0
    1648:	0a 94       	dec	r0
    164a:	16 16       	cp	r1, r22
    164c:	17 06       	cpc	r1, r23
    164e:	18 06       	cpc	r1, r24
    1650:	09 06       	cpc	r0, r25
    1652:	08 95       	ret

00001654 <__fp_pscB>:
    1654:	00 24       	eor	r0, r0
    1656:	0a 94       	dec	r0
    1658:	12 16       	cp	r1, r18
    165a:	13 06       	cpc	r1, r19
    165c:	14 06       	cpc	r1, r20
    165e:	05 06       	cpc	r0, r21
    1660:	08 95       	ret

00001662 <__fp_round>:
    1662:	09 2e       	mov	r0, r25
    1664:	03 94       	inc	r0
    1666:	00 0c       	add	r0, r0
    1668:	11 f4       	brne	.+4      	; 0x166e <__fp_round+0xc>
    166a:	88 23       	and	r24, r24
    166c:	52 f0       	brmi	.+20     	; 0x1682 <__fp_round+0x20>
    166e:	bb 0f       	add	r27, r27
    1670:	40 f4       	brcc	.+16     	; 0x1682 <__fp_round+0x20>
    1672:	bf 2b       	or	r27, r31
    1674:	11 f4       	brne	.+4      	; 0x167a <__fp_round+0x18>
    1676:	60 ff       	sbrs	r22, 0
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <__fp_round+0x20>
    167a:	6f 5f       	subi	r22, 0xFF	; 255
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	8f 4f       	sbci	r24, 0xFF	; 255
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	08 95       	ret

00001684 <__fp_split3>:
    1684:	57 fd       	sbrc	r21, 7
    1686:	90 58       	subi	r25, 0x80	; 128
    1688:	44 0f       	add	r20, r20
    168a:	55 1f       	adc	r21, r21
    168c:	59 f0       	breq	.+22     	; 0x16a4 <__fp_splitA+0x10>
    168e:	5f 3f       	cpi	r21, 0xFF	; 255
    1690:	71 f0       	breq	.+28     	; 0x16ae <__fp_splitA+0x1a>
    1692:	47 95       	ror	r20

00001694 <__fp_splitA>:
    1694:	88 0f       	add	r24, r24
    1696:	97 fb       	bst	r25, 7
    1698:	99 1f       	adc	r25, r25
    169a:	61 f0       	breq	.+24     	; 0x16b4 <__fp_splitA+0x20>
    169c:	9f 3f       	cpi	r25, 0xFF	; 255
    169e:	79 f0       	breq	.+30     	; 0x16be <__fp_splitA+0x2a>
    16a0:	87 95       	ror	r24
    16a2:	08 95       	ret
    16a4:	12 16       	cp	r1, r18
    16a6:	13 06       	cpc	r1, r19
    16a8:	14 06       	cpc	r1, r20
    16aa:	55 1f       	adc	r21, r21
    16ac:	f2 cf       	rjmp	.-28     	; 0x1692 <__fp_split3+0xe>
    16ae:	46 95       	lsr	r20
    16b0:	f1 df       	rcall	.-30     	; 0x1694 <__fp_splitA>
    16b2:	08 c0       	rjmp	.+16     	; 0x16c4 <__fp_splitA+0x30>
    16b4:	16 16       	cp	r1, r22
    16b6:	17 06       	cpc	r1, r23
    16b8:	18 06       	cpc	r1, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	f1 cf       	rjmp	.-30     	; 0x16a0 <__fp_splitA+0xc>
    16be:	86 95       	lsr	r24
    16c0:	71 05       	cpc	r23, r1
    16c2:	61 05       	cpc	r22, r1
    16c4:	08 94       	sec
    16c6:	08 95       	ret

000016c8 <__fp_zero>:
    16c8:	e8 94       	clt

000016ca <__fp_szero>:
    16ca:	bb 27       	eor	r27, r27
    16cc:	66 27       	eor	r22, r22
    16ce:	77 27       	eor	r23, r23
    16d0:	cb 01       	movw	r24, r22
    16d2:	97 f9       	bld	r25, 7
    16d4:	08 95       	ret

000016d6 <__gesf2>:
    16d6:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_cmp>
    16da:	08 f4       	brcc	.+2      	; 0x16de <__gesf2+0x8>
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	08 95       	ret

000016e0 <__mulsf3>:
    16e0:	0e 94 83 0b 	call	0x1706	; 0x1706 <__mulsf3x>
    16e4:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__fp_round>
    16e8:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fp_pscA>
    16ec:	38 f0       	brcs	.+14     	; 0x16fc <__mulsf3+0x1c>
    16ee:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_pscB>
    16f2:	20 f0       	brcs	.+8      	; 0x16fc <__mulsf3+0x1c>
    16f4:	95 23       	and	r25, r21
    16f6:	11 f0       	breq	.+4      	; 0x16fc <__mulsf3+0x1c>
    16f8:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_inf>
    16fc:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_nan>
    1700:	11 24       	eor	r1, r1
    1702:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__fp_szero>

00001706 <__mulsf3x>:
    1706:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_split3>
    170a:	70 f3       	brcs	.-36     	; 0x16e8 <__mulsf3+0x8>

0000170c <__mulsf3_pse>:
    170c:	95 9f       	mul	r25, r21
    170e:	c1 f3       	breq	.-16     	; 0x1700 <__mulsf3+0x20>
    1710:	95 0f       	add	r25, r21
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	55 1f       	adc	r21, r21
    1716:	62 9f       	mul	r22, r18
    1718:	f0 01       	movw	r30, r0
    171a:	72 9f       	mul	r23, r18
    171c:	bb 27       	eor	r27, r27
    171e:	f0 0d       	add	r31, r0
    1720:	b1 1d       	adc	r27, r1
    1722:	63 9f       	mul	r22, r19
    1724:	aa 27       	eor	r26, r26
    1726:	f0 0d       	add	r31, r0
    1728:	b1 1d       	adc	r27, r1
    172a:	aa 1f       	adc	r26, r26
    172c:	64 9f       	mul	r22, r20
    172e:	66 27       	eor	r22, r22
    1730:	b0 0d       	add	r27, r0
    1732:	a1 1d       	adc	r26, r1
    1734:	66 1f       	adc	r22, r22
    1736:	82 9f       	mul	r24, r18
    1738:	22 27       	eor	r18, r18
    173a:	b0 0d       	add	r27, r0
    173c:	a1 1d       	adc	r26, r1
    173e:	62 1f       	adc	r22, r18
    1740:	73 9f       	mul	r23, r19
    1742:	b0 0d       	add	r27, r0
    1744:	a1 1d       	adc	r26, r1
    1746:	62 1f       	adc	r22, r18
    1748:	83 9f       	mul	r24, r19
    174a:	a0 0d       	add	r26, r0
    174c:	61 1d       	adc	r22, r1
    174e:	22 1f       	adc	r18, r18
    1750:	74 9f       	mul	r23, r20
    1752:	33 27       	eor	r19, r19
    1754:	a0 0d       	add	r26, r0
    1756:	61 1d       	adc	r22, r1
    1758:	23 1f       	adc	r18, r19
    175a:	84 9f       	mul	r24, r20
    175c:	60 0d       	add	r22, r0
    175e:	21 1d       	adc	r18, r1
    1760:	82 2f       	mov	r24, r18
    1762:	76 2f       	mov	r23, r22
    1764:	6a 2f       	mov	r22, r26
    1766:	11 24       	eor	r1, r1
    1768:	9f 57       	subi	r25, 0x7F	; 127
    176a:	50 40       	sbci	r21, 0x00	; 0
    176c:	9a f0       	brmi	.+38     	; 0x1794 <__mulsf3_pse+0x88>
    176e:	f1 f0       	breq	.+60     	; 0x17ac <__mulsf3_pse+0xa0>
    1770:	88 23       	and	r24, r24
    1772:	4a f0       	brmi	.+18     	; 0x1786 <__mulsf3_pse+0x7a>
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	bb 1f       	adc	r27, r27
    177a:	66 1f       	adc	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	88 1f       	adc	r24, r24
    1780:	91 50       	subi	r25, 0x01	; 1
    1782:	50 40       	sbci	r21, 0x00	; 0
    1784:	a9 f7       	brne	.-22     	; 0x1770 <__mulsf3_pse+0x64>
    1786:	9e 3f       	cpi	r25, 0xFE	; 254
    1788:	51 05       	cpc	r21, r1
    178a:	80 f0       	brcs	.+32     	; 0x17ac <__mulsf3_pse+0xa0>
    178c:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_inf>
    1790:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__fp_szero>
    1794:	5f 3f       	cpi	r21, 0xFF	; 255
    1796:	e4 f3       	brlt	.-8      	; 0x1790 <__mulsf3_pse+0x84>
    1798:	98 3e       	cpi	r25, 0xE8	; 232
    179a:	d4 f3       	brlt	.-12     	; 0x1790 <__mulsf3_pse+0x84>
    179c:	86 95       	lsr	r24
    179e:	77 95       	ror	r23
    17a0:	67 95       	ror	r22
    17a2:	b7 95       	ror	r27
    17a4:	f7 95       	ror	r31
    17a6:	e7 95       	ror	r30
    17a8:	9f 5f       	subi	r25, 0xFF	; 255
    17aa:	c1 f7       	brne	.-16     	; 0x179c <__mulsf3_pse+0x90>
    17ac:	fe 2b       	or	r31, r30
    17ae:	88 0f       	add	r24, r24
    17b0:	91 1d       	adc	r25, r1
    17b2:	96 95       	lsr	r25
    17b4:	87 95       	ror	r24
    17b6:	97 f9       	bld	r25, 7
    17b8:	08 95       	ret

000017ba <__divmodhi4>:
    17ba:	97 fb       	bst	r25, 7
    17bc:	07 2e       	mov	r0, r23
    17be:	16 f4       	brtc	.+4      	; 0x17c4 <__divmodhi4+0xa>
    17c0:	00 94       	com	r0
    17c2:	07 d0       	rcall	.+14     	; 0x17d2 <__divmodhi4_neg1>
    17c4:	77 fd       	sbrc	r23, 7
    17c6:	09 d0       	rcall	.+18     	; 0x17da <__divmodhi4_neg2>
    17c8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__udivmodhi4>
    17cc:	07 fc       	sbrc	r0, 7
    17ce:	05 d0       	rcall	.+10     	; 0x17da <__divmodhi4_neg2>
    17d0:	3e f4       	brtc	.+14     	; 0x17e0 <__divmodhi4_exit>

000017d2 <__divmodhi4_neg1>:
    17d2:	90 95       	com	r25
    17d4:	81 95       	neg	r24
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	08 95       	ret

000017da <__divmodhi4_neg2>:
    17da:	70 95       	com	r23
    17dc:	61 95       	neg	r22
    17de:	7f 4f       	sbci	r23, 0xFF	; 255

000017e0 <__divmodhi4_exit>:
    17e0:	08 95       	ret

000017e2 <__udivmodhi4>:
    17e2:	aa 1b       	sub	r26, r26
    17e4:	bb 1b       	sub	r27, r27
    17e6:	51 e1       	ldi	r21, 0x11	; 17
    17e8:	07 c0       	rjmp	.+14     	; 0x17f8 <__udivmodhi4_ep>

000017ea <__udivmodhi4_loop>:
    17ea:	aa 1f       	adc	r26, r26
    17ec:	bb 1f       	adc	r27, r27
    17ee:	a6 17       	cp	r26, r22
    17f0:	b7 07       	cpc	r27, r23
    17f2:	10 f0       	brcs	.+4      	; 0x17f8 <__udivmodhi4_ep>
    17f4:	a6 1b       	sub	r26, r22
    17f6:	b7 0b       	sbc	r27, r23

000017f8 <__udivmodhi4_ep>:
    17f8:	88 1f       	adc	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	5a 95       	dec	r21
    17fe:	a9 f7       	brne	.-22     	; 0x17ea <__udivmodhi4_loop>
    1800:	80 95       	com	r24
    1802:	90 95       	com	r25
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	08 95       	ret

0000180a <_exit>:
    180a:	f8 94       	cli

0000180c <__stop_program>:
    180c:	ff cf       	rjmp	.-2      	; 0x180c <__stop_program>
