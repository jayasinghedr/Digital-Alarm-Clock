
alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000688  00800100  00001f6e  00002002  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800788  00800788  0000268a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000268a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043b2  00000000  00000000  0000289c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001198  00000000  00000000  00006c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019f7  00000000  00000000  00007de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000500  00000000  00000000  000097e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d02  00000000  00000000  00009ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000248e  00000000  00000000  0000a9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000ce70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	17 e0       	ldi	r17, 0x07	; 7
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e6       	ldi	r30, 0x6E	; 110
      7c:	ff e1       	ldi	r31, 0x1F	; 31
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 38       	cpi	r26, 0x88	; 136
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a8 e8       	ldi	r26, 0x88	; 136
      8e:	b7 e0       	ldi	r27, 0x07	; 7
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3d       	cpi	r26, 0xDF	; 223
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 99 0a 	call	0x1532	; 0x1532 <main>
      9e:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN10AlarmClock11int_to_charEi>:
 
 ds1307 ds1307_1;
 LCD_Display lcd_1;
 Get_key keypad_1;

 char* AlarmClock::int_to_char(int num){
      a6:	9b 01       	movw	r18, r22
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
      a8:	6a 30       	cpi	r22, 0x0A	; 10
      aa:	71 05       	cpc	r23, r1
      ac:	ec f0       	brlt	.+58     	; 0xe8 <_ZN10AlarmClock11int_to_charEi+0x42>
		 chArr = "__";
		 x = num / 10;
      ae:	cb 01       	movw	r24, r22
      b0:	6a e0       	ldi	r22, 0x0A	; 10
      b2:	70 e0       	ldi	r23, 0x00	; 0
      b4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divmodhi4>
		 div = x + 48;
      b8:	ab 01       	movw	r20, r22
      ba:	40 5d       	subi	r20, 0xD0	; 208
      bc:	5f 4f       	sbci	r21, 0xFF	; 255
		 rem = (num % (10 * x)) + 48;
      be:	cb 01       	movw	r24, r22
      c0:	88 0f       	add	r24, r24
      c2:	99 1f       	adc	r25, r25
      c4:	66 0f       	add	r22, r22
      c6:	77 1f       	adc	r23, r23
      c8:	66 0f       	add	r22, r22
      ca:	77 1f       	adc	r23, r23
      cc:	66 0f       	add	r22, r22
      ce:	77 1f       	adc	r23, r23
      d0:	68 0f       	add	r22, r24
      d2:	79 1f       	adc	r23, r25
      d4:	c9 01       	movw	r24, r18
      d6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divmodhi4>
      da:	c0 96       	adiw	r24, 0x30	; 48
		 char ch1 = div;
		 char ch2 = rem;
		 chArr[0] = ch1;
      dc:	e6 ed       	ldi	r30, 0xD6	; 214
      de:	f6 e0       	ldi	r31, 0x06	; 6
      e0:	40 83       	st	Z, r20
		 chArr[1] = ch2;
      e2:	81 83       	std	Z+1, r24	; 0x01

 char* AlarmClock::int_to_char(int num){
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
		 chArr = "__";
      e4:	cf 01       	movw	r24, r30
      e6:	08 95       	ret
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
		 temp = num + 48;
      e8:	20 5d       	subi	r18, 0xD0	; 208
      ea:	3f 4f       	sbci	r19, 0xFF	; 255
		 char ch = temp;
		 chArr[1] = ch;
      ec:	20 93 da 06 	sts	0x06DA, r18	; 0x8006da <GOT+0x34>
		 char ch2 = rem;
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
      f0:	89 ed       	ldi	r24, 0xD9	; 217
      f2:	96 e0       	ldi	r25, 0x06	; 6
		 temp = num + 48;
		 char ch = temp;
		 chArr[1] = ch;
	 }
	 return chArr;
 }
      f4:	08 95       	ret

000000f6 <_ZN10AlarmClock11displayTimeEv>:

 void AlarmClock::displayTime(){
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	8c 01       	movw	r16, r24

	 char* time1 = "    00:00:00     ";
	 int sec, min, hr;
	 //uint8_t sec_bcd, min_bcd, hr_bcd;

	 sec = ds1307_1.read_time(0x00);	//read from seconds reg
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	8f e8       	ldi	r24, 0x8F	; 143
     10c:	97 e0       	ldi	r25, 0x07	; 7
     10e:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
     112:	7c 01       	movw	r14, r24
	 min = ds1307_1.read_time(0x01);	//read from minutes reg
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	8f e8       	ldi	r24, 0x8F	; 143
     118:	97 e0       	ldi	r25, 0x07	; 7
     11a:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
     11e:	6c 01       	movw	r12, r24
	 hr = ds1307_1.read_time(0x02);		//read from hours reg
     120:	62 e0       	ldi	r22, 0x02	; 2
     122:	8f e8       	ldi	r24, 0x8F	; 143
     124:	97 e0       	ldi	r25, 0x07	; 7
     126:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
	 
	 str_hr = int_to_char(hr);
     12a:	bc 01       	movw	r22, r24
     12c:	c8 01       	movw	r24, r16
     12e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[4] = str_hr[0];
     132:	fc 01       	movw	r30, r24
     134:	20 81       	ld	r18, Z
     136:	cc ed       	ldi	r28, 0xDC	; 220
     138:	d6 e0       	ldi	r29, 0x06	; 6
     13a:	2c 83       	std	Y+4, r18	; 0x04
	 time1[5] = str_hr[1];
     13c:	81 81       	ldd	r24, Z+1	; 0x01
     13e:	8d 83       	std	Y+5, r24	; 0x05
	 
	 str_min = int_to_char(min);
     140:	b6 01       	movw	r22, r12
     142:	c8 01       	movw	r24, r16
     144:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[7] = str_min[0];
     148:	fc 01       	movw	r30, r24
     14a:	20 81       	ld	r18, Z
     14c:	2f 83       	std	Y+7, r18	; 0x07
	 time1[8] = str_min[1];
     14e:	81 81       	ldd	r24, Z+1	; 0x01
     150:	88 87       	std	Y+8, r24	; 0x08
	 
	 str_sec = int_to_char(sec);
     152:	b7 01       	movw	r22, r14
     154:	c8 01       	movw	r24, r16
     156:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[10] = str_sec[0];
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	2a 87       	std	Y+10, r18	; 0x0a
	 time1[11] = str_sec[1];
     160:	81 81       	ldd	r24, Z+1	; 0x01
     162:	8b 87       	std	Y+11, r24	; 0x0b
	 
	 lcd_1.LCD_String_xy(0, 0, time1);       //Write string on 1st line of LCD
     164:	9e 01       	movw	r18, r28
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	89 e8       	ldi	r24, 0x89	; 137
     16c:	97 e0       	ldi	r25, 0x07	; 7
     16e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	 lcd_1.LCD_String_xy(1, 0, "MENU            ");		//Write string on 2nd line
     172:	2e ee       	ldi	r18, 0xEE	; 238
     174:	36 e0       	ldi	r19, 0x06	; 6
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	89 e8       	ldi	r24, 0x89	; 137
     17c:	97 e0       	ldi	r25, 0x07	; 7
     17e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     182:	ff ef       	ldi	r31, 0xFF	; 255
     184:	29 e6       	ldi	r18, 0x69	; 105
     186:	88 e1       	ldi	r24, 0x18	; 24
     188:	f1 50       	subi	r31, 0x01	; 1
     18a:	20 40       	sbci	r18, 0x00	; 0
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	e1 f7       	brne	.-8      	; 0x188 <_ZN10AlarmClock11displayTimeEv+0x92>
     190:	00 c0       	rjmp	.+0      	; 0x192 <_ZN10AlarmClock11displayTimeEv+0x9c>
     192:	00 00       	nop
	 _delay_ms(1000);
}
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	cf 90       	pop	r12
     1a4:	08 95       	ret

000001a6 <_ZN10AlarmClock12setTimetoRTCEv>:

 bool AlarmClock::setTimetoRTC(){
     1a6:	9f 92       	push	r9
     1a8:	af 92       	push	r10
     1aa:	bf 92       	push	r11
     1ac:	cf 92       	push	r12
     1ae:	df 92       	push	r13
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	63 97       	sbiw	r28, 0x13	; 19
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	cd bf       	out	0x3d, r28	; 61
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
	bool goBack = false;
	int n[6] = {4, 5, 7, 8, 10, 11};
     1cc:	8c e0       	ldi	r24, 0x0C	; 12
     1ce:	ea ec       	ldi	r30, 0xCA	; 202
     1d0:	f6 e0       	ldi	r31, 0x06	; 6
     1d2:	de 01       	movw	r26, r28
     1d4:	18 96       	adiw	r26, 0x08	; 8
     1d6:	01 90       	ld	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	8a 95       	dec	r24
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <_ZN10AlarmClock12setTimetoRTCEv+0x30>
	lcd_1.LCD_Clear();
     1de:	89 e8       	ldi	r24, 0x89	; 137
     1e0:	97 e0       	ldi	r25, 0x07	; 7
     1e2:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
	lcd_1.LCD_String_xy(0, 4, time);
     1e6:	2f ef       	ldi	r18, 0xFF	; 255
     1e8:	36 e0       	ldi	r19, 0x06	; 6
     1ea:	44 e0       	ldi	r20, 0x04	; 4
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	89 e8       	ldi	r24, 0x89	; 137
     1f0:	97 e0       	ldi	r25, 0x07	; 7
     1f2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	lcd_1.LCD_String_xy(1, 0,"OK        CANCEL");
     1f6:	28 e0       	ldi	r18, 0x08	; 8
     1f8:	37 e0       	ldi	r19, 0x07	; 7
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	89 e8       	ldi	r24, 0x89	; 137
     200:	97 e0       	ldi	r25, 0x07	; 7
     202:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>

	for(uint8_t i=0;i<7;i++)
     206:	00 e0       	ldi	r16, 0x00	; 0
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
	bool goBack = false;
     208:	91 2c       	mov	r9, r1
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
     20a:	e1 2c       	mov	r14, r1
     20c:	f1 2c       	mov	r15, r1
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
     20e:	a1 2c       	mov	r10, r1
     210:	b1 2c       	mov	r11, r1
	
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
     212:	c1 2c       	mov	r12, r1
     214:	d1 2c       	mov	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	lcd_1.LCD_String_xy(1, 0,"OK        CANCEL");

	for(uint8_t i=0;i<7;i++)
     216:	07 30       	cpi	r16, 0x07	; 7
     218:	08 f0       	brcs	.+2      	; 0x21c <_ZN10AlarmClock12setTimetoRTCEv+0x76>
     21a:	2c c1       	rjmp	.+600    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
			}
			else{
				lcd_1.LCD_String_xy(1, 0,"OK              ");
			}*/

			key = keypad_1.GetKey();
     21c:	88 e8       	ldi	r24, 0x88	; 136
     21e:	97 e0       	ldi	r25, 0x07	; 7
     220:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7Get_key6GetKeyEv>
     224:	18 2f       	mov	r17, r24
			if (key == 1) {lcd_1.LCD_String_xy(0,n[i],"1");break;}
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	99 f4       	brne	.+38     	; 0x250 <_ZN10AlarmClock12setTimetoRTCEv+0xaa>
     22a:	e0 2f       	mov	r30, r16
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	ee 0f       	add	r30, r30
     230:	ff 1f       	adc	r31, r31
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	8c 0f       	add	r24, r28
     238:	9d 1f       	adc	r25, r29
     23a:	e8 0f       	add	r30, r24
     23c:	f9 1f       	adc	r31, r25
     23e:	47 81       	ldd	r20, Z+7	; 0x07
     240:	29 e1       	ldi	r18, 0x19	; 25
     242:	37 e0       	ldi	r19, 0x07	; 7
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	89 e8       	ldi	r24, 0x89	; 137
     248:	97 e0       	ldi	r25, 0x07	; 7
     24a:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     24e:	d1 c0       	rjmp	.+418    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 2) {lcd_1.LCD_String_xy(0,n[i],"2");break;}
     250:	82 30       	cpi	r24, 0x02	; 2
     252:	99 f4       	brne	.+38     	; 0x27a <_ZN10AlarmClock12setTimetoRTCEv+0xd4>
     254:	e0 2f       	mov	r30, r16
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ee 0f       	add	r30, r30
     25a:	ff 1f       	adc	r31, r31
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	8c 0f       	add	r24, r28
     262:	9d 1f       	adc	r25, r29
     264:	e8 0f       	add	r30, r24
     266:	f9 1f       	adc	r31, r25
     268:	47 81       	ldd	r20, Z+7	; 0x07
     26a:	2b e1       	ldi	r18, 0x1B	; 27
     26c:	37 e0       	ldi	r19, 0x07	; 7
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	89 e8       	ldi	r24, 0x89	; 137
     272:	97 e0       	ldi	r25, 0x07	; 7
     274:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     278:	bc c0       	rjmp	.+376    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 3) {lcd_1.LCD_String_xy(0,n[i],"3");break;}
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	99 f4       	brne	.+38     	; 0x2a4 <_ZN10AlarmClock12setTimetoRTCEv+0xfe>
     27e:	e0 2f       	mov	r30, r16
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	8c 0f       	add	r24, r28
     28c:	9d 1f       	adc	r25, r29
     28e:	e8 0f       	add	r30, r24
     290:	f9 1f       	adc	r31, r25
     292:	47 81       	ldd	r20, Z+7	; 0x07
     294:	2d e1       	ldi	r18, 0x1D	; 29
     296:	37 e0       	ldi	r19, 0x07	; 7
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	89 e8       	ldi	r24, 0x89	; 137
     29c:	97 e0       	ldi	r25, 0x07	; 7
     29e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     2a2:	a7 c0       	rjmp	.+334    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 4) {lcd_1.LCD_String_xy(0,n[i],"4");break;}
     2a4:	84 30       	cpi	r24, 0x04	; 4
     2a6:	99 f4       	brne	.+38     	; 0x2ce <_ZN10AlarmClock12setTimetoRTCEv+0x128>
     2a8:	e0 2f       	mov	r30, r16
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	ee 0f       	add	r30, r30
     2ae:	ff 1f       	adc	r31, r31
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8c 0f       	add	r24, r28
     2b6:	9d 1f       	adc	r25, r29
     2b8:	e8 0f       	add	r30, r24
     2ba:	f9 1f       	adc	r31, r25
     2bc:	47 81       	ldd	r20, Z+7	; 0x07
     2be:	2f e1       	ldi	r18, 0x1F	; 31
     2c0:	37 e0       	ldi	r19, 0x07	; 7
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	89 e8       	ldi	r24, 0x89	; 137
     2c6:	97 e0       	ldi	r25, 0x07	; 7
     2c8:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     2cc:	92 c0       	rjmp	.+292    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 5) {lcd_1.LCD_String_xy(0,n[i],"5");break;}
     2ce:	85 30       	cpi	r24, 0x05	; 5
     2d0:	99 f4       	brne	.+38     	; 0x2f8 <_ZN10AlarmClock12setTimetoRTCEv+0x152>
     2d2:	e0 2f       	mov	r30, r16
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	ee 0f       	add	r30, r30
     2d8:	ff 1f       	adc	r31, r31
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 0f       	add	r24, r28
     2e0:	9d 1f       	adc	r25, r29
     2e2:	e8 0f       	add	r30, r24
     2e4:	f9 1f       	adc	r31, r25
     2e6:	47 81       	ldd	r20, Z+7	; 0x07
     2e8:	21 e2       	ldi	r18, 0x21	; 33
     2ea:	37 e0       	ldi	r19, 0x07	; 7
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	89 e8       	ldi	r24, 0x89	; 137
     2f0:	97 e0       	ldi	r25, 0x07	; 7
     2f2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     2f6:	7d c0       	rjmp	.+250    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
     2f8:	86 30       	cpi	r24, 0x06	; 6
     2fa:	99 f4       	brne	.+38     	; 0x322 <_ZN10AlarmClock12setTimetoRTCEv+0x17c>
     2fc:	e0 2f       	mov	r30, r16
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	ee 0f       	add	r30, r30
     302:	ff 1f       	adc	r31, r31
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	8c 0f       	add	r24, r28
     30a:	9d 1f       	adc	r25, r29
     30c:	e8 0f       	add	r30, r24
     30e:	f9 1f       	adc	r31, r25
     310:	47 81       	ldd	r20, Z+7	; 0x07
     312:	23 e2       	ldi	r18, 0x23	; 35
     314:	37 e0       	ldi	r19, 0x07	; 7
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	89 e8       	ldi	r24, 0x89	; 137
     31a:	97 e0       	ldi	r25, 0x07	; 7
     31c:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     320:	68 c0       	rjmp	.+208    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
     322:	87 30       	cpi	r24, 0x07	; 7
     324:	99 f4       	brne	.+38     	; 0x34c <_ZN10AlarmClock12setTimetoRTCEv+0x1a6>
     326:	e0 2f       	mov	r30, r16
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	ee 0f       	add	r30, r30
     32c:	ff 1f       	adc	r31, r31
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	8c 0f       	add	r24, r28
     334:	9d 1f       	adc	r25, r29
     336:	e8 0f       	add	r30, r24
     338:	f9 1f       	adc	r31, r25
     33a:	47 81       	ldd	r20, Z+7	; 0x07
     33c:	25 e2       	ldi	r18, 0x25	; 37
     33e:	37 e0       	ldi	r19, 0x07	; 7
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	89 e8       	ldi	r24, 0x89	; 137
     344:	97 e0       	ldi	r25, 0x07	; 7
     346:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     34a:	53 c0       	rjmp	.+166    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
     34c:	88 30       	cpi	r24, 0x08	; 8
     34e:	99 f4       	brne	.+38     	; 0x376 <_ZN10AlarmClock12setTimetoRTCEv+0x1d0>
     350:	e0 2f       	mov	r30, r16
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	8c 0f       	add	r24, r28
     35e:	9d 1f       	adc	r25, r29
     360:	e8 0f       	add	r30, r24
     362:	f9 1f       	adc	r31, r25
     364:	47 81       	ldd	r20, Z+7	; 0x07
     366:	27 e2       	ldi	r18, 0x27	; 39
     368:	37 e0       	ldi	r19, 0x07	; 7
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	89 e8       	ldi	r24, 0x89	; 137
     36e:	97 e0       	ldi	r25, 0x07	; 7
     370:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     374:	3e c0       	rjmp	.+124    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
     376:	89 30       	cpi	r24, 0x09	; 9
     378:	99 f4       	brne	.+38     	; 0x3a0 <_ZN10AlarmClock12setTimetoRTCEv+0x1fa>
     37a:	e0 2f       	mov	r30, r16
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	8c 0f       	add	r24, r28
     388:	9d 1f       	adc	r25, r29
     38a:	e8 0f       	add	r30, r24
     38c:	f9 1f       	adc	r31, r25
     38e:	47 81       	ldd	r20, Z+7	; 0x07
     390:	29 e2       	ldi	r18, 0x29	; 41
     392:	37 e0       	ldi	r19, 0x07	; 7
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	89 e8       	ldi	r24, 0x89	; 137
     398:	97 e0       	ldi	r25, 0x07	; 7
     39a:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     39e:	29 c0       	rjmp	.+82     	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
     3a0:	8b 30       	cpi	r24, 0x0B	; 11
     3a2:	a1 f4       	brne	.+40     	; 0x3cc <_ZN10AlarmClock12setTimetoRTCEv+0x226>
     3a4:	e0 2f       	mov	r30, r16
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	8c 0f       	add	r24, r28
     3b2:	9d 1f       	adc	r25, r29
     3b4:	e8 0f       	add	r30, r24
     3b6:	f9 1f       	adc	r31, r25
     3b8:	47 81       	ldd	r20, Z+7	; 0x07
     3ba:	26 e0       	ldi	r18, 0x06	; 6
     3bc:	37 e0       	ldi	r19, 0x07	; 7
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	89 e8       	ldi	r24, 0x89	; 137
     3c2:	97 e0       	ldi	r25, 0x07	; 7
     3c4:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     3c8:	10 e0       	ldi	r17, 0x00	; 0
     3ca:	13 c0       	rjmp	.+38     	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if(!(PINC & (1<<Back))){goBack=true;i=8;break;}
     3cc:	33 9b       	sbis	0x06, 3	; 6
     3ce:	0c c0       	rjmp	.+24     	; 0x3e8 <_ZN10AlarmClock12setTimetoRTCEv+0x242>
			if (!(PINC & (1<<Ok))){i=8; break;}
     3d0:	32 9b       	sbis	0x06, 2	; 6
     3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <_ZN10AlarmClock12setTimetoRTCEv+0x24a>
     3d4:	9f ef       	ldi	r25, 0xFF	; 255
     3d6:	21 ee       	ldi	r18, 0xE1	; 225
     3d8:	84 e0       	ldi	r24, 0x04	; 4
     3da:	91 50       	subi	r25, 0x01	; 1
     3dc:	20 40       	sbci	r18, 0x00	; 0
     3de:	80 40       	sbci	r24, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <_ZN10AlarmClock12setTimetoRTCEv+0x234>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     3e4:	00 00       	nop
     3e6:	1a cf       	rjmp	.-460    	; 0x21c <_ZN10AlarmClock12setTimetoRTCEv+0x76>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
			if(!(PINC & (1<<Back))){goBack=true;i=8;break;}
     3e8:	08 e0       	ldi	r16, 0x08	; 8
     3ea:	99 24       	eor	r9, r9
     3ec:	93 94       	inc	r9
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (!(PINC & (1<<Ok))){i=8; break;}
     3f0:	08 e0       	ldi	r16, 0x08	; 8

			_delay_ms(200);
		}

		if (i == 0){hr+=key*10;}
     3f2:	01 11       	cpse	r16, r1
     3f4:	0f c0       	rjmp	.+30     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     3f6:	81 2f       	mov	r24, r17
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	9c 01       	movw	r18, r24
     3fc:	22 0f       	add	r18, r18
     3fe:	33 1f       	adc	r19, r19
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	82 0f       	add	r24, r18
     40e:	93 1f       	adc	r25, r19
     410:	e8 0e       	add	r14, r24
     412:	f9 1e       	adc	r15, r25
		if (i == 1){hr+=key;}
     414:	01 30       	cpi	r16, 0x01	; 1
     416:	11 f4       	brne	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     418:	e1 0e       	add	r14, r17
     41a:	f1 1c       	adc	r15, r1
		if (i == 2){min+=key*10;}
     41c:	02 30       	cpi	r16, 0x02	; 2
     41e:	79 f4       	brne	.+30     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     420:	81 2f       	mov	r24, r17
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	9c 01       	movw	r18, r24
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	82 0f       	add	r24, r18
     438:	93 1f       	adc	r25, r19
     43a:	a8 0e       	add	r10, r24
     43c:	b9 1e       	adc	r11, r25
		if (i == 3){min+=key;}
     43e:	03 30       	cpi	r16, 0x03	; 3
     440:	11 f4       	brne	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     442:	a1 0e       	add	r10, r17
     444:	b1 1c       	adc	r11, r1
		if (i == 4){sec+=key*10;}
     446:	04 30       	cpi	r16, 0x04	; 4
     448:	79 f4       	brne	.+30     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     44a:	81 2f       	mov	r24, r17
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	9c 01       	movw	r18, r24
     450:	22 0f       	add	r18, r18
     452:	33 1f       	adc	r19, r19
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	82 0f       	add	r24, r18
     462:	93 1f       	adc	r25, r19
     464:	c8 0e       	add	r12, r24
     466:	d9 1e       	adc	r13, r25
		if (i == 5){sec+=key;}
     468:	05 30       	cpi	r16, 0x05	; 5
     46a:	11 f4       	brne	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     46c:	c1 0e       	add	r12, r17
     46e:	d1 1c       	adc	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	lcd_1.LCD_String_xy(1, 0,"OK        CANCEL");

	for(uint8_t i=0;i<7;i++)
     470:	0f 5f       	subi	r16, 0xFF	; 255
     472:	d1 ce       	rjmp	.-606    	; 0x216 <_ZN10AlarmClock12setTimetoRTCEv+0x70>
		if (i == 3){min+=key;}
		if (i == 4){sec+=key*10;}
		if (i == 5){sec+=key;}

	}
	if (!(goBack)){
     474:	91 10       	cpse	r9, r1
     476:	37 c0       	rjmp	.+110    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
		hour = ds1307_1.dec_to_bcd(hr);
     478:	b7 01       	movw	r22, r14
     47a:	8f e8       	ldi	r24, 0x8F	; 143
     47c:	97 e0       	ldi	r25, 0x07	; 7
     47e:	0e 94 34 03 	call	0x668	; 0x668 <_ZN6ds130710dec_to_bcdEi>
     482:	18 2f       	mov	r17, r24
		minutes = ds1307_1.dec_to_bcd(min);
     484:	b5 01       	movw	r22, r10
     486:	8f e8       	ldi	r24, 0x8F	; 143
     488:	97 e0       	ldi	r25, 0x07	; 7
     48a:	0e 94 34 03 	call	0x668	; 0x668 <_ZN6ds130710dec_to_bcdEi>
     48e:	08 2f       	mov	r16, r24
		seconds = ds1307_1.dec_to_bcd(sec);
     490:	b6 01       	movw	r22, r12
     492:	8f e8       	ldi	r24, 0x8F	; 143
     494:	97 e0       	ldi	r25, 0x07	; 7
     496:	0e 94 34 03 	call	0x668	; 0x668 <_ZN6ds130710dec_to_bcdEi>

		// Setting time to the RTC
		rtc.seconds =  seconds;
     49a:	89 83       	std	Y+1, r24	; 0x01
		rtc.minute =  minutes;
     49c:	0a 83       	std	Y+2, r16	; 0x02
		rtc.hour = hour;
     49e:	1b 83       	std	Y+3, r17	; 0x03
		rtc.weekDay = 0x07;
     4a0:	87 e0       	ldi	r24, 0x07	; 7
     4a2:	8c 83       	std	Y+4, r24	; 0x04
		rtc.date = 0x20;
     4a4:	80 e2       	ldi	r24, 0x20	; 32
     4a6:	8d 83       	std	Y+5, r24	; 0x05
		rtc.month = 0x06;
     4a8:	86 e0       	ldi	r24, 0x06	; 6
     4aa:	8e 83       	std	Y+6, r24	; 0x06
		rtc.year = 0x21;
     4ac:	81 e2       	ldi	r24, 0x21	; 33
     4ae:	8f 83       	std	Y+7, r24	; 0x07
		lcd_1.LCD_Clear();
     4b0:	89 e8       	ldi	r24, 0x89	; 137
     4b2:	97 e0       	ldi	r25, 0x07	; 7
     4b4:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		ds1307_1.set_time(&rtc);
     4b8:	be 01       	movw	r22, r28
     4ba:	6f 5f       	subi	r22, 0xFF	; 255
     4bc:	7f 4f       	sbci	r23, 0xFF	; 255
     4be:	8f e8       	ldi	r24, 0x8F	; 143
     4c0:	97 e0       	ldi	r25, 0x07	; 7
     4c2:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN6ds13078set_timeEPNS_5rtc_tE>
		lcd_1.LCD_String_xy(0, 4, "Time Set");
     4c6:	2b e2       	ldi	r18, 0x2B	; 43
     4c8:	37 e0       	ldi	r19, 0x07	; 7
     4ca:	44 e0       	ldi	r20, 0x04	; 4
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	89 e8       	ldi	r24, 0x89	; 137
     4d0:	97 e0       	ldi	r25, 0x07	; 7
     4d2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
		lcd_1.LCD_String_xy(1, 0, "OK");
     4d6:	24 e3       	ldi	r18, 0x34	; 52
     4d8:	37 e0       	ldi	r19, 0x07	; 7
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	89 e8       	ldi	r24, 0x89	; 137
     4e0:	97 e0       	ldi	r25, 0x07	; 7
     4e2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	}
	return goBack;
 }
     4e6:	89 2d       	mov	r24, r9
     4e8:	63 96       	adiw	r28, 0x13	; 19
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	bf 90       	pop	r11
     506:	af 90       	pop	r10
     508:	9f 90       	pop	r9
     50a:	08 95       	ret

0000050c <_ZN6ds13078twi_initEv>:
  //-------------TWI initialization------------------------------------------

  void ds1307::twi_init(){
	  //TWBR = (F_CPU/SCL_freq - 16)/(2*prescalar)
	  //F_CPU = 16MHz, SCL_freq(for DS1307) = 100KHz, prescalar = 1 -> TWBR =72
	  TWBR = 0x48;	// set bit rate 72
     50c:	88 e4       	ldi	r24, 0x48	; 72
     50e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	  TWCR = (1<<TWEN);	//enable TWI
     512:	84 e0       	ldi	r24, 0x04	; 4
     514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  TWSR = 0x00;	//sets the prescalar value to 1
     518:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     51c:	08 95       	ret

0000051e <_ZN6ds13079twi_startEv>:
  }

  //------------TWI Start----------------------------------------------------

  void ds1307::twi_start(){
	  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);	// initiate the start condition
     51e:	84 ea       	ldi	r24, 0xA4	; 164
     520:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	// wait for the start condition to transmit
     524:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     528:	88 23       	and	r24, r24
     52a:	e4 f7       	brge	.-8      	; 0x524 <_ZN6ds13079twi_startEv+0x6>
  }
     52c:	08 95       	ret

0000052e <_ZN6ds13079twi_SLA_WEv>:

  void ds1307::twi_SLA_W(){
	  //chooses the device address and sends the Write signal
	  //DS1307 address = 1101000
	  //Write = 0 (last bit)
	  TWDR = 0b11010000;	//SLA + W to data register
     52e:	80 ed       	ldi	r24, 0xD0	; 208
     530:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     534:	84 e8       	ldi	r24, 0x84	; 132
     536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for SLA + W to transmit
     53a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     53e:	88 23       	and	r24, r24
     540:	e4 f7       	brge	.-8      	; 0x53a <_ZN6ds13079twi_SLA_WEv+0xc>
  }
     542:	08 95       	ret

00000544 <_ZN6ds13079twi_SLA_REv>:

  void ds1307::twi_SLA_R(){
	  //chooses the device address and sends the Read signal
	  //DS1307 address = 1101000
	  //Read = 1 (last bit)
	  TWDR = 0b11010001;	//SLA + R to data register
     544:	81 ed       	ldi	r24, 0xD1	; 209
     546:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     54a:	84 e8       	ldi	r24, 0x84	; 132
     54c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	////wait for SLA + R to transmit
     550:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     554:	88 23       	and	r24, r24
     556:	e4 f7       	brge	.-8      	; 0x550 <_ZN6ds13079twi_SLA_REv+0xc>
  }
     558:	08 95       	ret

0000055a <_ZN6ds13079twi_writeEh>:

  //-----------TWI Write(to Slave registers)----------------------------------

  void ds1307::twi_write(uint8_t x){
	  TWDR = x;	//data byte to be written to the slave
     55a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     55e:	84 e8       	ldi	r24, 0x84	; 132
     560:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
     564:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     568:	88 23       	and	r24, r24
     56a:	e4 f7       	brge	.-8      	; 0x564 <_ZN6ds13079twi_writeEh+0xa>
  }
     56c:	08 95       	ret

0000056e <_ZN6ds13078twi_readEv>:

  //------------TWI Read(from Slave registers)---------------------------------

  uint8_t ds1307::twi_read(){
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     56e:	84 e8       	ldi	r24, 0x84	; 132
     570:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
     574:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     578:	88 23       	and	r24, r24
     57a:	e4 f7       	brge	.-8      	; 0x574 <_ZN6ds13078twi_readEv+0x6>
	  return TWDR;	//returns the data read from the slave which is stored in TWDR
     57c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  }
     580:	08 95       	ret

00000582 <_ZN6ds13078twi_stopEv>:

  //------------TWI Stop------------------------------------------------------

  void ds1307::twi_stop(){
	  //stops the transmission with TWSTO
	  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     582:	84 e9       	ldi	r24, 0x94	; 148
     584:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     588:	08 95       	ret

0000058a <_ZN6ds13078set_timeEPNS_5rtc_tE>:

  //----------------Set time to DS1307---------------------------------------

  

  void ds1307::set_time(rtc_t * rtc){
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	8c 01       	movw	r16, r24
     594:	eb 01       	movw	r28, r22
	  twi_init();
     596:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN6ds13078twi_initEv>
	  twi_start();	//sending the start condition to DS1307
     59a:	c8 01       	movw	r24, r16
     59c:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN6ds13079twi_startEv>
	  twi_SLA_W();	//initiates the device ds1307 & sends write signal
     5a0:	c8 01       	movw	r24, r16
     5a2:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6ds13079twi_SLA_WEv>

	  twi_write(0x00);	//set the register pointer to 00H(seconds reg)
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	c8 01       	movw	r24, r16
     5aa:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
	  
	  twi_write(rtc -> seconds);
     5ae:	68 81       	ld	r22, Y
     5b0:	c8 01       	movw	r24, r16
     5b2:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> minute);
     5b6:	69 81       	ldd	r22, Y+1	; 0x01
     5b8:	c8 01       	movw	r24, r16
     5ba:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> hour);
     5be:	6a 81       	ldd	r22, Y+2	; 0x02
     5c0:	c8 01       	movw	r24, r16
     5c2:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> weekDay);
     5c6:	6b 81       	ldd	r22, Y+3	; 0x03
     5c8:	c8 01       	movw	r24, r16
     5ca:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> date);
     5ce:	6c 81       	ldd	r22, Y+4	; 0x04
     5d0:	c8 01       	movw	r24, r16
     5d2:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> month);
     5d6:	6d 81       	ldd	r22, Y+5	; 0x05
     5d8:	c8 01       	movw	r24, r16
     5da:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> year);
     5de:	6e 81       	ldd	r22, Y+6	; 0x06
     5e0:	c8 01       	movw	r24, r16
     5e2:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
	  
	  twi_stop(); //stop writing
     5e6:	c8 01       	movw	r24, r16
     5e8:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN6ds13078twi_stopEv>
  }
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	08 95       	ret

000005f6 <_ZN6ds130710bcd_to_decEh>:
  int ds1307::bcd_to_dec(uint8_t num){
	  //Data received from DS1307 are in Binary Coded Decimal
	  //This function converts these data to decimal integers
	  int first4, last4, decValue;
	  
	  first4 = num & 0b00001111;	//gets first 4 digits
     5f6:	26 2f       	mov	r18, r22
     5f8:	2f 70       	andi	r18, 0x0F	; 15
	  last4 = ((num & 0b11110000) >> 4); //get last 4 digits
     5fa:	62 95       	swap	r22
     5fc:	6f 70       	andi	r22, 0x0F	; 15
     5fe:	70 e0       	ldi	r23, 0x00	; 0
	  decValue = last4 * 10 + first4;	//gives the corresponding decimal value
     600:	cb 01       	movw	r24, r22
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	66 0f       	add	r22, r22
     608:	77 1f       	adc	r23, r23
     60a:	66 0f       	add	r22, r22
     60c:	77 1f       	adc	r23, r23
     60e:	66 0f       	add	r22, r22
     610:	77 1f       	adc	r23, r23
     612:	86 0f       	add	r24, r22
     614:	97 1f       	adc	r25, r23
	  
	  return decValue;
  }
     616:	82 0f       	add	r24, r18
     618:	91 1d       	adc	r25, r1
     61a:	08 95       	ret

0000061c <_ZN6ds13079read_timeEh>:
  }


  //-----------------Read time from DS1307---------------------------------

  int ds1307::read_time(uint8_t reg){
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	ec 01       	movw	r28, r24
     624:	16 2f       	mov	r17, r22
	  //sets the register pointer to the register we want -> reg (00H, 01H, etc)
	  twi_start();
     626:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN6ds13079twi_startEv>
	  twi_SLA_W();	//initiates the device ds1307
     62a:	ce 01       	movw	r24, r28
     62c:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6ds13079twi_SLA_WEv>
	  twi_write(reg);	//set the register pointer to reg)
     630:	61 2f       	mov	r22, r17
     632:	ce 01       	movw	r24, r28
     634:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
	  twi_stop();
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN6ds13078twi_stopEv>
	  
	  //reading from the particular register
	  uint8_t x;
	  int y;
	  twi_start();
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN6ds13079twi_startEv>
	  twi_SLA_R();		//read from the reg
     644:	ce 01       	movw	r24, r28
     646:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_SLA_REv>
	  x = twi_read();		//value read from reg is stored in x
     64a:	ce 01       	movw	r24, r28
     64c:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN6ds13078twi_readEv>
     650:	18 2f       	mov	r17, r24
	  twi_stop();
     652:	ce 01       	movw	r24, r28
     654:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN6ds13078twi_stopEv>
	  y = bcd_to_dec(x);
     658:	61 2f       	mov	r22, r17
     65a:	ce 01       	movw	r24, r28
     65c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN6ds130710bcd_to_decEh>
	  return y;
  }
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	08 95       	ret

00000668 <_ZN6ds130710dec_to_bcdEi>:
	  return decValue;
  }

  //-----------------Convert decimal to BCD----------------------------------

  uint8_t ds1307::dec_to_bcd(int number){
     668:	9b 01       	movw	r18, r22
	int x;
	uint8_t div=0, rem=0;
	uint8_t bcd;
	if (number > 9){
     66a:	6a 30       	cpi	r22, 0x0A	; 10
     66c:	71 05       	cpc	r23, r1
     66e:	c4 f0       	brlt	.+48     	; 0x6a0 <_ZN6ds130710dec_to_bcdEi+0x38>
		x = number / 10;
     670:	cb 01       	movw	r24, r22
     672:	6a e0       	ldi	r22, 0x0A	; 10
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divmodhi4>
		div = (x<<4);
     67a:	46 2f       	mov	r20, r22
     67c:	42 95       	swap	r20
     67e:	40 7f       	andi	r20, 0xF0	; 240
		rem = (number % (10 * x));
     680:	86 2f       	mov	r24, r22
     682:	97 2f       	mov	r25, r23
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	bc 01       	movw	r22, r24
     68a:	66 0f       	add	r22, r22
     68c:	77 1f       	adc	r23, r23
     68e:	66 0f       	add	r22, r22
     690:	77 1f       	adc	r23, r23
     692:	68 0f       	add	r22, r24
     694:	79 1f       	adc	r23, r25
     696:	c9 01       	movw	r24, r18
     698:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divmodhi4>
		bcd = div | rem;
     69c:	84 2b       	or	r24, r20
     69e:	08 95       	ret
	}
	else{
		bcd = number;
     6a0:	86 2f       	mov	r24, r22
	}
	return bcd;
     6a2:	08 95       	ret

000006a4 <_ZN7Get_key6GetKeyEv>:

uint8_t Get_key::GetKey()

{
	uint8_t r,c;
	PORTD |= 0b00001111;
     6a4:	8b b1       	in	r24, 0x0b	; 11
     6a6:	8f 60       	ori	r24, 0x0F	; 15
     6a8:	8b b9       	out	0x0b, r24	; 11
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	83 30       	cpi	r24, 0x03	; 3
     6ae:	80 f5       	brcc	.+96     	; 0x710 <_ZN7Get_key6GetKeyEv+0x6c>
	{
		DDRD &=~(0b01111111);
     6b0:	9a b1       	in	r25, 0x0a	; 10
     6b2:	90 78       	andi	r25, 0x80	; 128
     6b4:	9a b9       	out	0x0a, r25	; 10
		DDRD |=(0b01000000>>c);
     6b6:	9a b1       	in	r25, 0x0a	; 10
     6b8:	20 e4       	ldi	r18, 0x40	; 64
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	08 2e       	mov	r0, r24
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <_ZN7Get_key6GetKeyEv+0x20>
     6c0:	35 95       	asr	r19
     6c2:	27 95       	ror	r18
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <_ZN7Get_key6GetKeyEv+0x1c>
     6c8:	29 2b       	or	r18, r25
     6ca:	2a b9       	out	0x0a, r18	; 10
		for (r=0;r<4;r++)//identifying the row of the pressed key
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	94 30       	cpi	r25, 0x04	; 4
     6d0:	e8 f4       	brcc	.+58     	; 0x70c <_ZN7Get_key6GetKeyEv+0x68>
		{
			if(!(PIND & (0b00001000>>r)))
     6d2:	29 b1       	in	r18, 0x09	; 9
     6d4:	48 e0       	ldi	r20, 0x08	; 8
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	09 2e       	mov	r0, r25
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <_ZN7Get_key6GetKeyEv+0x3c>
     6dc:	55 95       	asr	r21
     6de:	47 95       	ror	r20
     6e0:	0a 94       	dec	r0
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <_ZN7Get_key6GetKeyEv+0x38>
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	24 23       	and	r18, r20
     6e8:	35 23       	and	r19, r21
     6ea:	23 2b       	or	r18, r19
     6ec:	69 f4       	brne	.+26     	; 0x708 <_ZN7Get_key6GetKeyEv+0x64>
			{
				while(!(PIND & (0b00001000>>r)));
     6ee:	29 b1       	in	r18, 0x09	; 9
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	24 23       	and	r18, r20
     6f4:	35 23       	and	r19, r21
     6f6:	23 2b       	or	r18, r19
     6f8:	d1 f3       	breq	.-12     	; 0x6ee <_ZN7Get_key6GetKeyEv+0x4a>
				return(r*3+c +1);// returning the pressed number by considering the row and the column pressed
     6fa:	29 2f       	mov	r18, r25
     6fc:	22 0f       	add	r18, r18
     6fe:	92 0f       	add	r25, r18
     700:	98 0f       	add	r25, r24
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	89 0f       	add	r24, r25
     706:	08 95       	ret
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
	{
		DDRD &=~(0b01111111);
		DDRD |=(0b01000000>>c);
		for (r=0;r<4;r++)//identifying the row of the pressed key
     708:	9f 5f       	subi	r25, 0xFF	; 255
     70a:	e1 cf       	rjmp	.-62     	; 0x6ce <_ZN7Get_key6GetKeyEv+0x2a>

{
	uint8_t r,c;
	PORTD |= 0b00001111;
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	ce cf       	rjmp	.-100    	; 0x6ac <_ZN7Get_key6GetKeyEv+0x8>
				return(r*3+c +1);// returning the pressed number by considering the row and the column pressed
			}
		}
	}
	
	return 0xFF;
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	08 95       	ret

00000714 <_ZN11LCD_Display16LCD_CommandgiverEh>:
#define ENable        PORTB1


void LCD_Display::LCD_Commandgiver(unsigned char comand)      //function to give commands to the LCD
{
	LCDER_port=(LCDER_port & 0b11000011) | ((comand & 0xF0)>>2);         //Sending upper nibble
     714:	25 b1       	in	r18, 0x05	; 5
     716:	96 2f       	mov	r25, r22
     718:	90 7f       	andi	r25, 0xF0	; 240
     71a:	89 2f       	mov	r24, r25
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	95 95       	asr	r25
     720:	87 95       	ror	r24
     722:	95 95       	asr	r25
     724:	87 95       	ror	r24
     726:	92 2f       	mov	r25, r18
     728:	93 7c       	andi	r25, 0xC3	; 195
     72a:	89 2b       	or	r24, r25
     72c:	85 b9       	out	0x05, r24	; 5
	LCDER_port &= ~(1<<Rsel);							      //setting the pin0 of portB LOW to write
     72e:	85 b1       	in	r24, 0x05	; 5
     730:	8e 7f       	andi	r24, 0xFE	; 254
     732:	85 b9       	out	0x05, r24	; 5
	LCDER_port |= (1<<ENable);                                //setting the pin1 of portB HIGH to read
     734:	85 b1       	in	r24, 0x05	; 5
     736:	82 60       	ori	r24, 0x02	; 2
     738:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73a:	85 e0       	ldi	r24, 0x05	; 5
     73c:	8a 95       	dec	r24
     73e:	f1 f7       	brne	.-4      	; 0x73c <_ZN11LCD_Display16LCD_CommandgiverEh+0x28>
     740:	00 00       	nop
	_delay_us(2);
	LCDER_port &= ~(1<<ENable);						      //setting the pin1 of portB LOW to write
     742:	85 b1       	in	r24, 0x05	; 5
     744:	8d 7f       	andi	r24, 0xFD	; 253
     746:	85 b9       	out	0x05, r24	; 5
     748:	8f e8       	ldi	r24, 0x8F	; 143
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	f1 f7       	brne	.-4      	; 0x74c <_ZN11LCD_Display16LCD_CommandgiverEh+0x38>
     750:	00 c0       	rjmp	.+0      	; 0x752 <_ZN11LCD_Display16LCD_CommandgiverEh+0x3e>
     752:	00 00       	nop
	
	_delay_us(200);
	
	LCDER_port = (LCDER_port & 0b11000011) | ((comand & 0x0F)<<2);          //Sending lower nibble
     754:	85 b1       	in	r24, 0x05	; 5
     756:	6f 70       	andi	r22, 0x0F	; 15
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	66 0f       	add	r22, r22
     75c:	77 1f       	adc	r23, r23
     75e:	66 0f       	add	r22, r22
     760:	77 1f       	adc	r23, r23
     762:	83 7c       	andi	r24, 0xC3	; 195
     764:	68 2b       	or	r22, r24
     766:	65 b9       	out	0x05, r22	; 5
	LCDER_port |= (1 << ENable);                               //setting the pin1 of portB HIGH to read
     768:	85 b1       	in	r24, 0x05	; 5
     76a:	82 60       	ori	r24, 0x02	; 2
     76c:	85 b9       	out	0x05, r24	; 5
     76e:	95 e0       	ldi	r25, 0x05	; 5
     770:	9a 95       	dec	r25
     772:	f1 f7       	brne	.-4      	; 0x770 <_ZN11LCD_Display16LCD_CommandgiverEh+0x5c>
     774:	00 00       	nop
	_delay_us(2);
	LCDER_port &= ~(1<< ENable);                               //setting the pin1 of portB LOW to write
     776:	85 b1       	in	r24, 0x05	; 5
     778:	8d 7f       	andi	r24, 0xFD	; 253
     77a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77c:	8f e9       	ldi	r24, 0x9F	; 159
     77e:	9f e0       	ldi	r25, 0x0F	; 15
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <_ZN11LCD_Display16LCD_CommandgiverEh+0x6c>
     784:	00 c0       	rjmp	.+0      	; 0x786 <_ZN11LCD_Display16LCD_CommandgiverEh+0x72>
     786:	00 00       	nop
     788:	08 95       	ret

0000078a <_ZN11LCD_Display15LCD_InitializerEv>:
	_delay_ms(2);
}

void LCD_Display::LCD_Initializer(){                           // function to output signal towards LCD
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
	LCD_Dir_00 = 0xFF;                                         // setting the portB to be in Output mode
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	84 b9       	out	0x04, r24	; 4
     794:	8f e3       	ldi	r24, 0x3F	; 63
     796:	9c e9       	ldi	r25, 0x9C	; 156
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <_ZN11LCD_Display15LCD_InitializerEv+0xe>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <_ZN11LCD_Display15LCD_InitializerEv+0x14>
     79e:	00 00       	nop
	_delay_ms(20);
	
	LCD_Commandgiver(0x02);                                    //initializes LCD 16x2 in 4-bit mode
     7a0:	62 e0       	ldi	r22, 0x02	; 2
     7a2:	ce 01       	movw	r24, r28
     7a4:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x28);                                    // configures LCD in 2-line, 4-bit mode, and 5x8 dots.
     7a8:	68 e2       	ldi	r22, 0x28	; 40
     7aa:	ce 01       	movw	r24, r28
     7ac:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x0c);                                    //Send any Display ON command
     7b0:	6c e0       	ldi	r22, 0x0C	; 12
     7b2:	ce 01       	movw	r24, r28
     7b4:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x06);                                    //increment cursor)
     7b8:	66 e0       	ldi	r22, 0x06	; 6
     7ba:	ce 01       	movw	r24, r28
     7bc:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x01);                                    //Clear display screen
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	ce 01       	movw	r24, r28
     7c4:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7c8:	8f e9       	ldi	r24, 0x9F	; 159
     7ca:	9f e0       	ldi	r25, 0x0F	; 15
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <_ZN11LCD_Display15LCD_InitializerEv+0x42>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <_ZN11LCD_Display15LCD_InitializerEv+0x48>
     7d2:	00 00       	nop
	_delay_ms(2);
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <_ZN11LCD_Display13LCD_CharacterEh>:

void LCD_Display::LCD_Character(unsigned char data_00)        //function to output characters towards LCD
{
	//LCDER_port = ( LCDER_port & 0x0F) | (data_00 & 0xF0 );    //Sending upper nibble
	LCDER_port=(LCDER_port & 0b11000011) | ((data_00 & 0xF0)>>2);
     7da:	25 b1       	in	r18, 0x05	; 5
     7dc:	96 2f       	mov	r25, r22
     7de:	90 7f       	andi	r25, 0xF0	; 240
     7e0:	89 2f       	mov	r24, r25
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	95 95       	asr	r25
     7e6:	87 95       	ror	r24
     7e8:	95 95       	asr	r25
     7ea:	87 95       	ror	r24
     7ec:	92 2f       	mov	r25, r18
     7ee:	93 7c       	andi	r25, 0xC3	; 195
     7f0:	89 2b       	or	r24, r25
     7f2:	85 b9       	out	0x05, r24	; 5
	LCDER_port |= (1<<Rsel);                                  //setting the pin0 of portB HIGH to read
     7f4:	85 b1       	in	r24, 0x05	; 5
     7f6:	81 60       	ori	r24, 0x01	; 1
     7f8:	85 b9       	out	0x05, r24	; 5
	LCDER_port |=(1<<ENable);                                 //setting the pin1 of portB HIGH to read
     7fa:	85 b1       	in	r24, 0x05	; 5
     7fc:	82 60       	ori	r24, 0x02	; 2
     7fe:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	8a 95       	dec	r24
     804:	f1 f7       	brne	.-4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	_delay_us(1);
	LCDER_port &= ~(1<<ENable);                               //setting the pin1 of portB LOW to write
     808:	85 b1       	in	r24, 0x05	; 5
     80a:	8d 7f       	andi	r24, 0xFD	; 253
     80c:	85 b9       	out	0x05, r24	; 5
     80e:	8f e8       	ldi	r24, 0x8F	; 143
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     816:	00 c0       	rjmp	.+0      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     818:	00 00       	nop
	
	_delay_us(200);
		
	//LCDER_port = ( LCDER_port & 0x0F) | (data_00 <<4 );       //Sending lower nibble
	LCDER_port = (LCDER_port & 0b11000011) | ((data_00 & 0x0F)<<2);
     81a:	85 b1       	in	r24, 0x05	; 5
     81c:	6f 70       	andi	r22, 0x0F	; 15
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	66 0f       	add	r22, r22
     822:	77 1f       	adc	r23, r23
     824:	66 0f       	add	r22, r22
     826:	77 1f       	adc	r23, r23
     828:	83 7c       	andi	r24, 0xC3	; 195
     82a:	68 2b       	or	r22, r24
     82c:	65 b9       	out	0x05, r22	; 5
	LCDER_port |= (1<< ENable);                               //setting the pin1 of portB HIGH to read
     82e:	85 b1       	in	r24, 0x05	; 5
     830:	82 60       	ori	r24, 0x02	; 2
     832:	85 b9       	out	0x05, r24	; 5
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	9a 95       	dec	r25
     838:	f1 f7       	brne	.-4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
	_delay_us(1);
	LCDER_port &= ~(1<<ENable);                               //setting the pin1 of portB LOW to write
     83c:	85 b1       	in	r24, 0x05	; 5
     83e:	8d 7f       	andi	r24, 0xFD	; 253
     840:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     842:	8f e9       	ldi	r24, 0x9F	; 159
     844:	9f e0       	ldi	r25, 0x0F	; 15
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     84c:	00 00       	nop
     84e:	08 95       	ret

00000850 <_ZN11LCD_Display10LCD_StringEPc>:
	_delay_ms(2);
}

void LCD_Display::LCD_String(char* string_00)                 //function to output the set of characters as a string
{
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	7c 01       	movw	r14, r24
     85e:	8b 01       	movw	r16, r22
	for (int ci=0;string_00[ci] != 0; ci++)                   //for loop to accumulate characters to create string
     860:	c0 e0       	ldi	r28, 0x00	; 0
     862:	d0 e0       	ldi	r29, 0x00	; 0
     864:	f8 01       	movw	r30, r16
     866:	ec 0f       	add	r30, r28
     868:	fd 1f       	adc	r31, r29
     86a:	60 81       	ld	r22, Z
     86c:	66 23       	and	r22, r22
     86e:	29 f0       	breq	.+10     	; 0x87a <_ZN11LCD_Display10LCD_StringEPc+0x2a>
	{
		LCD_Character (string_00[ci]);                        //calling the above defined function to create the string using characters
     870:	c7 01       	movw	r24, r14
     872:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11LCD_Display13LCD_CharacterEh>
	_delay_ms(2);
}

void LCD_Display::LCD_String(char* string_00)                 //function to output the set of characters as a string
{
	for (int ci=0;string_00[ci] != 0; ci++)                   //for loop to accumulate characters to create string
     876:	21 96       	adiw	r28, 0x01	; 1
     878:	f5 cf       	rjmp	.-22     	; 0x864 <_ZN11LCD_Display10LCD_StringEPc+0x14>
	{
		LCD_Character (string_00[ci]);                        //calling the above defined function to create the string using characters
	}
}
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	08 95       	ret

00000888 <_ZN11LCD_Display9LCD_ClearEv>:


void LCD_Display::LCD_Clear()                                 //function to clear the LCD after displaying the output
{
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	ec 01       	movw	r28, r24
	LCD_Commandgiver(0x01);                                   //Clear display screen
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     894:	8f e9       	ldi	r24, 0x9F	; 159
     896:	9f e0       	ldi	r25, 0x0F	; 15
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <_ZN11LCD_Display9LCD_ClearEv+0x10>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <_ZN11LCD_Display9LCD_ClearEv+0x16>
     89e:	00 00       	nop
	_delay_ms(2);
	LCD_Commandgiver(0x80);                                   //Cursor at home position
     8a0:	60 e8       	ldi	r22, 0x80	; 128
     8a2:	ce 01       	movw	r24, r28
     8a4:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <_ZN11LCD_Display13LCD_String_xyEccPc>:

void LCD_Display::LCD_String_xy(char row_1, char position, char *string_00) //function to set the position of the LCD cursor
{
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	8c 01       	movw	r16, r24
     8b8:	e9 01       	movw	r28, r18
	if (row_1 == 0 && position<16)
     8ba:	61 11       	cpse	r22, r1
     8bc:	08 c0       	rjmp	.+16     	; 0x8ce <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     8be:	40 31       	cpi	r20, 0x10	; 16
     8c0:	30 f4       	brcc	.+12     	; 0x8ce <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
	LCD_Commandgiver((position & 0x0F)| 0x80);                //Command of first row and required position<16
     8c2:	4f 70       	andi	r20, 0x0F	; 15
     8c4:	64 2f       	mov	r22, r20
     8c6:	60 68       	ori	r22, 0x80	; 128
     8c8:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     8cc:	0a c0       	rjmp	.+20     	; 0x8e2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
	else if (row_1 == 1 && position<16)
     8ce:	61 30       	cpi	r22, 0x01	; 1
     8d0:	41 f4       	brne	.+16     	; 0x8e2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     8d2:	40 31       	cpi	r20, 0x10	; 16
     8d4:	30 f4       	brcc	.+12     	; 0x8e2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
	LCD_Commandgiver((position &0x0F) | 0xC0);                //Command of first row and required position<16
     8d6:	4f 70       	andi	r20, 0x0F	; 15
     8d8:	64 2f       	mov	r22, r20
     8da:	60 6c       	ori	r22, 0xC0	; 192
     8dc:	c8 01       	movw	r24, r16
     8de:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_String(string_00);                                    //calling the above defined function
     8e2:	be 01       	movw	r22, r28
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	08 95       	ret

000008f4 <_Z11changeAlarmi>:
			}
		}
	}
} 

bool changeAlarm(int alPos){
     8f4:	8f 92       	push	r8
     8f6:	9f 92       	push	r9
     8f8:	af 92       	push	r10
     8fa:	bf 92       	push	r11
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	2c 97       	sbiw	r28, 0x0c	; 12
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	5c 01       	movw	r10, r24
	bool noChange = false;
	bool backToMenu = false;
	uint8_t key;
	
	int min_al=0, hr_al=0;
	int n[6] = {6, 7, 9, 10};
     91e:	fe 01       	movw	r30, r28
     920:	31 96       	adiw	r30, 0x01	; 1
     922:	8c e0       	ldi	r24, 0x0C	; 12
     924:	df 01       	movw	r26, r30
     926:	1d 92       	st	X+, r1
     928:	8a 95       	dec	r24
     92a:	e9 f7       	brne	.-6      	; 0x926 <__stack+0x27>
     92c:	86 e0       	ldi	r24, 0x06	; 6
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	9a 83       	std	Y+2, r25	; 0x02
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	87 e0       	ldi	r24, 0x07	; 7
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9c 83       	std	Y+4, r25	; 0x04
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	89 e0       	ldi	r24, 0x09	; 9
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	9e 83       	std	Y+6, r25	; 0x06
     942:	8d 83       	std	Y+5, r24	; 0x05
     944:	8a e0       	ldi	r24, 0x0A	; 10
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	98 87       	std	Y+8, r25	; 0x08
     94a:	8f 83       	std	Y+7, r24	; 0x07
	static int alarm[2];
	
	lcd.LCD_Clear();
     94c:	84 ed       	ldi	r24, 0xD4	; 212
     94e:	97 e0       	ldi	r25, 0x07	; 7
     950:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
     954:	95 01       	movw	r18, r10
     956:	22 95       	swap	r18
     958:	32 95       	swap	r19
     95a:	30 7f       	andi	r19, 0xF0	; 240
     95c:	32 27       	eor	r19, r18
     95e:	20 7f       	andi	r18, 0xF0	; 240
     960:	32 27       	eor	r19, r18
     962:	20 56       	subi	r18, 0x60	; 96
     964:	3e 4f       	sbci	r19, 0xFE	; 254
     966:	46 e0       	ldi	r20, 0x06	; 6
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	84 ed       	ldi	r24, 0xD4	; 212
     96c:	97 e0       	ldi	r25, 0x07	; 7
     96e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
     972:	27 e3       	ldi	r18, 0x37	; 55
     974:	37 e0       	ldi	r19, 0x07	; 7
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	84 ed       	ldi	r24, 0xD4	; 212
     97c:	97 e0       	ldi	r25, 0x07	; 7
     97e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     982:	bf ef       	ldi	r27, 0xFF	; 255
     984:	e1 ee       	ldi	r30, 0xE1	; 225
     986:	f4 e0       	ldi	r31, 0x04	; 4
     988:	b1 50       	subi	r27, 0x01	; 1
     98a:	e0 40       	sbci	r30, 0x00	; 0
     98c:	f0 40       	sbci	r31, 0x00	; 0
     98e:	e1 f7       	brne	.-8      	; 0x988 <__stack+0x89>
     990:	00 c0       	rjmp	.+0      	; 0x992 <__stack+0x93>
     992:	00 00       	nop
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     994:	00 e0       	ldi	r16, 0x00	; 0
	bool delAlarm = false;
	bool noChange = false;
	bool backToMenu = false;
	uint8_t key;
	
	int min_al=0, hr_al=0;
     996:	e1 2c       	mov	r14, r1
     998:	f1 2c       	mov	r15, r1
     99a:	c1 2c       	mov	r12, r1
     99c:	d1 2c       	mov	r13, r1

bool changeAlarm(int alPos){
	//alPos takes the position of the alarm that needs to be changed
	//--------------------Changing Alarms---------------------------
	bool delAlarm = false;
	bool noChange = false;
     99e:	81 2c       	mov	r8, r1
} 

bool changeAlarm(int alPos){
	//alPos takes the position of the alarm that needs to be changed
	//--------------------Changing Alarms---------------------------
	bool delAlarm = false;
     9a0:	91 2c       	mov	r9, r1
	
	lcd.LCD_Clear();
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     9a2:	05 30       	cpi	r16, 0x05	; 5
     9a4:	08 f0       	brcs	.+2      	; 0x9a8 <__stack+0xa9>
     9a6:	53 c1       	rjmp	.+678    	; 0xc4e <__stack+0x34f>
	{
		while(1)
		{
			key = keypad.GetKey();
     9a8:	83 ed       	ldi	r24, 0xD3	; 211
     9aa:	97 e0       	ldi	r25, 0x07	; 7
     9ac:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7Get_key6GetKeyEv>
     9b0:	18 2f       	mov	r17, r24
			if (key == 1) {lcd.LCD_String_xy(0,n[i],"1");break;}
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	99 f4       	brne	.+38     	; 0x9dc <__stack+0xdd>
     9b6:	e0 2f       	mov	r30, r16
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	ee 0f       	add	r30, r30
     9bc:	ff 1f       	adc	r31, r31
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	2c 0f       	add	r18, r28
     9c4:	3d 1f       	adc	r19, r29
     9c6:	e2 0f       	add	r30, r18
     9c8:	f3 1f       	adc	r31, r19
     9ca:	40 81       	ld	r20, Z
     9cc:	29 e1       	ldi	r18, 0x19	; 25
     9ce:	37 e0       	ldi	r19, 0x07	; 7
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	84 ed       	ldi	r24, 0xD4	; 212
     9d4:	97 e0       	ldi	r25, 0x07	; 7
     9d6:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     9da:	0d c1       	rjmp	.+538    	; 0xbf6 <__stack+0x2f7>
			if (key == 2) {lcd.LCD_String_xy(0,n[i],"2");break;}
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	99 f4       	brne	.+38     	; 0xa06 <__stack+0x107>
     9e0:	e0 2f       	mov	r30, r16
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	8c 0f       	add	r24, r28
     9ee:	9d 1f       	adc	r25, r29
     9f0:	e8 0f       	add	r30, r24
     9f2:	f9 1f       	adc	r31, r25
     9f4:	40 81       	ld	r20, Z
     9f6:	2b e1       	ldi	r18, 0x1B	; 27
     9f8:	37 e0       	ldi	r19, 0x07	; 7
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	84 ed       	ldi	r24, 0xD4	; 212
     9fe:	97 e0       	ldi	r25, 0x07	; 7
     a00:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     a04:	f8 c0       	rjmp	.+496    	; 0xbf6 <__stack+0x2f7>
			if (key == 3) {lcd.LCD_String_xy(0,n[i],"3");break;}
     a06:	83 30       	cpi	r24, 0x03	; 3
     a08:	99 f4       	brne	.+38     	; 0xa30 <__stack+0x131>
     a0a:	e0 2f       	mov	r30, r16
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	a1 e0       	ldi	r26, 0x01	; 1
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ac 0f       	add	r26, r28
     a18:	bd 1f       	adc	r27, r29
     a1a:	ea 0f       	add	r30, r26
     a1c:	fb 1f       	adc	r31, r27
     a1e:	40 81       	ld	r20, Z
     a20:	2d e1       	ldi	r18, 0x1D	; 29
     a22:	37 e0       	ldi	r19, 0x07	; 7
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	84 ed       	ldi	r24, 0xD4	; 212
     a28:	97 e0       	ldi	r25, 0x07	; 7
     a2a:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     a2e:	e3 c0       	rjmp	.+454    	; 0xbf6 <__stack+0x2f7>
			if (key == 4) {lcd.LCD_String_xy(0,n[i],"4");break;}
     a30:	84 30       	cpi	r24, 0x04	; 4
     a32:	99 f4       	brne	.+38     	; 0xa5a <__stack+0x15b>
     a34:	e0 2f       	mov	r30, r16
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	2c 0f       	add	r18, r28
     a42:	3d 1f       	adc	r19, r29
     a44:	e2 0f       	add	r30, r18
     a46:	f3 1f       	adc	r31, r19
     a48:	40 81       	ld	r20, Z
     a4a:	2f e1       	ldi	r18, 0x1F	; 31
     a4c:	37 e0       	ldi	r19, 0x07	; 7
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	84 ed       	ldi	r24, 0xD4	; 212
     a52:	97 e0       	ldi	r25, 0x07	; 7
     a54:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     a58:	ce c0       	rjmp	.+412    	; 0xbf6 <__stack+0x2f7>
			if (key == 5) {lcd.LCD_String_xy(0,n[i],"5");break;}
     a5a:	85 30       	cpi	r24, 0x05	; 5
     a5c:	99 f4       	brne	.+38     	; 0xa84 <__stack+0x185>
     a5e:	e0 2f       	mov	r30, r16
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	ee 0f       	add	r30, r30
     a64:	ff 1f       	adc	r31, r31
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	8c 0f       	add	r24, r28
     a6c:	9d 1f       	adc	r25, r29
     a6e:	e8 0f       	add	r30, r24
     a70:	f9 1f       	adc	r31, r25
     a72:	40 81       	ld	r20, Z
     a74:	21 e2       	ldi	r18, 0x21	; 33
     a76:	37 e0       	ldi	r19, 0x07	; 7
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	84 ed       	ldi	r24, 0xD4	; 212
     a7c:	97 e0       	ldi	r25, 0x07	; 7
     a7e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     a82:	b9 c0       	rjmp	.+370    	; 0xbf6 <__stack+0x2f7>
			if (key == 6) {lcd.LCD_String_xy(0,n[i],"6");break;}
     a84:	86 30       	cpi	r24, 0x06	; 6
     a86:	99 f4       	brne	.+38     	; 0xaae <__stack+0x1af>
     a88:	e0 2f       	mov	r30, r16
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	a1 e0       	ldi	r26, 0x01	; 1
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ac 0f       	add	r26, r28
     a96:	bd 1f       	adc	r27, r29
     a98:	ea 0f       	add	r30, r26
     a9a:	fb 1f       	adc	r31, r27
     a9c:	40 81       	ld	r20, Z
     a9e:	23 e2       	ldi	r18, 0x23	; 35
     aa0:	37 e0       	ldi	r19, 0x07	; 7
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	84 ed       	ldi	r24, 0xD4	; 212
     aa6:	97 e0       	ldi	r25, 0x07	; 7
     aa8:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     aac:	a4 c0       	rjmp	.+328    	; 0xbf6 <__stack+0x2f7>
			if (key == 7) {lcd.LCD_String_xy(0,n[i],"7");break;} 
     aae:	87 30       	cpi	r24, 0x07	; 7
     ab0:	99 f4       	brne	.+38     	; 0xad8 <__stack+0x1d9>
     ab2:	e0 2f       	mov	r30, r16
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	21 e0       	ldi	r18, 0x01	; 1
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	2c 0f       	add	r18, r28
     ac0:	3d 1f       	adc	r19, r29
     ac2:	e2 0f       	add	r30, r18
     ac4:	f3 1f       	adc	r31, r19
     ac6:	40 81       	ld	r20, Z
     ac8:	25 e2       	ldi	r18, 0x25	; 37
     aca:	37 e0       	ldi	r19, 0x07	; 7
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	84 ed       	ldi	r24, 0xD4	; 212
     ad0:	97 e0       	ldi	r25, 0x07	; 7
     ad2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     ad6:	8f c0       	rjmp	.+286    	; 0xbf6 <__stack+0x2f7>
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
     ad8:	88 30       	cpi	r24, 0x08	; 8
     ada:	99 f4       	brne	.+38     	; 0xb02 <__stack+0x203>
     adc:	e0 2f       	mov	r30, r16
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	8c 0f       	add	r24, r28
     aea:	9d 1f       	adc	r25, r29
     aec:	e8 0f       	add	r30, r24
     aee:	f9 1f       	adc	r31, r25
     af0:	40 81       	ld	r20, Z
     af2:	27 e2       	ldi	r18, 0x27	; 39
     af4:	37 e0       	ldi	r19, 0x07	; 7
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	84 ed       	ldi	r24, 0xD4	; 212
     afa:	97 e0       	ldi	r25, 0x07	; 7
     afc:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     b00:	7a c0       	rjmp	.+244    	; 0xbf6 <__stack+0x2f7>
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
     b02:	89 30       	cpi	r24, 0x09	; 9
     b04:	99 f4       	brne	.+38     	; 0xb2c <__stack+0x22d>
     b06:	e0 2f       	mov	r30, r16
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	a1 e0       	ldi	r26, 0x01	; 1
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	ac 0f       	add	r26, r28
     b14:	bd 1f       	adc	r27, r29
     b16:	ea 0f       	add	r30, r26
     b18:	fb 1f       	adc	r31, r27
     b1a:	40 81       	ld	r20, Z
     b1c:	29 e2       	ldi	r18, 0x29	; 41
     b1e:	37 e0       	ldi	r19, 0x07	; 7
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	84 ed       	ldi	r24, 0xD4	; 212
     b24:	97 e0       	ldi	r25, 0x07	; 7
     b26:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     b2a:	65 c0       	rjmp	.+202    	; 0xbf6 <__stack+0x2f7>
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
     b2c:	8b 30       	cpi	r24, 0x0B	; 11
     b2e:	a1 f4       	brne	.+40     	; 0xb58 <__stack+0x259>
     b30:	e0 2f       	mov	r30, r16
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	21 e0       	ldi	r18, 0x01	; 1
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	2c 0f       	add	r18, r28
     b3e:	3d 1f       	adc	r19, r29
     b40:	e2 0f       	add	r30, r18
     b42:	f3 1f       	adc	r31, r19
     b44:	40 81       	ld	r20, Z
     b46:	26 e0       	ldi	r18, 0x06	; 6
     b48:	37 e0       	ldi	r19, 0x07	; 7
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	84 ed       	ldi	r24, 0xD4	; 212
     b4e:	97 e0       	ldi	r25, 0x07	; 7
     b50:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     b54:	10 e0       	ldi	r17, 0x00	; 0
     b56:	4f c0       	rjmp	.+158    	; 0xbf6 <__stack+0x2f7>
			if (!(PINC & (1<<Ok))){
     b58:	32 99       	sbic	0x06, 2	; 6
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__stack+0x265>
				if (i==0){noChange=true;}
     b5c:	00 23       	and	r16, r16
     b5e:	09 f4       	brne	.+2      	; 0xb62 <__stack+0x263>
     b60:	47 c0       	rjmp	.+142    	; 0xbf0 <__stack+0x2f1>
     b62:	44 c0       	rjmp	.+136    	; 0xbec <__stack+0x2ed>
				i=8; 
				break;
			}
			if (!(PINC & (1<<Back))){
     b64:	33 99       	sbic	0x06, 3	; 6
     b66:	38 c0       	rjmp	.+112    	; 0xbd8 <__stack+0x2d9>
				//deleting alarm
				allAlarms[alPos][0] = 0;
     b68:	f5 01       	movw	r30, r10
     b6a:	ee 0f       	add	r30, r30
     b6c:	ff 1f       	adc	r31, r31
     b6e:	ee 0f       	add	r30, r30
     b70:	ff 1f       	adc	r31, r31
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	eb 56       	subi	r30, 0x6B	; 107
     b78:	f8 4f       	sbci	r31, 0xF8	; 248
     b7a:	11 82       	std	Z+1, r1	; 0x01
     b7c:	10 82       	st	Z, r1
				allAlarms[alPos][1] = 0;
     b7e:	13 82       	std	Z+3, r1	; 0x03
     b80:	12 82       	std	Z+2, r1	; 0x02
				allAlarms[alPos][2] = 0;
     b82:	15 82       	std	Z+5, r1	; 0x05
     b84:	14 82       	std	Z+4, r1	; 0x04
				allAlarms[alPos][3] = 0; //set alarm state as OFF
     b86:	17 82       	std	Z+7, r1	; 0x07
     b88:	16 82       	std	Z+6, r1	; 0x06

				allAlarmsMenu[alPos][7] = '_'; 
     b8a:	f5 01       	movw	r30, r10
     b8c:	e2 95       	swap	r30
     b8e:	f2 95       	swap	r31
     b90:	f0 7f       	andi	r31, 0xF0	; 240
     b92:	fe 27       	eor	r31, r30
     b94:	e0 7f       	andi	r30, 0xF0	; 240
     b96:	fe 27       	eor	r31, r30
     b98:	df 01       	movw	r26, r30
     b9a:	a0 51       	subi	r26, 0x10	; 16
     b9c:	be 4f       	sbci	r27, 0xFE	; 254
     b9e:	8f e5       	ldi	r24, 0x5F	; 95
     ba0:	17 96       	adiw	r26, 0x07	; 7
     ba2:	8c 93       	st	X, r24
     ba4:	17 97       	sbiw	r26, 0x07	; 7
				allAlarmsMenu[alPos][8] = '_'; 
     ba6:	18 96       	adiw	r26, 0x08	; 8
     ba8:	8c 93       	st	X, r24
     baa:	18 97       	sbiw	r26, 0x08	; 8
				allAlarmsMenu[alPos][10] = '_';
     bac:	1a 96       	adiw	r26, 0x0a	; 10
     bae:	8c 93       	st	X, r24
     bb0:	1a 97       	sbiw	r26, 0x0a	; 10
				allAlarmsMenu[alPos][11] = '_';
     bb2:	1b 96       	adiw	r26, 0x0b	; 11
     bb4:	8c 93       	st	X, r24
 
				alarmChangeList[alPos][0] = '0'; 
     bb6:	e0 56       	subi	r30, 0x60	; 96
     bb8:	fe 4f       	sbci	r31, 0xFE	; 254
     bba:	80 e3       	ldi	r24, 0x30	; 48
     bbc:	80 83       	st	Z, r24
				alarmChangeList[alPos][1] = '0'; 
     bbe:	81 83       	std	Z+1, r24	; 0x01
				alarmChangeList[alPos][3] = '0'; 
     bc0:	83 83       	std	Z+3, r24	; 0x03
				alarmChangeList[alPos][4] = '0'; 
     bc2:	84 83       	std	Z+4, r24	; 0x04
				
				i = 8;
				delAlarm = true;
				set=3;
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <set+0x1>
     bcc:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <set>
				alarmChangeList[alPos][0] = '0'; 
				alarmChangeList[alPos][1] = '0'; 
				alarmChangeList[alPos][3] = '0'; 
				alarmChangeList[alPos][4] = '0'; 
				
				i = 8;
     bd0:	08 e0       	ldi	r16, 0x08	; 8
				delAlarm = true;
     bd2:	99 24       	eor	r9, r9
     bd4:	93 94       	inc	r9
				set=3;
				break;	
     bd6:	0f c0       	rjmp	.+30     	; 0xbf6 <__stack+0x2f7>
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	81 ee       	ldi	r24, 0xE1	; 225
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	31 50       	subi	r19, 0x01	; 1
     be0:	80 40       	sbci	r24, 0x00	; 0
     be2:	90 40       	sbci	r25, 0x00	; 0
     be4:	e1 f7       	brne	.-8      	; 0xbde <__stack+0x2df>
     be6:	00 c0       	rjmp	.+0      	; 0xbe8 <__stack+0x2e9>
     be8:	00 00       	nop
     bea:	de ce       	rjmp	.-580    	; 0x9a8 <__stack+0xa9>
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
			if (!(PINC & (1<<Ok))){
				if (i==0){noChange=true;}
				i=8; 
     bec:	08 e0       	ldi	r16, 0x08	; 8
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <__stack+0x2f7>
     bf0:	08 e0       	ldi	r16, 0x08	; 8
			if (key == 7) {lcd.LCD_String_xy(0,n[i],"7");break;} 
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
			if (!(PINC & (1<<Ok))){
				if (i==0){noChange=true;}
     bf2:	88 24       	eor	r8, r8
     bf4:	83 94       	inc	r8
				break;	
			}
			_delay_ms(200);
		}

		if (i == 0){hr_al+=key*10;}
     bf6:	01 11       	cpse	r16, r1
     bf8:	0f c0       	rjmp	.+30     	; 0xc18 <__stack+0x319>
     bfa:	81 2f       	mov	r24, r17
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9c 01       	movw	r18, r24
     c00:	22 0f       	add	r18, r18
     c02:	33 1f       	adc	r19, r19
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	82 0f       	add	r24, r18
     c12:	93 1f       	adc	r25, r19
     c14:	e8 0e       	add	r14, r24
     c16:	f9 1e       	adc	r15, r25
		if (i == 1){hr_al+=key;}
     c18:	01 30       	cpi	r16, 0x01	; 1
     c1a:	11 f4       	brne	.+4      	; 0xc20 <__stack+0x321>
     c1c:	e1 0e       	add	r14, r17
     c1e:	f1 1c       	adc	r15, r1
		if (i == 2){min_al+=key*10;}
     c20:	02 30       	cpi	r16, 0x02	; 2
     c22:	79 f4       	brne	.+30     	; 0xc42 <__stack+0x343>
     c24:	81 2f       	mov	r24, r17
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9c 01       	movw	r18, r24
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	82 0f       	add	r24, r18
     c3c:	93 1f       	adc	r25, r19
     c3e:	c8 0e       	add	r12, r24
     c40:	d9 1e       	adc	r13, r25
		if (i == 3){min_al+=key;}
     c42:	03 30       	cpi	r16, 0x03	; 3
     c44:	11 f4       	brne	.+4      	; 0xc4a <__stack+0x34b>
     c46:	c1 0e       	add	r12, r17
     c48:	d1 1c       	adc	r13, r1
	
	lcd.LCD_Clear();
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     c4a:	0f 5f       	subi	r16, 0xFF	; 255
     c4c:	aa ce       	rjmp	.-684    	; 0x9a2 <__stack+0xa3>
		if (i == 1){hr_al+=key;}
		if (i == 2){min_al+=key*10;}
		if (i == 3){min_al+=key;}
	}
	//updating the lists with new alarm Hour and Min
	if (!(delAlarm || noChange)){
     c4e:	91 10       	cpse	r9, r1
     c50:	4d c0       	rjmp	.+154    	; 0xcec <__stack+0x3ed>
     c52:	81 10       	cpse	r8, r1
     c54:	4d c0       	rjmp	.+154    	; 0xcf0 <__stack+0x3f1>
		char* txtHr;
		char* txtMin;
		allAlarms[alPos][0] = hr_al;
     c56:	f5 01       	movw	r30, r10
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	eb 56       	subi	r30, 0x6B	; 107
     c66:	f8 4f       	sbci	r31, 0xF8	; 248
     c68:	f1 82       	std	Z+1, r15	; 0x01
     c6a:	e0 82       	st	Z, r14
		allAlarms[alPos][1] = min_al;
     c6c:	d3 82       	std	Z+3, r13	; 0x03
     c6e:	c2 82       	std	Z+2, r12	; 0x02
		allAlarms[alPos][2] = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	95 83       	std	Z+5, r25	; 0x05
     c76:	84 83       	std	Z+4, r24	; 0x04
		allAlarms[alPos][3] = 1;
     c78:	97 83       	std	Z+7, r25	; 0x07
     c7a:	86 83       	std	Z+6, r24	; 0x06

		txtHr = alarmclock.int_to_char(hr_al);
     c7c:	b7 01       	movw	r22, r14
     c7e:	81 ed       	ldi	r24, 0xD1	; 209
     c80:	97 e0       	ldi	r25, 0x07	; 7
     c82:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     c86:	fc 01       	movw	r30, r24
		allAlarmsMenu[alPos][7] = txtHr[0];
     c88:	80 81       	ld	r24, Z
     c8a:	85 01       	movw	r16, r10
     c8c:	02 95       	swap	r16
     c8e:	12 95       	swap	r17
     c90:	10 7f       	andi	r17, 0xF0	; 240
     c92:	10 27       	eor	r17, r16
     c94:	00 7f       	andi	r16, 0xF0	; 240
     c96:	10 27       	eor	r17, r16
     c98:	d8 01       	movw	r26, r16
     c9a:	a0 51       	subi	r26, 0x10	; 16
     c9c:	be 4f       	sbci	r27, 0xFE	; 254
     c9e:	7d 01       	movw	r14, r26
     ca0:	17 96       	adiw	r26, 0x07	; 7
     ca2:	8c 93       	st	X, r24
     ca4:	17 97       	sbiw	r26, 0x07	; 7
		allAlarmsMenu[alPos][8] = txtHr[1]; 
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	18 96       	adiw	r26, 0x08	; 8
     caa:	8c 93       	st	X, r24

		alarmChangeList[alPos][0] = txtHr[0];
     cac:	80 81       	ld	r24, Z
     cae:	00 56       	subi	r16, 0x60	; 96
     cb0:	1e 4f       	sbci	r17, 0xFE	; 254
     cb2:	d8 01       	movw	r26, r16
     cb4:	8c 93       	st	X, r24
		alarmChangeList[alPos][1] = txtHr[1];
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	11 96       	adiw	r26, 0x01	; 1
     cba:	8c 93       	st	X, r24

		txtMin = alarmclock.int_to_char(min_al);
     cbc:	b6 01       	movw	r22, r12
     cbe:	81 ed       	ldi	r24, 0xD1	; 209
     cc0:	97 e0       	ldi	r25, 0x07	; 7
     cc2:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     cc6:	fc 01       	movw	r30, r24

		alarmChangeList[alPos][3] = txtMin[0];
     cc8:	80 81       	ld	r24, Z
     cca:	d8 01       	movw	r26, r16
     ccc:	13 96       	adiw	r26, 0x03	; 3
     cce:	8c 93       	st	X, r24
     cd0:	13 97       	sbiw	r26, 0x03	; 3
		alarmChangeList[alPos][4] = txtMin[1];	
     cd2:	81 81       	ldd	r24, Z+1	; 0x01
     cd4:	14 96       	adiw	r26, 0x04	; 4
     cd6:	8c 93       	st	X, r24

		allAlarmsMenu[alPos][10] = txtMin[0];
     cd8:	80 81       	ld	r24, Z
     cda:	d7 01       	movw	r26, r14
     cdc:	1a 96       	adiw	r26, 0x0a	; 10
     cde:	8c 93       	st	X, r24
     ce0:	1a 97       	sbiw	r26, 0x0a	; 10
		allAlarmsMenu[alPos][11] = txtMin[1];
     ce2:	81 81       	ldd	r24, Z+1	; 0x01
     ce4:	1b 96       	adiw	r26, 0x0b	; 11
     ce6:	8c 93       	st	X, r24

		backToMenu = true;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	03 c0       	rjmp	.+6      	; 0xcf2 <__stack+0x3f3>
bool changeAlarm(int alPos){
	//alPos takes the position of the alarm that needs to be changed
	//--------------------Changing Alarms---------------------------
	bool delAlarm = false;
	bool noChange = false;
	bool backToMenu = false;
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <__stack+0x3f3>
     cf0:	80 e0       	ldi	r24, 0x00	; 0
		allAlarmsMenu[alPos][11] = txtMin[1];

		backToMenu = true;
	} 
	return backToMenu;
}
     cf2:	2c 96       	adiw	r28, 0x0c	; 12
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
     d12:	9f 90       	pop	r9
     d14:	8f 90       	pop	r8
     d16:	08 95       	ret

00000d18 <_Z8resetAllv>:

void resetAll(){
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	27 97       	sbiw	r28, 0x07	; 7
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
	lcd.LCD_String_xy(0, 0, "Resetting All");
     d2c:	27 e4       	ldi	r18, 0x47	; 71
     d2e:	37 e0       	ldi	r19, 0x07	; 7
     d30:	40 e0       	ldi	r20, 0x00	; 0
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	84 ed       	ldi	r24, 0xD4	; 212
     d36:	97 e0       	ldi	r25, 0x07	; 7
     d38:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	for (int i=0; i<5; i++){
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	85 30       	cpi	r24, 0x05	; 5
     d42:	91 05       	cpc	r25, r1
     d44:	84 f5       	brge	.+96     	; 0xda6 <_Z8resetAllv+0x8e>
		allAlarms[i][0] = 0;
     d46:	fc 01       	movw	r30, r24
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	ee 0f       	add	r30, r30
     d4e:	ff 1f       	adc	r31, r31
     d50:	ee 0f       	add	r30, r30
     d52:	ff 1f       	adc	r31, r31
     d54:	eb 56       	subi	r30, 0x6B	; 107
     d56:	f8 4f       	sbci	r31, 0xF8	; 248
     d58:	11 82       	std	Z+1, r1	; 0x01
     d5a:	10 82       	st	Z, r1
		allAlarms[i][1] = 0;
     d5c:	13 82       	std	Z+3, r1	; 0x03
     d5e:	12 82       	std	Z+2, r1	; 0x02
		allAlarms[i][2] = 0;
     d60:	15 82       	std	Z+5, r1	; 0x05
     d62:	14 82       	std	Z+4, r1	; 0x04
		allAlarms[i][3] = 0; //set alarm state as OFF
     d64:	17 82       	std	Z+7, r1	; 0x07
     d66:	16 82       	std	Z+6, r1	; 0x06

		allAlarmsMenu[i][7] = '_'; 
     d68:	fc 01       	movw	r30, r24
     d6a:	e2 95       	swap	r30
     d6c:	f2 95       	swap	r31
     d6e:	f0 7f       	andi	r31, 0xF0	; 240
     d70:	fe 27       	eor	r31, r30
     d72:	e0 7f       	andi	r30, 0xF0	; 240
     d74:	fe 27       	eor	r31, r30
     d76:	df 01       	movw	r26, r30
     d78:	a0 51       	subi	r26, 0x10	; 16
     d7a:	be 4f       	sbci	r27, 0xFE	; 254
     d7c:	2f e5       	ldi	r18, 0x5F	; 95
     d7e:	17 96       	adiw	r26, 0x07	; 7
     d80:	2c 93       	st	X, r18
     d82:	17 97       	sbiw	r26, 0x07	; 7
		allAlarmsMenu[i][8] = '_';
     d84:	18 96       	adiw	r26, 0x08	; 8
     d86:	2c 93       	st	X, r18
     d88:	18 97       	sbiw	r26, 0x08	; 8
		allAlarmsMenu[i][10] = '_';
     d8a:	1a 96       	adiw	r26, 0x0a	; 10
     d8c:	2c 93       	st	X, r18
     d8e:	1a 97       	sbiw	r26, 0x0a	; 10
		allAlarmsMenu[i][11] = '_';
     d90:	1b 96       	adiw	r26, 0x0b	; 11
     d92:	2c 93       	st	X, r18
	
		alarmChangeList[i][0] = '0';
     d94:	e0 56       	subi	r30, 0x60	; 96
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	20 e3       	ldi	r18, 0x30	; 48
     d9a:	20 83       	st	Z, r18
		alarmChangeList[i][1] = '0';
     d9c:	21 83       	std	Z+1, r18	; 0x01
		alarmChangeList[i][3] = '0';
     d9e:	23 83       	std	Z+3, r18	; 0x03
		alarmChangeList[i][4] = '0';
     da0:	24 83       	std	Z+4, r18	; 0x04
	return backToMenu;
}

void resetAll(){
	lcd.LCD_String_xy(0, 0, "Resetting All");
	for (int i=0; i<5; i++){
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	cd cf       	rjmp	.-102    	; 0xd40 <_Z8resetAllv+0x28>
	}

	ds1307::rtc_t rtc;

	//Setting time to the RTC
	rtc.seconds =  0x00;
     da6:	19 82       	std	Y+1, r1	; 0x01
	rtc.minute =  0x00;
     da8:	1a 82       	std	Y+2, r1	; 0x02
	rtc.hour = 0x00;	//Initial Time set to 10:00:00
     daa:	1b 82       	std	Y+3, r1	; 0x03
	rtc.weekDay = 0x01;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x06;
     db0:	86 e0       	ldi	r24, 0x06	; 6
     db2:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x08;
     db4:	88 e0       	ldi	r24, 0x08	; 8
     db6:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21; //10th Aug 2021 Tue
     db8:	81 e2       	ldi	r24, 0x21	; 33
     dba:	8f 83       	std	Y+7, r24	; 0x07
	DS1307.set_time(&rtc);
     dbc:	be 01       	movw	r22, r28
     dbe:	6f 5f       	subi	r22, 0xFF	; 255
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8a ed       	ldi	r24, 0xDA	; 218
     dc4:	97 e0       	ldi	r25, 0x07	; 7
     dc6:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN6ds13078set_timeEPNS_5rtc_tE>
     dca:	2f ef       	ldi	r18, 0xFF	; 255
     dcc:	84 e3       	ldi	r24, 0x34	; 52
     dce:	9c e0       	ldi	r25, 0x0C	; 12
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	80 40       	sbci	r24, 0x00	; 0
     dd4:	90 40       	sbci	r25, 0x00	; 0
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <_Z8resetAllv+0xb8>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <_Z8resetAllv+0xc2>
     dda:	00 00       	nop
	_delay_ms(500);
	
	set = 0;
     ddc:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <set+0x1>
     de0:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <set>
	currentscreen_menu=0;
     de4:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <currentscreen_menu+0x1>
     de8:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <currentscreen_menu>
	currentscreen_setalarm=0;
     dec:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <currentscreen_setalarm+0x1>
     df0:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <currentscreen_setalarm>
	currentscreen_alarmtone=0;
     df4:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <currentscreen_alarmtone+0x1>
     df8:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <currentscreen_alarmtone>
}
     dfc:	27 96       	adiw	r28, 0x07	; 7
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <_Z7displayv>:
	}
}
// function for displaying screens on lcd display
void display(){
    //menu option
	if (set == 1){
     e0e:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <set>
     e12:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <set+0x1>
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	91 05       	cpc	r25, r1
     e1a:	b9 f5       	brne	.+110    	; 0xe8a <_Z7displayv+0x7c>
		lcd.LCD_Clear();
     e1c:	84 ed       	ldi	r24, 0xD4	; 212
     e1e:	97 e0       	ldi	r25, 0x07	; 7
     e20:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(Menu[currentscreen_menu][0]);        
     e24:	60 91 c1 07 	lds	r22, 0x07C1	; 0x8007c1 <currentscreen_menu>
     e28:	70 91 c2 07 	lds	r23, 0x07C2	; 0x8007c2 <currentscreen_menu+0x1>
     e2c:	66 0f       	add	r22, r22
     e2e:	77 1f       	adc	r23, r23
     e30:	62 95       	swap	r22
     e32:	72 95       	swap	r23
     e34:	70 7f       	andi	r23, 0xF0	; 240
     e36:	76 27       	eor	r23, r22
     e38:	60 7f       	andi	r22, 0xF0	; 240
     e3a:	76 27       	eor	r23, r22
     e3c:	60 5c       	subi	r22, 0xC0	; 192
     e3e:	7d 4f       	sbci	r23, 0xFD	; 253
     e40:	84 ed       	ldi	r24, 0xD4	; 212
     e42:	97 e0       	ldi	r25, 0x07	; 7
     e44:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        
     e48:	60 ec       	ldi	r22, 0xC0	; 192
     e4a:	84 ed       	ldi	r24, 0xD4	; 212
     e4c:	97 e0       	ldi	r25, 0x07	; 7
     e4e:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(Menu[currentscreen_menu][1]);
     e52:	60 91 c1 07 	lds	r22, 0x07C1	; 0x8007c1 <currentscreen_menu>
     e56:	70 91 c2 07 	lds	r23, 0x07C2	; 0x8007c2 <currentscreen_menu+0x1>
     e5a:	66 0f       	add	r22, r22
     e5c:	77 1f       	adc	r23, r23
     e5e:	62 95       	swap	r22
     e60:	72 95       	swap	r23
     e62:	70 7f       	andi	r23, 0xF0	; 240
     e64:	76 27       	eor	r23, r22
     e66:	60 7f       	andi	r22, 0xF0	; 240
     e68:	76 27       	eor	r23, r22
     e6a:	60 5b       	subi	r22, 0xB0	; 176
     e6c:	7d 4f       	sbci	r23, 0xFD	; 253
     e6e:	84 ed       	ldi	r24, 0xD4	; 212
     e70:	97 e0       	ldi	r25, 0x07	; 7
     e72:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
     e76:	2f ef       	ldi	r18, 0xFF	; 255
     e78:	84 e3       	ldi	r24, 0x34	; 52
     e7a:	9c e0       	ldi	r25, 0x0C	; 12
     e7c:	21 50       	subi	r18, 0x01	; 1
     e7e:	80 40       	sbci	r24, 0x00	; 0
     e80:	90 40       	sbci	r25, 0x00	; 0
     e82:	e1 f7       	brne	.-8      	; 0xe7c <_Z7displayv+0x6e>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <_Z7displayv+0x78>
     e86:	00 00       	nop
     e88:	08 95       	ret
		_delay_ms(500);
	}
	//set alarms option
	else if ((set == 2) & (currentscreen_menu == 0)){
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	91 05       	cpc	r25, r1
     e90:	09 f0       	breq	.+2      	; 0xe94 <_Z7displayv+0x86>
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	40 91 c1 07 	lds	r20, 0x07C1	; 0x8007c1 <currentscreen_menu>
     e98:	50 91 c2 07 	lds	r21, 0x07C2	; 0x8007c2 <currentscreen_menu+0x1>
     e9c:	31 e0       	ldi	r19, 0x01	; 1
     e9e:	41 15       	cp	r20, r1
     ea0:	51 05       	cpc	r21, r1
     ea2:	09 f0       	breq	.+2      	; 0xea6 <_Z7displayv+0x98>
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	22 23       	and	r18, r18
     ea8:	59 f1       	breq	.+86     	; 0xf00 <_Z7displayv+0xf2>
     eaa:	33 23       	and	r19, r19
     eac:	49 f1       	breq	.+82     	; 0xf00 <_Z7displayv+0xf2>
		lcd.LCD_Clear();
     eae:	84 ed       	ldi	r24, 0xD4	; 212
     eb0:	97 e0       	ldi	r25, 0x07	; 7
     eb2:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(allAlarmsMenu[currentscreen_setalarm]);  
     eb6:	60 91 bf 07 	lds	r22, 0x07BF	; 0x8007bf <currentscreen_setalarm>
     eba:	70 91 c0 07 	lds	r23, 0x07C0	; 0x8007c0 <currentscreen_setalarm+0x1>
     ebe:	62 95       	swap	r22
     ec0:	72 95       	swap	r23
     ec2:	70 7f       	andi	r23, 0xF0	; 240
     ec4:	76 27       	eor	r23, r22
     ec6:	60 7f       	andi	r22, 0xF0	; 240
     ec8:	76 27       	eor	r23, r22
     eca:	60 51       	subi	r22, 0x10	; 16
     ecc:	7e 4f       	sbci	r23, 0xFE	; 254
     ece:	84 ed       	ldi	r24, 0xD4	; 212
     ed0:	97 e0       	ldi	r25, 0x07	; 7
     ed2:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        
     ed6:	60 ec       	ldi	r22, 0xC0	; 192
     ed8:	84 ed       	ldi	r24, 0xD4	; 212
     eda:	97 e0       	ldi	r25, 0x07	; 7
     edc:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String("CHANGE     BACK");
     ee0:	65 e5       	ldi	r22, 0x55	; 85
     ee2:	77 e0       	ldi	r23, 0x07	; 7
     ee4:	84 ed       	ldi	r24, 0xD4	; 212
     ee6:	97 e0       	ldi	r25, 0x07	; 7
     ee8:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
     eec:	2f ef       	ldi	r18, 0xFF	; 255
     eee:	84 e3       	ldi	r24, 0x34	; 52
     ef0:	9c e0       	ldi	r25, 0x0C	; 12
     ef2:	21 50       	subi	r18, 0x01	; 1
     ef4:	80 40       	sbci	r24, 0x00	; 0
     ef6:	90 40       	sbci	r25, 0x00	; 0
     ef8:	e1 f7       	brne	.-8      	; 0xef2 <_Z7displayv+0xe4>
     efa:	00 c0       	rjmp	.+0      	; 0xefc <_Z7displayv+0xee>
     efc:	00 00       	nop
     efe:	08 95       	ret

		_delay_ms(500);
	}
	//change alarm option
	else if ((set==3) & (currentscreen_menu==0) ){
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	03 97       	sbiw	r24, 0x03	; 3
     f04:	09 f0       	breq	.+2      	; 0xf08 <_Z7displayv+0xfa>
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	66 23       	and	r22, r22
     f0a:	f1 f0       	breq	.+60     	; 0xf48 <_Z7displayv+0x13a>
     f0c:	33 23       	and	r19, r19
     f0e:	e1 f0       	breq	.+56     	; 0xf48 <_Z7displayv+0x13a>
		bool g = false;
		lcd.LCD_Clear();
     f10:	84 ed       	ldi	r24, 0xD4	; 212
     f12:	97 e0       	ldi	r25, 0x07	; 7
     f14:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		g = changeAlarm(currentscreen_setalarm); 
     f18:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <currentscreen_setalarm>
     f1c:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <currentscreen_setalarm+0x1>
     f20:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_Z11changeAlarmi>
		if (g) {set=1;}
     f24:	88 23       	and	r24, r24
     f26:	31 f0       	breq	.+12     	; 0xf34 <_Z7displayv+0x126>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <set+0x1>
     f30:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <set>
     f34:	2f ef       	ldi	r18, 0xFF	; 255
     f36:	84 e3       	ldi	r24, 0x34	; 52
     f38:	9c e0       	ldi	r25, 0x0C	; 12
     f3a:	21 50       	subi	r18, 0x01	; 1
     f3c:	80 40       	sbci	r24, 0x00	; 0
     f3e:	90 40       	sbci	r25, 0x00	; 0
     f40:	e1 f7       	brne	.-8      	; 0xf3a <_Z7displayv+0x12c>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <_Z7displayv+0x136>
     f44:	00 00       	nop
     f46:	08 95       	ret
		_delay_ms(500);
	}
	//set time option
	else if ((set == 2) & (currentscreen_menu == 1)){
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	41 30       	cpi	r20, 0x01	; 1
     f4c:	51 05       	cpc	r21, r1
     f4e:	09 f0       	breq	.+2      	; 0xf52 <_Z7displayv+0x144>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	88 23       	and	r24, r24
     f54:	c1 f0       	breq	.+48     	; 0xf86 <_Z7displayv+0x178>
     f56:	22 23       	and	r18, r18
     f58:	b1 f0       	breq	.+44     	; 0xf86 <_Z7displayv+0x178>
		bool go;
		go = alarmclock.setTimetoRTC();
     f5a:	81 ed       	ldi	r24, 0xD1	; 209
     f5c:	97 e0       	ldi	r25, 0x07	; 7
     f5e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN10AlarmClock12setTimetoRTCEv>
		if (go) {set=2;}
     f62:	88 23       	and	r24, r24
     f64:	31 f0       	breq	.+12     	; 0xf72 <_Z7displayv+0x164>
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <set+0x1>
     f6e:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <set>
     f72:	2f ef       	ldi	r18, 0xFF	; 255
     f74:	84 e3       	ldi	r24, 0x34	; 52
     f76:	9c e0       	ldi	r25, 0x0C	; 12
     f78:	21 50       	subi	r18, 0x01	; 1
     f7a:	80 40       	sbci	r24, 0x00	; 0
     f7c:	90 40       	sbci	r25, 0x00	; 0
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <_Z7displayv+0x16a>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <_Z7displayv+0x174>
     f82:	00 00       	nop
     f84:	08 95       	ret
		_delay_ms(500);
	}
	//alarm tone option
	else if ((set == 2) & (currentscreen_menu == 2)){
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	51 05       	cpc	r21, r1
     f8c:	09 f0       	breq	.+2      	; 0xf90 <_Z7displayv+0x182>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	88 23       	and	r24, r24
     f92:	09 f4       	brne	.+2      	; 0xf96 <_Z7displayv+0x188>
     f94:	6d c0       	rjmp	.+218    	; 0x1070 <_Z7displayv+0x262>
     f96:	22 23       	and	r18, r18
     f98:	09 f4       	brne	.+2      	; 0xf9c <_Z7displayv+0x18e>
     f9a:	6a c0       	rjmp	.+212    	; 0x1070 <_Z7displayv+0x262>
		lcd.LCD_Clear();
     f9c:	84 ed       	ldi	r24, 0xD4	; 212
     f9e:	97 e0       	ldi	r25, 0x07	; 7
     fa0:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(alarmtone[currentscreen_alarmtone][0]);                
     fa4:	60 91 bd 07 	lds	r22, 0x07BD	; 0x8007bd <currentscreen_alarmtone>
     fa8:	70 91 be 07 	lds	r23, 0x07BE	; 0x8007be <currentscreen_alarmtone+0x1>
     fac:	66 0f       	add	r22, r22
     fae:	77 1f       	adc	r23, r23
     fb0:	62 95       	swap	r22
     fb2:	72 95       	swap	r23
     fb4:	70 7f       	andi	r23, 0xF0	; 240
     fb6:	76 27       	eor	r23, r22
     fb8:	60 7f       	andi	r22, 0xF0	; 240
     fba:	76 27       	eor	r23, r22
     fbc:	60 50       	subi	r22, 0x00	; 0
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
     fc0:	84 ed       	ldi	r24, 0xD4	; 212
     fc2:	97 e0       	ldi	r25, 0x07	; 7
     fc4:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        
     fc8:	60 ec       	ldi	r22, 0xC0	; 192
     fca:	84 ed       	ldi	r24, 0xD4	; 212
     fcc:	97 e0       	ldi	r25, 0x07	; 7
     fce:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(alarmtone[currentscreen_alarmtone][1]);
     fd2:	60 91 bd 07 	lds	r22, 0x07BD	; 0x8007bd <currentscreen_alarmtone>
     fd6:	70 91 be 07 	lds	r23, 0x07BE	; 0x8007be <currentscreen_alarmtone+0x1>
     fda:	66 0f       	add	r22, r22
     fdc:	77 1f       	adc	r23, r23
     fde:	62 95       	swap	r22
     fe0:	72 95       	swap	r23
     fe2:	70 7f       	andi	r23, 0xF0	; 240
     fe4:	76 27       	eor	r23, r22
     fe6:	60 7f       	andi	r22, 0xF0	; 240
     fe8:	76 27       	eor	r23, r22
     fea:	60 5f       	subi	r22, 0xF0	; 240
     fec:	7e 4f       	sbci	r23, 0xFE	; 254
     fee:	84 ed       	ldi	r24, 0xD4	; 212
     ff0:	97 e0       	ldi	r25, 0x07	; 7
     ff2:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
     ff6:	2f ef       	ldi	r18, 0xFF	; 255
     ff8:	89 e6       	ldi	r24, 0x69	; 105
     ffa:	98 e1       	ldi	r25, 0x18	; 24
     ffc:	21 50       	subi	r18, 0x01	; 1
     ffe:	80 40       	sbci	r24, 0x00	; 0
    1000:	90 40       	sbci	r25, 0x00	; 0
    1002:	e1 f7       	brne	.-8      	; 0xffc <_Z7displayv+0x1ee>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <_Z7displayv+0x1f8>
    1006:	00 00       	nop
		_delay_ms(1000);
		if (currentscreen_alarmtone==0){
    1008:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <currentscreen_alarmtone>
    100c:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <currentscreen_alarmtone+0x1>
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	39 f4       	brne	.+14     	; 0x1022 <_Z7displayv+0x214>
			music.tone(0);
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	85 ec       	ldi	r24, 0xC5	; 197
    101a:	97 e0       	ldi	r25, 0x07	; 7
    101c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_ZN15music_notations4toneEi>
    1020:	08 95       	ret
		}
		else if (currentscreen_alarmtone==1){
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	91 05       	cpc	r25, r1
    1026:	39 f4       	brne	.+14     	; 0x1036 <_Z7displayv+0x228>
			music.tone(1);
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	85 ec       	ldi	r24, 0xC5	; 197
    102e:	97 e0       	ldi	r25, 0x07	; 7
    1030:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_ZN15music_notations4toneEi>
    1034:	08 95       	ret
		}
		else if (currentscreen_alarmtone==2){
    1036:	82 30       	cpi	r24, 0x02	; 2
    1038:	91 05       	cpc	r25, r1
    103a:	39 f4       	brne	.+14     	; 0x104a <_Z7displayv+0x23c>
			music.tone(2);
    103c:	62 e0       	ldi	r22, 0x02	; 2
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	85 ec       	ldi	r24, 0xC5	; 197
    1042:	97 e0       	ldi	r25, 0x07	; 7
    1044:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_ZN15music_notations4toneEi>
    1048:	08 95       	ret
		}
		else if (currentscreen_alarmtone==3){
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	91 05       	cpc	r25, r1
    104e:	39 f4       	brne	.+14     	; 0x105e <_Z7displayv+0x250>
			music.tone(3);
    1050:	63 e0       	ldi	r22, 0x03	; 3
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	85 ec       	ldi	r24, 0xC5	; 197
    1056:	97 e0       	ldi	r25, 0x07	; 7
    1058:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_ZN15music_notations4toneEi>
    105c:	08 95       	ret
		}
		else if (currentscreen_alarmtone==4){
    105e:	04 97       	sbiw	r24, 0x04	; 4
    1060:	19 f5       	brne	.+70     	; 0x10a8 <_Z7displayv+0x29a>
			music.tone(4);
    1062:	64 e0       	ldi	r22, 0x04	; 4
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	85 ec       	ldi	r24, 0xC5	; 197
    1068:	97 e0       	ldi	r25, 0x07	; 7
    106a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_ZN15music_notations4toneEi>
    106e:	08 95       	ret
		}
	}
	//reset option
	else if ((set == 2) & (currentscreen_menu == 3)){
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	43 30       	cpi	r20, 0x03	; 3
    1074:	51 05       	cpc	r21, r1
    1076:	09 f0       	breq	.+2      	; 0x107a <_Z7displayv+0x26c>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	88 23       	and	r24, r24
    107c:	a9 f0       	breq	.+42     	; 0x10a8 <_Z7displayv+0x29a>
    107e:	22 23       	and	r18, r18
    1080:	99 f0       	breq	.+38     	; 0x10a8 <_Z7displayv+0x29a>
		lcd.LCD_Clear();
    1082:	84 ed       	ldi	r24, 0xD4	; 212
    1084:	97 e0       	ldi	r25, 0x07	; 7
    1086:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		resetAll();
    108a:	0e 94 8c 06 	call	0xd18	; 0xd18 <_Z8resetAllv>
    108e:	2f ef       	ldi	r18, 0xFF	; 255
    1090:	84 e3       	ldi	r24, 0x34	; 52
    1092:	9c e0       	ldi	r25, 0x0C	; 12
    1094:	21 50       	subi	r18, 0x01	; 1
    1096:	80 40       	sbci	r24, 0x00	; 0
    1098:	90 40       	sbci	r25, 0x00	; 0
    109a:	e1 f7       	brne	.-8      	; 0x1094 <_Z7displayv+0x286>
    109c:	00 c0       	rjmp	.+0      	; 0x109e <_Z7displayv+0x290>
    109e:	00 00       	nop
		_delay_ms(500);
		set = 0;
    10a0:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <set+0x1>
    10a4:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <set>
    10a8:	08 95       	ret

000010aa <_Z5upbtnv>:
	}
}
// function for up button 
void upbtn(){
	if (!(PINC &(1<<Up))){
    10aa:	30 99       	sbic	0x06, 0	; 6
    10ac:	95 c0       	rjmp	.+298    	; 0x11d8 <_Z5upbtnv+0x12e>
    10ae:	2f e7       	ldi	r18, 0x7F	; 127
    10b0:	88 e3       	ldi	r24, 0x38	; 56
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	21 50       	subi	r18, 0x01	; 1
    10b6:	80 40       	sbci	r24, 0x00	; 0
    10b8:	90 40       	sbci	r25, 0x00	; 0
    10ba:	e1 f7       	brne	.-8      	; 0x10b4 <_Z5upbtnv+0xa>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <_Z5upbtnv+0x14>
    10be:	00 00       	nop
		_delay_ms(50);
		// go upwards in main menu 
		if ((set == 1) & (currentscreen_menu==0)){
    10c0:	40 91 c3 07 	lds	r20, 0x07C3	; 0x8007c3 <set>
    10c4:	50 91 c4 07 	lds	r21, 0x07C4	; 0x8007c4 <set+0x1>
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	41 30       	cpi	r20, 0x01	; 1
    10cc:	51 05       	cpc	r21, r1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <_Z5upbtnv+0x28>
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	20 91 c1 07 	lds	r18, 0x07C1	; 0x8007c1 <currentscreen_menu>
    10d6:	30 91 c2 07 	lds	r19, 0x07C2	; 0x8007c2 <currentscreen_menu+0x1>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	21 15       	cp	r18, r1
    10de:	31 05       	cpc	r19, r1
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <_Z5upbtnv+0x3a>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	99 23       	and	r25, r25
    10e6:	59 f0       	breq	.+22     	; 0x10fe <_Z5upbtnv+0x54>
    10e8:	88 23       	and	r24, r24
    10ea:	49 f0       	breq	.+18     	; 0x10fe <_Z5upbtnv+0x54>
			currentscreen_menu=numofscreens_menu-1;
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <currentscreen_menu+0x1>
    10f4:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <currentscreen_menu>
			display();
    10f8:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    10fc:	08 95       	ret
		}
		else if ((set == 1) & (currentscreen_menu != 0)){
    10fe:	61 e0       	ldi	r22, 0x01	; 1
    1100:	21 15       	cp	r18, r1
    1102:	31 05       	cpc	r19, r1
    1104:	09 f4       	brne	.+2      	; 0x1108 <_Z5upbtnv+0x5e>
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	66 23       	and	r22, r22
    110a:	59 f0       	breq	.+22     	; 0x1122 <_Z5upbtnv+0x78>
    110c:	99 23       	and	r25, r25
    110e:	49 f0       	breq	.+18     	; 0x1122 <_Z5upbtnv+0x78>
			currentscreen_menu -= 1;
    1110:	21 50       	subi	r18, 0x01	; 1
    1112:	31 09       	sbc	r19, r1
    1114:	30 93 c2 07 	sts	0x07C2, r19	; 0x8007c2 <currentscreen_menu+0x1>
    1118:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <currentscreen_menu>
			display();
    111c:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    1120:	08 95       	ret
		}
		// go upwards in set alarm menu
		else if ((set == 2) & (currentscreen_menu==0) & (currentscreen_setalarm == 0)){
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	42 30       	cpi	r20, 0x02	; 2
    1126:	51 05       	cpc	r21, r1
    1128:	09 f0       	breq	.+2      	; 0x112c <_Z5upbtnv+0x82>
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	89 23       	and	r24, r25
    112e:	40 91 bf 07 	lds	r20, 0x07BF	; 0x8007bf <currentscreen_setalarm>
    1132:	50 91 c0 07 	lds	r21, 0x07C0	; 0x8007c0 <currentscreen_setalarm+0x1>
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	41 15       	cp	r20, r1
    113a:	51 05       	cpc	r21, r1
    113c:	09 f0       	breq	.+2      	; 0x1140 <_Z5upbtnv+0x96>
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	88 23       	and	r24, r24
    1142:	59 f0       	breq	.+22     	; 0x115a <_Z5upbtnv+0xb0>
    1144:	66 23       	and	r22, r22
    1146:	49 f0       	breq	.+18     	; 0x115a <_Z5upbtnv+0xb0>
			currentscreen_setalarm=numofscreens_setalarm-1;
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	90 93 c0 07 	sts	0x07C0, r25	; 0x8007c0 <currentscreen_setalarm+0x1>
    1150:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <currentscreen_setalarm>
			display();
    1154:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    1158:	08 95       	ret
		}
		else if ((set == 2) & (currentscreen_menu==0) & (currentscreen_setalarm != 0)){
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	41 15       	cp	r20, r1
    115e:	51 05       	cpc	r21, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <_Z5upbtnv+0xba>
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	88 23       	and	r24, r24
    1166:	59 f0       	breq	.+22     	; 0x117e <_Z5upbtnv+0xd4>
    1168:	66 23       	and	r22, r22
    116a:	49 f0       	breq	.+18     	; 0x117e <_Z5upbtnv+0xd4>
			currentscreen_setalarm -= 1;
    116c:	41 50       	subi	r20, 0x01	; 1
    116e:	51 09       	sbc	r21, r1
    1170:	50 93 c0 07 	sts	0x07C0, r21	; 0x8007c0 <currentscreen_setalarm+0x1>
    1174:	40 93 bf 07 	sts	0x07BF, r20	; 0x8007bf <currentscreen_setalarm>
			display();
    1178:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    117c:	08 95       	ret
		}
		// go upwards in alarm tone menu
		else if ((set == 2) & (currentscreen_menu==2) & (currentscreen_alarmtone == 0)){
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	09 f0       	breq	.+2      	; 0x1188 <_Z5upbtnv+0xde>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	98 23       	and	r25, r24
    118a:	20 91 bd 07 	lds	r18, 0x07BD	; 0x8007bd <currentscreen_alarmtone>
    118e:	30 91 be 07 	lds	r19, 0x07BE	; 0x8007be <currentscreen_alarmtone+0x1>
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	21 15       	cp	r18, r1
    1196:	31 05       	cpc	r19, r1
    1198:	09 f0       	breq	.+2      	; 0x119c <_Z5upbtnv+0xf2>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	99 23       	and	r25, r25
    119e:	59 f0       	breq	.+22     	; 0x11b6 <_Z5upbtnv+0x10c>
    11a0:	88 23       	and	r24, r24
    11a2:	49 f0       	breq	.+18     	; 0x11b6 <_Z5upbtnv+0x10c>
			currentscreen_alarmtone=numofscreens_alarmtone-1;
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <currentscreen_alarmtone+0x1>
    11ac:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <currentscreen_alarmtone>
			display();
    11b0:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    11b4:	08 95       	ret
		}
		else if ((set == 2) & (currentscreen_menu==2) & (currentscreen_alarmtone != 0)){
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	21 15       	cp	r18, r1
    11ba:	31 05       	cpc	r19, r1
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <_Z5upbtnv+0x116>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	99 23       	and	r25, r25
    11c2:	51 f0       	breq	.+20     	; 0x11d8 <_Z5upbtnv+0x12e>
    11c4:	88 23       	and	r24, r24
    11c6:	41 f0       	breq	.+16     	; 0x11d8 <_Z5upbtnv+0x12e>
			currentscreen_alarmtone -= 1;
    11c8:	21 50       	subi	r18, 0x01	; 1
    11ca:	31 09       	sbc	r19, r1
    11cc:	30 93 be 07 	sts	0x07BE, r19	; 0x8007be <currentscreen_alarmtone+0x1>
    11d0:	20 93 bd 07 	sts	0x07BD, r18	; 0x8007bd <currentscreen_alarmtone>
			display();
    11d4:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    11d8:	08 95       	ret

000011da <_Z6dwnbtnv>:
		}
	}
}
// function for down button 
void dwnbtn(){
	if (!(PINC &(1<<Down))){
    11da:	31 99       	sbic	0x06, 1	; 6
    11dc:	9a c0       	rjmp	.+308    	; 0x1312 <_Z6dwnbtnv+0x138>
    11de:	2f e7       	ldi	r18, 0x7F	; 127
    11e0:	88 e3       	ldi	r24, 0x38	; 56
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	21 50       	subi	r18, 0x01	; 1
    11e6:	80 40       	sbci	r24, 0x00	; 0
    11e8:	90 40       	sbci	r25, 0x00	; 0
    11ea:	e1 f7       	brne	.-8      	; 0x11e4 <_Z6dwnbtnv+0xa>
    11ec:	00 c0       	rjmp	.+0      	; 0x11ee <_Z6dwnbtnv+0x14>
    11ee:	00 00       	nop
		_delay_ms(50);
		// go downwards in main menu
		if ((set == 1) & (currentscreen_menu==3)){
    11f0:	40 91 c3 07 	lds	r20, 0x07C3	; 0x8007c3 <set>
    11f4:	50 91 c4 07 	lds	r21, 0x07C4	; 0x8007c4 <set+0x1>
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	41 30       	cpi	r20, 0x01	; 1
    11fc:	51 05       	cpc	r21, r1
    11fe:	09 f0       	breq	.+2      	; 0x1202 <_Z6dwnbtnv+0x28>
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <currentscreen_menu>
    1206:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <currentscreen_menu+0x1>
    120a:	31 e0       	ldi	r19, 0x01	; 1
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	91 05       	cpc	r25, r1
    1210:	09 f0       	breq	.+2      	; 0x1214 <_Z6dwnbtnv+0x3a>
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	33 23       	and	r19, r19
    1216:	49 f0       	breq	.+18     	; 0x122a <_Z6dwnbtnv+0x50>
    1218:	22 23       	and	r18, r18
    121a:	39 f0       	breq	.+14     	; 0x122a <_Z6dwnbtnv+0x50>
			currentscreen_menu=0;
    121c:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <currentscreen_menu+0x1>
    1220:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <currentscreen_menu>
			display();
    1224:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    1228:	08 95       	ret
		}
		else if ((set == 1) & (currentscreen_menu != 3)){
    122a:	31 e0       	ldi	r19, 0x01	; 1
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	91 05       	cpc	r25, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <_Z6dwnbtnv+0x5a>
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	33 23       	and	r19, r19
    1236:	a1 f0       	breq	.+40     	; 0x1260 <_Z6dwnbtnv+0x86>
    1238:	22 23       	and	r18, r18
    123a:	91 f0       	breq	.+36     	; 0x1260 <_Z6dwnbtnv+0x86>
    123c:	8f e1       	ldi	r24, 0x1F	; 31
    123e:	9e e4       	ldi	r25, 0x4E	; 78
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <_Z6dwnbtnv+0x66>
    1244:	00 c0       	rjmp	.+0      	; 0x1246 <_Z6dwnbtnv+0x6c>
    1246:	00 00       	nop
			_delay_ms(10);
			currentscreen_menu += 1;
    1248:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <currentscreen_menu>
    124c:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <currentscreen_menu+0x1>
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <currentscreen_menu+0x1>
    1256:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <currentscreen_menu>
			display();
    125a:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    125e:	08 95       	ret
		}
		// go downwards in set alarm menu
		else if ((set == 2) & (currentscreen_menu==0) & (currentscreen_setalarm == 4)){
    1260:	31 e0       	ldi	r19, 0x01	; 1
    1262:	42 30       	cpi	r20, 0x02	; 2
    1264:	51 05       	cpc	r21, r1
    1266:	09 f0       	breq	.+2      	; 0x126a <_Z6dwnbtnv+0x90>
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	21 e0       	ldi	r18, 0x01	; 1
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	09 f0       	breq	.+2      	; 0x1272 <_Z6dwnbtnv+0x98>
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	23 23       	and	r18, r19
    1274:	40 91 bf 07 	lds	r20, 0x07BF	; 0x8007bf <currentscreen_setalarm>
    1278:	50 91 c0 07 	lds	r21, 0x07C0	; 0x8007c0 <currentscreen_setalarm+0x1>
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	44 30       	cpi	r20, 0x04	; 4
    1280:	51 05       	cpc	r21, r1
    1282:	09 f0       	breq	.+2      	; 0x1286 <_Z6dwnbtnv+0xac>
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	22 23       	and	r18, r18
    1288:	49 f0       	breq	.+18     	; 0x129c <_Z6dwnbtnv+0xc2>
    128a:	66 23       	and	r22, r22
    128c:	39 f0       	breq	.+14     	; 0x129c <_Z6dwnbtnv+0xc2>
			currentscreen_setalarm=0;
    128e:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <currentscreen_setalarm+0x1>
    1292:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <currentscreen_setalarm>
			display();
    1296:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    129a:	08 95       	ret
		}
		else if ((set == 2) & (currentscreen_menu==0) & (currentscreen_setalarm != 4)){
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	44 30       	cpi	r20, 0x04	; 4
    12a0:	51 05       	cpc	r21, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <_Z6dwnbtnv+0xcc>
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	22 23       	and	r18, r18
    12a8:	59 f0       	breq	.+22     	; 0x12c0 <_Z6dwnbtnv+0xe6>
    12aa:	66 23       	and	r22, r22
    12ac:	49 f0       	breq	.+18     	; 0x12c0 <_Z6dwnbtnv+0xe6>
			currentscreen_setalarm += 1;
    12ae:	4f 5f       	subi	r20, 0xFF	; 255
    12b0:	5f 4f       	sbci	r21, 0xFF	; 255
    12b2:	50 93 c0 07 	sts	0x07C0, r21	; 0x8007c0 <currentscreen_setalarm+0x1>
    12b6:	40 93 bf 07 	sts	0x07BF, r20	; 0x8007bf <currentscreen_setalarm>
			display();
    12ba:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    12be:	08 95       	ret
		}
		// go downwards in alarm tone menu
		else if ((set == 2) & (currentscreen_menu==2) & (currentscreen_alarmtone == 4)){
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	02 97       	sbiw	r24, 0x02	; 2
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <_Z6dwnbtnv+0xee>
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	32 23       	and	r19, r18
    12ca:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <currentscreen_alarmtone>
    12ce:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <currentscreen_alarmtone+0x1>
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	91 05       	cpc	r25, r1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <_Z6dwnbtnv+0x102>
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	33 23       	and	r19, r19
    12de:	49 f0       	breq	.+18     	; 0x12f2 <_Z6dwnbtnv+0x118>
    12e0:	22 23       	and	r18, r18
    12e2:	39 f0       	breq	.+14     	; 0x12f2 <_Z6dwnbtnv+0x118>
			currentscreen_alarmtone = 0;
    12e4:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <currentscreen_alarmtone+0x1>
    12e8:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <currentscreen_alarmtone>
			display();
    12ec:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    12f0:	08 95       	ret
		}
		else if ((set == 2) & (currentscreen_menu==2) & (currentscreen_alarmtone != 4)){
    12f2:	21 e0       	ldi	r18, 0x01	; 1
    12f4:	84 30       	cpi	r24, 0x04	; 4
    12f6:	91 05       	cpc	r25, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <_Z6dwnbtnv+0x122>
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	33 23       	and	r19, r19
    12fe:	49 f0       	breq	.+18     	; 0x1312 <_Z6dwnbtnv+0x138>
    1300:	22 23       	and	r18, r18
    1302:	39 f0       	breq	.+14     	; 0x1312 <_Z6dwnbtnv+0x138>
			currentscreen_alarmtone += 1;
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <currentscreen_alarmtone+0x1>
    130a:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <currentscreen_alarmtone>
			display();
    130e:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    1312:	08 95       	ret

00001314 <_Z5okbtnv>:
}
// function for ok button
// go to the selected option
void okbtn(){
	
	if (!(PINC & (1<<Ok))){	
    1314:	32 99       	sbic	0x06, 2	; 6
    1316:	1e c0       	rjmp	.+60     	; 0x1354 <_Z5okbtnv+0x40>
    1318:	2f ef       	ldi	r18, 0xFF	; 255
    131a:	81 ee       	ldi	r24, 0xE1	; 225
    131c:	94 e0       	ldi	r25, 0x04	; 4
    131e:	21 50       	subi	r18, 0x01	; 1
    1320:	80 40       	sbci	r24, 0x00	; 0
    1322:	90 40       	sbci	r25, 0x00	; 0
    1324:	e1 f7       	brne	.-8      	; 0x131e <_Z5okbtnv+0xa>
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <_Z5okbtnv+0x14>
    1328:	00 00       	nop
		_delay_ms(200);
		if (set==3){
    132a:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <set>
    132e:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <set+0x1>
    1332:	83 30       	cpi	r24, 0x03	; 3
    1334:	91 05       	cpc	r25, r1
    1336:	39 f4       	brne	.+14     	; 0x1346 <_Z5okbtnv+0x32>
			set = 0;
    1338:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <set+0x1>
    133c:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <set>
		display();}
    1340:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    1344:	08 95       	ret
		else {
			set+= 1;
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <set+0x1>
    134c:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <set>
		display();}
    1350:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    1354:	08 95       	ret

00001356 <_Z7backbtnv>:
}
// function for back button
// go back to the previously selected option
void backbtn(){
	
	if (!(PINC &(1<<Back))){
    1356:	33 99       	sbic	0x06, 3	; 6
    1358:	1d c0       	rjmp	.+58     	; 0x1394 <_Z7backbtnv+0x3e>
    135a:	2f e7       	ldi	r18, 0x7F	; 127
    135c:	88 e3       	ldi	r24, 0x38	; 56
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	21 50       	subi	r18, 0x01	; 1
    1362:	80 40       	sbci	r24, 0x00	; 0
    1364:	90 40       	sbci	r25, 0x00	; 0
    1366:	e1 f7       	brne	.-8      	; 0x1360 <_Z7backbtnv+0xa>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <_Z7backbtnv+0x14>
    136a:	00 00       	nop
		_delay_ms(50);
		if (set == 0){
    136c:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <set>
    1370:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <set+0x1>
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	39 f4       	brne	.+14     	; 0x1386 <_Z7backbtnv+0x30>
			set = 0;
    1378:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <set+0x1>
    137c:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <set>
			display();
    1380:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    1384:	08 95       	ret
		}
		else {
			set-= 1;
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <set+0x1>
    138c:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <set>
			display();
    1390:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
    1394:	08 95       	ret

00001396 <_Z10checkAlarmv>:
		}
	}
}

void checkAlarm(){
    1396:	7f 92       	push	r7
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
	int currentHr, currentMin, alarmHr, alarmMin, alarmCheck, alOnOff;
	bool alarm;
	//checking time and ringing an alarm
	for (int i=0; i<5;i++){
    13b0:	00 e0       	ldi	r16, 0x00	; 0
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	05 30       	cpi	r16, 0x05	; 5
    13b6:	11 05       	cpc	r17, r1
    13b8:	0c f0       	brlt	.+2      	; 0x13bc <_Z10checkAlarmv+0x26>
    13ba:	ad c0       	rjmp	.+346    	; 0x1516 <_Z10checkAlarmv+0x180>
		alarmHr = allAlarms[i][0];
    13bc:	f8 01       	movw	r30, r16
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	eb 56       	subi	r30, 0x6B	; 107
    13cc:	f8 4f       	sbci	r31, 0xF8	; 248
    13ce:	e0 80       	ld	r14, Z
    13d0:	f1 80       	ldd	r15, Z+1	; 0x01
		alarmMin = allAlarms[i][1];
    13d2:	c2 80       	ldd	r12, Z+2	; 0x02
    13d4:	d3 80       	ldd	r13, Z+3	; 0x03
		alarmCheck = allAlarms[i][2]; //only used within this loop to check of the alarm was turned on
    13d6:	84 80       	ldd	r8, Z+4	; 0x04
    13d8:	95 80       	ldd	r9, Z+5	; 0x05
		alOnOff = allAlarms[i][3]; //this value will be 1 if alarm is ON and 0 if OFF
    13da:	a6 80       	ldd	r10, Z+6	; 0x06
    13dc:	b7 80       	ldd	r11, Z+7	; 0x07

		currentHr = DS1307.read_time(02);
    13de:	62 e0       	ldi	r22, 0x02	; 2
    13e0:	8a ed       	ldi	r24, 0xDA	; 218
    13e2:	97 e0       	ldi	r25, 0x07	; 7
    13e4:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
    13e8:	ec 01       	movw	r28, r24
		currentMin = DS1307.read_time(01);
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	8a ed       	ldi	r24, 0xDA	; 218
    13ee:	97 e0       	ldi	r25, 0x07	; 7
    13f0:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>

		if (((currentHr != alarmHr) || (currentMin != alarmMin))){
    13f4:	ec 16       	cp	r14, r28
    13f6:	fd 06       	cpc	r15, r29
    13f8:	19 f4       	brne	.+6      	; 0x1400 <_Z10checkAlarmv+0x6a>
    13fa:	c8 16       	cp	r12, r24
    13fc:	d9 06       	cpc	r13, r25
    13fe:	79 f0       	breq	.+30     	; 0x141e <_Z10checkAlarmv+0x88>
			allAlarms[i][2] = 1;
    1400:	f8 01       	movw	r30, r16
    1402:	ee 0f       	add	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	eb 56       	subi	r30, 0x6B	; 107
    1410:	f8 4f       	sbci	r31, 0xF8	; 248
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	95 83       	std	Z+5, r25	; 0x05
    1418:	84 83       	std	Z+4, r24	; 0x04
			stop = false;
    141a:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <stop>
		}
		
		while (1){
			currentHr = DS1307.read_time(02);
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	8a ed       	ldi	r24, 0xDA	; 218
    1422:	97 e0       	ldi	r25, 0x07	; 7
    1424:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
    1428:	ec 01       	movw	r28, r24
			currentMin = DS1307.read_time(01);
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	8a ed       	ldi	r24, 0xDA	; 218
    142e:	97 e0       	ldi	r25, 0x07	; 7
    1430:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
    1434:	ac 01       	movw	r20, r24
			if ((currentHr == alarmHr) & (currentMin == alarmMin)  & ~(stop) & (alarmCheck==1) & (alOnOff==1)){
    1436:	21 e0       	ldi	r18, 0x01	; 1
    1438:	ec 16       	cp	r14, r28
    143a:	fd 06       	cpc	r15, r29
    143c:	09 f0       	breq	.+2      	; 0x1440 <_Z10checkAlarmv+0xaa>
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	c4 16       	cp	r12, r20
    1444:	d5 06       	cpc	r13, r21
    1446:	09 f0       	breq	.+2      	; 0x144a <_Z10checkAlarmv+0xb4>
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	92 23       	and	r25, r18
    144c:	29 2f       	mov	r18, r25
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <stop>
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	80 95       	com	r24
    1458:	90 95       	com	r25
    145a:	82 23       	and	r24, r18
    145c:	93 23       	and	r25, r19
    145e:	21 e0       	ldi	r18, 0x01	; 1
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	84 16       	cp	r8, r20
    1466:	91 04       	cpc	r9, r1
    1468:	11 f0       	breq	.+4      	; 0x146e <_Z10checkAlarmv+0xd8>
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	82 23       	and	r24, r18
    1470:	93 23       	and	r25, r19
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	a4 16       	cp	r10, r20
    147a:	b1 04       	cpc	r11, r1
    147c:	11 f0       	breq	.+4      	; 0x1482 <_Z10checkAlarmv+0xec>
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	28 23       	and	r18, r24
    1484:	39 23       	and	r19, r25
    1486:	23 2b       	or	r18, r19
    1488:	41 f1       	breq	.+80     	; 0x14da <_Z10checkAlarmv+0x144>
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
    148a:	25 e6       	ldi	r18, 0x65	; 101
    148c:	37 e0       	ldi	r19, 0x07	; 7
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	84 ed       	ldi	r24, 0xD4	; 212
    1494:	97 e0       	ldi	r25, 0x07	; 7
    1496:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
				lcd.LCD_String_xy(1, 0, "STOP            ");
    149a:	26 e7       	ldi	r18, 0x76	; 118
    149c:	37 e0       	ldi	r19, 0x07	; 7
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	61 e0       	ldi	r22, 0x01	; 1
    14a2:	84 ed       	ldi	r24, 0xD4	; 212
    14a4:	97 e0       	ldi	r25, 0x07	; 7
    14a6:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
				music.tone(currentscreen_alarmtone);
    14aa:	60 91 bd 07 	lds	r22, 0x07BD	; 0x8007bd <currentscreen_alarmtone>
    14ae:	70 91 be 07 	lds	r23, 0x07BE	; 0x8007be <currentscreen_alarmtone+0x1>
    14b2:	85 ec       	ldi	r24, 0xC5	; 197
    14b4:	97 e0       	ldi	r25, 0x07	; 7
    14b6:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_ZN15music_notations4toneEi>
				allAlarms[i][2] = 0;
    14ba:	f8 01       	movw	r30, r16
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	eb 56       	subi	r30, 0x6B	; 107
    14ca:	f8 4f       	sbci	r31, 0xF8	; 248
    14cc:	15 82       	std	Z+5, r1	; 0x05
    14ce:	14 82       	std	Z+4, r1	; 0x04
				alarm = true;
    14d0:	77 24       	eor	r7, r7
    14d2:	73 94       	inc	r7
			else{
				if(alarm){lcd.LCD_Clear();alarm=false;set=0;}
				break;
			}
			
			if (!(PINC & (1<<Ok))){
    14d4:	32 99       	sbic	0x06, 2	; 6
    14d6:	a3 cf       	rjmp	.-186    	; 0x141e <_Z10checkAlarmv+0x88>
    14d8:	0c c0       	rjmp	.+24     	; 0x14f2 <_Z10checkAlarmv+0x15c>
				music.tone(currentscreen_alarmtone);
				allAlarms[i][2] = 0;
				alarm = true;
			}
			else{
				if(alarm){lcd.LCD_Clear();alarm=false;set=0;}
    14da:	77 20       	and	r7, r7
    14dc:	c9 f0       	breq	.+50     	; 0x1510 <_Z10checkAlarmv+0x17a>
    14de:	84 ed       	ldi	r24, 0xD4	; 212
    14e0:	97 e0       	ldi	r25, 0x07	; 7
    14e2:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
    14e6:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <set+0x1>
    14ea:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <set>
    14ee:	71 2c       	mov	r7, r1
    14f0:	0f c0       	rjmp	.+30     	; 0x1510 <_Z10checkAlarmv+0x17a>
				break;
			}
			
			if (!(PINC & (1<<Ok))){
				lcd.LCD_Clear();
    14f2:	84 ed       	ldi	r24, 0xD4	; 212
    14f4:	97 e0       	ldi	r25, 0x07	; 7
    14f6:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
				set=0;
    14fa:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <set+0x1>
    14fe:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <set>
				display();
    1502:	0e 94 07 07 	call	0xe0e	; 0xe0e <_Z7displayv>
				stop = true;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <stop>
			if ((currentHr == alarmHr) & (currentMin == alarmMin)  & ~(stop) & (alarmCheck==1) & (alOnOff==1)){
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
				lcd.LCD_String_xy(1, 0, "STOP            ");
				music.tone(currentscreen_alarmtone);
				allAlarms[i][2] = 0;
				alarm = true;
    150c:	77 24       	eor	r7, r7
    150e:	73 94       	inc	r7

void checkAlarm(){
	int currentHr, currentMin, alarmHr, alarmMin, alarmCheck, alOnOff;
	bool alarm;
	//checking time and ringing an alarm
	for (int i=0; i<5;i++){
    1510:	0f 5f       	subi	r16, 0xFF	; 255
    1512:	1f 4f       	sbci	r17, 0xFF	; 255
    1514:	4f cf       	rjmp	.-354    	; 0x13b4 <_Z10checkAlarmv+0x1e>
				stop = true;
				break;
			}
		}
	}
} 
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	cf 90       	pop	r12
    1526:	bf 90       	pop	r11
    1528:	af 90       	pop	r10
    152a:	9f 90       	pop	r9
    152c:	8f 90       	pop	r8
    152e:	7f 90       	pop	r7
    1530:	08 95       	ret

00001532 <main>:
int alarmCount = 0;
bool stop = false;	


int main(void)
{
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	27 97       	sbiw	r28, 0x07	; 7
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
	DDRD = (1<<PORTD7);
    1546:	80 e8       	ldi	r24, 0x80	; 128
    1548:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (1<<PORTC0) | (1<<PORTC1) | (1<<PORTC2) | (1<<PORTC3);
    154a:	88 b1       	in	r24, 0x08	; 8
    154c:	8f 60       	ori	r24, 0x0F	; 15
    154e:	88 b9       	out	0x08, r24	; 8
	ds1307::rtc_t rtc;

	//Setting time to the RTC
	rtc.seconds =  0x00; 
    1550:	19 82       	std	Y+1, r1	; 0x01
	rtc.minute =  0x00;
    1552:	1a 82       	std	Y+2, r1	; 0x02
	rtc.hour = 0x10;	//Initial Time set to 10:00:00 
    1554:	80 e1       	ldi	r24, 0x10	; 16
    1556:	8b 83       	std	Y+3, r24	; 0x03
	rtc.weekDay = 0x02;
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x06;
    155c:	86 e0       	ldi	r24, 0x06	; 6
    155e:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x08;
    1560:	88 e0       	ldi	r24, 0x08	; 8
    1562:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21; //10th Aug 2021 Tue
    1564:	81 e2       	ldi	r24, 0x21	; 33
    1566:	8f 83       	std	Y+7, r24	; 0x07
	DS1307.set_time(&rtc);
    1568:	be 01       	movw	r22, r28
    156a:	6f 5f       	subi	r22, 0xFF	; 255
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	8a ed       	ldi	r24, 0xDA	; 218
    1570:	97 e0       	ldi	r25, 0x07	; 7
    1572:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN6ds13078set_timeEPNS_5rtc_tE>

	lcd.LCD_Initializer();	//initialize the display to PORTB
    1576:	84 ed       	ldi	r24, 0xD4	; 212
    1578:	97 e0       	ldi	r25, 0x07	; 7
    157a:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN11LCD_Display15LCD_InitializerEv>

	while (1)
	{
		
		if (set==0){alarmclock.displayTime(); checkAlarm();}
    157e:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <set>
    1582:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <set+0x1>
    1586:	89 2b       	or	r24, r25
    1588:	31 f4       	brne	.+12     	; 0x1596 <main+0x64>
    158a:	81 ed       	ldi	r24, 0xD1	; 209
    158c:	97 e0       	ldi	r25, 0x07	; 7
    158e:	0e 94 7b 00 	call	0xf6	; 0xf6 <_ZN10AlarmClock11displayTimeEv>
    1592:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z10checkAlarmv>
		okbtn();
    1596:	0e 94 8a 09 	call	0x1314	; 0x1314 <_Z5okbtnv>
		upbtn();
    159a:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z5upbtnv>
		dwnbtn();
    159e:	0e 94 ed 08 	call	0x11da	; 0x11da <_Z6dwnbtnv>
		backbtn();
    15a2:	0e 94 ab 09 	call	0x1356	; 0x1356 <_Z7backbtnv>
	rtc.year = 0x21; //10th Aug 2021 Tue
	DS1307.set_time(&rtc);

	lcd.LCD_Initializer();	//initialize the display to PORTB

	while (1)
    15a6:	eb cf       	rjmp	.-42     	; 0x157e <main+0x4c>

000015a8 <_ZN15music_notations11playthenoteEff>:
    15a8:	4f 92       	push	r4
    15aa:	5f 92       	push	r5
    15ac:	6f 92       	push	r6
    15ae:	7f 92       	push	r7
    15b0:	8f 92       	push	r8
    15b2:	9f 92       	push	r9
    15b4:	af 92       	push	r10
    15b6:	bf 92       	push	r11
    15b8:	cf 92       	push	r12
    15ba:	df 92       	push	r13
    15bc:	ef 92       	push	r14
    15be:	ff 92       	push	r15
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <_ZN15music_notations11playthenoteEff+0x22>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <_ZN15music_notations11playthenoteEff+0x24>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	6a 01       	movw	r12, r20
    15d2:	7b 01       	movw	r14, r22
    15d4:	48 01       	movw	r8, r16
    15d6:	59 01       	movw	r10, r18
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	a9 01       	movw	r20, r18
    15de:	c7 01       	movw	r24, r14
    15e0:	b6 01       	movw	r22, r12
    15e2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__cmpsf2>
    15e6:	88 23       	and	r24, r24
    15e8:	09 f4       	brne	.+2      	; 0x15ec <_ZN15music_notations11playthenoteEff+0x44>
    15ea:	b0 c0       	rjmp	.+352    	; 0x174c <_ZN15music_notations11playthenoteEff+0x1a4>
    15ec:	a7 01       	movw	r20, r14
    15ee:	96 01       	movw	r18, r12
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	80 e8       	ldi	r24, 0x80	; 128
    15f6:	9f e3       	ldi	r25, 0x3F	; 63
    15f8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__divsf3>
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4a e7       	ldi	r20, 0x7A	; 122
    1602:	54 e4       	ldi	r21, 0x44	; 68
    1604:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    1608:	6b 01       	movw	r12, r22
    160a:	7c 01       	movw	r14, r24
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	c5 01       	movw	r24, r10
    1612:	b4 01       	movw	r22, r8
    1614:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__divsf3>
    1618:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__fixsfsi>
    161c:	2b 01       	movw	r4, r22
    161e:	3c 01       	movw	r6, r24
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	c7 01       	movw	r24, r14
    162a:	b6 01       	movw	r22, r12
    162c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    1630:	69 83       	std	Y+1, r22	; 0x01
    1632:	7a 83       	std	Y+2, r23	; 0x02
    1634:	8b 83       	std	Y+3, r24	; 0x03
    1636:	9c 83       	std	Y+4, r25	; 0x04
    1638:	8a b1       	in	r24, 0x0a	; 10
    163a:	80 68       	ori	r24, 0x80	; 128
    163c:	8a b9       	out	0x0a, r24	; 10
    163e:	81 2c       	mov	r8, r1
    1640:	91 2c       	mov	r9, r1
    1642:	54 01       	movw	r10, r8
    1644:	84 14       	cp	r8, r4
    1646:	95 04       	cpc	r9, r5
    1648:	a6 04       	cpc	r10, r6
    164a:	b7 04       	cpc	r11, r7
    164c:	0c f0       	brlt	.+2      	; 0x1650 <_ZN15music_notations11playthenoteEff+0xa8>
    164e:	b8 c0       	rjmp	.+368    	; 0x17c0 <_ZN15music_notations11playthenoteEff+0x218>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	4a ef       	ldi	r20, 0xFA	; 250
    1656:	54 e4       	ldi	r21, 0x44	; 68
    1658:	69 81       	ldd	r22, Y+1	; 0x01
    165a:	7a 81       	ldd	r23, Y+2	; 0x02
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    1664:	6b 01       	movw	r12, r22
    1666:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__cmpsf2>
    1674:	88 23       	and	r24, r24
    1676:	2c f1       	brlt	.+74     	; 0x16c2 <_ZN15music_notations11playthenoteEff+0x11a>
		__ticks = 1;
	else if (__tmp > 65535)
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	c7 01       	movw	r24, r14
    1682:	b6 01       	movw	r22, r12
    1684:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__gesf2>
    1688:	18 16       	cp	r1, r24
    168a:	b4 f4       	brge	.+44     	; 0x16b8 <_ZN15music_notations11playthenoteEff+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e2       	ldi	r20, 0x20	; 32
    1692:	51 e4       	ldi	r21, 0x41	; 65
    1694:	69 81       	ldd	r22, Y+1	; 0x01
    1696:	7a 81       	ldd	r23, Y+2	; 0x02
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    16a0:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
		while(__ticks)
    16a4:	61 15       	cp	r22, r1
    16a6:	71 05       	cpc	r23, r1
    16a8:	89 f0       	breq	.+34     	; 0x16cc <_ZN15music_notations11playthenoteEff+0x124>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    16aa:	88 ec       	ldi	r24, 0xC8	; 200
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <_ZN15music_notations11playthenoteEff+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b2:	61 50       	subi	r22, 0x01	; 1
    16b4:	71 09       	sbc	r23, r1
    16b6:	f6 cf       	rjmp	.-20     	; 0x16a4 <_ZN15music_notations11playthenoteEff+0xfc>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b8:	c7 01       	movw	r24, r14
    16ba:	b6 01       	movw	r22, r12
    16bc:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <_ZN15music_notations11playthenoteEff+0x11e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	cb 01       	movw	r24, r22
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <_ZN15music_notations11playthenoteEff+0x120>
    16cc:	8b b1       	in	r24, 0x0b	; 11
    16ce:	80 68       	ori	r24, 0x80	; 128
    16d0:	8b b9       	out	0x0b, r24	; 11
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	c7 01       	movw	r24, r14
    16dc:	b6 01       	movw	r22, r12
    16de:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__cmpsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	2c f1       	brlt	.+74     	; 0x1730 <_ZN15music_notations11playthenoteEff+0x188>
		__ticks = 1;
	else if (__tmp > 65535)
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	c7 01       	movw	r24, r14
    16f0:	b6 01       	movw	r22, r12
    16f2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__gesf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	b4 f4       	brge	.+44     	; 0x1726 <_ZN15music_notations11playthenoteEff+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	69 81       	ldd	r22, Y+1	; 0x01
    1704:	7a 81       	ldd	r23, Y+2	; 0x02
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    170e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
		while(__ticks)
    1712:	61 15       	cp	r22, r1
    1714:	71 05       	cpc	r23, r1
    1716:	89 f0       	breq	.+34     	; 0x173a <_ZN15music_notations11playthenoteEff+0x192>
    1718:	88 ec       	ldi	r24, 0xC8	; 200
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <_ZN15music_notations11playthenoteEff+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	61 50       	subi	r22, 0x01	; 1
    1722:	71 09       	sbc	r23, r1
    1724:	f6 cf       	rjmp	.-20     	; 0x1712 <_ZN15music_notations11playthenoteEff+0x16a>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1726:	c7 01       	movw	r24, r14
    1728:	b6 01       	movw	r22, r12
    172a:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <_ZN15music_notations11playthenoteEff+0x18c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	cb 01       	movw	r24, r22
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <_ZN15music_notations11playthenoteEff+0x18e>
    173a:	8b b1       	in	r24, 0x0b	; 11
    173c:	8f 77       	andi	r24, 0x7F	; 127
    173e:	8b b9       	out	0x0b, r24	; 11
    1740:	8f ef       	ldi	r24, 0xFF	; 255
    1742:	88 1a       	sub	r8, r24
    1744:	98 0a       	sbc	r9, r24
    1746:	a8 0a       	sbc	r10, r24
    1748:	b8 0a       	sbc	r11, r24
    174a:	7c cf       	rjmp	.-264    	; 0x1644 <_ZN15music_notations11playthenoteEff+0x9c>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a ef       	ldi	r20, 0xFA	; 250
    1752:	54 e4       	ldi	r21, 0x44	; 68
    1754:	c5 01       	movw	r24, r10
    1756:	b4 01       	movw	r22, r8
    1758:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    175c:	6b 01       	movw	r12, r22
    175e:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f e3       	ldi	r21, 0x3F	; 63
    1768:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__cmpsf2>
    176c:	88 23       	and	r24, r24
    176e:	1c f1       	brlt	.+70     	; 0x17b6 <_ZN15music_notations11playthenoteEff+0x20e>
		__ticks = 1;
	else if (__tmp > 65535)
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	c7 01       	movw	r24, r14
    177a:	b6 01       	movw	r22, r12
    177c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__gesf2>
    1780:	18 16       	cp	r1, r24
    1782:	a4 f4       	brge	.+40     	; 0x17ac <_ZN15music_notations11playthenoteEff+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e2       	ldi	r20, 0x20	; 32
    178a:	51 e4       	ldi	r21, 0x41	; 65
    178c:	c5 01       	movw	r24, r10
    178e:	b4 01       	movw	r22, r8
    1790:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    1794:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
		while(__ticks)
    1798:	61 15       	cp	r22, r1
    179a:	71 05       	cpc	r23, r1
    179c:	89 f0       	breq	.+34     	; 0x17c0 <_ZN15music_notations11playthenoteEff+0x218>
    179e:	88 ec       	ldi	r24, 0xC8	; 200
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <_ZN15music_notations11playthenoteEff+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a6:	61 50       	subi	r22, 0x01	; 1
    17a8:	71 09       	sbc	r23, r1
    17aa:	f6 cf       	rjmp	.-20     	; 0x1798 <_ZN15music_notations11playthenoteEff+0x1f0>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	c7 01       	movw	r24, r14
    17ae:	b6 01       	movw	r22, r12
    17b0:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <_ZN15music_notations11playthenoteEff+0x212>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	cb 01       	movw	r24, r22
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <_ZN15music_notations11playthenoteEff+0x214>
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	df 90       	pop	r13
    17d6:	cf 90       	pop	r12
    17d8:	bf 90       	pop	r11
    17da:	af 90       	pop	r10
    17dc:	9f 90       	pop	r9
    17de:	8f 90       	pop	r8
    17e0:	7f 90       	pop	r7
    17e2:	6f 90       	pop	r6
    17e4:	5f 90       	pop	r5
    17e6:	4f 90       	pop	r4
    17e8:	08 95       	ret

000017ea <_ZN15music_notations13playthemelodyEPiS0_i>:
    17ea:	2f 92       	push	r2
    17ec:	3f 92       	push	r3
    17ee:	4f 92       	push	r4
    17f0:	5f 92       	push	r5
    17f2:	6f 92       	push	r6
    17f4:	7f 92       	push	r7
    17f6:	8f 92       	push	r8
    17f8:	9f 92       	push	r9
    17fa:	af 92       	push	r10
    17fc:	bf 92       	push	r11
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	29 97       	sbiw	r28, 0x09	; 9
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	9f 83       	std	Y+7, r25	; 0x07
    1820:	8e 83       	std	Y+6, r24	; 0x06
    1822:	2b 01       	movw	r4, r22
    1824:	1a 01       	movw	r2, r20
    1826:	39 01       	movw	r6, r18
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	99 87       	std	Y+9, r25	; 0x09
    182e:	88 87       	std	Y+8, r24	; 0x08
    1830:	e8 85       	ldd	r30, Y+8	; 0x08
    1832:	f9 85       	ldd	r31, Y+9	; 0x09
    1834:	e6 15       	cp	r30, r6
    1836:	f7 05       	cpc	r31, r7
    1838:	0c f0       	brlt	.+2      	; 0x183c <_ZN15music_notations13playthemelodyEPiS0_i+0x52>
    183a:	d5 c0       	rjmp	.+426    	; 0x19e6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
    183c:	7f 01       	movw	r14, r30
    183e:	ee 0c       	add	r14, r14
    1840:	ff 1c       	adc	r15, r15
    1842:	61 01       	movw	r12, r2
    1844:	ce 0c       	add	r12, r14
    1846:	df 1c       	adc	r13, r15
    1848:	f6 01       	movw	r30, r12
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	07 2e       	mov	r0, r23
    1850:	00 0c       	add	r0, r0
    1852:	88 0b       	sbc	r24, r24
    1854:	99 0b       	sbc	r25, r25
    1856:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__floatsisf>
    185a:	4b 01       	movw	r8, r22
    185c:	5c 01       	movw	r10, r24
    185e:	f2 01       	movw	r30, r4
    1860:	ee 0d       	add	r30, r14
    1862:	ff 1d       	adc	r31, r15
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	07 2e       	mov	r0, r23
    186a:	00 0c       	add	r0, r0
    186c:	88 0b       	sbc	r24, r24
    186e:	99 0b       	sbc	r25, r25
    1870:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__floatsisf>
    1874:	ab 01       	movw	r20, r22
    1876:	bc 01       	movw	r22, r24
    1878:	95 01       	movw	r18, r10
    187a:	84 01       	movw	r16, r8
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	9f 81       	ldd	r25, Y+7	; 0x07
    1880:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN15music_notations11playthenoteEff>
    1884:	f6 01       	movw	r30, r12
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	07 2e       	mov	r0, r23
    188c:	00 0c       	add	r0, r0
    188e:	88 0b       	sbc	r24, r24
    1890:	99 0b       	sbc	r25, r25
    1892:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__floatsisf>
    1896:	6b 01       	movw	r12, r22
    1898:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    189a:	2b ea       	ldi	r18, 0xAB	; 171
    189c:	3a ea       	ldi	r19, 0xAA	; 170
    189e:	4a e2       	ldi	r20, 0x2A	; 42
    18a0:	50 e4       	ldi	r21, 0x40	; 64
    18a2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    18a6:	4b 01       	movw	r8, r22
    18a8:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    18aa:	a7 01       	movw	r20, r14
    18ac:	96 01       	movw	r18, r12
    18ae:	c7 01       	movw	r24, r14
    18b0:	b6 01       	movw	r22, r12
    18b2:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__addsf3>
    18b6:	69 83       	std	Y+1, r22	; 0x01
    18b8:	7a 83       	std	Y+2, r23	; 0x02
    18ba:	8b 83       	std	Y+3, r24	; 0x03
    18bc:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	c5 01       	movw	r24, r10
    18c8:	b4 01       	movw	r22, r8
    18ca:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__cmpsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	0c f4       	brge	.+2      	; 0x18d4 <_ZN15music_notations13playthemelodyEPiS0_i+0xea>
    18d2:	6a c0       	rjmp	.+212    	; 0x19a8 <_ZN15music_notations13playthemelodyEPiS0_i+0x1be>
		__ticks = 1;
	else if (__tmp2 > 65535)
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	69 81       	ldd	r22, Y+1	; 0x01
    18de:	7a 81       	ldd	r23, Y+2	; 0x02
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__gesf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	0c f0       	brlt	.+2      	; 0x18ee <_ZN15music_notations13playthemelodyEPiS0_i+0x104>
    18ec:	43 c0       	rjmp	.+134    	; 0x1974 <_ZN15music_notations13playthemelodyEPiS0_i+0x18a>
	{
		_delay_ms(__us / 1000.0);
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	4a e7       	ldi	r20, 0x7A	; 122
    18f4:	54 e4       	ldi	r21, 0x44	; 68
    18f6:	c7 01       	movw	r24, r14
    18f8:	b6 01       	movw	r22, r12
    18fa:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__divsf3>
    18fe:	4b 01       	movw	r8, r22
    1900:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a ef       	ldi	r20, 0xFA	; 250
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    190e:	6b 01       	movw	r12, r22
    1910:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	5f e3       	ldi	r21, 0x3F	; 63
    191a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__cmpsf2>
    191e:	88 23       	and	r24, r24
    1920:	1c f1       	brlt	.+70     	; 0x1968 <_ZN15music_notations13playthemelodyEPiS0_i+0x17e>
		__ticks = 1;
	else if (__tmp > 65535)
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	3f ef       	ldi	r19, 0xFF	; 255
    1926:	4f e7       	ldi	r20, 0x7F	; 127
    1928:	57 e4       	ldi	r21, 0x47	; 71
    192a:	c7 01       	movw	r24, r14
    192c:	b6 01       	movw	r22, r12
    192e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__gesf2>
    1932:	18 16       	cp	r1, r24
    1934:	a4 f4       	brge	.+40     	; 0x195e <_ZN15music_notations13playthemelodyEPiS0_i+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	c5 01       	movw	r24, r10
    1940:	b4 01       	movw	r22, r8
    1942:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulsf3>
    1946:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
		while(__ticks)
    194a:	61 15       	cp	r22, r1
    194c:	71 05       	cpc	r23, r1
    194e:	79 f1       	breq	.+94     	; 0x19ae <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
    1950:	88 ec       	ldi	r24, 0xC8	; 200
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <_ZN15music_notations13playthemelodyEPiS0_i+0x16a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1958:	61 50       	subi	r22, 0x01	; 1
    195a:	71 09       	sbc	r23, r1
    195c:	f6 cf       	rjmp	.-20     	; 0x194a <_ZN15music_notations13playthemelodyEPiS0_i+0x160>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	c7 01       	movw	r24, r14
    1960:	b6 01       	movw	r22, r12
    1962:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
    1966:	02 c0       	rjmp	.+4      	; 0x196c <_ZN15music_notations13playthemelodyEPiS0_i+0x182>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	cb 01       	movw	r24, r22
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <_ZN15music_notations13playthemelodyEPiS0_i+0x184>
    1972:	1d c0       	rjmp	.+58     	; 0x19ae <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	53 e4       	ldi	r21, 0x43	; 67
    197c:	c5 01       	movw	r24, r10
    197e:	b4 01       	movw	r22, r8
    1980:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__gesf2>
    1984:	18 16       	cp	r1, r24
    1986:	54 f4       	brge	.+20     	; 0x199c <_ZN15music_notations13playthemelodyEPiS0_i+0x1b2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1988:	69 81       	ldd	r22, Y+1	; 0x01
    198a:	7a 81       	ldd	r23, Y+2	; 0x02
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
    1994:	cb 01       	movw	r24, r22
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ac>
    199a:	0c c0       	rjmp	.+24     	; 0x19b4 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ca>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    199c:	c5 01       	movw	r24, r10
    199e:	b4 01       	movw	r22, r8
    19a0:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
    19a4:	6d 83       	std	Y+5, r22	; 0x05
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	9d 83       	std	Y+5, r25	; 0x05
    19ac:	00 c0       	rjmp	.+0      	; 0x19ae <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	8a 95       	dec	r24
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c6>
    19b4:	32 9b       	sbis	0x06, 2	; 6
    19b6:	08 c0       	rjmp	.+16     	; 0x19c8 <_ZN15music_notations13playthemelodyEPiS0_i+0x1de>
    19b8:	30 9b       	sbis	0x06, 0	; 6
    19ba:	08 c0       	rjmp	.+16     	; 0x19cc <_ZN15music_notations13playthemelodyEPiS0_i+0x1e2>
    19bc:	31 9b       	sbis	0x06, 1	; 6
    19be:	08 c0       	rjmp	.+16     	; 0x19d0 <_ZN15music_notations13playthemelodyEPiS0_i+0x1e6>
    19c0:	33 99       	sbic	0x06, 3	; 6
    19c2:	08 c0       	rjmp	.+16     	; 0x19d4 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ea>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	07 c0       	rjmp	.+14     	; 0x19d6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	05 c0       	rjmp	.+10     	; 0x19d6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	81 11       	cpse	r24, r1
    19d8:	06 c0       	rjmp	.+12     	; 0x19e6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
    19da:	88 85       	ldd	r24, Y+8	; 0x08
    19dc:	99 85       	ldd	r25, Y+9	; 0x09
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	99 87       	std	Y+9, r25	; 0x09
    19e2:	88 87       	std	Y+8, r24	; 0x08
    19e4:	25 cf       	rjmp	.-438    	; 0x1830 <_ZN15music_notations13playthemelodyEPiS0_i+0x46>
    19e6:	29 96       	adiw	r28, 0x09	; 9
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	ff 90       	pop	r15
    19fc:	ef 90       	pop	r14
    19fe:	df 90       	pop	r13
    1a00:	cf 90       	pop	r12
    1a02:	bf 90       	pop	r11
    1a04:	af 90       	pop	r10
    1a06:	9f 90       	pop	r9
    1a08:	8f 90       	pop	r8
    1a0a:	7f 90       	pop	r7
    1a0c:	6f 90       	pop	r6
    1a0e:	5f 90       	pop	r5
    1a10:	4f 90       	pop	r4
    1a12:	3f 90       	pop	r3
    1a14:	2f 90       	pop	r2
    1a16:	08 95       	ret

00001a18 <_ZN15music_notations4toneEi>:
    1a18:	61 15       	cp	r22, r1
    1a1a:	71 05       	cpc	r23, r1
    1a1c:	59 f4       	brne	.+22     	; 0x1a34 <_ZN15music_notations4toneEi+0x1c>
    1a1e:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <sizeofgot>
    1a22:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <sizeofgot+0x1>
    1a26:	42 e8       	ldi	r20, 0x82	; 130
    1a28:	56 e0       	ldi	r21, 0x06	; 6
    1a2a:	66 ea       	ldi	r22, 0xA6	; 166
    1a2c:	76 e0       	ldi	r23, 0x06	; 6
    1a2e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN15music_notations13playthemelodyEPiS0_i>
    1a32:	08 95       	ret
    1a34:	61 30       	cpi	r22, 0x01	; 1
    1a36:	71 05       	cpc	r23, r1
    1a38:	59 f4       	brne	.+22     	; 0x1a50 <_ZN15music_notations4toneEi+0x38>
    1a3a:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <sizeofpirates>
    1a3e:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <sizeofpirates+0x1>
    1a42:	42 e5       	ldi	r20, 0x52	; 82
    1a44:	55 e0       	ldi	r21, 0x05	; 5
    1a46:	6a ee       	ldi	r22, 0xEA	; 234
    1a48:	75 e0       	ldi	r23, 0x05	; 5
    1a4a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN15music_notations13playthemelodyEPiS0_i>
    1a4e:	08 95       	ret
    1a50:	62 30       	cpi	r22, 0x02	; 2
    1a52:	71 05       	cpc	r23, r1
    1a54:	59 f4       	brne	.+22     	; 0x1a6c <_ZN15music_notations4toneEi+0x54>
    1a56:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <sizeofstarwars>
    1a5a:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <sizeofstarwars+0x1>
    1a5e:	4a eb       	ldi	r20, 0xBA	; 186
    1a60:	54 e0       	ldi	r21, 0x04	; 4
    1a62:	66 e0       	ldi	r22, 0x06	; 6
    1a64:	75 e0       	ldi	r23, 0x05	; 5
    1a66:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN15music_notations13playthemelodyEPiS0_i>
    1a6a:	08 95       	ret
    1a6c:	63 30       	cpi	r22, 0x03	; 3
    1a6e:	71 05       	cpc	r23, r1
    1a70:	59 f4       	brne	.+22     	; 0x1a88 <_ZN15music_notations4toneEi+0x70>
    1a72:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <sizeofcoffindance>
    1a76:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <sizeofcoffindance+0x1>
    1a7a:	4a e2       	ldi	r20, 0x2A	; 42
    1a7c:	53 e0       	ldi	r21, 0x03	; 3
    1a7e:	62 ef       	ldi	r22, 0xF2	; 242
    1a80:	73 e0       	ldi	r23, 0x03	; 3
    1a82:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN15music_notations13playthemelodyEPiS0_i>
    1a86:	08 95       	ret
    1a88:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <sizeoftakeonme>
    1a8c:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <sizeoftakeonme+0x1>
    1a90:	4a ec       	ldi	r20, 0xCA	; 202
    1a92:	52 e0       	ldi	r21, 0x02	; 2
    1a94:	6a ef       	ldi	r22, 0xFA	; 250
    1a96:	72 e0       	ldi	r23, 0x02	; 2
    1a98:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN15music_notations13playthemelodyEPiS0_i>
    1a9c:	08 95       	ret

00001a9e <__subsf3>:
    1a9e:	50 58       	subi	r21, 0x80	; 128

00001aa0 <__addsf3>:
    1aa0:	bb 27       	eor	r27, r27
    1aa2:	aa 27       	eor	r26, r26
    1aa4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__addsf3x>
    1aa8:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_round>
    1aac:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fp_pscA>
    1ab0:	38 f0       	brcs	.+14     	; 0x1ac0 <__addsf3+0x20>
    1ab2:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__fp_pscB>
    1ab6:	20 f0       	brcs	.+8      	; 0x1ac0 <__addsf3+0x20>
    1ab8:	39 f4       	brne	.+14     	; 0x1ac8 <__addsf3+0x28>
    1aba:	9f 3f       	cpi	r25, 0xFF	; 255
    1abc:	19 f4       	brne	.+6      	; 0x1ac4 <__addsf3+0x24>
    1abe:	26 f4       	brtc	.+8      	; 0x1ac8 <__addsf3+0x28>
    1ac0:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <__fp_nan>
    1ac4:	0e f4       	brtc	.+2      	; 0x1ac8 <__addsf3+0x28>
    1ac6:	e0 95       	com	r30
    1ac8:	e7 fb       	bst	r30, 7
    1aca:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__fp_inf>

00001ace <__addsf3x>:
    1ace:	e9 2f       	mov	r30, r25
    1ad0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__fp_split3>
    1ad4:	58 f3       	brcs	.-42     	; 0x1aac <__addsf3+0xc>
    1ad6:	ba 17       	cp	r27, r26
    1ad8:	62 07       	cpc	r22, r18
    1ada:	73 07       	cpc	r23, r19
    1adc:	84 07       	cpc	r24, r20
    1ade:	95 07       	cpc	r25, r21
    1ae0:	20 f0       	brcs	.+8      	; 0x1aea <__addsf3x+0x1c>
    1ae2:	79 f4       	brne	.+30     	; 0x1b02 <__addsf3x+0x34>
    1ae4:	a6 f5       	brtc	.+104    	; 0x1b4e <__addsf3x+0x80>
    1ae6:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__fp_zero>
    1aea:	0e f4       	brtc	.+2      	; 0x1aee <__addsf3x+0x20>
    1aec:	e0 95       	com	r30
    1aee:	0b 2e       	mov	r0, r27
    1af0:	ba 2f       	mov	r27, r26
    1af2:	a0 2d       	mov	r26, r0
    1af4:	0b 01       	movw	r0, r22
    1af6:	b9 01       	movw	r22, r18
    1af8:	90 01       	movw	r18, r0
    1afa:	0c 01       	movw	r0, r24
    1afc:	ca 01       	movw	r24, r20
    1afe:	a0 01       	movw	r20, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	ff 27       	eor	r31, r31
    1b04:	59 1b       	sub	r21, r25
    1b06:	99 f0       	breq	.+38     	; 0x1b2e <__addsf3x+0x60>
    1b08:	59 3f       	cpi	r21, 0xF9	; 249
    1b0a:	50 f4       	brcc	.+20     	; 0x1b20 <__addsf3x+0x52>
    1b0c:	50 3e       	cpi	r21, 0xE0	; 224
    1b0e:	68 f1       	brcs	.+90     	; 0x1b6a <__addsf3x+0x9c>
    1b10:	1a 16       	cp	r1, r26
    1b12:	f0 40       	sbci	r31, 0x00	; 0
    1b14:	a2 2f       	mov	r26, r18
    1b16:	23 2f       	mov	r18, r19
    1b18:	34 2f       	mov	r19, r20
    1b1a:	44 27       	eor	r20, r20
    1b1c:	58 5f       	subi	r21, 0xF8	; 248
    1b1e:	f3 cf       	rjmp	.-26     	; 0x1b06 <__addsf3x+0x38>
    1b20:	46 95       	lsr	r20
    1b22:	37 95       	ror	r19
    1b24:	27 95       	ror	r18
    1b26:	a7 95       	ror	r26
    1b28:	f0 40       	sbci	r31, 0x00	; 0
    1b2a:	53 95       	inc	r21
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__addsf3x+0x52>
    1b2e:	7e f4       	brtc	.+30     	; 0x1b4e <__addsf3x+0x80>
    1b30:	1f 16       	cp	r1, r31
    1b32:	ba 0b       	sbc	r27, r26
    1b34:	62 0b       	sbc	r22, r18
    1b36:	73 0b       	sbc	r23, r19
    1b38:	84 0b       	sbc	r24, r20
    1b3a:	ba f0       	brmi	.+46     	; 0x1b6a <__addsf3x+0x9c>
    1b3c:	91 50       	subi	r25, 0x01	; 1
    1b3e:	a1 f0       	breq	.+40     	; 0x1b68 <__addsf3x+0x9a>
    1b40:	ff 0f       	add	r31, r31
    1b42:	bb 1f       	adc	r27, r27
    1b44:	66 1f       	adc	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	88 1f       	adc	r24, r24
    1b4a:	c2 f7       	brpl	.-16     	; 0x1b3c <__addsf3x+0x6e>
    1b4c:	0e c0       	rjmp	.+28     	; 0x1b6a <__addsf3x+0x9c>
    1b4e:	ba 0f       	add	r27, r26
    1b50:	62 1f       	adc	r22, r18
    1b52:	73 1f       	adc	r23, r19
    1b54:	84 1f       	adc	r24, r20
    1b56:	48 f4       	brcc	.+18     	; 0x1b6a <__addsf3x+0x9c>
    1b58:	87 95       	ror	r24
    1b5a:	77 95       	ror	r23
    1b5c:	67 95       	ror	r22
    1b5e:	b7 95       	ror	r27
    1b60:	f7 95       	ror	r31
    1b62:	9e 3f       	cpi	r25, 0xFE	; 254
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <__addsf3x+0x9a>
    1b66:	b0 cf       	rjmp	.-160    	; 0x1ac8 <__addsf3+0x28>
    1b68:	93 95       	inc	r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	08 f0       	brcs	.+2      	; 0x1b70 <__addsf3x+0xa2>
    1b6e:	99 27       	eor	r25, r25
    1b70:	ee 0f       	add	r30, r30
    1b72:	97 95       	ror	r25
    1b74:	87 95       	ror	r24
    1b76:	08 95       	ret

00001b78 <__cmpsf2>:
    1b78:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_cmp>
    1b7c:	08 f4       	brcc	.+2      	; 0x1b80 <__cmpsf2+0x8>
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	08 95       	ret

00001b82 <__divsf3>:
    1b82:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__divsf3x>
    1b86:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_round>
    1b8a:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__fp_pscB>
    1b8e:	58 f0       	brcs	.+22     	; 0x1ba6 <__divsf3+0x24>
    1b90:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fp_pscA>
    1b94:	40 f0       	brcs	.+16     	; 0x1ba6 <__divsf3+0x24>
    1b96:	29 f4       	brne	.+10     	; 0x1ba2 <__divsf3+0x20>
    1b98:	5f 3f       	cpi	r21, 0xFF	; 255
    1b9a:	29 f0       	breq	.+10     	; 0x1ba6 <__divsf3+0x24>
    1b9c:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__fp_inf>
    1ba0:	51 11       	cpse	r21, r1
    1ba2:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__fp_szero>
    1ba6:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <__fp_nan>

00001baa <__divsf3x>:
    1baa:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__fp_split3>
    1bae:	68 f3       	brcs	.-38     	; 0x1b8a <__divsf3+0x8>

00001bb0 <__divsf3_pse>:
    1bb0:	99 23       	and	r25, r25
    1bb2:	b1 f3       	breq	.-20     	; 0x1ba0 <__divsf3+0x1e>
    1bb4:	55 23       	and	r21, r21
    1bb6:	91 f3       	breq	.-28     	; 0x1b9c <__divsf3+0x1a>
    1bb8:	95 1b       	sub	r25, r21
    1bba:	55 0b       	sbc	r21, r21
    1bbc:	bb 27       	eor	r27, r27
    1bbe:	aa 27       	eor	r26, r26
    1bc0:	62 17       	cp	r22, r18
    1bc2:	73 07       	cpc	r23, r19
    1bc4:	84 07       	cpc	r24, r20
    1bc6:	38 f0       	brcs	.+14     	; 0x1bd6 <__divsf3_pse+0x26>
    1bc8:	9f 5f       	subi	r25, 0xFF	; 255
    1bca:	5f 4f       	sbci	r21, 0xFF	; 255
    1bcc:	22 0f       	add	r18, r18
    1bce:	33 1f       	adc	r19, r19
    1bd0:	44 1f       	adc	r20, r20
    1bd2:	aa 1f       	adc	r26, r26
    1bd4:	a9 f3       	breq	.-22     	; 0x1bc0 <__divsf3_pse+0x10>
    1bd6:	35 d0       	rcall	.+106    	; 0x1c42 <__divsf3_pse+0x92>
    1bd8:	0e 2e       	mov	r0, r30
    1bda:	3a f0       	brmi	.+14     	; 0x1bea <__divsf3_pse+0x3a>
    1bdc:	e0 e8       	ldi	r30, 0x80	; 128
    1bde:	32 d0       	rcall	.+100    	; 0x1c44 <__divsf3_pse+0x94>
    1be0:	91 50       	subi	r25, 0x01	; 1
    1be2:	50 40       	sbci	r21, 0x00	; 0
    1be4:	e6 95       	lsr	r30
    1be6:	00 1c       	adc	r0, r0
    1be8:	ca f7       	brpl	.-14     	; 0x1bdc <__divsf3_pse+0x2c>
    1bea:	2b d0       	rcall	.+86     	; 0x1c42 <__divsf3_pse+0x92>
    1bec:	fe 2f       	mov	r31, r30
    1bee:	29 d0       	rcall	.+82     	; 0x1c42 <__divsf3_pse+0x92>
    1bf0:	66 0f       	add	r22, r22
    1bf2:	77 1f       	adc	r23, r23
    1bf4:	88 1f       	adc	r24, r24
    1bf6:	bb 1f       	adc	r27, r27
    1bf8:	26 17       	cp	r18, r22
    1bfa:	37 07       	cpc	r19, r23
    1bfc:	48 07       	cpc	r20, r24
    1bfe:	ab 07       	cpc	r26, r27
    1c00:	b0 e8       	ldi	r27, 0x80	; 128
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <__divsf3_pse+0x56>
    1c04:	bb 0b       	sbc	r27, r27
    1c06:	80 2d       	mov	r24, r0
    1c08:	bf 01       	movw	r22, r30
    1c0a:	ff 27       	eor	r31, r31
    1c0c:	93 58       	subi	r25, 0x83	; 131
    1c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c10:	3a f0       	brmi	.+14     	; 0x1c20 <__divsf3_pse+0x70>
    1c12:	9e 3f       	cpi	r25, 0xFE	; 254
    1c14:	51 05       	cpc	r21, r1
    1c16:	78 f0       	brcs	.+30     	; 0x1c36 <__divsf3_pse+0x86>
    1c18:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__fp_inf>
    1c1c:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__fp_szero>
    1c20:	5f 3f       	cpi	r21, 0xFF	; 255
    1c22:	e4 f3       	brlt	.-8      	; 0x1c1c <__divsf3_pse+0x6c>
    1c24:	98 3e       	cpi	r25, 0xE8	; 232
    1c26:	d4 f3       	brlt	.-12     	; 0x1c1c <__divsf3_pse+0x6c>
    1c28:	86 95       	lsr	r24
    1c2a:	77 95       	ror	r23
    1c2c:	67 95       	ror	r22
    1c2e:	b7 95       	ror	r27
    1c30:	f7 95       	ror	r31
    1c32:	9f 5f       	subi	r25, 0xFF	; 255
    1c34:	c9 f7       	brne	.-14     	; 0x1c28 <__divsf3_pse+0x78>
    1c36:	88 0f       	add	r24, r24
    1c38:	91 1d       	adc	r25, r1
    1c3a:	96 95       	lsr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	97 f9       	bld	r25, 7
    1c40:	08 95       	ret
    1c42:	e1 e0       	ldi	r30, 0x01	; 1
    1c44:	66 0f       	add	r22, r22
    1c46:	77 1f       	adc	r23, r23
    1c48:	88 1f       	adc	r24, r24
    1c4a:	bb 1f       	adc	r27, r27
    1c4c:	62 17       	cp	r22, r18
    1c4e:	73 07       	cpc	r23, r19
    1c50:	84 07       	cpc	r24, r20
    1c52:	ba 07       	cpc	r27, r26
    1c54:	20 f0       	brcs	.+8      	; 0x1c5e <__divsf3_pse+0xae>
    1c56:	62 1b       	sub	r22, r18
    1c58:	73 0b       	sbc	r23, r19
    1c5a:	84 0b       	sbc	r24, r20
    1c5c:	ba 0b       	sbc	r27, r26
    1c5e:	ee 1f       	adc	r30, r30
    1c60:	88 f7       	brcc	.-30     	; 0x1c44 <__divsf3_pse+0x94>
    1c62:	e0 95       	com	r30
    1c64:	08 95       	ret

00001c66 <__fixsfsi>:
    1c66:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fixunssfsi>
    1c6a:	68 94       	set
    1c6c:	b1 11       	cpse	r27, r1
    1c6e:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__fp_szero>
    1c72:	08 95       	ret

00001c74 <__fixunssfsi>:
    1c74:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__fp_splitA>
    1c78:	88 f0       	brcs	.+34     	; 0x1c9c <__fixunssfsi+0x28>
    1c7a:	9f 57       	subi	r25, 0x7F	; 127
    1c7c:	98 f0       	brcs	.+38     	; 0x1ca4 <__fixunssfsi+0x30>
    1c7e:	b9 2f       	mov	r27, r25
    1c80:	99 27       	eor	r25, r25
    1c82:	b7 51       	subi	r27, 0x17	; 23
    1c84:	b0 f0       	brcs	.+44     	; 0x1cb2 <__fixunssfsi+0x3e>
    1c86:	e1 f0       	breq	.+56     	; 0x1cc0 <__fixunssfsi+0x4c>
    1c88:	66 0f       	add	r22, r22
    1c8a:	77 1f       	adc	r23, r23
    1c8c:	88 1f       	adc	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	1a f0       	brmi	.+6      	; 0x1c98 <__fixunssfsi+0x24>
    1c92:	ba 95       	dec	r27
    1c94:	c9 f7       	brne	.-14     	; 0x1c88 <__fixunssfsi+0x14>
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <__fixunssfsi+0x4c>
    1c98:	b1 30       	cpi	r27, 0x01	; 1
    1c9a:	91 f0       	breq	.+36     	; 0x1cc0 <__fixunssfsi+0x4c>
    1c9c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__fp_zero>
    1ca0:	b1 e0       	ldi	r27, 0x01	; 1
    1ca2:	08 95       	ret
    1ca4:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__fp_zero>
    1ca8:	67 2f       	mov	r22, r23
    1caa:	78 2f       	mov	r23, r24
    1cac:	88 27       	eor	r24, r24
    1cae:	b8 5f       	subi	r27, 0xF8	; 248
    1cb0:	39 f0       	breq	.+14     	; 0x1cc0 <__fixunssfsi+0x4c>
    1cb2:	b9 3f       	cpi	r27, 0xF9	; 249
    1cb4:	cc f3       	brlt	.-14     	; 0x1ca8 <__fixunssfsi+0x34>
    1cb6:	86 95       	lsr	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	b3 95       	inc	r27
    1cbe:	d9 f7       	brne	.-10     	; 0x1cb6 <__fixunssfsi+0x42>
    1cc0:	3e f4       	brtc	.+14     	; 0x1cd0 <__fixunssfsi+0x5c>
    1cc2:	90 95       	com	r25
    1cc4:	80 95       	com	r24
    1cc6:	70 95       	com	r23
    1cc8:	61 95       	neg	r22
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cce:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd0:	08 95       	ret

00001cd2 <__floatunsisf>:
    1cd2:	e8 94       	clt
    1cd4:	09 c0       	rjmp	.+18     	; 0x1ce8 <__floatsisf+0x12>

00001cd6 <__floatsisf>:
    1cd6:	97 fb       	bst	r25, 7
    1cd8:	3e f4       	brtc	.+14     	; 0x1ce8 <__floatsisf+0x12>
    1cda:	90 95       	com	r25
    1cdc:	80 95       	com	r24
    1cde:	70 95       	com	r23
    1ce0:	61 95       	neg	r22
    1ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce8:	99 23       	and	r25, r25
    1cea:	a9 f0       	breq	.+42     	; 0x1d16 <__floatsisf+0x40>
    1cec:	f9 2f       	mov	r31, r25
    1cee:	96 e9       	ldi	r25, 0x96	; 150
    1cf0:	bb 27       	eor	r27, r27
    1cf2:	93 95       	inc	r25
    1cf4:	f6 95       	lsr	r31
    1cf6:	87 95       	ror	r24
    1cf8:	77 95       	ror	r23
    1cfa:	67 95       	ror	r22
    1cfc:	b7 95       	ror	r27
    1cfe:	f1 11       	cpse	r31, r1
    1d00:	f8 cf       	rjmp	.-16     	; 0x1cf2 <__floatsisf+0x1c>
    1d02:	fa f4       	brpl	.+62     	; 0x1d42 <__floatsisf+0x6c>
    1d04:	bb 0f       	add	r27, r27
    1d06:	11 f4       	brne	.+4      	; 0x1d0c <__floatsisf+0x36>
    1d08:	60 ff       	sbrs	r22, 0
    1d0a:	1b c0       	rjmp	.+54     	; 0x1d42 <__floatsisf+0x6c>
    1d0c:	6f 5f       	subi	r22, 0xFF	; 255
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d10:	8f 4f       	sbci	r24, 0xFF	; 255
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	16 c0       	rjmp	.+44     	; 0x1d42 <__floatsisf+0x6c>
    1d16:	88 23       	and	r24, r24
    1d18:	11 f0       	breq	.+4      	; 0x1d1e <__floatsisf+0x48>
    1d1a:	96 e9       	ldi	r25, 0x96	; 150
    1d1c:	11 c0       	rjmp	.+34     	; 0x1d40 <__floatsisf+0x6a>
    1d1e:	77 23       	and	r23, r23
    1d20:	21 f0       	breq	.+8      	; 0x1d2a <__floatsisf+0x54>
    1d22:	9e e8       	ldi	r25, 0x8E	; 142
    1d24:	87 2f       	mov	r24, r23
    1d26:	76 2f       	mov	r23, r22
    1d28:	05 c0       	rjmp	.+10     	; 0x1d34 <__floatsisf+0x5e>
    1d2a:	66 23       	and	r22, r22
    1d2c:	71 f0       	breq	.+28     	; 0x1d4a <__floatsisf+0x74>
    1d2e:	96 e8       	ldi	r25, 0x86	; 134
    1d30:	86 2f       	mov	r24, r22
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	2a f0       	brmi	.+10     	; 0x1d42 <__floatsisf+0x6c>
    1d38:	9a 95       	dec	r25
    1d3a:	66 0f       	add	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	88 1f       	adc	r24, r24
    1d40:	da f7       	brpl	.-10     	; 0x1d38 <__floatsisf+0x62>
    1d42:	88 0f       	add	r24, r24
    1d44:	96 95       	lsr	r25
    1d46:	87 95       	ror	r24
    1d48:	97 f9       	bld	r25, 7
    1d4a:	08 95       	ret

00001d4c <__fp_cmp>:
    1d4c:	99 0f       	add	r25, r25
    1d4e:	00 08       	sbc	r0, r0
    1d50:	55 0f       	add	r21, r21
    1d52:	aa 0b       	sbc	r26, r26
    1d54:	e0 e8       	ldi	r30, 0x80	; 128
    1d56:	fe ef       	ldi	r31, 0xFE	; 254
    1d58:	16 16       	cp	r1, r22
    1d5a:	17 06       	cpc	r1, r23
    1d5c:	e8 07       	cpc	r30, r24
    1d5e:	f9 07       	cpc	r31, r25
    1d60:	c0 f0       	brcs	.+48     	; 0x1d92 <__fp_cmp+0x46>
    1d62:	12 16       	cp	r1, r18
    1d64:	13 06       	cpc	r1, r19
    1d66:	e4 07       	cpc	r30, r20
    1d68:	f5 07       	cpc	r31, r21
    1d6a:	98 f0       	brcs	.+38     	; 0x1d92 <__fp_cmp+0x46>
    1d6c:	62 1b       	sub	r22, r18
    1d6e:	73 0b       	sbc	r23, r19
    1d70:	84 0b       	sbc	r24, r20
    1d72:	95 0b       	sbc	r25, r21
    1d74:	39 f4       	brne	.+14     	; 0x1d84 <__fp_cmp+0x38>
    1d76:	0a 26       	eor	r0, r26
    1d78:	61 f0       	breq	.+24     	; 0x1d92 <__fp_cmp+0x46>
    1d7a:	23 2b       	or	r18, r19
    1d7c:	24 2b       	or	r18, r20
    1d7e:	25 2b       	or	r18, r21
    1d80:	21 f4       	brne	.+8      	; 0x1d8a <__fp_cmp+0x3e>
    1d82:	08 95       	ret
    1d84:	0a 26       	eor	r0, r26
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <__fp_cmp+0x3e>
    1d88:	a1 40       	sbci	r26, 0x01	; 1
    1d8a:	a6 95       	lsr	r26
    1d8c:	8f ef       	ldi	r24, 0xFF	; 255
    1d8e:	81 1d       	adc	r24, r1
    1d90:	81 1d       	adc	r24, r1
    1d92:	08 95       	ret

00001d94 <__fp_inf>:
    1d94:	97 f9       	bld	r25, 7
    1d96:	9f 67       	ori	r25, 0x7F	; 127
    1d98:	80 e8       	ldi	r24, 0x80	; 128
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	08 95       	ret

00001da0 <__fp_nan>:
    1da0:	9f ef       	ldi	r25, 0xFF	; 255
    1da2:	80 ec       	ldi	r24, 0xC0	; 192
    1da4:	08 95       	ret

00001da6 <__fp_pscA>:
    1da6:	00 24       	eor	r0, r0
    1da8:	0a 94       	dec	r0
    1daa:	16 16       	cp	r1, r22
    1dac:	17 06       	cpc	r1, r23
    1dae:	18 06       	cpc	r1, r24
    1db0:	09 06       	cpc	r0, r25
    1db2:	08 95       	ret

00001db4 <__fp_pscB>:
    1db4:	00 24       	eor	r0, r0
    1db6:	0a 94       	dec	r0
    1db8:	12 16       	cp	r1, r18
    1dba:	13 06       	cpc	r1, r19
    1dbc:	14 06       	cpc	r1, r20
    1dbe:	05 06       	cpc	r0, r21
    1dc0:	08 95       	ret

00001dc2 <__fp_round>:
    1dc2:	09 2e       	mov	r0, r25
    1dc4:	03 94       	inc	r0
    1dc6:	00 0c       	add	r0, r0
    1dc8:	11 f4       	brne	.+4      	; 0x1dce <__fp_round+0xc>
    1dca:	88 23       	and	r24, r24
    1dcc:	52 f0       	brmi	.+20     	; 0x1de2 <__fp_round+0x20>
    1dce:	bb 0f       	add	r27, r27
    1dd0:	40 f4       	brcc	.+16     	; 0x1de2 <__fp_round+0x20>
    1dd2:	bf 2b       	or	r27, r31
    1dd4:	11 f4       	brne	.+4      	; 0x1dda <__fp_round+0x18>
    1dd6:	60 ff       	sbrs	r22, 0
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <__fp_round+0x20>
    1dda:	6f 5f       	subi	r22, 0xFF	; 255
    1ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dde:	8f 4f       	sbci	r24, 0xFF	; 255
    1de0:	9f 4f       	sbci	r25, 0xFF	; 255
    1de2:	08 95       	ret

00001de4 <__fp_split3>:
    1de4:	57 fd       	sbrc	r21, 7
    1de6:	90 58       	subi	r25, 0x80	; 128
    1de8:	44 0f       	add	r20, r20
    1dea:	55 1f       	adc	r21, r21
    1dec:	59 f0       	breq	.+22     	; 0x1e04 <__fp_splitA+0x10>
    1dee:	5f 3f       	cpi	r21, 0xFF	; 255
    1df0:	71 f0       	breq	.+28     	; 0x1e0e <__fp_splitA+0x1a>
    1df2:	47 95       	ror	r20

00001df4 <__fp_splitA>:
    1df4:	88 0f       	add	r24, r24
    1df6:	97 fb       	bst	r25, 7
    1df8:	99 1f       	adc	r25, r25
    1dfa:	61 f0       	breq	.+24     	; 0x1e14 <__fp_splitA+0x20>
    1dfc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dfe:	79 f0       	breq	.+30     	; 0x1e1e <__fp_splitA+0x2a>
    1e00:	87 95       	ror	r24
    1e02:	08 95       	ret
    1e04:	12 16       	cp	r1, r18
    1e06:	13 06       	cpc	r1, r19
    1e08:	14 06       	cpc	r1, r20
    1e0a:	55 1f       	adc	r21, r21
    1e0c:	f2 cf       	rjmp	.-28     	; 0x1df2 <__fp_split3+0xe>
    1e0e:	46 95       	lsr	r20
    1e10:	f1 df       	rcall	.-30     	; 0x1df4 <__fp_splitA>
    1e12:	08 c0       	rjmp	.+16     	; 0x1e24 <__fp_splitA+0x30>
    1e14:	16 16       	cp	r1, r22
    1e16:	17 06       	cpc	r1, r23
    1e18:	18 06       	cpc	r1, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	f1 cf       	rjmp	.-30     	; 0x1e00 <__fp_splitA+0xc>
    1e1e:	86 95       	lsr	r24
    1e20:	71 05       	cpc	r23, r1
    1e22:	61 05       	cpc	r22, r1
    1e24:	08 94       	sec
    1e26:	08 95       	ret

00001e28 <__fp_zero>:
    1e28:	e8 94       	clt

00001e2a <__fp_szero>:
    1e2a:	bb 27       	eor	r27, r27
    1e2c:	66 27       	eor	r22, r22
    1e2e:	77 27       	eor	r23, r23
    1e30:	cb 01       	movw	r24, r22
    1e32:	97 f9       	bld	r25, 7
    1e34:	08 95       	ret

00001e36 <__gesf2>:
    1e36:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_cmp>
    1e3a:	08 f4       	brcc	.+2      	; 0x1e3e <__gesf2+0x8>
    1e3c:	8f ef       	ldi	r24, 0xFF	; 255
    1e3e:	08 95       	ret

00001e40 <__mulsf3>:
    1e40:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3x>
    1e44:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__fp_round>
    1e48:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fp_pscA>
    1e4c:	38 f0       	brcs	.+14     	; 0x1e5c <__mulsf3+0x1c>
    1e4e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__fp_pscB>
    1e52:	20 f0       	brcs	.+8      	; 0x1e5c <__mulsf3+0x1c>
    1e54:	95 23       	and	r25, r21
    1e56:	11 f0       	breq	.+4      	; 0x1e5c <__mulsf3+0x1c>
    1e58:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__fp_inf>
    1e5c:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <__fp_nan>
    1e60:	11 24       	eor	r1, r1
    1e62:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__fp_szero>

00001e66 <__mulsf3x>:
    1e66:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__fp_split3>
    1e6a:	70 f3       	brcs	.-36     	; 0x1e48 <__mulsf3+0x8>

00001e6c <__mulsf3_pse>:
    1e6c:	95 9f       	mul	r25, r21
    1e6e:	c1 f3       	breq	.-16     	; 0x1e60 <__mulsf3+0x20>
    1e70:	95 0f       	add	r25, r21
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	55 1f       	adc	r21, r21
    1e76:	62 9f       	mul	r22, r18
    1e78:	f0 01       	movw	r30, r0
    1e7a:	72 9f       	mul	r23, r18
    1e7c:	bb 27       	eor	r27, r27
    1e7e:	f0 0d       	add	r31, r0
    1e80:	b1 1d       	adc	r27, r1
    1e82:	63 9f       	mul	r22, r19
    1e84:	aa 27       	eor	r26, r26
    1e86:	f0 0d       	add	r31, r0
    1e88:	b1 1d       	adc	r27, r1
    1e8a:	aa 1f       	adc	r26, r26
    1e8c:	64 9f       	mul	r22, r20
    1e8e:	66 27       	eor	r22, r22
    1e90:	b0 0d       	add	r27, r0
    1e92:	a1 1d       	adc	r26, r1
    1e94:	66 1f       	adc	r22, r22
    1e96:	82 9f       	mul	r24, r18
    1e98:	22 27       	eor	r18, r18
    1e9a:	b0 0d       	add	r27, r0
    1e9c:	a1 1d       	adc	r26, r1
    1e9e:	62 1f       	adc	r22, r18
    1ea0:	73 9f       	mul	r23, r19
    1ea2:	b0 0d       	add	r27, r0
    1ea4:	a1 1d       	adc	r26, r1
    1ea6:	62 1f       	adc	r22, r18
    1ea8:	83 9f       	mul	r24, r19
    1eaa:	a0 0d       	add	r26, r0
    1eac:	61 1d       	adc	r22, r1
    1eae:	22 1f       	adc	r18, r18
    1eb0:	74 9f       	mul	r23, r20
    1eb2:	33 27       	eor	r19, r19
    1eb4:	a0 0d       	add	r26, r0
    1eb6:	61 1d       	adc	r22, r1
    1eb8:	23 1f       	adc	r18, r19
    1eba:	84 9f       	mul	r24, r20
    1ebc:	60 0d       	add	r22, r0
    1ebe:	21 1d       	adc	r18, r1
    1ec0:	82 2f       	mov	r24, r18
    1ec2:	76 2f       	mov	r23, r22
    1ec4:	6a 2f       	mov	r22, r26
    1ec6:	11 24       	eor	r1, r1
    1ec8:	9f 57       	subi	r25, 0x7F	; 127
    1eca:	50 40       	sbci	r21, 0x00	; 0
    1ecc:	9a f0       	brmi	.+38     	; 0x1ef4 <__mulsf3_pse+0x88>
    1ece:	f1 f0       	breq	.+60     	; 0x1f0c <__mulsf3_pse+0xa0>
    1ed0:	88 23       	and	r24, r24
    1ed2:	4a f0       	brmi	.+18     	; 0x1ee6 <__mulsf3_pse+0x7a>
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	bb 1f       	adc	r27, r27
    1eda:	66 1f       	adc	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	88 1f       	adc	r24, r24
    1ee0:	91 50       	subi	r25, 0x01	; 1
    1ee2:	50 40       	sbci	r21, 0x00	; 0
    1ee4:	a9 f7       	brne	.-22     	; 0x1ed0 <__mulsf3_pse+0x64>
    1ee6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ee8:	51 05       	cpc	r21, r1
    1eea:	80 f0       	brcs	.+32     	; 0x1f0c <__mulsf3_pse+0xa0>
    1eec:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__fp_inf>
    1ef0:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__fp_szero>
    1ef4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ef6:	e4 f3       	brlt	.-8      	; 0x1ef0 <__mulsf3_pse+0x84>
    1ef8:	98 3e       	cpi	r25, 0xE8	; 232
    1efa:	d4 f3       	brlt	.-12     	; 0x1ef0 <__mulsf3_pse+0x84>
    1efc:	86 95       	lsr	r24
    1efe:	77 95       	ror	r23
    1f00:	67 95       	ror	r22
    1f02:	b7 95       	ror	r27
    1f04:	f7 95       	ror	r31
    1f06:	e7 95       	ror	r30
    1f08:	9f 5f       	subi	r25, 0xFF	; 255
    1f0a:	c1 f7       	brne	.-16     	; 0x1efc <__mulsf3_pse+0x90>
    1f0c:	fe 2b       	or	r31, r30
    1f0e:	88 0f       	add	r24, r24
    1f10:	91 1d       	adc	r25, r1
    1f12:	96 95       	lsr	r25
    1f14:	87 95       	ror	r24
    1f16:	97 f9       	bld	r25, 7
    1f18:	08 95       	ret

00001f1a <__divmodhi4>:
    1f1a:	97 fb       	bst	r25, 7
    1f1c:	07 2e       	mov	r0, r23
    1f1e:	16 f4       	brtc	.+4      	; 0x1f24 <__divmodhi4+0xa>
    1f20:	00 94       	com	r0
    1f22:	07 d0       	rcall	.+14     	; 0x1f32 <__divmodhi4_neg1>
    1f24:	77 fd       	sbrc	r23, 7
    1f26:	09 d0       	rcall	.+18     	; 0x1f3a <__divmodhi4_neg2>
    1f28:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__udivmodhi4>
    1f2c:	07 fc       	sbrc	r0, 7
    1f2e:	05 d0       	rcall	.+10     	; 0x1f3a <__divmodhi4_neg2>
    1f30:	3e f4       	brtc	.+14     	; 0x1f40 <__divmodhi4_exit>

00001f32 <__divmodhi4_neg1>:
    1f32:	90 95       	com	r25
    1f34:	81 95       	neg	r24
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	08 95       	ret

00001f3a <__divmodhi4_neg2>:
    1f3a:	70 95       	com	r23
    1f3c:	61 95       	neg	r22
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255

00001f40 <__divmodhi4_exit>:
    1f40:	08 95       	ret

00001f42 <__udivmodhi4>:
    1f42:	aa 1b       	sub	r26, r26
    1f44:	bb 1b       	sub	r27, r27
    1f46:	51 e1       	ldi	r21, 0x11	; 17
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <__udivmodhi4_ep>

00001f4a <__udivmodhi4_loop>:
    1f4a:	aa 1f       	adc	r26, r26
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	a6 17       	cp	r26, r22
    1f50:	b7 07       	cpc	r27, r23
    1f52:	10 f0       	brcs	.+4      	; 0x1f58 <__udivmodhi4_ep>
    1f54:	a6 1b       	sub	r26, r22
    1f56:	b7 0b       	sbc	r27, r23

00001f58 <__udivmodhi4_ep>:
    1f58:	88 1f       	adc	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	5a 95       	dec	r21
    1f5e:	a9 f7       	brne	.-22     	; 0x1f4a <__udivmodhi4_loop>
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	08 95       	ret

00001f6a <_exit>:
    1f6a:	f8 94       	cli

00001f6c <__stop_program>:
    1f6c:	ff cf       	rjmp	.-2      	; 0x1f6c <__stop_program>
