
Keypad_Input.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b2  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a1  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a0  00000000  00000000  000012bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000406  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010a  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 80 00 	call	0x100	; 0x100 <main>
  88:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_ZN7Get_key6GetKeyEv>:

uint8_t Get_key::GetKey()

{
	uint8_t r,c;
	PORTD |= 0b00001111;
  90:	8b b1       	in	r24, 0x0b	; 11
  92:	8f 60       	ori	r24, 0x0F	; 15
  94:	8b b9       	out	0x0b, r24	; 11
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	83 30       	cpi	r24, 0x03	; 3
  9a:	80 f5       	brcc	.+96     	; 0xfc <_ZN7Get_key6GetKeyEv+0x6c>
	{
		DDRD &=~(0b01111111);
  9c:	9a b1       	in	r25, 0x0a	; 10
  9e:	90 78       	andi	r25, 0x80	; 128
  a0:	9a b9       	out	0x0a, r25	; 10
		DDRD |=(0b01000000>>c);
  a2:	9a b1       	in	r25, 0x0a	; 10
  a4:	20 e4       	ldi	r18, 0x40	; 64
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	08 2e       	mov	r0, r24
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <_ZN7Get_key6GetKeyEv+0x20>
  ac:	35 95       	asr	r19
  ae:	27 95       	ror	r18
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <_ZN7Get_key6GetKeyEv+0x1c>
  b4:	29 2b       	or	r18, r25
  b6:	2a b9       	out	0x0a, r18	; 10
		for (r=0;r<4;r++)//identifying the row of the pressed key
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	94 30       	cpi	r25, 0x04	; 4
  bc:	e8 f4       	brcc	.+58     	; 0xf8 <_ZN7Get_key6GetKeyEv+0x68>
		{
			if(!(PIND & (0b00001000>>r)))
  be:	29 b1       	in	r18, 0x09	; 9
  c0:	48 e0       	ldi	r20, 0x08	; 8
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	09 2e       	mov	r0, r25
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_ZN7Get_key6GetKeyEv+0x3c>
  c8:	55 95       	asr	r21
  ca:	47 95       	ror	r20
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <_ZN7Get_key6GetKeyEv+0x38>
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	24 23       	and	r18, r20
  d4:	35 23       	and	r19, r21
  d6:	23 2b       	or	r18, r19
  d8:	69 f4       	brne	.+26     	; 0xf4 <_ZN7Get_key6GetKeyEv+0x64>
			{
				while(!(PIND & (0b00001000>>r)));
  da:	29 b1       	in	r18, 0x09	; 9
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	24 23       	and	r18, r20
  e0:	35 23       	and	r19, r21
  e2:	23 2b       	or	r18, r19
  e4:	d1 f3       	breq	.-12     	; 0xda <_ZN7Get_key6GetKeyEv+0x4a>
				return(r*3+c +1);// returning the pressed number by considering the row and the column pressed
  e6:	29 2f       	mov	r18, r25
  e8:	22 0f       	add	r18, r18
  ea:	92 0f       	add	r25, r18
  ec:	98 0f       	add	r25, r24
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	89 0f       	add	r24, r25
  f2:	08 95       	ret
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
	{
		DDRD &=~(0b01111111);
		DDRD |=(0b01000000>>c);
		for (r=0;r<4;r++)//identifying the row of the pressed key
  f4:	9f 5f       	subi	r25, 0xFF	; 255
  f6:	e1 cf       	rjmp	.-62     	; 0xba <_ZN7Get_key6GetKeyEv+0x2a>

{
	uint8_t r,c;
	PORTD |= 0b00001111;
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	ce cf       	rjmp	.-100    	; 0x98 <_ZN7Get_key6GetKeyEv+0x8>
				return(r*3+c +1);// returning the pressed number by considering the row and the column pressed
			}
		}
	}
	
	return 0xFF;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	08 95       	ret

00000100 <main>:

int main(void)
{
    /* Replace with your application code */
    uint8_t key;
    DDRB = 0b00000001;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	84 b9       	out	0x04, r24	; 4
    while (1)
    {
	    key = keypad.GetKey();
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 48 00 	call	0x90	; 0x90 <_ZN7Get_key6GetKeyEv>
	    
	    
	    if (key < 13) {for (uint8_t i = 0;i<key;i++){PORTB = 0b00000001;_delay_ms(100);PORTB = 0b00000000;_delay_ms(100);}}
 10c:	8d 30       	cpi	r24, 0x0D	; 13
 10e:	d0 f7       	brcc	.-12     	; 0x104 <main+0x4>
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	98 17       	cp	r25, r24
 114:	b8 f7       	brcc	.-18     	; 0x104 <main+0x4>
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	30 e7       	ldi	r19, 0x70	; 112
 11e:	42 e0       	ldi	r20, 0x02	; 2
 120:	21 50       	subi	r18, 0x01	; 1
 122:	30 40       	sbci	r19, 0x00	; 0
 124:	40 40       	sbci	r20, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x20>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x2a>
 12a:	00 00       	nop
 12c:	15 b8       	out	0x05, r1	; 5
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	30 e7       	ldi	r19, 0x70	; 112
 132:	42 e0       	ldi	r20, 0x02	; 2
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	40 40       	sbci	r20, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x34>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x3e>
 13e:	00 00       	nop
 140:	9f 5f       	subi	r25, 0xFF	; 255
 142:	e7 cf       	rjmp	.-50     	; 0x112 <main+0x12>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
