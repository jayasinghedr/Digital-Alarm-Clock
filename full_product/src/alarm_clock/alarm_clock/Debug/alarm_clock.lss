
alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000069a  00800100  00001e66  00001efa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  0080079a  0080079a  00002594  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002594  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
  6 .debug_info   0000434f  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117b  00000000  00000000  00006aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018b0  00000000  00000000  00007c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e0  00000000  00000000  00009518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cc3  00000000  00000000  000099f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000231f  00000000  00000000  0000a6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000c9da  2**0
=======
  6 .debug_info   000042ea  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000116c  00000000  00000000  00006a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000187a  00000000  00000000  00007b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  00009400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cbc  00000000  00000000  000098d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002307  00000000  00000000  0000a594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000c89b  2**0
>>>>>>> master
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	17 e0       	ldi	r17, 0x07	; 7
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e6       	ldi	r30, 0x66	; 102
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 39       	cpi	r26, 0x9A	; 154
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	aa e9       	ldi	r26, 0x9A	; 154
      8e:	b7 e0       	ldi	r27, 0x07	; 7
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 3f       	cpi	r26, 0xF3	; 243
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 15 0a 	call	0x142a	; 0x142a <main>
      9e:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN10AlarmClock11int_to_charEi>:
      a6:	9b 01       	movw	r18, r22
      a8:	6a 30       	cpi	r22, 0x0A	; 10
      aa:	71 05       	cpc	r23, r1
      ac:	ec f0       	brlt	.+58     	; 0xe8 <_ZN10AlarmClock11int_to_charEi+0x42>
      ae:	cb 01       	movw	r24, r22
      b0:	6a e0       	ldi	r22, 0x0A	; 10
      b2:	70 e0       	ldi	r23, 0x00	; 0
<<<<<<< HEAD
      b4:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__divmodhi4>
		 div = x + 48;
=======
      b4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
>>>>>>> master
      b8:	ab 01       	movw	r20, r22
      ba:	40 5d       	subi	r20, 0xD0	; 208
      bc:	5f 4f       	sbci	r21, 0xFF	; 255
      be:	cb 01       	movw	r24, r22
      c0:	88 0f       	add	r24, r24
      c2:	99 1f       	adc	r25, r25
      c4:	66 0f       	add	r22, r22
      c6:	77 1f       	adc	r23, r23
      c8:	66 0f       	add	r22, r22
      ca:	77 1f       	adc	r23, r23
      cc:	66 0f       	add	r22, r22
      ce:	77 1f       	adc	r23, r23
      d0:	68 0f       	add	r22, r24
      d2:	79 1f       	adc	r23, r25
      d4:	c9 01       	movw	r24, r18
      d6:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__divmodhi4>
      da:	c0 96       	adiw	r24, 0x30	; 48
      dc:	e6 ee       	ldi	r30, 0xE6	; 230
      de:	f6 e0       	ldi	r31, 0x06	; 6
      e0:	40 83       	st	Z, r20
      e2:	81 83       	std	Z+1, r24	; 0x01
      e4:	cf 01       	movw	r24, r30
      e6:	08 95       	ret
      e8:	20 5d       	subi	r18, 0xD0	; 208
      ea:	3f 4f       	sbci	r19, 0xFF	; 255
      ec:	20 93 ea 06 	sts	0x06EA, r18	; 0x8006ea <GOT+0x34>
      f0:	89 ee       	ldi	r24, 0xE9	; 233
      f2:	96 e0       	ldi	r25, 0x06	; 6
      f4:	08 95       	ret

000000f6 <_ZN10AlarmClock11displayTimeEv>:
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	8c 01       	movw	r16, r24
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	81 ea       	ldi	r24, 0xA1	; 161
     10c:	97 e0       	ldi	r25, 0x07	; 7
     10e:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN6ds13079read_timeEh>
     112:	7c 01       	movw	r14, r24
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	81 ea       	ldi	r24, 0xA1	; 161
     118:	97 e0       	ldi	r25, 0x07	; 7
     11a:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN6ds13079read_timeEh>
     11e:	6c 01       	movw	r12, r24
     120:	62 e0       	ldi	r22, 0x02	; 2
     122:	81 ea       	ldi	r24, 0xA1	; 161
     124:	97 e0       	ldi	r25, 0x07	; 7
<<<<<<< HEAD
     126:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN6ds13079read_timeEh>
	 
	 str_hr = int_to_char(hr);
=======
     126:	0e 94 03 03 	call	0x606	; 0x606 <_ZN6ds13079read_timeEh>
>>>>>>> master
     12a:	bc 01       	movw	r22, r24
     12c:	c8 01       	movw	r24, r16
     12e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     132:	fc 01       	movw	r30, r24
     134:	20 81       	ld	r18, Z
     136:	cc ee       	ldi	r28, 0xEC	; 236
     138:	d6 e0       	ldi	r29, 0x06	; 6
     13a:	2c 83       	std	Y+4, r18	; 0x04
     13c:	81 81       	ldd	r24, Z+1	; 0x01
     13e:	8d 83       	std	Y+5, r24	; 0x05
     140:	b6 01       	movw	r22, r12
     142:	c8 01       	movw	r24, r16
     144:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     148:	fc 01       	movw	r30, r24
     14a:	20 81       	ld	r18, Z
     14c:	2f 83       	std	Y+7, r18	; 0x07
     14e:	81 81       	ldd	r24, Z+1	; 0x01
     150:	88 87       	std	Y+8, r24	; 0x08
     152:	b7 01       	movw	r22, r14
     154:	c8 01       	movw	r24, r16
     156:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	2a 87       	std	Y+10, r18	; 0x0a
     160:	81 81       	ldd	r24, Z+1	; 0x01
     162:	8b 87       	std	Y+11, r24	; 0x0b
     164:	9e 01       	movw	r18, r28
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	8b e9       	ldi	r24, 0x9B	; 155
     16c:	97 e0       	ldi	r25, 0x07	; 7
<<<<<<< HEAD
     16e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
	 lcd_1.LCD_String_xy(1, 0, "MENU            ");		//Write string on 2nd line
=======
     16e:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
>>>>>>> master
     172:	2e ef       	ldi	r18, 0xFE	; 254
     174:	36 e0       	ldi	r19, 0x06	; 6
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	8b e9       	ldi	r24, 0x9B	; 155
     17c:	97 e0       	ldi	r25, 0x07	; 7
     17e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     182:	ff ef       	ldi	r31, 0xFF	; 255
     184:	29 e6       	ldi	r18, 0x69	; 105
     186:	88 e1       	ldi	r24, 0x18	; 24
     188:	f1 50       	subi	r31, 0x01	; 1
     18a:	20 40       	sbci	r18, 0x00	; 0
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	e1 f7       	brne	.-8      	; 0x188 <_ZN10AlarmClock11displayTimeEv+0x92>
     190:	00 c0       	rjmp	.+0      	; 0x192 <_ZN10AlarmClock11displayTimeEv+0x9c>
     192:	00 00       	nop
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	cf 90       	pop	r12
     1a4:	08 95       	ret

000001a6 <_ZN10AlarmClock12setTimetoRTCEv>:
<<<<<<< HEAD

 bool AlarmClock::setTimetoRTC(){
     1a6:	9f 92       	push	r9
     1a8:	af 92       	push	r10
     1aa:	bf 92       	push	r11
     1ac:	cf 92       	push	r12
     1ae:	df 92       	push	r13
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	63 97       	sbiw	r28, 0x13	; 19
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	cd bf       	out	0x3d, r28	; 61
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
	int n[6] = {4, 5, 7, 8, 10, 11};
     1cc:	8c e0       	ldi	r24, 0x0C	; 12
     1ce:	ea ed       	ldi	r30, 0xDA	; 218
     1d0:	f6 e0       	ldi	r31, 0x06	; 6
     1d2:	de 01       	movw	r26, r28
     1d4:	18 96       	adiw	r26, 0x08	; 8
     1d6:	01 90       	ld	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	8a 95       	dec	r24
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <_ZN10AlarmClock12setTimetoRTCEv+0x30>
	lcd_1.LCD_Clear();
     1de:	8b e9       	ldi	r24, 0x9B	; 155
     1e0:	97 e0       	ldi	r25, 0x07	; 7
     1e2:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN11LCD_Display9LCD_ClearEv>
	lcd_1.LCD_String_xy(0, 4, time);
     1e6:	2f e0       	ldi	r18, 0x0F	; 15
     1e8:	37 e0       	ldi	r19, 0x07	; 7
     1ea:	44 e0       	ldi	r20, 0x04	; 4
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	8b e9       	ldi	r24, 0x9B	; 155
     1f0:	97 e0       	ldi	r25, 0x07	; 7
     1f2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
	bool goBack = false;

	for(uint8_t i=0;i<7;i++)
     1f6:	00 e0       	ldi	r16, 0x00	; 0
	min=0;
	hr=0;
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	bool goBack = false;
     1f8:	91 2c       	mov	r9, r1
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
     1fa:	e1 2c       	mov	r14, r1
     1fc:	f1 2c       	mov	r15, r1
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
     1fe:	a1 2c       	mov	r10, r1
     200:	b1 2c       	mov	r11, r1
	
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
     202:	c1 2c       	mov	r12, r1
     204:	d1 2c       	mov	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	bool goBack = false;

	for(uint8_t i=0;i<7;i++)
     206:	07 30       	cpi	r16, 0x07	; 7
     208:	08 f0       	brcs	.+2      	; 0x20c <_ZN10AlarmClock12setTimetoRTCEv+0x66>
     20a:	3f c1       	rjmp	.+638    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
	{
		
		while(1){
			if(i==0){
     20c:	01 11       	cpse	r16, r1
     20e:	0b c0       	rjmp	.+22     	; 0x226 <_ZN10AlarmClock12setTimetoRTCEv+0x80>
				lcd_1.LCD_String_xy(1, 0,"OK          BACK");
     210:	28 e1       	ldi	r18, 0x18	; 24
     212:	37 e0       	ldi	r19, 0x07	; 7
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	61 e0       	ldi	r22, 0x01	; 1
     218:	8b e9       	ldi	r24, 0x9B	; 155
     21a:	97 e0       	ldi	r25, 0x07	; 7
     21c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
				if(!((PINC & (1<<Back)))){goBack = true;i=8;break;}
     220:	33 99       	sbic	0x06, 3	; 6
     222:	09 c0       	rjmp	.+18     	; 0x236 <_ZN10AlarmClock12setTimetoRTCEv+0x90>
     224:	ec c0       	rjmp	.+472    	; 0x3fe <_ZN10AlarmClock12setTimetoRTCEv+0x258>
			}
			else{
				lcd_1.LCD_String_xy(1, 0,"OK              ");
     226:	29 e2       	ldi	r18, 0x29	; 41
     228:	37 e0       	ldi	r19, 0x07	; 7
     22a:	40 e0       	ldi	r20, 0x00	; 0
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	8b e9       	ldi	r24, 0x9B	; 155
     230:	97 e0       	ldi	r25, 0x07	; 7
     232:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
			}

			key = keypad_1.GetKey();
     236:	8a e9       	ldi	r24, 0x9A	; 154
     238:	97 e0       	ldi	r25, 0x07	; 7
     23a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN7Get_key6GetKeyEv>
     23e:	18 2f       	mov	r17, r24
			if (key == 1) {lcd_1.LCD_String_xy(0,n[i],"1");break;}
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	99 f4       	brne	.+38     	; 0x26a <_ZN10AlarmClock12setTimetoRTCEv+0xc4>
     244:	e0 2f       	mov	r30, r16
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	ee 0f       	add	r30, r30
     24a:	ff 1f       	adc	r31, r31
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	8c 0f       	add	r24, r28
     252:	9d 1f       	adc	r25, r29
     254:	e8 0f       	add	r30, r24
     256:	f9 1f       	adc	r31, r25
     258:	47 81       	ldd	r20, Z+7	; 0x07
     25a:	2a e3       	ldi	r18, 0x3A	; 58
     25c:	37 e0       	ldi	r19, 0x07	; 7
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	8b e9       	ldi	r24, 0x9B	; 155
     262:	97 e0       	ldi	r25, 0x07	; 7
     264:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     268:	cf c0       	rjmp	.+414    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (key == 2) {lcd_1.LCD_String_xy(0,n[i],"2");break;}
     26a:	82 30       	cpi	r24, 0x02	; 2
     26c:	99 f4       	brne	.+38     	; 0x294 <_ZN10AlarmClock12setTimetoRTCEv+0xee>
     26e:	e0 2f       	mov	r30, r16
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	ee 0f       	add	r30, r30
     274:	ff 1f       	adc	r31, r31
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	8c 0f       	add	r24, r28
     27c:	9d 1f       	adc	r25, r29
     27e:	e8 0f       	add	r30, r24
     280:	f9 1f       	adc	r31, r25
     282:	47 81       	ldd	r20, Z+7	; 0x07
     284:	2c e3       	ldi	r18, 0x3C	; 60
     286:	37 e0       	ldi	r19, 0x07	; 7
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	8b e9       	ldi	r24, 0x9B	; 155
     28c:	97 e0       	ldi	r25, 0x07	; 7
     28e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     292:	ba c0       	rjmp	.+372    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (key == 3) {lcd_1.LCD_String_xy(0,n[i],"3");break;}
     294:	83 30       	cpi	r24, 0x03	; 3
     296:	99 f4       	brne	.+38     	; 0x2be <_ZN10AlarmClock12setTimetoRTCEv+0x118>
     298:	e0 2f       	mov	r30, r16
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	ee 0f       	add	r30, r30
     29e:	ff 1f       	adc	r31, r31
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	8c 0f       	add	r24, r28
     2a6:	9d 1f       	adc	r25, r29
     2a8:	e8 0f       	add	r30, r24
     2aa:	f9 1f       	adc	r31, r25
     2ac:	47 81       	ldd	r20, Z+7	; 0x07
     2ae:	2e e3       	ldi	r18, 0x3E	; 62
     2b0:	37 e0       	ldi	r19, 0x07	; 7
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	8b e9       	ldi	r24, 0x9B	; 155
     2b6:	97 e0       	ldi	r25, 0x07	; 7
     2b8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2bc:	a5 c0       	rjmp	.+330    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (key == 4) {lcd_1.LCD_String_xy(0,n[i],"4");break;}
     2be:	84 30       	cpi	r24, 0x04	; 4
     2c0:	99 f4       	brne	.+38     	; 0x2e8 <_ZN10AlarmClock12setTimetoRTCEv+0x142>
     2c2:	e0 2f       	mov	r30, r16
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	ee 0f       	add	r30, r30
     2c8:	ff 1f       	adc	r31, r31
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	8c 0f       	add	r24, r28
     2d0:	9d 1f       	adc	r25, r29
     2d2:	e8 0f       	add	r30, r24
     2d4:	f9 1f       	adc	r31, r25
     2d6:	47 81       	ldd	r20, Z+7	; 0x07
     2d8:	20 e4       	ldi	r18, 0x40	; 64
     2da:	37 e0       	ldi	r19, 0x07	; 7
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8b e9       	ldi	r24, 0x9B	; 155
     2e0:	97 e0       	ldi	r25, 0x07	; 7
     2e2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2e6:	90 c0       	rjmp	.+288    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (key == 5) {lcd_1.LCD_String_xy(0,n[i],"5");break;}
     2e8:	85 30       	cpi	r24, 0x05	; 5
     2ea:	99 f4       	brne	.+38     	; 0x312 <_ZN10AlarmClock12setTimetoRTCEv+0x16c>
     2ec:	e0 2f       	mov	r30, r16
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	8c 0f       	add	r24, r28
     2fa:	9d 1f       	adc	r25, r29
     2fc:	e8 0f       	add	r30, r24
     2fe:	f9 1f       	adc	r31, r25
     300:	47 81       	ldd	r20, Z+7	; 0x07
     302:	22 e4       	ldi	r18, 0x42	; 66
     304:	37 e0       	ldi	r19, 0x07	; 7
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	8b e9       	ldi	r24, 0x9B	; 155
     30a:	97 e0       	ldi	r25, 0x07	; 7
     30c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     310:	7b c0       	rjmp	.+246    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
     312:	86 30       	cpi	r24, 0x06	; 6
     314:	99 f4       	brne	.+38     	; 0x33c <_ZN10AlarmClock12setTimetoRTCEv+0x196>
     316:	e0 2f       	mov	r30, r16
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	8c 0f       	add	r24, r28
     324:	9d 1f       	adc	r25, r29
     326:	e8 0f       	add	r30, r24
     328:	f9 1f       	adc	r31, r25
     32a:	47 81       	ldd	r20, Z+7	; 0x07
     32c:	24 e4       	ldi	r18, 0x44	; 68
     32e:	37 e0       	ldi	r19, 0x07	; 7
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	8b e9       	ldi	r24, 0x9B	; 155
     334:	97 e0       	ldi	r25, 0x07	; 7
     336:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     33a:	66 c0       	rjmp	.+204    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
     33c:	87 30       	cpi	r24, 0x07	; 7
     33e:	99 f4       	brne	.+38     	; 0x366 <_ZN10AlarmClock12setTimetoRTCEv+0x1c0>
     340:	e0 2f       	mov	r30, r16
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	8c 0f       	add	r24, r28
     34e:	9d 1f       	adc	r25, r29
     350:	e8 0f       	add	r30, r24
     352:	f9 1f       	adc	r31, r25
     354:	47 81       	ldd	r20, Z+7	; 0x07
     356:	26 e4       	ldi	r18, 0x46	; 70
     358:	37 e0       	ldi	r19, 0x07	; 7
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	8b e9       	ldi	r24, 0x9B	; 155
     35e:	97 e0       	ldi	r25, 0x07	; 7
     360:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     364:	51 c0       	rjmp	.+162    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
     366:	88 30       	cpi	r24, 0x08	; 8
     368:	99 f4       	brne	.+38     	; 0x390 <_ZN10AlarmClock12setTimetoRTCEv+0x1ea>
     36a:	e0 2f       	mov	r30, r16
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	8c 0f       	add	r24, r28
     378:	9d 1f       	adc	r25, r29
     37a:	e8 0f       	add	r30, r24
     37c:	f9 1f       	adc	r31, r25
     37e:	47 81       	ldd	r20, Z+7	; 0x07
     380:	28 e4       	ldi	r18, 0x48	; 72
     382:	37 e0       	ldi	r19, 0x07	; 7
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	8b e9       	ldi	r24, 0x9B	; 155
     388:	97 e0       	ldi	r25, 0x07	; 7
     38a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     38e:	3c c0       	rjmp	.+120    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
     390:	89 30       	cpi	r24, 0x09	; 9
     392:	99 f4       	brne	.+38     	; 0x3ba <_ZN10AlarmClock12setTimetoRTCEv+0x214>
     394:	e0 2f       	mov	r30, r16
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	8c 0f       	add	r24, r28
     3a2:	9d 1f       	adc	r25, r29
     3a4:	e8 0f       	add	r30, r24
     3a6:	f9 1f       	adc	r31, r25
     3a8:	47 81       	ldd	r20, Z+7	; 0x07
     3aa:	2a e4       	ldi	r18, 0x4A	; 74
     3ac:	37 e0       	ldi	r19, 0x07	; 7
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	8b e9       	ldi	r24, 0x9B	; 155
     3b2:	97 e0       	ldi	r25, 0x07	; 7
     3b4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     3b8:	27 c0       	rjmp	.+78     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
     3ba:	8b 30       	cpi	r24, 0x0B	; 11
     3bc:	a1 f4       	brne	.+40     	; 0x3e6 <_ZN10AlarmClock12setTimetoRTCEv+0x240>
     3be:	e0 2f       	mov	r30, r16
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	ee 0f       	add	r30, r30
     3c4:	ff 1f       	adc	r31, r31
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	8c 0f       	add	r24, r28
     3cc:	9d 1f       	adc	r25, r29
     3ce:	e8 0f       	add	r30, r24
     3d0:	f9 1f       	adc	r31, r25
     3d2:	47 81       	ldd	r20, Z+7	; 0x07
     3d4:	26 e1       	ldi	r18, 0x16	; 22
     3d6:	37 e0       	ldi	r19, 0x07	; 7
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	8b e9       	ldi	r24, 0x9B	; 155
     3dc:	97 e0       	ldi	r25, 0x07	; 7
     3de:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     3e2:	10 e0       	ldi	r17, 0x00	; 0
     3e4:	11 c0       	rjmp	.+34     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (!(PINC & (1<<Ok))){i=8; break;}
     3e6:	32 9b       	sbis	0x06, 2	; 6
     3e8:	0e c0       	rjmp	.+28     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3ea:	9f ef       	ldi	r25, 0xFF	; 255
     3ec:	21 ee       	ldi	r18, 0xE1	; 225
     3ee:	84 e0       	ldi	r24, 0x04	; 4
     3f0:	91 50       	subi	r25, 0x01	; 1
     3f2:	20 40       	sbci	r18, 0x00	; 0
     3f4:	80 40       	sbci	r24, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <_ZN10AlarmClock12setTimetoRTCEv+0x24a>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <_ZN10AlarmClock12setTimetoRTCEv+0x254>
     3fa:	00 00       	nop
     3fc:	07 cf       	rjmp	.-498    	; 0x20c <_ZN10AlarmClock12setTimetoRTCEv+0x66>
	{
		
		while(1){
			if(i==0){
				lcd_1.LCD_String_xy(1, 0,"OK          BACK");
				if(!((PINC & (1<<Back)))){goBack = true;i=8;break;}
     3fe:	08 e0       	ldi	r16, 0x08	; 8
     400:	99 24       	eor	r9, r9
     402:	93 94       	inc	r9
     404:	01 c0       	rjmp	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
			if (!(PINC & (1<<Ok))){i=8; break;}
     406:	08 e0       	ldi	r16, 0x08	; 8

			_delay_ms(200);
		}

		if (i == 0){hr+=key*10;}
     408:	01 11       	cpse	r16, r1
     40a:	0f c0       	rjmp	.+30     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     40c:	81 2f       	mov	r24, r17
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	9c 01       	movw	r18, r24
     412:	22 0f       	add	r18, r18
     414:	33 1f       	adc	r19, r19
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	82 0f       	add	r24, r18
     424:	93 1f       	adc	r25, r19
     426:	e8 0e       	add	r14, r24
     428:	f9 1e       	adc	r15, r25
		if (i == 1){hr+=key;}
     42a:	01 30       	cpi	r16, 0x01	; 1
     42c:	11 f4       	brne	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     42e:	e1 0e       	add	r14, r17
     430:	f1 1c       	adc	r15, r1
		if (i == 2){min+=key*10;}
     432:	02 30       	cpi	r16, 0x02	; 2
     434:	79 f4       	brne	.+30     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     436:	81 2f       	mov	r24, r17
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	9c 01       	movw	r18, r24
     43c:	22 0f       	add	r18, r18
     43e:	33 1f       	adc	r19, r19
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	82 0f       	add	r24, r18
     44e:	93 1f       	adc	r25, r19
     450:	a8 0e       	add	r10, r24
     452:	b9 1e       	adc	r11, r25
		if (i == 3){min+=key;}
     454:	03 30       	cpi	r16, 0x03	; 3
     456:	11 f4       	brne	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     458:	a1 0e       	add	r10, r17
     45a:	b1 1c       	adc	r11, r1
		if (i == 4){sec+=key*10;}
     45c:	04 30       	cpi	r16, 0x04	; 4
     45e:	79 f4       	brne	.+30     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     460:	81 2f       	mov	r24, r17
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	9c 01       	movw	r18, r24
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	82 0f       	add	r24, r18
     478:	93 1f       	adc	r25, r19
     47a:	c8 0e       	add	r12, r24
     47c:	d9 1e       	adc	r13, r25
		if (i == 5){sec+=key;}
     47e:	05 30       	cpi	r16, 0x05	; 5
     480:	11 f4       	brne	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     482:	c1 0e       	add	r12, r17
     484:	d1 1c       	adc	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	bool goBack = false;

	for(uint8_t i=0;i<7;i++)
     486:	0f 5f       	subi	r16, 0xFF	; 255
     488:	be ce       	rjmp	.-644    	; 0x206 <_ZN10AlarmClock12setTimetoRTCEv+0x60>
		if (i == 4){sec+=key*10;}
		if (i == 5){sec+=key;}

	}
	if (~(goBack)){
		hour = ds1307_1.dec_to_bcd(hr);
     48a:	b7 01       	movw	r22, r14
     48c:	81 ea       	ldi	r24, 0xA1	; 161
     48e:	97 e0       	ldi	r25, 0x07	; 7
     490:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN6ds130710dec_to_bcdEi>
     494:	18 2f       	mov	r17, r24
		minutes = ds1307_1.dec_to_bcd(min);
     496:	b5 01       	movw	r22, r10
     498:	81 ea       	ldi	r24, 0xA1	; 161
     49a:	97 e0       	ldi	r25, 0x07	; 7
     49c:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN6ds130710dec_to_bcdEi>
     4a0:	08 2f       	mov	r16, r24
		seconds = ds1307_1.dec_to_bcd(sec);
     4a2:	b6 01       	movw	r22, r12
     4a4:	81 ea       	ldi	r24, 0xA1	; 161
     4a6:	97 e0       	ldi	r25, 0x07	; 7
     4a8:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN6ds130710dec_to_bcdEi>

		// Setting time to the RTC
		rtc.seconds =  seconds;
     4ac:	89 83       	std	Y+1, r24	; 0x01
		rtc.minute =  minutes;
     4ae:	0a 83       	std	Y+2, r16	; 0x02
		rtc.hour = hour;
     4b0:	1b 83       	std	Y+3, r17	; 0x03
		rtc.weekDay = 0x07;
     4b2:	87 e0       	ldi	r24, 0x07	; 7
     4b4:	8c 83       	std	Y+4, r24	; 0x04
		rtc.date = 0x20;
     4b6:	80 e2       	ldi	r24, 0x20	; 32
     4b8:	8d 83       	std	Y+5, r24	; 0x05
		rtc.month = 0x06;
     4ba:	86 e0       	ldi	r24, 0x06	; 6
     4bc:	8e 83       	std	Y+6, r24	; 0x06
		rtc.year = 0x21;
     4be:	81 e2       	ldi	r24, 0x21	; 33
     4c0:	8f 83       	std	Y+7, r24	; 0x07
		lcd_1.LCD_Clear();
     4c2:	8b e9       	ldi	r24, 0x9B	; 155
     4c4:	97 e0       	ldi	r25, 0x07	; 7
     4c6:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN11LCD_Display9LCD_ClearEv>
		ds1307_1.set_time(&rtc);
     4ca:	be 01       	movw	r22, r28
     4cc:	6f 5f       	subi	r22, 0xFF	; 255
     4ce:	7f 4f       	sbci	r23, 0xFF	; 255
     4d0:	81 ea       	ldi	r24, 0xA1	; 161
     4d2:	97 e0       	ldi	r25, 0x07	; 7
     4d4:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN6ds13078set_timeEPNS_5rtc_tE>
		lcd_1.LCD_String_xy(0, 4, "Time Set");
     4d8:	2c e4       	ldi	r18, 0x4C	; 76
     4da:	37 e0       	ldi	r19, 0x07	; 7
     4dc:	44 e0       	ldi	r20, 0x04	; 4
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	8b e9       	ldi	r24, 0x9B	; 155
     4e2:	97 e0       	ldi	r25, 0x07	; 7
     4e4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
		lcd_1.LCD_String_xy(1, 0, "OK");
     4e8:	25 e5       	ldi	r18, 0x55	; 85
     4ea:	37 e0       	ldi	r19, 0x07	; 7
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	8b e9       	ldi	r24, 0x9B	; 155
     4f2:	97 e0       	ldi	r25, 0x07	; 7
     4f4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
	}
	return goBack;
 }
     4f8:	89 2d       	mov	r24, r9
     4fa:	63 96       	adiw	r28, 0x13	; 19
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	bf 90       	pop	r11
     518:	af 90       	pop	r10
     51a:	9f 90       	pop	r9
     51c:	08 95       	ret

0000051e <_ZN6ds13078twi_initEv>:
     51e:	88 e4       	ldi	r24, 0x48	; 72
     520:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     52a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     52e:	08 95       	ret

00000530 <_ZN6ds13079twi_startEv>:
     530:	84 ea       	ldi	r24, 0xA4	; 164
     532:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     536:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     53a:	88 23       	and	r24, r24
     53c:	e4 f7       	brge	.-8      	; 0x536 <_ZN6ds13079twi_startEv+0x6>
     53e:	08 95       	ret

00000540 <_ZN6ds13079twi_SLA_WEv>:
     540:	80 ed       	ldi	r24, 0xD0	; 208
     542:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     546:	84 e8       	ldi	r24, 0x84	; 132
     548:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     54c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     550:	88 23       	and	r24, r24
     552:	e4 f7       	brge	.-8      	; 0x54c <_ZN6ds13079twi_SLA_WEv+0xc>
     554:	08 95       	ret

00000556 <_ZN6ds13079twi_SLA_REv>:
     556:	81 ed       	ldi	r24, 0xD1	; 209
     558:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     55c:	84 e8       	ldi	r24, 0x84	; 132
     55e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     562:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     566:	88 23       	and	r24, r24
     568:	e4 f7       	brge	.-8      	; 0x562 <_ZN6ds13079twi_SLA_REv+0xc>
     56a:	08 95       	ret

0000056c <_ZN6ds13079twi_writeEh>:
     56c:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     570:	84 e8       	ldi	r24, 0x84	; 132
     572:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     576:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     57a:	88 23       	and	r24, r24
     57c:	e4 f7       	brge	.-8      	; 0x576 <_ZN6ds13079twi_writeEh+0xa>
     57e:	08 95       	ret

00000580 <_ZN6ds13078twi_readEv>:
     580:	84 e8       	ldi	r24, 0x84	; 132
     582:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     586:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     58a:	88 23       	and	r24, r24
     58c:	e4 f7       	brge	.-8      	; 0x586 <_ZN6ds13078twi_readEv+0x6>
     58e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     592:	08 95       	ret

00000594 <_ZN6ds13078twi_stopEv>:
     594:	84 e9       	ldi	r24, 0x94	; 148
     596:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     59a:	08 95       	ret

0000059c <_ZN6ds13078set_timeEPNS_5rtc_tE>:
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	8c 01       	movw	r16, r24
     5a6:	eb 01       	movw	r28, r22
     5a8:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN6ds13078twi_initEv>
     5ac:	c8 01       	movw	r24, r16
     5ae:	0e 94 98 02 	call	0x530	; 0x530 <_ZN6ds13079twi_startEv>
     5b2:	c8 01       	movw	r24, r16
     5b4:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN6ds13079twi_SLA_WEv>
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	c8 01       	movw	r24, r16
     5bc:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13079twi_writeEh>
     5c0:	68 81       	ld	r22, Y
     5c2:	c8 01       	movw	r24, r16
     5c4:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13079twi_writeEh>
     5c8:	69 81       	ldd	r22, Y+1	; 0x01
     5ca:	c8 01       	movw	r24, r16
     5cc:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13079twi_writeEh>
     5d0:	6a 81       	ldd	r22, Y+2	; 0x02
     5d2:	c8 01       	movw	r24, r16
     5d4:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13079twi_writeEh>
     5d8:	6b 81       	ldd	r22, Y+3	; 0x03
     5da:	c8 01       	movw	r24, r16
     5dc:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13079twi_writeEh>
     5e0:	6c 81       	ldd	r22, Y+4	; 0x04
     5e2:	c8 01       	movw	r24, r16
     5e4:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13079twi_writeEh>
     5e8:	6d 81       	ldd	r22, Y+5	; 0x05
     5ea:	c8 01       	movw	r24, r16
     5ec:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13079twi_writeEh>
     5f0:	6e 81       	ldd	r22, Y+6	; 0x06
     5f2:	c8 01       	movw	r24, r16
     5f4:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13079twi_writeEh>
     5f8:	c8 01       	movw	r24, r16
     5fa:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN6ds13078twi_stopEv>
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <_ZN6ds130710bcd_to_decEh>:
     608:	26 2f       	mov	r18, r22
     60a:	2f 70       	andi	r18, 0x0F	; 15
     60c:	62 95       	swap	r22
     60e:	6f 70       	andi	r22, 0x0F	; 15
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	cb 01       	movw	r24, r22
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	66 0f       	add	r22, r22
     61a:	77 1f       	adc	r23, r23
     61c:	66 0f       	add	r22, r22
     61e:	77 1f       	adc	r23, r23
     620:	66 0f       	add	r22, r22
     622:	77 1f       	adc	r23, r23
     624:	86 0f       	add	r24, r22
     626:	97 1f       	adc	r25, r23
     628:	82 0f       	add	r24, r18
     62a:	91 1d       	adc	r25, r1
     62c:	08 95       	ret

0000062e <_ZN6ds13079read_timeEh>:
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	ec 01       	movw	r28, r24
     636:	16 2f       	mov	r17, r22
     638:	0e 94 98 02 	call	0x530	; 0x530 <_ZN6ds13079twi_startEv>
     63c:	ce 01       	movw	r24, r28
     63e:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN6ds13079twi_SLA_WEv>
     642:	61 2f       	mov	r22, r17
     644:	ce 01       	movw	r24, r28
     646:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13079twi_writeEh>
     64a:	ce 01       	movw	r24, r28
     64c:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN6ds13078twi_stopEv>
     650:	ce 01       	movw	r24, r28
     652:	0e 94 98 02 	call	0x530	; 0x530 <_ZN6ds13079twi_startEv>
     656:	ce 01       	movw	r24, r28
     658:	0e 94 ab 02 	call	0x556	; 0x556 <_ZN6ds13079twi_SLA_REv>
     65c:	ce 01       	movw	r24, r28
     65e:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN6ds13078twi_readEv>
     662:	18 2f       	mov	r17, r24
     664:	ce 01       	movw	r24, r28
     666:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN6ds13078twi_stopEv>
     66a:	61 2f       	mov	r22, r17
     66c:	ce 01       	movw	r24, r28
     66e:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6ds130710bcd_to_decEh>
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	08 95       	ret

0000067a <_ZN6ds130710dec_to_bcdEi>:
     67a:	9b 01       	movw	r18, r22
     67c:	6a 30       	cpi	r22, 0x0A	; 10
     67e:	71 05       	cpc	r23, r1
     680:	c4 f0       	brlt	.+48     	; 0x6b2 <_ZN6ds130710dec_to_bcdEi+0x38>
     682:	cb 01       	movw	r24, r22
     684:	6a e0       	ldi	r22, 0x0A	; 10
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__divmodhi4>
     68c:	46 2f       	mov	r20, r22
     68e:	42 95       	swap	r20
     690:	40 7f       	andi	r20, 0xF0	; 240
     692:	86 2f       	mov	r24, r22
     694:	97 2f       	mov	r25, r23
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	bc 01       	movw	r22, r24
     69c:	66 0f       	add	r22, r22
     69e:	77 1f       	adc	r23, r23
     6a0:	66 0f       	add	r22, r22
     6a2:	77 1f       	adc	r23, r23
     6a4:	68 0f       	add	r22, r24
     6a6:	79 1f       	adc	r23, r25
     6a8:	c9 01       	movw	r24, r18
     6aa:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__divmodhi4>
     6ae:	84 2b       	or	r24, r20
     6b0:	08 95       	ret
     6b2:	86 2f       	mov	r24, r22
     6b4:	08 95       	ret

000006b6 <_ZN7Get_key6GetKeyEv>:
     6b6:	8b b1       	in	r24, 0x0b	; 11
     6b8:	8f 60       	ori	r24, 0x0F	; 15
     6ba:	8b b9       	out	0x0b, r24	; 11
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	83 30       	cpi	r24, 0x03	; 3
     6c0:	80 f5       	brcc	.+96     	; 0x722 <_ZN7Get_key6GetKeyEv+0x6c>
     6c2:	9a b1       	in	r25, 0x0a	; 10
     6c4:	90 78       	andi	r25, 0x80	; 128
     6c6:	9a b9       	out	0x0a, r25	; 10
     6c8:	9a b1       	in	r25, 0x0a	; 10
     6ca:	20 e4       	ldi	r18, 0x40	; 64
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	08 2e       	mov	r0, r24
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <_ZN7Get_key6GetKeyEv+0x20>
     6d2:	35 95       	asr	r19
     6d4:	27 95       	ror	r18
     6d6:	0a 94       	dec	r0
     6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <_ZN7Get_key6GetKeyEv+0x1c>
     6da:	29 2b       	or	r18, r25
     6dc:	2a b9       	out	0x0a, r18	; 10
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	94 30       	cpi	r25, 0x04	; 4
     6e2:	e8 f4       	brcc	.+58     	; 0x71e <_ZN7Get_key6GetKeyEv+0x68>
     6e4:	29 b1       	in	r18, 0x09	; 9
     6e6:	48 e0       	ldi	r20, 0x08	; 8
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	09 2e       	mov	r0, r25
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <_ZN7Get_key6GetKeyEv+0x3c>
     6ee:	55 95       	asr	r21
     6f0:	47 95       	ror	r20
     6f2:	0a 94       	dec	r0
     6f4:	e2 f7       	brpl	.-8      	; 0x6ee <_ZN7Get_key6GetKeyEv+0x38>
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	24 23       	and	r18, r20
     6fa:	35 23       	and	r19, r21
     6fc:	23 2b       	or	r18, r19
     6fe:	69 f4       	brne	.+26     	; 0x71a <_ZN7Get_key6GetKeyEv+0x64>
     700:	29 b1       	in	r18, 0x09	; 9
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	24 23       	and	r18, r20
     706:	35 23       	and	r19, r21
     708:	23 2b       	or	r18, r19
     70a:	d1 f3       	breq	.-12     	; 0x700 <_ZN7Get_key6GetKeyEv+0x4a>
     70c:	29 2f       	mov	r18, r25
     70e:	22 0f       	add	r18, r18
     710:	92 0f       	add	r25, r18
     712:	98 0f       	add	r25, r24
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	89 0f       	add	r24, r25
     718:	08 95       	ret
     71a:	9f 5f       	subi	r25, 0xFF	; 255
     71c:	e1 cf       	rjmp	.-62     	; 0x6e0 <_ZN7Get_key6GetKeyEv+0x2a>
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	ce cf       	rjmp	.-100    	; 0x6be <_ZN7Get_key6GetKeyEv+0x8>
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	08 95       	ret

00000726 <_ZN11LCD_Display16LCD_CommandgiverEh>:
     726:	25 b1       	in	r18, 0x05	; 5
     728:	96 2f       	mov	r25, r22
     72a:	90 7f       	andi	r25, 0xF0	; 240
     72c:	89 2f       	mov	r24, r25
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	95 95       	asr	r25
     732:	87 95       	ror	r24
     734:	95 95       	asr	r25
     736:	87 95       	ror	r24
     738:	92 2f       	mov	r25, r18
     73a:	93 7c       	andi	r25, 0xC3	; 195
     73c:	89 2b       	or	r24, r25
     73e:	85 b9       	out	0x05, r24	; 5
     740:	85 b1       	in	r24, 0x05	; 5
     742:	8e 7f       	andi	r24, 0xFE	; 254
     744:	85 b9       	out	0x05, r24	; 5
     746:	85 b1       	in	r24, 0x05	; 5
     748:	82 60       	ori	r24, 0x02	; 2
     74a:	85 b9       	out	0x05, r24	; 5
=======
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	63 97       	sbiw	r28, 0x13	; 19
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
     1ca:	8c e0       	ldi	r24, 0x0C	; 12
     1cc:	ea ed       	ldi	r30, 0xDA	; 218
     1ce:	f6 e0       	ldi	r31, 0x06	; 6
     1d0:	de 01       	movw	r26, r28
     1d2:	18 96       	adiw	r26, 0x08	; 8
     1d4:	01 90       	ld	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	8a 95       	dec	r24
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <_ZN10AlarmClock12setTimetoRTCEv+0x2e>
     1dc:	89 e7       	ldi	r24, 0x79	; 121
     1de:	97 e0       	ldi	r25, 0x07	; 7
     1e0:	0e 94 39 04 	call	0x872	; 0x872 <_ZN11LCD_Display9LCD_ClearEv>
     1e4:	2f e0       	ldi	r18, 0x0F	; 15
     1e6:	37 e0       	ldi	r19, 0x07	; 7
     1e8:	44 e0       	ldi	r20, 0x04	; 4
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	89 e7       	ldi	r24, 0x79	; 121
     1ee:	97 e0       	ldi	r25, 0x07	; 7
     1f0:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     1f4:	2f ef       	ldi	r18, 0xFF	; 255
     1f6:	84 e3       	ldi	r24, 0x34	; 52
     1f8:	9c e0       	ldi	r25, 0x0C	; 12
     1fa:	21 50       	subi	r18, 0x01	; 1
     1fc:	80 40       	sbci	r24, 0x00	; 0
     1fe:	90 40       	sbci	r25, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <_ZN10AlarmClock12setTimetoRTCEv+0x54>
     202:	00 c0       	rjmp	.+0      	; 0x204 <_ZN10AlarmClock12setTimetoRTCEv+0x5e>
     204:	00 00       	nop
     206:	00 e0       	ldi	r16, 0x00	; 0
     208:	e1 2c       	mov	r14, r1
     20a:	f1 2c       	mov	r15, r1
     20c:	a1 2c       	mov	r10, r1
     20e:	b1 2c       	mov	r11, r1
     210:	c1 2c       	mov	r12, r1
     212:	d1 2c       	mov	r13, r1
     214:	07 30       	cpi	r16, 0x07	; 7
     216:	08 f0       	brcs	.+2      	; 0x21a <_ZN10AlarmClock12setTimetoRTCEv+0x74>
     218:	26 c1       	rjmp	.+588    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     21a:	88 e7       	ldi	r24, 0x78	; 120
     21c:	97 e0       	ldi	r25, 0x07	; 7
     21e:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN7Get_key6GetKeyEv>
     222:	18 2f       	mov	r17, r24
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	99 f4       	brne	.+38     	; 0x24e <_ZN10AlarmClock12setTimetoRTCEv+0xa8>
     228:	e0 2f       	mov	r30, r16
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	ee 0f       	add	r30, r30
     22e:	ff 1f       	adc	r31, r31
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	8c 0f       	add	r24, r28
     236:	9d 1f       	adc	r25, r29
     238:	e8 0f       	add	r30, r24
     23a:	f9 1f       	adc	r31, r25
     23c:	47 81       	ldd	r20, Z+7	; 0x07
     23e:	28 e1       	ldi	r18, 0x18	; 24
     240:	37 e0       	ldi	r19, 0x07	; 7
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	89 e7       	ldi	r24, 0x79	; 121
     246:	97 e0       	ldi	r25, 0x07	; 7
     248:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     24c:	cb c0       	rjmp	.+406    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     24e:	82 30       	cpi	r24, 0x02	; 2
     250:	99 f4       	brne	.+38     	; 0x278 <_ZN10AlarmClock12setTimetoRTCEv+0xd2>
     252:	e0 2f       	mov	r30, r16
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	8c 0f       	add	r24, r28
     260:	9d 1f       	adc	r25, r29
     262:	e8 0f       	add	r30, r24
     264:	f9 1f       	adc	r31, r25
     266:	47 81       	ldd	r20, Z+7	; 0x07
     268:	2a e1       	ldi	r18, 0x1A	; 26
     26a:	37 e0       	ldi	r19, 0x07	; 7
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	89 e7       	ldi	r24, 0x79	; 121
     270:	97 e0       	ldi	r25, 0x07	; 7
     272:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     276:	b6 c0       	rjmp	.+364    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     278:	83 30       	cpi	r24, 0x03	; 3
     27a:	99 f4       	brne	.+38     	; 0x2a2 <_ZN10AlarmClock12setTimetoRTCEv+0xfc>
     27c:	e0 2f       	mov	r30, r16
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	8c 0f       	add	r24, r28
     28a:	9d 1f       	adc	r25, r29
     28c:	e8 0f       	add	r30, r24
     28e:	f9 1f       	adc	r31, r25
     290:	47 81       	ldd	r20, Z+7	; 0x07
     292:	2c e1       	ldi	r18, 0x1C	; 28
     294:	37 e0       	ldi	r19, 0x07	; 7
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	89 e7       	ldi	r24, 0x79	; 121
     29a:	97 e0       	ldi	r25, 0x07	; 7
     29c:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2a0:	a1 c0       	rjmp	.+322    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     2a2:	84 30       	cpi	r24, 0x04	; 4
     2a4:	99 f4       	brne	.+38     	; 0x2cc <_ZN10AlarmClock12setTimetoRTCEv+0x126>
     2a6:	e0 2f       	mov	r30, r16
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	ee 0f       	add	r30, r30
     2ac:	ff 1f       	adc	r31, r31
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	8c 0f       	add	r24, r28
     2b4:	9d 1f       	adc	r25, r29
     2b6:	e8 0f       	add	r30, r24
     2b8:	f9 1f       	adc	r31, r25
     2ba:	47 81       	ldd	r20, Z+7	; 0x07
     2bc:	2e e1       	ldi	r18, 0x1E	; 30
     2be:	37 e0       	ldi	r19, 0x07	; 7
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	89 e7       	ldi	r24, 0x79	; 121
     2c4:	97 e0       	ldi	r25, 0x07	; 7
     2c6:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2ca:	8c c0       	rjmp	.+280    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     2cc:	85 30       	cpi	r24, 0x05	; 5
     2ce:	99 f4       	brne	.+38     	; 0x2f6 <_ZN10AlarmClock12setTimetoRTCEv+0x150>
     2d0:	e0 2f       	mov	r30, r16
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	ee 0f       	add	r30, r30
     2d6:	ff 1f       	adc	r31, r31
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	8c 0f       	add	r24, r28
     2de:	9d 1f       	adc	r25, r29
     2e0:	e8 0f       	add	r30, r24
     2e2:	f9 1f       	adc	r31, r25
     2e4:	47 81       	ldd	r20, Z+7	; 0x07
     2e6:	20 e2       	ldi	r18, 0x20	; 32
     2e8:	37 e0       	ldi	r19, 0x07	; 7
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	89 e7       	ldi	r24, 0x79	; 121
     2ee:	97 e0       	ldi	r25, 0x07	; 7
     2f0:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     2f4:	77 c0       	rjmp	.+238    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     2f6:	86 30       	cpi	r24, 0x06	; 6
     2f8:	99 f4       	brne	.+38     	; 0x320 <_ZN10AlarmClock12setTimetoRTCEv+0x17a>
     2fa:	e0 2f       	mov	r30, r16
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	8c 0f       	add	r24, r28
     308:	9d 1f       	adc	r25, r29
     30a:	e8 0f       	add	r30, r24
     30c:	f9 1f       	adc	r31, r25
     30e:	47 81       	ldd	r20, Z+7	; 0x07
     310:	22 e2       	ldi	r18, 0x22	; 34
     312:	37 e0       	ldi	r19, 0x07	; 7
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	89 e7       	ldi	r24, 0x79	; 121
     318:	97 e0       	ldi	r25, 0x07	; 7
     31a:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     31e:	62 c0       	rjmp	.+196    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     320:	87 30       	cpi	r24, 0x07	; 7
     322:	99 f4       	brne	.+38     	; 0x34a <_ZN10AlarmClock12setTimetoRTCEv+0x1a4>
     324:	e0 2f       	mov	r30, r16
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	8c 0f       	add	r24, r28
     332:	9d 1f       	adc	r25, r29
     334:	e8 0f       	add	r30, r24
     336:	f9 1f       	adc	r31, r25
     338:	47 81       	ldd	r20, Z+7	; 0x07
     33a:	24 e2       	ldi	r18, 0x24	; 36
     33c:	37 e0       	ldi	r19, 0x07	; 7
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	89 e7       	ldi	r24, 0x79	; 121
     342:	97 e0       	ldi	r25, 0x07	; 7
     344:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     348:	4d c0       	rjmp	.+154    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     34a:	88 30       	cpi	r24, 0x08	; 8
     34c:	99 f4       	brne	.+38     	; 0x374 <_ZN10AlarmClock12setTimetoRTCEv+0x1ce>
     34e:	e0 2f       	mov	r30, r16
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	8c 0f       	add	r24, r28
     35c:	9d 1f       	adc	r25, r29
     35e:	e8 0f       	add	r30, r24
     360:	f9 1f       	adc	r31, r25
     362:	47 81       	ldd	r20, Z+7	; 0x07
     364:	26 e2       	ldi	r18, 0x26	; 38
     366:	37 e0       	ldi	r19, 0x07	; 7
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	89 e7       	ldi	r24, 0x79	; 121
     36c:	97 e0       	ldi	r25, 0x07	; 7
     36e:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     372:	38 c0       	rjmp	.+112    	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     374:	89 30       	cpi	r24, 0x09	; 9
     376:	99 f4       	brne	.+38     	; 0x39e <_ZN10AlarmClock12setTimetoRTCEv+0x1f8>
     378:	e0 2f       	mov	r30, r16
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	8c 0f       	add	r24, r28
     386:	9d 1f       	adc	r25, r29
     388:	e8 0f       	add	r30, r24
     38a:	f9 1f       	adc	r31, r25
     38c:	47 81       	ldd	r20, Z+7	; 0x07
     38e:	28 e2       	ldi	r18, 0x28	; 40
     390:	37 e0       	ldi	r19, 0x07	; 7
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	89 e7       	ldi	r24, 0x79	; 121
     396:	97 e0       	ldi	r25, 0x07	; 7
     398:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     39c:	23 c0       	rjmp	.+70     	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     39e:	8b 30       	cpi	r24, 0x0B	; 11
     3a0:	a1 f4       	brne	.+40     	; 0x3ca <_ZN10AlarmClock12setTimetoRTCEv+0x224>
     3a2:	e0 2f       	mov	r30, r16
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	8c 0f       	add	r24, r28
     3b0:	9d 1f       	adc	r25, r29
     3b2:	e8 0f       	add	r30, r24
     3b4:	f9 1f       	adc	r31, r25
     3b6:	47 81       	ldd	r20, Z+7	; 0x07
     3b8:	26 e1       	ldi	r18, 0x16	; 22
     3ba:	37 e0       	ldi	r19, 0x07	; 7
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	89 e7       	ldi	r24, 0x79	; 121
     3c0:	97 e0       	ldi	r25, 0x07	; 7
     3c2:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     3ca:	32 9b       	sbis	0x06, 2	; 6
     3cc:	0a c0       	rjmp	.+20     	; 0x3e2 <_ZN10AlarmClock12setTimetoRTCEv+0x23c>
     3ce:	9f ef       	ldi	r25, 0xFF	; 255
     3d0:	21 ee       	ldi	r18, 0xE1	; 225
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	91 50       	subi	r25, 0x01	; 1
     3d6:	20 40       	sbci	r18, 0x00	; 0
     3d8:	80 40       	sbci	r24, 0x00	; 0
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <_ZN10AlarmClock12setTimetoRTCEv+0x22e>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <_ZN10AlarmClock12setTimetoRTCEv+0x238>
     3de:	00 00       	nop
     3e0:	1c cf       	rjmp	.-456    	; 0x21a <_ZN10AlarmClock12setTimetoRTCEv+0x74>
     3e2:	08 e0       	ldi	r16, 0x08	; 8
     3e4:	01 11       	cpse	r16, r1
     3e6:	0f c0       	rjmp	.+30     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3e8:	81 2f       	mov	r24, r17
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	9c 01       	movw	r18, r24
     3ee:	22 0f       	add	r18, r18
     3f0:	33 1f       	adc	r19, r19
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	82 0f       	add	r24, r18
     400:	93 1f       	adc	r25, r19
     402:	e8 0e       	add	r14, r24
     404:	f9 1e       	adc	r15, r25
     406:	01 30       	cpi	r16, 0x01	; 1
     408:	11 f4       	brne	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40a:	e1 0e       	add	r14, r17
     40c:	f1 1c       	adc	r15, r1
     40e:	02 30       	cpi	r16, 0x02	; 2
     410:	79 f4       	brne	.+30     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     412:	81 2f       	mov	r24, r17
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9c 01       	movw	r18, r24
     418:	22 0f       	add	r18, r18
     41a:	33 1f       	adc	r19, r19
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	82 0f       	add	r24, r18
     42a:	93 1f       	adc	r25, r19
     42c:	a8 0e       	add	r10, r24
     42e:	b9 1e       	adc	r11, r25
     430:	03 30       	cpi	r16, 0x03	; 3
     432:	11 f4       	brne	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     434:	a1 0e       	add	r10, r17
     436:	b1 1c       	adc	r11, r1
     438:	04 30       	cpi	r16, 0x04	; 4
     43a:	79 f4       	brne	.+30     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     43c:	81 2f       	mov	r24, r17
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	9c 01       	movw	r18, r24
     442:	22 0f       	add	r18, r18
     444:	33 1f       	adc	r19, r19
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	88 0f       	add	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	82 0f       	add	r24, r18
     454:	93 1f       	adc	r25, r19
     456:	c8 0e       	add	r12, r24
     458:	d9 1e       	adc	r13, r25
     45a:	05 30       	cpi	r16, 0x05	; 5
     45c:	11 f4       	brne	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     45e:	c1 0e       	add	r12, r17
     460:	d1 1c       	adc	r13, r1
     462:	0f 5f       	subi	r16, 0xFF	; 255
     464:	d7 ce       	rjmp	.-594    	; 0x214 <_ZN10AlarmClock12setTimetoRTCEv+0x6e>
     466:	b7 01       	movw	r22, r14
     468:	8f e7       	ldi	r24, 0x7F	; 127
     46a:	97 e0       	ldi	r25, 0x07	; 7
     46c:	0e 94 29 03 	call	0x652	; 0x652 <_ZN6ds130710dec_to_bcdEi>
     470:	18 2f       	mov	r17, r24
     472:	b5 01       	movw	r22, r10
     474:	8f e7       	ldi	r24, 0x7F	; 127
     476:	97 e0       	ldi	r25, 0x07	; 7
     478:	0e 94 29 03 	call	0x652	; 0x652 <_ZN6ds130710dec_to_bcdEi>
     47c:	08 2f       	mov	r16, r24
     47e:	b6 01       	movw	r22, r12
     480:	8f e7       	ldi	r24, 0x7F	; 127
     482:	97 e0       	ldi	r25, 0x07	; 7
     484:	0e 94 29 03 	call	0x652	; 0x652 <_ZN6ds130710dec_to_bcdEi>
     488:	89 83       	std	Y+1, r24	; 0x01
     48a:	0a 83       	std	Y+2, r16	; 0x02
     48c:	1b 83       	std	Y+3, r17	; 0x03
     48e:	87 e0       	ldi	r24, 0x07	; 7
     490:	8c 83       	std	Y+4, r24	; 0x04
     492:	80 e2       	ldi	r24, 0x20	; 32
     494:	8d 83       	std	Y+5, r24	; 0x05
     496:	86 e0       	ldi	r24, 0x06	; 6
     498:	8e 83       	std	Y+6, r24	; 0x06
     49a:	81 e2       	ldi	r24, 0x21	; 33
     49c:	8f 83       	std	Y+7, r24	; 0x07
     49e:	89 e7       	ldi	r24, 0x79	; 121
     4a0:	97 e0       	ldi	r25, 0x07	; 7
     4a2:	0e 94 39 04 	call	0x872	; 0x872 <_ZN11LCD_Display9LCD_ClearEv>
     4a6:	be 01       	movw	r22, r28
     4a8:	6f 5f       	subi	r22, 0xFF	; 255
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
     4ac:	8f e7       	ldi	r24, 0x7F	; 127
     4ae:	97 e0       	ldi	r25, 0x07	; 7
     4b0:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN6ds13078set_timeEPNS_5rtc_tE>
     4b4:	2a e2       	ldi	r18, 0x2A	; 42
     4b6:	37 e0       	ldi	r19, 0x07	; 7
     4b8:	44 e0       	ldi	r20, 0x04	; 4
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	89 e7       	ldi	r24, 0x79	; 121
     4be:	97 e0       	ldi	r25, 0x07	; 7
     4c0:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     4c4:	23 e3       	ldi	r18, 0x33	; 51
     4c6:	37 e0       	ldi	r19, 0x07	; 7
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	89 e7       	ldi	r24, 0x79	; 121
     4ce:	97 e0       	ldi	r25, 0x07	; 7
     4d0:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN11LCD_Display13LCD_String_xyEccPc>
     4d4:	63 96       	adiw	r28, 0x13	; 19
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	bf 90       	pop	r11
     4f2:	af 90       	pop	r10
     4f4:	08 95       	ret

000004f6 <_ZN6ds13078twi_initEv>:
  //-------------TWI initialization------------------------------------------

  void ds1307::twi_init(){
	  //TWBR = (F_CPU/SCL_freq - 16)/(2*prescalar)
	  //F_CPU = 16MHz, SCL_freq(for DS1307) = 100KHz, prescalar = 1 -> TWBR =72
	  TWBR = 0x48;	// set bit rate 72
     4f6:	88 e4       	ldi	r24, 0x48	; 72
     4f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	  TWCR = (1<<TWEN);	//enable TWI
     4fc:	84 e0       	ldi	r24, 0x04	; 4
     4fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  TWSR = 0x00;	//sets the prescalar value to 1
     502:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     506:	08 95       	ret

00000508 <_ZN6ds13079twi_startEv>:
  }

  //------------TWI Start----------------------------------------------------

  void ds1307::twi_start(){
	  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);	// initiate the start condition
     508:	84 ea       	ldi	r24, 0xA4	; 164
     50a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	// wait for the start condition to transmit
     50e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     512:	88 23       	and	r24, r24
     514:	e4 f7       	brge	.-8      	; 0x50e <_ZN6ds13079twi_startEv+0x6>
  }
     516:	08 95       	ret

00000518 <_ZN6ds13079twi_SLA_WEv>:

  void ds1307::twi_SLA_W(){
	  //chooses the device address and sends the Write signal
	  //DS1307 address = 1101000
	  //Write = 0 (last bit)
	  TWDR = 0b11010000;	//SLA + W to data register
     518:	80 ed       	ldi	r24, 0xD0	; 208
     51a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     51e:	84 e8       	ldi	r24, 0x84	; 132
     520:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for SLA + W to transmit
     524:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     528:	88 23       	and	r24, r24
     52a:	e4 f7       	brge	.-8      	; 0x524 <_ZN6ds13079twi_SLA_WEv+0xc>
  }
     52c:	08 95       	ret

0000052e <_ZN6ds13079twi_SLA_REv>:

  void ds1307::twi_SLA_R(){
	  //chooses the device address and sends the Read signal
	  //DS1307 address = 1101000
	  //Read = 1 (last bit)
	  TWDR = 0b11010001;	//SLA + R to data register
     52e:	81 ed       	ldi	r24, 0xD1	; 209
     530:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     534:	84 e8       	ldi	r24, 0x84	; 132
     536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	////wait for SLA + R to transmit
     53a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     53e:	88 23       	and	r24, r24
     540:	e4 f7       	brge	.-8      	; 0x53a <_ZN6ds13079twi_SLA_REv+0xc>
  }
     542:	08 95       	ret

00000544 <_ZN6ds13079twi_writeEh>:

  //-----------TWI Write(to Slave registers)----------------------------------

  void ds1307::twi_write(uint8_t x){
	  TWDR = x;	//data byte to be written to the slave
     544:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     548:	84 e8       	ldi	r24, 0x84	; 132
     54a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
     54e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     552:	88 23       	and	r24, r24
     554:	e4 f7       	brge	.-8      	; 0x54e <_ZN6ds13079twi_writeEh+0xa>
  }
     556:	08 95       	ret

00000558 <_ZN6ds13078twi_readEv>:

  //------------TWI Read(from Slave registers)---------------------------------

  uint8_t ds1307::twi_read(){
	  TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
     558:	84 e8       	ldi	r24, 0x84	; 132
     55a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	  while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
     55e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     562:	88 23       	and	r24, r24
     564:	e4 f7       	brge	.-8      	; 0x55e <_ZN6ds13078twi_readEv+0x6>
	  return TWDR;	//returns the data read from the slave which is stored in TWDR
     566:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  }
     56a:	08 95       	ret

0000056c <_ZN6ds13078twi_stopEv>:

  //------------TWI Stop------------------------------------------------------

  void ds1307::twi_stop(){
	  //stops the transmission with TWSTO
	  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     56c:	84 e9       	ldi	r24, 0x94	; 148
     56e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     572:	08 95       	ret

00000574 <_ZN6ds13078set_timeEPNS_5rtc_tE>:

  //----------------Set time to DS1307---------------------------------------

  

  void ds1307::set_time(rtc_t * rtc){
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	8c 01       	movw	r16, r24
     57e:	eb 01       	movw	r28, r22
	  twi_init();
     580:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN6ds13078twi_initEv>
	  twi_start();	//sending the start condition to DS1307
     584:	c8 01       	movw	r24, r16
     586:	0e 94 84 02 	call	0x508	; 0x508 <_ZN6ds13079twi_startEv>
	  twi_SLA_W();	//initiates the device ds1307 & sends write signal
     58a:	c8 01       	movw	r24, r16
     58c:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN6ds13079twi_SLA_WEv>

	  twi_write(0x00);	//set the register pointer to 00H(seconds reg)
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	c8 01       	movw	r24, r16
     594:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_writeEh>
	  
	  twi_write(rtc -> seconds);
     598:	68 81       	ld	r22, Y
     59a:	c8 01       	movw	r24, r16
     59c:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> minute);
     5a0:	69 81       	ldd	r22, Y+1	; 0x01
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> hour);
     5a8:	6a 81       	ldd	r22, Y+2	; 0x02
     5aa:	c8 01       	movw	r24, r16
     5ac:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> weekDay);
     5b0:	6b 81       	ldd	r22, Y+3	; 0x03
     5b2:	c8 01       	movw	r24, r16
     5b4:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> date);
     5b8:	6c 81       	ldd	r22, Y+4	; 0x04
     5ba:	c8 01       	movw	r24, r16
     5bc:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> month);
     5c0:	6d 81       	ldd	r22, Y+5	; 0x05
     5c2:	c8 01       	movw	r24, r16
     5c4:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_writeEh>
	  twi_write(rtc -> year);
     5c8:	6e 81       	ldd	r22, Y+6	; 0x06
     5ca:	c8 01       	movw	r24, r16
     5cc:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_writeEh>
	  
	  twi_stop(); //stop writing
     5d0:	c8 01       	movw	r24, r16
     5d2:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13078twi_stopEv>
  }
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <_ZN6ds130710bcd_to_decEh>:
  int ds1307::bcd_to_dec(uint8_t num){
	  //Data received from DS1307 are in Binary Coded Decimal
	  //This function converts these data to decimal integers
	  int first4, last4, decValue;
	  
	  first4 = num & 0b00001111;	//gets first 4 digits
     5e0:	26 2f       	mov	r18, r22
     5e2:	2f 70       	andi	r18, 0x0F	; 15
	  last4 = ((num & 0b11110000) >> 4); //get last 4 digits
     5e4:	62 95       	swap	r22
     5e6:	6f 70       	andi	r22, 0x0F	; 15
     5e8:	70 e0       	ldi	r23, 0x00	; 0
	  decValue = last4 * 10 + first4;	//gives the corresponding decimal value
     5ea:	cb 01       	movw	r24, r22
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	66 0f       	add	r22, r22
     5f2:	77 1f       	adc	r23, r23
     5f4:	66 0f       	add	r22, r22
     5f6:	77 1f       	adc	r23, r23
     5f8:	66 0f       	add	r22, r22
     5fa:	77 1f       	adc	r23, r23
     5fc:	86 0f       	add	r24, r22
     5fe:	97 1f       	adc	r25, r23
	  
	  return decValue;
  }
     600:	82 0f       	add	r24, r18
     602:	91 1d       	adc	r25, r1
     604:	08 95       	ret

00000606 <_ZN6ds13079read_timeEh>:
  }


  //-----------------Read time from DS1307---------------------------------

  int ds1307::read_time(uint8_t reg){
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
     60e:	16 2f       	mov	r17, r22
	  //sets the register pointer to the register we want -> reg (00H, 01H, etc)
	  twi_start();
     610:	0e 94 84 02 	call	0x508	; 0x508 <_ZN6ds13079twi_startEv>
	  twi_SLA_W();	//initiates the device ds1307
     614:	ce 01       	movw	r24, r28
     616:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN6ds13079twi_SLA_WEv>
	  twi_write(reg);	//set the register pointer to reg)
     61a:	61 2f       	mov	r22, r17
     61c:	ce 01       	movw	r24, r28
     61e:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_writeEh>
	  twi_stop();
     622:	ce 01       	movw	r24, r28
     624:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13078twi_stopEv>
	  
	  //reading from the particular register
	  uint8_t x;
	  int y;
	  twi_start();
     628:	ce 01       	movw	r24, r28
     62a:	0e 94 84 02 	call	0x508	; 0x508 <_ZN6ds13079twi_startEv>
	  twi_SLA_R();		//read from the reg
     62e:	ce 01       	movw	r24, r28
     630:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6ds13079twi_SLA_REv>
	  x = twi_read();		//value read from reg is stored in x
     634:	ce 01       	movw	r24, r28
     636:	0e 94 ac 02 	call	0x558	; 0x558 <_ZN6ds13078twi_readEv>
     63a:	18 2f       	mov	r17, r24
	  twi_stop();
     63c:	ce 01       	movw	r24, r28
     63e:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6ds13078twi_stopEv>
	  y = bcd_to_dec(x);
     642:	61 2f       	mov	r22, r17
     644:	ce 01       	movw	r24, r28
     646:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN6ds130710bcd_to_decEh>
	  return y;
  }
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	08 95       	ret

00000652 <_ZN6ds130710dec_to_bcdEi>:
	  return decValue;
  }

  //-----------------Convert decimal to BCD----------------------------------

  uint8_t ds1307::dec_to_bcd(int number){
     652:	9b 01       	movw	r18, r22
	int x;
	uint8_t div=0, rem=0;
	uint8_t bcd;
	if (number > 9){
     654:	6a 30       	cpi	r22, 0x0A	; 10
     656:	71 05       	cpc	r23, r1
     658:	c4 f0       	brlt	.+48     	; 0x68a <_ZN6ds130710dec_to_bcdEi+0x38>
		x = number / 10;
     65a:	cb 01       	movw	r24, r22
     65c:	6a e0       	ldi	r22, 0x0A	; 10
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
		div = (x<<4);
     664:	46 2f       	mov	r20, r22
     666:	42 95       	swap	r20
     668:	40 7f       	andi	r20, 0xF0	; 240
		rem = (number % (10 * x));
     66a:	86 2f       	mov	r24, r22
     66c:	97 2f       	mov	r25, r23
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	bc 01       	movw	r22, r24
     674:	66 0f       	add	r22, r22
     676:	77 1f       	adc	r23, r23
     678:	66 0f       	add	r22, r22
     67a:	77 1f       	adc	r23, r23
     67c:	68 0f       	add	r22, r24
     67e:	79 1f       	adc	r23, r25
     680:	c9 01       	movw	r24, r18
     682:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
		bcd = div | rem;
     686:	84 2b       	or	r24, r20
     688:	08 95       	ret
	}
	else{
		bcd = number;
     68a:	86 2f       	mov	r24, r22
	}
	return bcd;
     68c:	08 95       	ret

0000068e <_ZN7Get_key6GetKeyEv>:

uint8_t Get_key::GetKey()

{
	uint8_t r,c;
	PORTD |= 0b00001111;
     68e:	8b b1       	in	r24, 0x0b	; 11
     690:	8f 60       	ori	r24, 0x0F	; 15
     692:	8b b9       	out	0x0b, r24	; 11
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	83 30       	cpi	r24, 0x03	; 3
     698:	80 f5       	brcc	.+96     	; 0x6fa <_ZN7Get_key6GetKeyEv+0x6c>
	{
		DDRD &=~(0b01111111);
     69a:	9a b1       	in	r25, 0x0a	; 10
     69c:	90 78       	andi	r25, 0x80	; 128
     69e:	9a b9       	out	0x0a, r25	; 10
		DDRD |=(0b01000000>>c);
     6a0:	9a b1       	in	r25, 0x0a	; 10
     6a2:	20 e4       	ldi	r18, 0x40	; 64
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	08 2e       	mov	r0, r24
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <_ZN7Get_key6GetKeyEv+0x20>
     6aa:	35 95       	asr	r19
     6ac:	27 95       	ror	r18
     6ae:	0a 94       	dec	r0
     6b0:	e2 f7       	brpl	.-8      	; 0x6aa <_ZN7Get_key6GetKeyEv+0x1c>
     6b2:	29 2b       	or	r18, r25
     6b4:	2a b9       	out	0x0a, r18	; 10
		for (r=0;r<4;r++)//identifying the row of the pressed key
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	94 30       	cpi	r25, 0x04	; 4
     6ba:	e8 f4       	brcc	.+58     	; 0x6f6 <_ZN7Get_key6GetKeyEv+0x68>
		{
			if(!(PIND & (0b00001000>>r)))
     6bc:	29 b1       	in	r18, 0x09	; 9
     6be:	48 e0       	ldi	r20, 0x08	; 8
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	09 2e       	mov	r0, r25
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <_ZN7Get_key6GetKeyEv+0x3c>
     6c6:	55 95       	asr	r21
     6c8:	47 95       	ror	r20
     6ca:	0a 94       	dec	r0
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <_ZN7Get_key6GetKeyEv+0x38>
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	24 23       	and	r18, r20
     6d2:	35 23       	and	r19, r21
     6d4:	23 2b       	or	r18, r19
     6d6:	69 f4       	brne	.+26     	; 0x6f2 <_ZN7Get_key6GetKeyEv+0x64>
			{
				while(!(PIND & (0b00001000>>r)));
     6d8:	29 b1       	in	r18, 0x09	; 9
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	24 23       	and	r18, r20
     6de:	35 23       	and	r19, r21
     6e0:	23 2b       	or	r18, r19
     6e2:	d1 f3       	breq	.-12     	; 0x6d8 <_ZN7Get_key6GetKeyEv+0x4a>
				return(r*3+c +1);// returning the pressed number by considering the row and the column pressed
     6e4:	29 2f       	mov	r18, r25
     6e6:	22 0f       	add	r18, r18
     6e8:	92 0f       	add	r25, r18
     6ea:	98 0f       	add	r25, r24
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	89 0f       	add	r24, r25
     6f0:	08 95       	ret
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
	{
		DDRD &=~(0b01111111);
		DDRD |=(0b01000000>>c);
		for (r=0;r<4;r++)//identifying the row of the pressed key
     6f2:	9f 5f       	subi	r25, 0xFF	; 255
     6f4:	e1 cf       	rjmp	.-62     	; 0x6b8 <_ZN7Get_key6GetKeyEv+0x2a>

{
	uint8_t r,c;
	PORTD |= 0b00001111;
	
	for (c=0;c<3;c++)//identifying the column of the pressed key
     6f6:	8f 5f       	subi	r24, 0xFF	; 255
     6f8:	ce cf       	rjmp	.-100    	; 0x696 <_ZN7Get_key6GetKeyEv+0x8>
				return(r*3+c +1);// returning the pressed number by considering the row and the column pressed
			}
		}
	}
	
	return 0xFF;
     6fa:	8f ef       	ldi	r24, 0xFF	; 255
     6fc:	08 95       	ret

000006fe <_ZN11LCD_Display16LCD_CommandgiverEh>:
#define ENable        PORTB1


void LCD_Display::LCD_Commandgiver(unsigned char comand)      //function to give commands to the LCD
{
	LCDER_port=(LCDER_port & 0b11000011) | ((comand & 0xF0)>>2);         //Sending upper nibble
     6fe:	25 b1       	in	r18, 0x05	; 5
     700:	96 2f       	mov	r25, r22
     702:	90 7f       	andi	r25, 0xF0	; 240
     704:	89 2f       	mov	r24, r25
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	95 95       	asr	r25
     70e:	87 95       	ror	r24
     710:	92 2f       	mov	r25, r18
     712:	93 7c       	andi	r25, 0xC3	; 195
     714:	89 2b       	or	r24, r25
     716:	85 b9       	out	0x05, r24	; 5
	LCDER_port &= ~(1<<Rsel);							      //setting the pin0 of portB LOW to write
     718:	85 b1       	in	r24, 0x05	; 5
     71a:	8e 7f       	andi	r24, 0xFE	; 254
     71c:	85 b9       	out	0x05, r24	; 5
	LCDER_port |= (1<<ENable);                                //setting the pin1 of portB HIGH to read
     71e:	85 b1       	in	r24, 0x05	; 5
     720:	82 60       	ori	r24, 0x02	; 2
     722:	85 b9       	out	0x05, r24	; 5
>>>>>>> master
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
     74c:	85 e0       	ldi	r24, 0x05	; 5
     74e:	8a 95       	dec	r24
     750:	f1 f7       	brne	.-4      	; 0x74e <_ZN11LCD_Display16LCD_CommandgiverEh+0x28>
     752:	00 00       	nop
     754:	85 b1       	in	r24, 0x05	; 5
     756:	8d 7f       	andi	r24, 0xFD	; 253
     758:	85 b9       	out	0x05, r24	; 5
     75a:	8f e8       	ldi	r24, 0x8F	; 143
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <_ZN11LCD_Display16LCD_CommandgiverEh+0x38>
     762:	00 c0       	rjmp	.+0      	; 0x764 <_ZN11LCD_Display16LCD_CommandgiverEh+0x3e>
     764:	00 00       	nop
     766:	85 b1       	in	r24, 0x05	; 5
     768:	6f 70       	andi	r22, 0x0F	; 15
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	66 0f       	add	r22, r22
     76e:	77 1f       	adc	r23, r23
     770:	66 0f       	add	r22, r22
     772:	77 1f       	adc	r23, r23
     774:	83 7c       	andi	r24, 0xC3	; 195
     776:	68 2b       	or	r22, r24
     778:	65 b9       	out	0x05, r22	; 5
     77a:	85 b1       	in	r24, 0x05	; 5
     77c:	82 60       	ori	r24, 0x02	; 2
     77e:	85 b9       	out	0x05, r24	; 5
     780:	95 e0       	ldi	r25, 0x05	; 5
     782:	9a 95       	dec	r25
     784:	f1 f7       	brne	.-4      	; 0x782 <_ZN11LCD_Display16LCD_CommandgiverEh+0x5c>
     786:	00 00       	nop
     788:	85 b1       	in	r24, 0x05	; 5
     78a:	8d 7f       	andi	r24, 0xFD	; 253
     78c:	85 b9       	out	0x05, r24	; 5
=======
     724:	85 e0       	ldi	r24, 0x05	; 5
     726:	8a 95       	dec	r24
     728:	f1 f7       	brne	.-4      	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh+0x28>
     72a:	00 00       	nop
	_delay_us(2);
	LCDER_port &= ~(1<<ENable);						      //setting the pin1 of portB LOW to write
     72c:	85 b1       	in	r24, 0x05	; 5
     72e:	8d 7f       	andi	r24, 0xFD	; 253
     730:	85 b9       	out	0x05, r24	; 5
     732:	8f e8       	ldi	r24, 0x8F	; 143
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <_ZN11LCD_Display16LCD_CommandgiverEh+0x38>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <_ZN11LCD_Display16LCD_CommandgiverEh+0x3e>
     73c:	00 00       	nop
	
	_delay_us(200);
	
	LCDER_port = (LCDER_port & 0b11000011) | ((comand & 0x0F)<<2);          //Sending lower nibble
     73e:	85 b1       	in	r24, 0x05	; 5
     740:	6f 70       	andi	r22, 0x0F	; 15
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	66 0f       	add	r22, r22
     746:	77 1f       	adc	r23, r23
     748:	66 0f       	add	r22, r22
     74a:	77 1f       	adc	r23, r23
     74c:	83 7c       	andi	r24, 0xC3	; 195
     74e:	68 2b       	or	r22, r24
     750:	65 b9       	out	0x05, r22	; 5
	LCDER_port |= (1 << ENable);                               //setting the pin1 of portB HIGH to read
     752:	85 b1       	in	r24, 0x05	; 5
     754:	82 60       	ori	r24, 0x02	; 2
     756:	85 b9       	out	0x05, r24	; 5
     758:	95 e0       	ldi	r25, 0x05	; 5
     75a:	9a 95       	dec	r25
     75c:	f1 f7       	brne	.-4      	; 0x75a <_ZN11LCD_Display16LCD_CommandgiverEh+0x5c>
     75e:	00 00       	nop
	_delay_us(2);
	LCDER_port &= ~(1<< ENable);                               //setting the pin1 of portB LOW to write
     760:	85 b1       	in	r24, 0x05	; 5
     762:	8d 7f       	andi	r24, 0xFD	; 253
     764:	85 b9       	out	0x05, r24	; 5
>>>>>>> master
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
     78e:	8f e9       	ldi	r24, 0x9F	; 159
     790:	9f e0       	ldi	r25, 0x0F	; 15
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <_ZN11LCD_Display16LCD_CommandgiverEh+0x6c>
     796:	00 c0       	rjmp	.+0      	; 0x798 <_ZN11LCD_Display16LCD_CommandgiverEh+0x72>
     798:	00 00       	nop
     79a:	08 95       	ret

0000079c <_ZN11LCD_Display15LCD_InitializerEv>:
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	ec 01       	movw	r28, r24
     7a2:	8f ef       	ldi	r24, 0xFF	; 255
     7a4:	84 b9       	out	0x04, r24	; 4
     7a6:	8f e3       	ldi	r24, 0x3F	; 63
     7a8:	9c e9       	ldi	r25, 0x9C	; 156
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <_ZN11LCD_Display15LCD_InitializerEv+0xe>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <_ZN11LCD_Display15LCD_InitializerEv+0x14>
     7b0:	00 00       	nop
     7b2:	62 e0       	ldi	r22, 0x02	; 2
     7b4:	ce 01       	movw	r24, r28
     7b6:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7ba:	68 e2       	ldi	r22, 0x28	; 40
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7c2:	6c e0       	ldi	r22, 0x0C	; 12
     7c4:	ce 01       	movw	r24, r28
     7c6:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7ca:	66 e0       	ldi	r22, 0x06	; 6
     7cc:	ce 01       	movw	r24, r28
     7ce:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	ce 01       	movw	r24, r28
     7d6:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7da:	8f e9       	ldi	r24, 0x9F	; 159
     7dc:	9f e0       	ldi	r25, 0x0F	; 15
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <_ZN11LCD_Display15LCD_InitializerEv+0x42>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <_ZN11LCD_Display15LCD_InitializerEv+0x48>
     7e4:	00 00       	nop
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <_ZN11LCD_Display13LCD_CharacterEh>:
     7ec:	25 b1       	in	r18, 0x05	; 5
     7ee:	96 2f       	mov	r25, r22
     7f0:	90 7f       	andi	r25, 0xF0	; 240
     7f2:	89 2f       	mov	r24, r25
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	95 95       	asr	r25
     7f8:	87 95       	ror	r24
     7fa:	95 95       	asr	r25
     7fc:	87 95       	ror	r24
     7fe:	92 2f       	mov	r25, r18
     800:	93 7c       	andi	r25, 0xC3	; 195
     802:	89 2b       	or	r24, r25
     804:	85 b9       	out	0x05, r24	; 5
     806:	85 b1       	in	r24, 0x05	; 5
     808:	81 60       	ori	r24, 0x01	; 1
     80a:	85 b9       	out	0x05, r24	; 5
     80c:	85 b1       	in	r24, 0x05	; 5
     80e:	82 60       	ori	r24, 0x02	; 2
     810:	85 b9       	out	0x05, r24	; 5
=======
     766:	8f e9       	ldi	r24, 0x9F	; 159
     768:	9f e0       	ldi	r25, 0x0F	; 15
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <_ZN11LCD_Display16LCD_CommandgiverEh+0x6c>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <_ZN11LCD_Display16LCD_CommandgiverEh+0x72>
     770:	00 00       	nop
     772:	08 95       	ret

00000774 <_ZN11LCD_Display15LCD_InitializerEv>:
	_delay_ms(2);
}

void LCD_Display::LCD_Initializer(){                           // function to output signal towards LCD
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	ec 01       	movw	r28, r24
	LCD_Dir_00 = 0xFF;                                         // setting the portB to be in Output mode
     77a:	8f ef       	ldi	r24, 0xFF	; 255
     77c:	84 b9       	out	0x04, r24	; 4
     77e:	8f e3       	ldi	r24, 0x3F	; 63
     780:	9c e9       	ldi	r25, 0x9C	; 156
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	f1 f7       	brne	.-4      	; 0x782 <_ZN11LCD_Display15LCD_InitializerEv+0xe>
     786:	00 c0       	rjmp	.+0      	; 0x788 <_ZN11LCD_Display15LCD_InitializerEv+0x14>
     788:	00 00       	nop
	_delay_ms(20);
	
	LCD_Commandgiver(0x02);                                    //initializes LCD 16x2 in 4-bit mode
     78a:	62 e0       	ldi	r22, 0x02	; 2
     78c:	ce 01       	movw	r24, r28
     78e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x28);                                    // configures LCD in 2-line, 4-bit mode, and 5x8 dots.
     792:	68 e2       	ldi	r22, 0x28	; 40
     794:	ce 01       	movw	r24, r28
     796:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x0c);                                    //Send any Display ON command
     79a:	6c e0       	ldi	r22, 0x0C	; 12
     79c:	ce 01       	movw	r24, r28
     79e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x06);                                    //increment cursor)
     7a2:	66 e0       	ldi	r22, 0x06	; 6
     7a4:	ce 01       	movw	r24, r28
     7a6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_Commandgiver(0x01);                                    //Clear display screen
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	ce 01       	movw	r24, r28
     7ae:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN11LCD_Display16LCD_CommandgiverEh>
     7b2:	8f e9       	ldi	r24, 0x9F	; 159
     7b4:	9f e0       	ldi	r25, 0x0F	; 15
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <_ZN11LCD_Display15LCD_InitializerEv+0x42>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <_ZN11LCD_Display15LCD_InitializerEv+0x48>
     7bc:	00 00       	nop
	_delay_ms(2);
}
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <_ZN11LCD_Display13LCD_CharacterEh>:

void LCD_Display::LCD_Character(unsigned char data_00)        //function to output characters towards LCD
{
	//LCDER_port = ( LCDER_port & 0x0F) | (data_00 & 0xF0 );    //Sending upper nibble
	LCDER_port=(LCDER_port & 0b11000011) | ((data_00 & 0xF0)>>2);
     7c4:	25 b1       	in	r18, 0x05	; 5
     7c6:	96 2f       	mov	r25, r22
     7c8:	90 7f       	andi	r25, 0xF0	; 240
     7ca:	89 2f       	mov	r24, r25
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	95 95       	asr	r25
     7d0:	87 95       	ror	r24
     7d2:	95 95       	asr	r25
     7d4:	87 95       	ror	r24
     7d6:	92 2f       	mov	r25, r18
     7d8:	93 7c       	andi	r25, 0xC3	; 195
     7da:	89 2b       	or	r24, r25
     7dc:	85 b9       	out	0x05, r24	; 5
	LCDER_port |= (1<<Rsel);                                  //setting the pin0 of portB HIGH to read
     7de:	85 b1       	in	r24, 0x05	; 5
     7e0:	81 60       	ori	r24, 0x01	; 1
     7e2:	85 b9       	out	0x05, r24	; 5
	LCDER_port |=(1<<ENable);                                 //setting the pin1 of portB HIGH to read
     7e4:	85 b1       	in	r24, 0x05	; 5
     7e6:	82 60       	ori	r24, 0x02	; 2
     7e8:	85 b9       	out	0x05, r24	; 5
>>>>>>> master
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	8a 95       	dec	r24
     816:	f1 f7       	brne	.-4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     818:	00 c0       	rjmp	.+0      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     81a:	85 b1       	in	r24, 0x05	; 5
     81c:	8d 7f       	andi	r24, 0xFD	; 253
     81e:	85 b9       	out	0x05, r24	; 5
     820:	8f e8       	ldi	r24, 0x8F	; 143
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     828:	00 c0       	rjmp	.+0      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     82a:	00 00       	nop
     82c:	85 b1       	in	r24, 0x05	; 5
     82e:	6f 70       	andi	r22, 0x0F	; 15
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	66 0f       	add	r22, r22
     838:	77 1f       	adc	r23, r23
     83a:	83 7c       	andi	r24, 0xC3	; 195
     83c:	68 2b       	or	r22, r24
     83e:	65 b9       	out	0x05, r22	; 5
     840:	85 b1       	in	r24, 0x05	; 5
     842:	82 60       	ori	r24, 0x02	; 2
     844:	85 b9       	out	0x05, r24	; 5
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	9a 95       	dec	r25
     84a:	f1 f7       	brne	.-4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     84e:	85 b1       	in	r24, 0x05	; 5
     850:	8d 7f       	andi	r24, 0xFD	; 253
     852:	85 b9       	out	0x05, r24	; 5
=======
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	8a 95       	dec	r24
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <_ZN11LCD_Display13LCD_CharacterEh+0x28>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <_ZN11LCD_Display13LCD_CharacterEh+0x2e>
	_delay_us(1);
	LCDER_port &= ~(1<<ENable);                               //setting the pin1 of portB LOW to write
     7f2:	85 b1       	in	r24, 0x05	; 5
     7f4:	8d 7f       	andi	r24, 0xFD	; 253
     7f6:	85 b9       	out	0x05, r24	; 5
     7f8:	8f e8       	ldi	r24, 0x8F	; 143
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <_ZN11LCD_Display13LCD_CharacterEh+0x38>
     800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     802:	00 00       	nop
	
	_delay_us(200);
		
	//LCDER_port = ( LCDER_port & 0x0F) | (data_00 <<4 );       //Sending lower nibble
	LCDER_port = (LCDER_port & 0b11000011) | ((data_00 & 0x0F)<<2);
     804:	85 b1       	in	r24, 0x05	; 5
     806:	6f 70       	andi	r22, 0x0F	; 15
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	66 0f       	add	r22, r22
     80c:	77 1f       	adc	r23, r23
     80e:	66 0f       	add	r22, r22
     810:	77 1f       	adc	r23, r23
     812:	83 7c       	andi	r24, 0xC3	; 195
     814:	68 2b       	or	r22, r24
     816:	65 b9       	out	0x05, r22	; 5
	LCDER_port |= (1<< ENable);                               //setting the pin1 of portB HIGH to read
     818:	85 b1       	in	r24, 0x05	; 5
     81a:	82 60       	ori	r24, 0x02	; 2
     81c:	85 b9       	out	0x05, r24	; 5
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	9a 95       	dec	r25
     822:	f1 f7       	brne	.-4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     824:	00 c0       	rjmp	.+0      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
	_delay_us(1);
	LCDER_port &= ~(1<<ENable);                               //setting the pin1 of portB LOW to write
     826:	85 b1       	in	r24, 0x05	; 5
     828:	8d 7f       	andi	r24, 0xFD	; 253
     82a:	85 b9       	out	0x05, r24	; 5
>>>>>>> master
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
     854:	8f e9       	ldi	r24, 0x9F	; 159
     856:	9f e0       	ldi	r25, 0x0F	; 15
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85e:	00 00       	nop
     860:	08 95       	ret

00000862 <_ZN11LCD_Display10LCD_StringEPc>:
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	7c 01       	movw	r14, r24
     870:	8b 01       	movw	r16, r22
     872:	c0 e0       	ldi	r28, 0x00	; 0
     874:	d0 e0       	ldi	r29, 0x00	; 0
     876:	f8 01       	movw	r30, r16
     878:	ec 0f       	add	r30, r28
     87a:	fd 1f       	adc	r31, r29
     87c:	60 81       	ld	r22, Z
     87e:	66 23       	and	r22, r22
     880:	29 f0       	breq	.+10     	; 0x88c <_ZN11LCD_Display10LCD_StringEPc+0x2a>
     882:	c7 01       	movw	r24, r14
     884:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN11LCD_Display13LCD_CharacterEh>
     888:	21 96       	adiw	r28, 0x01	; 1
     88a:	f5 cf       	rjmp	.-22     	; 0x876 <_ZN11LCD_Display10LCD_StringEPc+0x14>
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	08 95       	ret

0000089a <_ZN11LCD_Display9LCD_ClearEv>:
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	ec 01       	movw	r28, r24
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
     8a6:	8f e9       	ldi	r24, 0x9F	; 159
     8a8:	9f e0       	ldi	r25, 0x0F	; 15
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <_ZN11LCD_Display9LCD_ClearEv+0x10>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <_ZN11LCD_Display9LCD_ClearEv+0x16>
     8b0:	00 00       	nop
     8b2:	60 e8       	ldi	r22, 0x80	; 128
     8b4:	ce 01       	movw	r24, r28
     8b6:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <_ZN11LCD_Display13LCD_String_xyEccPc>:
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	8c 01       	movw	r16, r24
     8ca:	e9 01       	movw	r28, r18
     8cc:	61 11       	cpse	r22, r1
     8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     8d0:	40 31       	cpi	r20, 0x10	; 16
     8d2:	30 f4       	brcc	.+12     	; 0x8e0 <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     8d4:	4f 70       	andi	r20, 0x0F	; 15
     8d6:	64 2f       	mov	r22, r20
     8d8:	60 68       	ori	r22, 0x80	; 128
     8da:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     8e0:	61 30       	cpi	r22, 0x01	; 1
     8e2:	41 f4       	brne	.+16     	; 0x8f4 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     8e4:	40 31       	cpi	r20, 0x10	; 16
     8e6:	30 f4       	brcc	.+12     	; 0x8f4 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     8e8:	4f 70       	andi	r20, 0x0F	; 15
     8ea:	64 2f       	mov	r22, r20
     8ec:	60 6c       	ori	r22, 0xC0	; 192
     8ee:	c8 01       	movw	r24, r16
     8f0:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
     8f4:	be 01       	movw	r22, r28
     8f6:	c8 01       	movw	r24, r16
     8f8:	0e 94 31 04 	call	0x862	; 0x862 <_ZN11LCD_Display10LCD_StringEPc>
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	08 95       	ret

00000906 <_Z10checkAlarmv>:
=======
     82c:	8f e9       	ldi	r24, 0x9F	; 159
     82e:	9f e0       	ldi	r25, 0x0F	; 15
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     834:	00 c0       	rjmp	.+0      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     836:	00 00       	nop
     838:	08 95       	ret

0000083a <_ZN11LCD_Display10LCD_StringEPc>:
	_delay_ms(2);
}

void LCD_Display::LCD_String(char* string_00)                 //function to output the set of characters as a string
{
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	7c 01       	movw	r14, r24
     848:	8b 01       	movw	r16, r22
	for (int ci=0;string_00[ci] != 0; ci++)                   //for loop to accumulate characters to create string
     84a:	c0 e0       	ldi	r28, 0x00	; 0
     84c:	d0 e0       	ldi	r29, 0x00	; 0
     84e:	f8 01       	movw	r30, r16
     850:	ec 0f       	add	r30, r28
     852:	fd 1f       	adc	r31, r29
     854:	60 81       	ld	r22, Z
     856:	66 23       	and	r22, r22
     858:	29 f0       	breq	.+10     	; 0x864 <_ZN11LCD_Display10LCD_StringEPc+0x2a>
	{
		LCD_Character (string_00[ci]);                        //calling the above defined function to create the string using characters
     85a:	c7 01       	movw	r24, r14
     85c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN11LCD_Display13LCD_CharacterEh>
	_delay_ms(2);
}

void LCD_Display::LCD_String(char* string_00)                 //function to output the set of characters as a string
{
	for (int ci=0;string_00[ci] != 0; ci++)                   //for loop to accumulate characters to create string
     860:	21 96       	adiw	r28, 0x01	; 1
     862:	f5 cf       	rjmp	.-22     	; 0x84e <_ZN11LCD_Display10LCD_StringEPc+0x14>
	{
		LCD_Character (string_00[ci]);                        //calling the above defined function to create the string using characters
	}
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	08 95       	ret

00000872 <_ZN11LCD_Display9LCD_ClearEv>:


void LCD_Display::LCD_Clear()                                 //function to clear the LCD after displaying the output
{
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
	LCD_Commandgiver(0x01);                                   //Clear display screen
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN11LCD_Display16LCD_CommandgiverEh>
     87e:	8f e9       	ldi	r24, 0x9F	; 159
     880:	9f e0       	ldi	r25, 0x0F	; 15
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <_ZN11LCD_Display9LCD_ClearEv+0x10>
     886:	00 c0       	rjmp	.+0      	; 0x888 <_ZN11LCD_Display9LCD_ClearEv+0x16>
     888:	00 00       	nop
	_delay_ms(2);
	LCD_Commandgiver(0x80);                                   //Cursor at home position
     88a:	60 e8       	ldi	r22, 0x80	; 128
     88c:	ce 01       	movw	r24, r28
     88e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN11LCD_Display16LCD_CommandgiverEh>
}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <_ZN11LCD_Display13LCD_String_xyEccPc>:

void LCD_Display::LCD_String_xy(char row_1, char position, char *string_00) //function to set the position of the LCD cursor
{
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	8c 01       	movw	r16, r24
     8a2:	e9 01       	movw	r28, r18
	if (row_1 == 0 && position<16)
     8a4:	61 11       	cpse	r22, r1
     8a6:	08 c0       	rjmp	.+16     	; 0x8b8 <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     8a8:	40 31       	cpi	r20, 0x10	; 16
     8aa:	30 f4       	brcc	.+12     	; 0x8b8 <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
	LCD_Commandgiver((position & 0x0F)| 0x80);                //Command of first row and required position<16
     8ac:	4f 70       	andi	r20, 0x0F	; 15
     8ae:	64 2f       	mov	r22, r20
     8b0:	60 68       	ori	r22, 0x80	; 128
     8b2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN11LCD_Display16LCD_CommandgiverEh>
     8b6:	0a c0       	rjmp	.+20     	; 0x8cc <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
	else if (row_1 == 1 && position<16)
     8b8:	61 30       	cpi	r22, 0x01	; 1
     8ba:	41 f4       	brne	.+16     	; 0x8cc <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     8bc:	40 31       	cpi	r20, 0x10	; 16
     8be:	30 f4       	brcc	.+12     	; 0x8cc <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
	LCD_Commandgiver((position &0x0F) | 0xC0);                //Command of first row and required position<16
     8c0:	4f 70       	andi	r20, 0x0F	; 15
     8c2:	64 2f       	mov	r22, r20
     8c4:	60 6c       	ori	r22, 0xC0	; 192
     8c6:	c8 01       	movw	r24, r16
     8c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN11LCD_Display16LCD_CommandgiverEh>
	LCD_String(string_00);                                    //calling the above defined function
     8cc:	be 01       	movw	r22, r28
     8ce:	c8 01       	movw	r24, r16
     8d0:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN11LCD_Display10LCD_StringEPc>
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	08 95       	ret

000008de <_Z10checkAlarmv>:
>>>>>>> master
			display();
		}
	}
}

void checkAlarm(){
     906:	7f 92       	push	r7
     908:	8f 92       	push	r8
     90a:	9f 92       	push	r9
     90c:	af 92       	push	r10
     90e:	bf 92       	push	r11
     910:	cf 92       	push	r12
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
	int currentHr, currentMin, alarmHr, alarmMin, alarmCheck, alOnOff;
	bool alarm;
	//checking time and ringing an alarm
	for (int i=0; i<5;i++){
     920:	00 e0       	ldi	r16, 0x00	; 0
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	05 30       	cpi	r16, 0x05	; 5
     926:	11 05       	cpc	r17, r1
     928:	0c f0       	brlt	.+2      	; 0x92c <_Z10checkAlarmv+0x26>
     92a:	a7 c0       	rjmp	.+334    	; 0xa7a <_Z10checkAlarmv+0x174>
		alarmHr = allAlarms[i][0];
     92c:	f8 01       	movw	r30, r16
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	e7 55       	subi	r30, 0x57	; 87
     93c:	f8 4f       	sbci	r31, 0xF8	; 248
     93e:	e0 80       	ld	r14, Z
     940:	f1 80       	ldd	r15, Z+1	; 0x01
		alarmMin = allAlarms[i][1];
     942:	c2 80       	ldd	r12, Z+2	; 0x02
     944:	d3 80       	ldd	r13, Z+3	; 0x03
		alarmCheck = allAlarms[i][2]; //only used within this loop to check of the alarm was turned on
     946:	84 80       	ldd	r8, Z+4	; 0x04
     948:	95 80       	ldd	r9, Z+5	; 0x05
		alOnOff = allAlarms[i][3]; //this value will be 1 if alarm is ON and 0 if OFF
     94a:	a6 80       	ldd	r10, Z+6	; 0x06
     94c:	b7 80       	ldd	r11, Z+7	; 0x07

		currentHr = DS1307.read_time(02);
     94e:	62 e0       	ldi	r22, 0x02	; 2
     950:	8e ee       	ldi	r24, 0xEE	; 238
     952:	97 e0       	ldi	r25, 0x07	; 7
     954:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN6ds13079read_timeEh>
     958:	ec 01       	movw	r28, r24
		currentMin = DS1307.read_time(01);
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	8e ee       	ldi	r24, 0xEE	; 238
     95e:	97 e0       	ldi	r25, 0x07	; 7
     960:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN6ds13079read_timeEh>

		if (((currentHr != alarmHr) || (currentMin != alarmMin))){
     964:	ec 16       	cp	r14, r28
     966:	fd 06       	cpc	r15, r29
     968:	19 f4       	brne	.+6      	; 0x970 <_Z10checkAlarmv+0x6a>
     96a:	c8 16       	cp	r12, r24
     96c:	d9 06       	cpc	r13, r25
     96e:	79 f0       	breq	.+30     	; 0x98e <_Z10checkAlarmv+0x88>
			allAlarms[i][2] = 1;
     970:	f8 01       	movw	r30, r16
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	e7 55       	subi	r30, 0x57	; 87
     980:	f8 4f       	sbci	r31, 0xF8	; 248
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	95 83       	std	Z+5, r25	; 0x05
     988:	84 83       	std	Z+4, r24	; 0x04
			stop = false;
     98a:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <stop>
		}
		
		while (1){
			currentHr = DS1307.read_time(02);
     98e:	62 e0       	ldi	r22, 0x02	; 2
     990:	8e ee       	ldi	r24, 0xEE	; 238
     992:	97 e0       	ldi	r25, 0x07	; 7
     994:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN6ds13079read_timeEh>
     998:	ec 01       	movw	r28, r24
			currentMin = DS1307.read_time(01);
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	8e ee       	ldi	r24, 0xEE	; 238
     99e:	97 e0       	ldi	r25, 0x07	; 7
     9a0:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN6ds13079read_timeEh>
     9a4:	ac 01       	movw	r20, r24
			if ((currentHr == alarmHr) & (currentMin == alarmMin)  & ~(stop) & (alarmCheck==1) & (alOnOff==1)){
     9a6:	21 e0       	ldi	r18, 0x01	; 1
     9a8:	ec 16       	cp	r14, r28
     9aa:	fd 06       	cpc	r15, r29
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <_Z10checkAlarmv+0xaa>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	c4 16       	cp	r12, r20
     9b4:	d5 06       	cpc	r13, r21
     9b6:	09 f0       	breq	.+2      	; 0x9ba <_Z10checkAlarmv+0xb4>
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	92 23       	and	r25, r18
     9bc:	29 2f       	mov	r18, r25
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <stop>
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	80 95       	com	r24
     9c8:	90 95       	com	r25
     9ca:	82 23       	and	r24, r18
     9cc:	93 23       	and	r25, r19
     9ce:	21 e0       	ldi	r18, 0x01	; 1
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	84 16       	cp	r8, r20
     9d6:	91 04       	cpc	r9, r1
     9d8:	11 f0       	breq	.+4      	; 0x9de <_Z10checkAlarmv+0xd8>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	82 23       	and	r24, r18
     9e0:	93 23       	and	r25, r19
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	a4 16       	cp	r10, r20
     9ea:	b1 04       	cpc	r11, r1
     9ec:	11 f0       	breq	.+4      	; 0x9f2 <_Z10checkAlarmv+0xec>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	28 23       	and	r18, r24
     9f4:	39 23       	and	r19, r25
     9f6:	23 2b       	or	r18, r19
     9f8:	41 f1       	breq	.+80     	; 0xa4a <_Z10checkAlarmv+0x144>
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
     9fa:	28 e5       	ldi	r18, 0x58	; 88
     9fc:	37 e0       	ldi	r19, 0x07	; 7
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	88 ee       	ldi	r24, 0xE8	; 232
     a04:	97 e0       	ldi	r25, 0x07	; 7
     a06:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
				lcd.LCD_String_xy(1, 0, "STOP            ");
     a0a:	29 e6       	ldi	r18, 0x69	; 105
     a0c:	37 e0       	ldi	r19, 0x07	; 7
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	88 ee       	ldi	r24, 0xE8	; 232
     a14:	97 e0       	ldi	r25, 0x07	; 7
     a16:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>

				music.tone(currentscreenset23);
     a1a:	60 91 d1 07 	lds	r22, 0x07D1	; 0x8007d1 <currentscreenset23>
     a1e:	70 91 d2 07 	lds	r23, 0x07D2	; 0x8007d2 <currentscreenset23+0x1>
     a22:	89 ed       	ldi	r24, 0xD9	; 217
     a24:	97 e0       	ldi	r25, 0x07	; 7
     a26:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN15music_notations4toneEi>
				allAlarms[i][2] = 0;
     a2a:	f8 01       	movw	r30, r16
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	e7 55       	subi	r30, 0x57	; 87
     a3a:	f8 4f       	sbci	r31, 0xF8	; 248
     a3c:	15 82       	std	Z+5, r1	; 0x05
     a3e:	14 82       	std	Z+4, r1	; 0x04
				alarm = true;
     a40:	77 24       	eor	r7, r7
     a42:	73 94       	inc	r7
			else{
				if(alarm){lcd.LCD_Clear();alarm=false;set=0;}
				break;
			}
			
			if (!(PINC & (1<<Ok))){
     a44:	32 99       	sbic	0x06, 2	; 6
     a46:	a3 cf       	rjmp	.-186    	; 0x98e <_Z10checkAlarmv+0x88>
     a48:	0c c0       	rjmp	.+24     	; 0xa62 <_Z10checkAlarmv+0x15c>
				music.tone(currentscreenset23);
				allAlarms[i][2] = 0;
				alarm = true;
			}
			else{
				if(alarm){lcd.LCD_Clear();alarm=false;set=0;}
     a4a:	77 20       	and	r7, r7
     a4c:	99 f0       	breq	.+38     	; 0xa74 <_Z10checkAlarmv+0x16e>
     a4e:	88 ee       	ldi	r24, 0xE8	; 232
     a50:	97 e0       	ldi	r25, 0x07	; 7
     a52:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN11LCD_Display9LCD_ClearEv>
     a56:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <set+0x1>
     a5a:	10 92 d7 07 	sts	0x07D7, r1	; 0x8007d7 <set>
     a5e:	71 2c       	mov	r7, r1
     a60:	09 c0       	rjmp	.+18     	; 0xa74 <_Z10checkAlarmv+0x16e>
				break;
			}
			
			if (!(PINC & (1<<Ok))){
				lcd.LCD_Clear();
     a62:	88 ee       	ldi	r24, 0xE8	; 232
     a64:	97 e0       	ldi	r25, 0x07	; 7
     a66:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN11LCD_Display9LCD_ClearEv>
				stop = true;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <stop>
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
				lcd.LCD_String_xy(1, 0, "STOP            ");

				music.tone(currentscreenset23);
				allAlarms[i][2] = 0;
				alarm = true;
     a70:	77 24       	eor	r7, r7
     a72:	73 94       	inc	r7

void checkAlarm(){
	int currentHr, currentMin, alarmHr, alarmMin, alarmCheck, alOnOff;
	bool alarm;
	//checking time and ringing an alarm
	for (int i=0; i<5;i++){
     a74:	0f 5f       	subi	r16, 0xFF	; 255
     a76:	1f 4f       	sbci	r17, 0xFF	; 255
     a78:	55 cf       	rjmp	.-342    	; 0x924 <_Z10checkAlarmv+0x1e>
				stop = true;
				break;
			}
		}
	}
} 
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	bf 90       	pop	r11
     a8c:	af 90       	pop	r10
     a8e:	9f 90       	pop	r9
     a90:	8f 90       	pop	r8
     a92:	7f 90       	pop	r7
     a94:	08 95       	ret

00000a96 <_Z11changeAlarmi>:

void changeAlarm(int alPos){
     a96:	8f 92       	push	r8
     a98:	9f 92       	push	r9
     a9a:	af 92       	push	r10
     a9c:	bf 92       	push	r11
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	2c 97       	sbiw	r28, 0x0c	; 12
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	5c 01       	movw	r10, r24
	//--------------------Changing Alarms---------------------------
	bool delAlarm = false;
	uint8_t key;
	
	int min_al=0, hr_al=0;
	int n[6] = {6, 7, 9, 10};
     ac0:	fe 01       	movw	r30, r28
     ac2:	31 96       	adiw	r30, 0x01	; 1
     ac4:	8c e0       	ldi	r24, 0x0C	; 12
     ac6:	df 01       	movw	r26, r30
     ac8:	1d 92       	st	X+, r1
     aca:	8a 95       	dec	r24
     acc:	e9 f7       	brne	.-6      	; 0xac8 <_Z11changeAlarmi+0x32>
     ace:	86 e0       	ldi	r24, 0x06	; 6
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	9a 83       	std	Y+2, r25	; 0x02
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	87 e0       	ldi	r24, 0x07	; 7
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	9c 83       	std	Y+4, r25	; 0x04
     adc:	8b 83       	std	Y+3, r24	; 0x03
     ade:	89 e0       	ldi	r24, 0x09	; 9
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	9e 83       	std	Y+6, r25	; 0x06
     ae4:	8d 83       	std	Y+5, r24	; 0x05
     ae6:	8a e0       	ldi	r24, 0x0A	; 10
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	98 87       	std	Y+8, r25	; 0x08
     aec:	8f 83       	std	Y+7, r24	; 0x07
	static int alarm[2];
	
	lcd.LCD_Clear();
     aee:	88 ee       	ldi	r24, 0xE8	; 232
     af0:	97 e0       	ldi	r25, 0x07	; 7
     af2:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN11LCD_Display9LCD_ClearEv>
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
     af6:	95 01       	movw	r18, r10
     af8:	22 95       	swap	r18
     afa:	32 95       	swap	r19
     afc:	30 7f       	andi	r19, 0xF0	; 240
     afe:	32 27       	eor	r19, r18
     b00:	20 7f       	andi	r18, 0xF0	; 240
     b02:	32 27       	eor	r19, r18
     b04:	20 55       	subi	r18, 0x50	; 80
     b06:	3e 4f       	sbci	r19, 0xFE	; 254
     b08:	46 e0       	ldi	r20, 0x06	; 6
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	88 ee       	ldi	r24, 0xE8	; 232
     b0e:	97 e0       	ldi	r25, 0x07	; 7
     b10:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
     b14:	2a e7       	ldi	r18, 0x7A	; 122
     b16:	37 e0       	ldi	r19, 0x07	; 7
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	88 ee       	ldi	r24, 0xE8	; 232
     b1e:	97 e0       	ldi	r25, 0x07	; 7
     b20:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     b24:	bf ef       	ldi	r27, 0xFF	; 255
     b26:	e1 ee       	ldi	r30, 0xE1	; 225
     b28:	f4 e0       	ldi	r31, 0x04	; 4
     b2a:	b1 50       	subi	r27, 0x01	; 1
     b2c:	e0 40       	sbci	r30, 0x00	; 0
     b2e:	f0 40       	sbci	r31, 0x00	; 0
     b30:	e1 f7       	brne	.-8      	; 0xb2a <_Z11changeAlarmi+0x94>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <_Z11changeAlarmi+0x9e>
     b34:	00 00       	nop
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     b36:	00 e0       	ldi	r16, 0x00	; 0
	//alPos takes the position of the alarm that needs to be changed
	//--------------------Changing Alarms---------------------------
	bool delAlarm = false;
	uint8_t key;
	
	int min_al=0, hr_al=0;
     b38:	e1 2c       	mov	r14, r1
     b3a:	f1 2c       	mov	r15, r1
     b3c:	c1 2c       	mov	r12, r1
     b3e:	d1 2c       	mov	r13, r1
	
	lcd.LCD_Clear();
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     b40:	05 30       	cpi	r16, 0x05	; 5
     b42:	08 f0       	brcs	.+2      	; 0xb46 <_Z11changeAlarmi+0xb0>
     b44:	4c c1       	rjmp	.+664    	; 0xdde <_Z11changeAlarmi+0x348>
	{
		while(1)
		{
			key = keypad.GetKey();
     b46:	87 ee       	ldi	r24, 0xE7	; 231
     b48:	97 e0       	ldi	r25, 0x07	; 7
     b4a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN7Get_key6GetKeyEv>
     b4e:	18 2f       	mov	r17, r24
			if (key == 1) {lcd.LCD_String_xy(0,n[i],"1");break;}
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	99 f4       	brne	.+38     	; 0xb7a <_Z11changeAlarmi+0xe4>
     b54:	e0 2f       	mov	r30, r16
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	ee 0f       	add	r30, r30
     b5a:	ff 1f       	adc	r31, r31
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	2c 0f       	add	r18, r28
     b62:	3d 1f       	adc	r19, r29
     b64:	e2 0f       	add	r30, r18
     b66:	f3 1f       	adc	r31, r19
     b68:	40 81       	ld	r20, Z
     b6a:	2a e3       	ldi	r18, 0x3A	; 58
     b6c:	37 e0       	ldi	r19, 0x07	; 7
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	88 ee       	ldi	r24, 0xE8	; 232
     b72:	97 e0       	ldi	r25, 0x07	; 7
     b74:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     b78:	06 c1       	rjmp	.+524    	; 0xd86 <_Z11changeAlarmi+0x2f0>
			if (key == 2) {lcd.LCD_String_xy(0,n[i],"2");break;}
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	99 f4       	brne	.+38     	; 0xba4 <_Z11changeAlarmi+0x10e>
     b7e:	e0 2f       	mov	r30, r16
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	ee 0f       	add	r30, r30
     b84:	ff 1f       	adc	r31, r31
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	8c 0f       	add	r24, r28
     b8c:	9d 1f       	adc	r25, r29
     b8e:	e8 0f       	add	r30, r24
     b90:	f9 1f       	adc	r31, r25
     b92:	40 81       	ld	r20, Z
     b94:	2c e3       	ldi	r18, 0x3C	; 60
     b96:	37 e0       	ldi	r19, 0x07	; 7
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	88 ee       	ldi	r24, 0xE8	; 232
     b9c:	97 e0       	ldi	r25, 0x07	; 7
     b9e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     ba2:	f1 c0       	rjmp	.+482    	; 0xd86 <_Z11changeAlarmi+0x2f0>
			if (key == 3) {lcd.LCD_String_xy(0,n[i],"3");break;}
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	99 f4       	brne	.+38     	; 0xbce <_Z11changeAlarmi+0x138>
     ba8:	e0 2f       	mov	r30, r16
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	a1 e0       	ldi	r26, 0x01	; 1
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ac 0f       	add	r26, r28
     bb6:	bd 1f       	adc	r27, r29
     bb8:	ea 0f       	add	r30, r26
     bba:	fb 1f       	adc	r31, r27
     bbc:	40 81       	ld	r20, Z
     bbe:	2e e3       	ldi	r18, 0x3E	; 62
     bc0:	37 e0       	ldi	r19, 0x07	; 7
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	88 ee       	ldi	r24, 0xE8	; 232
     bc6:	97 e0       	ldi	r25, 0x07	; 7
     bc8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     bcc:	dc c0       	rjmp	.+440    	; 0xd86 <_Z11changeAlarmi+0x2f0>
			if (key == 4) {lcd.LCD_String_xy(0,n[i],"4");break;}
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	99 f4       	brne	.+38     	; 0xbf8 <_Z11changeAlarmi+0x162>
     bd2:	e0 2f       	mov	r30, r16
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	21 e0       	ldi	r18, 0x01	; 1
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	2c 0f       	add	r18, r28
     be0:	3d 1f       	adc	r19, r29
     be2:	e2 0f       	add	r30, r18
     be4:	f3 1f       	adc	r31, r19
     be6:	40 81       	ld	r20, Z
     be8:	20 e4       	ldi	r18, 0x40	; 64
     bea:	37 e0       	ldi	r19, 0x07	; 7
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	88 ee       	ldi	r24, 0xE8	; 232
     bf0:	97 e0       	ldi	r25, 0x07	; 7
     bf2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     bf6:	c7 c0       	rjmp	.+398    	; 0xd86 <_Z11changeAlarmi+0x2f0>
			if (key == 5) {lcd.LCD_String_xy(0,n[i],"5");break;}
     bf8:	85 30       	cpi	r24, 0x05	; 5
     bfa:	99 f4       	brne	.+38     	; 0xc22 <_Z11changeAlarmi+0x18c>
     bfc:	e0 2f       	mov	r30, r16
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	8c 0f       	add	r24, r28
     c0a:	9d 1f       	adc	r25, r29
     c0c:	e8 0f       	add	r30, r24
     c0e:	f9 1f       	adc	r31, r25
     c10:	40 81       	ld	r20, Z
     c12:	22 e4       	ldi	r18, 0x42	; 66
     c14:	37 e0       	ldi	r19, 0x07	; 7
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	88 ee       	ldi	r24, 0xE8	; 232
     c1a:	97 e0       	ldi	r25, 0x07	; 7
     c1c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     c20:	b2 c0       	rjmp	.+356    	; 0xd86 <_Z11changeAlarmi+0x2f0>
			if (key == 6) {lcd.LCD_String_xy(0,n[i],"6");break;}
     c22:	86 30       	cpi	r24, 0x06	; 6
     c24:	99 f4       	brne	.+38     	; 0xc4c <_Z11changeAlarmi+0x1b6>
     c26:	e0 2f       	mov	r30, r16
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	ee 0f       	add	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	a1 e0       	ldi	r26, 0x01	; 1
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	ac 0f       	add	r26, r28
     c34:	bd 1f       	adc	r27, r29
     c36:	ea 0f       	add	r30, r26
     c38:	fb 1f       	adc	r31, r27
     c3a:	40 81       	ld	r20, Z
     c3c:	24 e4       	ldi	r18, 0x44	; 68
     c3e:	37 e0       	ldi	r19, 0x07	; 7
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	88 ee       	ldi	r24, 0xE8	; 232
     c44:	97 e0       	ldi	r25, 0x07	; 7
     c46:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     c4a:	9d c0       	rjmp	.+314    	; 0xd86 <_Z11changeAlarmi+0x2f0>
			if (key == 7) {lcd.LCD_String_xy(0,n[i],"7");break;} 
     c4c:	87 30       	cpi	r24, 0x07	; 7
     c4e:	99 f4       	brne	.+38     	; 0xc76 <_Z11changeAlarmi+0x1e0>
     c50:	e0 2f       	mov	r30, r16
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	2c 0f       	add	r18, r28
     c5e:	3d 1f       	adc	r19, r29
     c60:	e2 0f       	add	r30, r18
     c62:	f3 1f       	adc	r31, r19
     c64:	40 81       	ld	r20, Z
     c66:	26 e4       	ldi	r18, 0x46	; 70
     c68:	37 e0       	ldi	r19, 0x07	; 7
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	88 ee       	ldi	r24, 0xE8	; 232
     c6e:	97 e0       	ldi	r25, 0x07	; 7
     c70:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     c74:	88 c0       	rjmp	.+272    	; 0xd86 <_Z11changeAlarmi+0x2f0>
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
     c76:	88 30       	cpi	r24, 0x08	; 8
     c78:	99 f4       	brne	.+38     	; 0xca0 <_Z11changeAlarmi+0x20a>
     c7a:	e0 2f       	mov	r30, r16
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	8c 0f       	add	r24, r28
     c88:	9d 1f       	adc	r25, r29
     c8a:	e8 0f       	add	r30, r24
     c8c:	f9 1f       	adc	r31, r25
     c8e:	40 81       	ld	r20, Z
     c90:	28 e4       	ldi	r18, 0x48	; 72
     c92:	37 e0       	ldi	r19, 0x07	; 7
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	88 ee       	ldi	r24, 0xE8	; 232
     c98:	97 e0       	ldi	r25, 0x07	; 7
     c9a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     c9e:	73 c0       	rjmp	.+230    	; 0xd86 <_Z11changeAlarmi+0x2f0>
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
     ca0:	89 30       	cpi	r24, 0x09	; 9
     ca2:	99 f4       	brne	.+38     	; 0xcca <_Z11changeAlarmi+0x234>
     ca4:	e0 2f       	mov	r30, r16
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	a1 e0       	ldi	r26, 0x01	; 1
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	ac 0f       	add	r26, r28
     cb2:	bd 1f       	adc	r27, r29
     cb4:	ea 0f       	add	r30, r26
     cb6:	fb 1f       	adc	r31, r27
     cb8:	40 81       	ld	r20, Z
     cba:	2a e4       	ldi	r18, 0x4A	; 74
     cbc:	37 e0       	ldi	r19, 0x07	; 7
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	88 ee       	ldi	r24, 0xE8	; 232
     cc2:	97 e0       	ldi	r25, 0x07	; 7
     cc4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     cc8:	5e c0       	rjmp	.+188    	; 0xd86 <_Z11changeAlarmi+0x2f0>
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
     cca:	8b 30       	cpi	r24, 0x0B	; 11
     ccc:	a1 f4       	brne	.+40     	; 0xcf6 <_Z11changeAlarmi+0x260>
     cce:	e0 2f       	mov	r30, r16
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	21 e0       	ldi	r18, 0x01	; 1
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	2c 0f       	add	r18, r28
     cdc:	3d 1f       	adc	r19, r29
     cde:	e2 0f       	add	r30, r18
     ce0:	f3 1f       	adc	r31, r19
     ce2:	40 81       	ld	r20, Z
     ce4:	26 e1       	ldi	r18, 0x16	; 22
     ce6:	37 e0       	ldi	r19, 0x07	; 7
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	88 ee       	ldi	r24, 0xE8	; 232
     cec:	97 e0       	ldi	r25, 0x07	; 7
     cee:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN11LCD_Display13LCD_String_xyEccPc>
     cf2:	10 e0       	ldi	r17, 0x00	; 0
     cf4:	48 c0       	rjmp	.+144    	; 0xd86 <_Z11changeAlarmi+0x2f0>
			if (!(PINC & (1<<Ok))){i=8; break;}
     cf6:	32 9b       	sbis	0x06, 2	; 6
     cf8:	45 c0       	rjmp	.+138    	; 0xd84 <_Z11changeAlarmi+0x2ee>
			if (!(PINC & (1<<Back))){
     cfa:	33 99       	sbic	0x06, 3	; 6
     cfc:	39 c0       	rjmp	.+114    	; 0xd70 <_Z11changeAlarmi+0x2da>
				//deleting alarm
				allAlarms[alPos][0] = 0;
     cfe:	f5 01       	movw	r30, r10
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	e7 55       	subi	r30, 0x57	; 87
     d0e:	f8 4f       	sbci	r31, 0xF8	; 248
     d10:	11 82       	std	Z+1, r1	; 0x01
     d12:	10 82       	st	Z, r1
				allAlarms[alPos][1] = 0;
     d14:	13 82       	std	Z+3, r1	; 0x03
     d16:	12 82       	std	Z+2, r1	; 0x02
				allAlarms[alPos][2] = 0;
     d18:	15 82       	std	Z+5, r1	; 0x05
     d1a:	14 82       	std	Z+4, r1	; 0x04
				allAlarms[alPos][3] = 0; //set alarm state as OFF
     d1c:	17 82       	std	Z+7, r1	; 0x07
     d1e:	16 82       	std	Z+6, r1	; 0x06

				allAlarmsMenu[alPos][7] = ' '; //problem here 
     d20:	f5 01       	movw	r30, r10
     d22:	e2 95       	swap	r30
     d24:	f2 95       	swap	r31
     d26:	f0 7f       	andi	r31, 0xF0	; 240
     d28:	fe 27       	eor	r31, r30
     d2a:	e0 7f       	andi	r30, 0xF0	; 240
     d2c:	fe 27       	eor	r31, r30
     d2e:	df 01       	movw	r26, r30
     d30:	a0 50       	subi	r26, 0x00	; 0
     d32:	be 4f       	sbci	r27, 0xFE	; 254
     d34:	80 e2       	ldi	r24, 0x20	; 32
     d36:	17 96       	adiw	r26, 0x07	; 7
     d38:	8c 93       	st	X, r24
     d3a:	17 97       	sbiw	r26, 0x07	; 7
				allAlarmsMenu[alPos][8] = ' '; 
     d3c:	18 96       	adiw	r26, 0x08	; 8
     d3e:	8c 93       	st	X, r24
     d40:	18 97       	sbiw	r26, 0x08	; 8
				allAlarmsMenu[alPos][9] = ' ';
     d42:	19 96       	adiw	r26, 0x09	; 9
     d44:	8c 93       	st	X, r24
     d46:	19 97       	sbiw	r26, 0x09	; 9
				allAlarmsMenu[alPos][10] = ' ';
     d48:	1a 96       	adiw	r26, 0x0a	; 10
     d4a:	8c 93       	st	X, r24
     d4c:	1a 97       	sbiw	r26, 0x0a	; 10
				allAlarmsMenu[alPos][11] = ' ';
     d4e:	1b 96       	adiw	r26, 0x0b	; 11
     d50:	8c 93       	st	X, r24
 
				alarmChangeList[alPos][0] = '0'; 
     d52:	e0 55       	subi	r30, 0x50	; 80
     d54:	fe 4f       	sbci	r31, 0xFE	; 254
     d56:	80 e3       	ldi	r24, 0x30	; 48
     d58:	80 83       	st	Z, r24
				alarmChangeList[alPos][1] = '0'; 
     d5a:	81 83       	std	Z+1, r24	; 0x01
				alarmChangeList[alPos][3] = '0'; 
     d5c:	83 83       	std	Z+3, r24	; 0x03
				alarmChangeList[alPos][4] = '0'; 
     d5e:	84 83       	std	Z+4, r24	; 0x04
				
				i = 8;
				delAlarm = true;
				set=3;
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	90 93 d8 07 	sts	0x07D8, r25	; 0x8007d8 <set+0x1>
     d68:	80 93 d7 07 	sts	0x07D7, r24	; 0x8007d7 <set>
				alarmChangeList[alPos][0] = '0'; 
				alarmChangeList[alPos][1] = '0'; 
				alarmChangeList[alPos][3] = '0'; 
				alarmChangeList[alPos][4] = '0'; 
				
				i = 8;
     d6c:	08 e0       	ldi	r16, 0x08	; 8
				delAlarm = true;
				set=3;
				break;	
     d6e:	0b c0       	rjmp	.+22     	; 0xd86 <_Z11changeAlarmi+0x2f0>
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	81 ee       	ldi	r24, 0xE1	; 225
     d74:	94 e0       	ldi	r25, 0x04	; 4
     d76:	31 50       	subi	r19, 0x01	; 1
     d78:	80 40       	sbci	r24, 0x00	; 0
     d7a:	90 40       	sbci	r25, 0x00	; 0
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <_Z11changeAlarmi+0x2e0>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <_Z11changeAlarmi+0x2ea>
     d80:	00 00       	nop
     d82:	e1 ce       	rjmp	.-574    	; 0xb46 <_Z11changeAlarmi+0xb0>
			if (key == 6) {lcd.LCD_String_xy(0,n[i],"6");break;}
			if (key == 7) {lcd.LCD_String_xy(0,n[i],"7");break;} 
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
			if (!(PINC & (1<<Ok))){i=8; break;}
     d84:	08 e0       	ldi	r16, 0x08	; 8
				break;	
			}
			_delay_ms(200);
		}

		if (i == 0){hr_al+=key*10;}
     d86:	01 11       	cpse	r16, r1
     d88:	0f c0       	rjmp	.+30     	; 0xda8 <_Z11changeAlarmi+0x312>
     d8a:	81 2f       	mov	r24, r17
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9c 01       	movw	r18, r24
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	e8 0e       	add	r14, r24
     da6:	f9 1e       	adc	r15, r25
		if (i == 1){hr_al+=key;}
     da8:	01 30       	cpi	r16, 0x01	; 1
     daa:	11 f4       	brne	.+4      	; 0xdb0 <_Z11changeAlarmi+0x31a>
     dac:	e1 0e       	add	r14, r17
     dae:	f1 1c       	adc	r15, r1
		if (i == 2){min_al+=key*10;}
     db0:	02 30       	cpi	r16, 0x02	; 2
     db2:	79 f4       	brne	.+30     	; 0xdd2 <_Z11changeAlarmi+0x33c>
     db4:	81 2f       	mov	r24, r17
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	9c 01       	movw	r18, r24
     dba:	22 0f       	add	r18, r18
     dbc:	33 1f       	adc	r19, r19
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	82 0f       	add	r24, r18
     dcc:	93 1f       	adc	r25, r19
     dce:	c8 0e       	add	r12, r24
     dd0:	d9 1e       	adc	r13, r25
		if (i == 3){min_al+=key;}
     dd2:	03 30       	cpi	r16, 0x03	; 3
     dd4:	11 f4       	brne	.+4      	; 0xdda <_Z11changeAlarmi+0x344>
     dd6:	c1 0e       	add	r12, r17
     dd8:	d1 1c       	adc	r13, r1
	
	lcd.LCD_Clear();
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     dda:	0f 5f       	subi	r16, 0xFF	; 255
     ddc:	b1 ce       	rjmp	.-670    	; 0xb40 <_Z11changeAlarmi+0xaa>
	}
	//updating the lists with new alarm Hour and Min
	if (~(delAlarm)){
		char* txtHr;
		char* txtMin;
		allAlarms[alPos][0] = hr_al;
     dde:	f5 01       	movw	r30, r10
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	e7 55       	subi	r30, 0x57	; 87
     dee:	f8 4f       	sbci	r31, 0xF8	; 248
     df0:	f1 82       	std	Z+1, r15	; 0x01
     df2:	e0 82       	st	Z, r14
		allAlarms[alPos][1] = min_al;
     df4:	d3 82       	std	Z+3, r13	; 0x03
     df6:	c2 82       	std	Z+2, r12	; 0x02
		allAlarms[alPos][2] = 1;
     df8:	88 24       	eor	r8, r8
     dfa:	83 94       	inc	r8
     dfc:	91 2c       	mov	r9, r1
     dfe:	95 82       	std	Z+5, r9	; 0x05
     e00:	84 82       	std	Z+4, r8	; 0x04
		allAlarms[alPos][3] = 1;
     e02:	97 82       	std	Z+7, r9	; 0x07
     e04:	86 82       	std	Z+6, r8	; 0x06

		txtHr = alarmclock.int_to_char(hr_al);
     e06:	b7 01       	movw	r22, r14
     e08:	85 ee       	ldi	r24, 0xE5	; 229
     e0a:	97 e0       	ldi	r25, 0x07	; 7
     e0c:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     e10:	fc 01       	movw	r30, r24
		allAlarmsMenu[alPos][7] = txtHr[0];
     e12:	80 81       	ld	r24, Z
     e14:	85 01       	movw	r16, r10
     e16:	02 95       	swap	r16
     e18:	12 95       	swap	r17
     e1a:	10 7f       	andi	r17, 0xF0	; 240
     e1c:	10 27       	eor	r17, r16
     e1e:	00 7f       	andi	r16, 0xF0	; 240
     e20:	10 27       	eor	r17, r16
     e22:	d8 01       	movw	r26, r16
     e24:	a0 50       	subi	r26, 0x00	; 0
     e26:	be 4f       	sbci	r27, 0xFE	; 254
     e28:	7d 01       	movw	r14, r26
     e2a:	17 96       	adiw	r26, 0x07	; 7
     e2c:	8c 93       	st	X, r24
     e2e:	17 97       	sbiw	r26, 0x07	; 7
		allAlarmsMenu[alPos][8] = txtHr[1]; 
     e30:	81 81       	ldd	r24, Z+1	; 0x01
     e32:	18 96       	adiw	r26, 0x08	; 8
     e34:	8c 93       	st	X, r24

		alarmChangeList[alPos][0] = txtHr[0];
     e36:	80 81       	ld	r24, Z
     e38:	00 55       	subi	r16, 0x50	; 80
     e3a:	1e 4f       	sbci	r17, 0xFE	; 254
     e3c:	d8 01       	movw	r26, r16
     e3e:	8c 93       	st	X, r24
		alarmChangeList[alPos][1] = txtHr[1];
     e40:	81 81       	ldd	r24, Z+1	; 0x01
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	8c 93       	st	X, r24

		txtMin = alarmclock.int_to_char(min_al);
     e46:	b6 01       	movw	r22, r12
     e48:	85 ee       	ldi	r24, 0xE5	; 229
     e4a:	97 e0       	ldi	r25, 0x07	; 7
     e4c:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     e50:	fc 01       	movw	r30, r24

		alarmChangeList[alPos][3] = txtMin[0];
     e52:	80 81       	ld	r24, Z
     e54:	d8 01       	movw	r26, r16
     e56:	13 96       	adiw	r26, 0x03	; 3
     e58:	8c 93       	st	X, r24
     e5a:	13 97       	sbiw	r26, 0x03	; 3
		alarmChangeList[alPos][4] = txtMin[1];	
     e5c:	81 81       	ldd	r24, Z+1	; 0x01
     e5e:	14 96       	adiw	r26, 0x04	; 4
     e60:	8c 93       	st	X, r24

		allAlarmsMenu[alPos][10] = txtMin[0];
     e62:	80 81       	ld	r24, Z
     e64:	d7 01       	movw	r26, r14
     e66:	1a 96       	adiw	r26, 0x0a	; 10
     e68:	8c 93       	st	X, r24
     e6a:	1a 97       	sbiw	r26, 0x0a	; 10
		allAlarmsMenu[alPos][11] = txtMin[1];
     e6c:	81 81       	ldd	r24, Z+1	; 0x01
     e6e:	1b 96       	adiw	r26, 0x0b	; 11
     e70:	8c 93       	st	X, r24
		alarmCount =+ 1;
     e72:	90 92 a8 07 	sts	0x07A8, r9	; 0x8007a8 <alarmCount+0x1>
     e76:	80 92 a7 07 	sts	0x07A7, r8	; 0x8007a7 <alarmCount>
		set = 3;
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	90 93 d8 07 	sts	0x07D8, r25	; 0x8007d8 <set+0x1>
     e82:	80 93 d7 07 	sts	0x07D7, r24	; 0x8007d7 <set>
	} 
}
     e86:	2c 96       	adiw	r28, 0x0c	; 12
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	bf 90       	pop	r11
     ea4:	af 90       	pop	r10
     ea6:	9f 90       	pop	r9
     ea8:	8f 90       	pop	r8
     eaa:	08 95       	ret

00000eac <_Z7displayv>:
	}
}

void display(){

	if (set == 1){
     eac:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <set>
     eb0:	90 91 d8 07 	lds	r25, 0x07D8	; 0x8007d8 <set+0x1>
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	91 05       	cpc	r25, r1
     eb8:	b9 f5       	brne	.+110    	; 0xf28 <_Z7displayv+0x7c>
		lcd.LCD_Clear();
     eba:	88 ee       	ldi	r24, 0xE8	; 232
     ebc:	97 e0       	ldi	r25, 0x07	; 7
     ebe:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(Menu[currentscreenset1][0]);        //Write string on 1st line of LCD
     ec2:	60 91 d5 07 	lds	r22, 0x07D5	; 0x8007d5 <currentscreenset1>
     ec6:	70 91 d6 07 	lds	r23, 0x07D6	; 0x8007d6 <currentscreenset1+0x1>
     eca:	66 0f       	add	r22, r22
     ecc:	77 1f       	adc	r23, r23
     ece:	62 95       	swap	r22
     ed0:	72 95       	swap	r23
     ed2:	70 7f       	andi	r23, 0xF0	; 240
     ed4:	76 27       	eor	r23, r22
     ed6:	60 7f       	andi	r22, 0xF0	; 240
     ed8:	76 27       	eor	r23, r22
     eda:	60 5b       	subi	r22, 0xB0	; 176
     edc:	7d 4f       	sbci	r23, 0xFD	; 253
     ede:	88 ee       	ldi	r24, 0xE8	; 232
     ee0:	97 e0       	ldi	r25, 0x07	; 7
     ee2:	0e 94 31 04 	call	0x862	; 0x862 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        //Go to 2nd line
     ee6:	60 ec       	ldi	r22, 0xC0	; 192
     ee8:	88 ee       	ldi	r24, 0xE8	; 232
     eea:	97 e0       	ldi	r25, 0x07	; 7
     eec:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(Menu[currentscreenset1][1]);
     ef0:	60 91 d5 07 	lds	r22, 0x07D5	; 0x8007d5 <currentscreenset1>
     ef4:	70 91 d6 07 	lds	r23, 0x07D6	; 0x8007d6 <currentscreenset1+0x1>
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	62 95       	swap	r22
     efe:	72 95       	swap	r23
     f00:	70 7f       	andi	r23, 0xF0	; 240
     f02:	76 27       	eor	r23, r22
     f04:	60 7f       	andi	r22, 0xF0	; 240
     f06:	76 27       	eor	r23, r22
     f08:	60 5a       	subi	r22, 0xA0	; 160
     f0a:	7d 4f       	sbci	r23, 0xFD	; 253
     f0c:	88 ee       	ldi	r24, 0xE8	; 232
     f0e:	97 e0       	ldi	r25, 0x07	; 7
     f10:	0e 94 31 04 	call	0x862	; 0x862 <_ZN11LCD_Display10LCD_StringEPc>
     f14:	2f ef       	ldi	r18, 0xFF	; 255
     f16:	84 e3       	ldi	r24, 0x34	; 52
     f18:	9c e0       	ldi	r25, 0x0C	; 12
     f1a:	21 50       	subi	r18, 0x01	; 1
     f1c:	80 40       	sbci	r24, 0x00	; 0
     f1e:	90 40       	sbci	r25, 0x00	; 0
     f20:	e1 f7       	brne	.-8      	; 0xf1a <_Z7displayv+0x6e>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <_Z7displayv+0x78>
     f24:	00 00       	nop
     f26:	08 95       	ret
		_delay_ms(500);
	}
	
	else if ((set == 2) & (currentscreenset1 == 0)){
     f28:	21 e0       	ldi	r18, 0x01	; 1
     f2a:	82 30       	cpi	r24, 0x02	; 2
     f2c:	91 05       	cpc	r25, r1
     f2e:	09 f0       	breq	.+2      	; 0xf32 <_Z7displayv+0x86>
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	40 91 d5 07 	lds	r20, 0x07D5	; 0x8007d5 <currentscreenset1>
     f36:	50 91 d6 07 	lds	r21, 0x07D6	; 0x8007d6 <currentscreenset1+0x1>
     f3a:	31 e0       	ldi	r19, 0x01	; 1
     f3c:	41 15       	cp	r20, r1
     f3e:	51 05       	cpc	r21, r1
     f40:	09 f0       	breq	.+2      	; 0xf44 <_Z7displayv+0x98>
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	22 23       	and	r18, r18
     f46:	59 f1       	breq	.+86     	; 0xf9e <_Z7displayv+0xf2>
     f48:	33 23       	and	r19, r19
     f4a:	49 f1       	breq	.+82     	; 0xf9e <_Z7displayv+0xf2>
		//All alarms menu
		lcd.LCD_Clear();
     f4c:	88 ee       	ldi	r24, 0xE8	; 232
     f4e:	97 e0       	ldi	r25, 0x07	; 7
     f50:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(allAlarmsMenu[currentscreenset21]);  
     f54:	60 91 d3 07 	lds	r22, 0x07D3	; 0x8007d3 <currentscreenset21>
     f58:	70 91 d4 07 	lds	r23, 0x07D4	; 0x8007d4 <currentscreenset21+0x1>
     f5c:	62 95       	swap	r22
     f5e:	72 95       	swap	r23
     f60:	70 7f       	andi	r23, 0xF0	; 240
     f62:	76 27       	eor	r23, r22
     f64:	60 7f       	andi	r22, 0xF0	; 240
     f66:	76 27       	eor	r23, r22
     f68:	60 50       	subi	r22, 0x00	; 0
     f6a:	7e 4f       	sbci	r23, 0xFE	; 254
     f6c:	88 ee       	ldi	r24, 0xE8	; 232
     f6e:	97 e0       	ldi	r25, 0x07	; 7
     f70:	0e 94 31 04 	call	0x862	; 0x862 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        
     f74:	60 ec       	ldi	r22, 0xC0	; 192
     f76:	88 ee       	ldi	r24, 0xE8	; 232
     f78:	97 e0       	ldi	r25, 0x07	; 7
     f7a:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String("CHANGE     BACK");
     f7e:	6a e8       	ldi	r22, 0x8A	; 138
     f80:	77 e0       	ldi	r23, 0x07	; 7
     f82:	88 ee       	ldi	r24, 0xE8	; 232
     f84:	97 e0       	ldi	r25, 0x07	; 7
     f86:	0e 94 31 04 	call	0x862	; 0x862 <_ZN11LCD_Display10LCD_StringEPc>
     f8a:	2f ef       	ldi	r18, 0xFF	; 255
     f8c:	84 e3       	ldi	r24, 0x34	; 52
     f8e:	9c e0       	ldi	r25, 0x0C	; 12
     f90:	21 50       	subi	r18, 0x01	; 1
     f92:	80 40       	sbci	r24, 0x00	; 0
     f94:	90 40       	sbci	r25, 0x00	; 0
     f96:	e1 f7       	brne	.-8      	; 0xf90 <_Z7displayv+0xe4>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <_Z7displayv+0xee>
     f9a:	00 00       	nop
     f9c:	08 95       	ret

		_delay_ms(500);
	}
	else if ((set==3) & (currentscreenset1==0) ){//& (currentscreenset21 == 0 or 1 or 2 or 3 or 4)){
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	03 97       	sbiw	r24, 0x03	; 3
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <_Z7displayv+0xfa>
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	66 23       	and	r22, r22
     fa8:	b1 f0       	breq	.+44     	; 0xfd6 <_Z7displayv+0x12a>
     faa:	33 23       	and	r19, r19
     fac:	a1 f0       	breq	.+40     	; 0xfd6 <_Z7displayv+0x12a>
		lcd.LCD_Clear();
     fae:	88 ee       	ldi	r24, 0xE8	; 232
     fb0:	97 e0       	ldi	r25, 0x07	; 7
     fb2:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN11LCD_Display9LCD_ClearEv>
		changeAlarm(currentscreenset21);
     fb6:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <currentscreenset21>
     fba:	90 91 d4 07 	lds	r25, 0x07D4	; 0x8007d4 <currentscreenset21+0x1>
     fbe:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z11changeAlarmi>
     fc2:	2f ef       	ldi	r18, 0xFF	; 255
     fc4:	84 e3       	ldi	r24, 0x34	; 52
     fc6:	9c e0       	ldi	r25, 0x0C	; 12
     fc8:	21 50       	subi	r18, 0x01	; 1
     fca:	80 40       	sbci	r24, 0x00	; 0
     fcc:	90 40       	sbci	r25, 0x00	; 0
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <_Z7displayv+0x11c>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <_Z7displayv+0x126>
     fd2:	00 00       	nop
     fd4:	08 95       	ret
		_delay_ms(500);
	}
	else if ((set == 2) & (currentscreenset1 == 1)){
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	41 30       	cpi	r20, 0x01	; 1
     fda:	51 05       	cpc	r21, r1
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <_Z7displayv+0x134>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	88 23       	and	r24, r24
     fe2:	c1 f0       	breq	.+48     	; 0x1014 <_Z7displayv+0x168>
     fe4:	22 23       	and	r18, r18
     fe6:	b1 f0       	breq	.+44     	; 0x1014 <_Z7displayv+0x168>
		bool go;
		go = alarmclock.setTimetoRTC();
     fe8:	85 ee       	ldi	r24, 0xE5	; 229
     fea:	97 e0       	ldi	r25, 0x07	; 7
     fec:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN10AlarmClock12setTimetoRTCEv>
		if (go){set=1;}
     ff0:	88 23       	and	r24, r24
     ff2:	31 f0       	breq	.+12     	; 0x1000 <_Z7displayv+0x154>
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	90 93 d8 07 	sts	0x07D8, r25	; 0x8007d8 <set+0x1>
     ffc:	80 93 d7 07 	sts	0x07D7, r24	; 0x8007d7 <set>
    1000:	2f ef       	ldi	r18, 0xFF	; 255
    1002:	84 e3       	ldi	r24, 0x34	; 52
    1004:	9c e0       	ldi	r25, 0x0C	; 12
    1006:	21 50       	subi	r18, 0x01	; 1
    1008:	80 40       	sbci	r24, 0x00	; 0
    100a:	90 40       	sbci	r25, 0x00	; 0
    100c:	e1 f7       	brne	.-8      	; 0x1006 <_Z7displayv+0x15a>
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <_Z7displayv+0x164>
    1010:	00 00       	nop
    1012:	08 95       	ret
		_delay_ms(500);
	}
	else if ((set == 2) & (currentscreenset1 == 2)){
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	42 30       	cpi	r20, 0x02	; 2
    1018:	51 05       	cpc	r21, r1
    101a:	09 f0       	breq	.+2      	; 0x101e <_Z7displayv+0x172>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	88 23       	and	r24, r24
    1020:	09 f4       	brne	.+2      	; 0x1024 <_Z7displayv+0x178>
    1022:	6d c0       	rjmp	.+218    	; 0x10fe <_Z7displayv+0x252>
    1024:	22 23       	and	r18, r18
    1026:	09 f4       	brne	.+2      	; 0x102a <_Z7displayv+0x17e>
    1028:	6a c0       	rjmp	.+212    	; 0x10fe <_Z7displayv+0x252>
		lcd.LCD_Clear();
    102a:	88 ee       	ldi	r24, 0xE8	; 232
    102c:	97 e0       	ldi	r25, 0x07	; 7
    102e:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(alarmtone[currentscreenset23][0]);                //Write string on 1st line of LCD
    1032:	60 91 d1 07 	lds	r22, 0x07D1	; 0x8007d1 <currentscreenset23>
    1036:	70 91 d2 07 	lds	r23, 0x07D2	; 0x8007d2 <currentscreenset23+0x1>
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	62 95       	swap	r22
    1040:	72 95       	swap	r23
    1042:	70 7f       	andi	r23, 0xF0	; 240
    1044:	76 27       	eor	r23, r22
    1046:	60 7f       	andi	r22, 0xF0	; 240
    1048:	76 27       	eor	r23, r22
    104a:	60 5f       	subi	r22, 0xF0	; 240
    104c:	7e 4f       	sbci	r23, 0xFE	; 254
    104e:	88 ee       	ldi	r24, 0xE8	; 232
    1050:	97 e0       	ldi	r25, 0x07	; 7
    1052:	0e 94 31 04 	call	0x862	; 0x862 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        //Go to 2nd line
    1056:	60 ec       	ldi	r22, 0xC0	; 192
    1058:	88 ee       	ldi	r24, 0xE8	; 232
    105a:	97 e0       	ldi	r25, 0x07	; 7
    105c:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(alarmtone[currentscreenset23][1]);
    1060:	60 91 d1 07 	lds	r22, 0x07D1	; 0x8007d1 <currentscreenset23>
    1064:	70 91 d2 07 	lds	r23, 0x07D2	; 0x8007d2 <currentscreenset23+0x1>
    1068:	66 0f       	add	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	62 95       	swap	r22
    106e:	72 95       	swap	r23
    1070:	70 7f       	andi	r23, 0xF0	; 240
    1072:	76 27       	eor	r23, r22
    1074:	60 7f       	andi	r22, 0xF0	; 240
    1076:	76 27       	eor	r23, r22
    1078:	60 5e       	subi	r22, 0xE0	; 224
    107a:	7e 4f       	sbci	r23, 0xFE	; 254
    107c:	88 ee       	ldi	r24, 0xE8	; 232
    107e:	97 e0       	ldi	r25, 0x07	; 7
    1080:	0e 94 31 04 	call	0x862	; 0x862 <_ZN11LCD_Display10LCD_StringEPc>
    1084:	2f ef       	ldi	r18, 0xFF	; 255
    1086:	89 e6       	ldi	r24, 0x69	; 105
    1088:	98 e1       	ldi	r25, 0x18	; 24
    108a:	21 50       	subi	r18, 0x01	; 1
    108c:	80 40       	sbci	r24, 0x00	; 0
    108e:	90 40       	sbci	r25, 0x00	; 0
    1090:	e1 f7       	brne	.-8      	; 0x108a <_Z7displayv+0x1de>
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <_Z7displayv+0x1e8>
    1094:	00 00       	nop
		_delay_ms(1000);
		if (currentscreenset23==0){
    1096:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <currentscreenset23>
    109a:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <currentscreenset23+0x1>
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	39 f4       	brne	.+14     	; 0x10b0 <_Z7displayv+0x204>
			music.tone(0);
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	89 ed       	ldi	r24, 0xD9	; 217
    10a8:	97 e0       	ldi	r25, 0x07	; 7
    10aa:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN15music_notations4toneEi>
    10ae:	08 95       	ret
		}
		else if (currentscreenset23==1){
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	91 05       	cpc	r25, r1
    10b4:	39 f4       	brne	.+14     	; 0x10c4 <_Z7displayv+0x218>
			music.tone(1);
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	89 ed       	ldi	r24, 0xD9	; 217
    10bc:	97 e0       	ldi	r25, 0x07	; 7
    10be:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN15music_notations4toneEi>
    10c2:	08 95       	ret
		}
		else if (currentscreenset23==2){
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	91 05       	cpc	r25, r1
    10c8:	39 f4       	brne	.+14     	; 0x10d8 <_Z7displayv+0x22c>
			music.tone(2);
    10ca:	62 e0       	ldi	r22, 0x02	; 2
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	89 ed       	ldi	r24, 0xD9	; 217
    10d0:	97 e0       	ldi	r25, 0x07	; 7
    10d2:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN15music_notations4toneEi>
    10d6:	08 95       	ret
		}
		else if (currentscreenset23==3){
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	39 f4       	brne	.+14     	; 0x10ec <_Z7displayv+0x240>
			music.tone(3);
    10de:	63 e0       	ldi	r22, 0x03	; 3
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	89 ed       	ldi	r24, 0xD9	; 217
    10e4:	97 e0       	ldi	r25, 0x07	; 7
    10e6:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN15music_notations4toneEi>
    10ea:	08 95       	ret
		}
		else if (currentscreenset23==4){
    10ec:	04 97       	sbiw	r24, 0x04	; 4
    10ee:	71 f5       	brne	.+92     	; 0x114c <_Z7displayv+0x2a0>
			music.tone(4);
    10f0:	64 e0       	ldi	r22, 0x04	; 4
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	89 ed       	ldi	r24, 0xD9	; 217
    10f6:	97 e0       	ldi	r25, 0x07	; 7
    10f8:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN15music_notations4toneEi>
    10fc:	08 95       	ret
		}
	}
	else if ((set == 2) & (currentscreenset1 == 3)){
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	43 30       	cpi	r20, 0x03	; 3
    1102:	51 05       	cpc	r21, r1
    1104:	09 f0       	breq	.+2      	; 0x1108 <_Z7displayv+0x25c>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	88 23       	and	r24, r24
    110a:	01 f1       	breq	.+64     	; 0x114c <_Z7displayv+0x2a0>
    110c:	22 23       	and	r18, r18
    110e:	f1 f0       	breq	.+60     	; 0x114c <_Z7displayv+0x2a0>
		lcd.LCD_Clear();
    1110:	88 ee       	ldi	r24, 0xE8	; 232
    1112:	97 e0       	ldi	r25, 0x07	; 7
    1114:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(reset[0]);                //Write string on 1st line of LCD
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	71 e0       	ldi	r23, 0x01	; 1
    111c:	88 ee       	ldi	r24, 0xE8	; 232
    111e:	97 e0       	ldi	r25, 0x07	; 7
    1120:	0e 94 31 04 	call	0x862	; 0x862 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);              //Go to 2nd line
    1124:	60 ec       	ldi	r22, 0xC0	; 192
    1126:	88 ee       	ldi	r24, 0xE8	; 232
    1128:	97 e0       	ldi	r25, 0x07	; 7
    112a:	0e 94 93 03 	call	0x726	; 0x726 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(reset[0]);
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	71 e0       	ldi	r23, 0x01	; 1
    1132:	88 ee       	ldi	r24, 0xE8	; 232
    1134:	97 e0       	ldi	r25, 0x07	; 7
    1136:	0e 94 31 04 	call	0x862	; 0x862 <_ZN11LCD_Display10LCD_StringEPc>
    113a:	2f ef       	ldi	r18, 0xFF	; 255
    113c:	84 e3       	ldi	r24, 0x34	; 52
    113e:	9c e0       	ldi	r25, 0x0C	; 12
    1140:	21 50       	subi	r18, 0x01	; 1
    1142:	80 40       	sbci	r24, 0x00	; 0
    1144:	90 40       	sbci	r25, 0x00	; 0
    1146:	e1 f7       	brne	.-8      	; 0x1140 <_Z7displayv+0x294>
    1148:	00 c0       	rjmp	.+0      	; 0x114a <_Z7displayv+0x29e>
    114a:	00 00       	nop
    114c:	08 95       	ret

0000114e <_Z5upbtnv>:
		_delay_ms(500);
	}
}

void upbtn(){
	if (!(PINC &(1<<Up))){
    114e:	30 99       	sbic	0x06, 0	; 6
    1150:	91 c0       	rjmp	.+290    	; 0x1274 <_Z5upbtnv+0x126>
    1152:	2f e7       	ldi	r18, 0x7F	; 127
    1154:	88 e3       	ldi	r24, 0x38	; 56
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	21 50       	subi	r18, 0x01	; 1
    115a:	80 40       	sbci	r24, 0x00	; 0
    115c:	90 40       	sbci	r25, 0x00	; 0
    115e:	e1 f7       	brne	.-8      	; 0x1158 <_Z5upbtnv+0xa>
    1160:	00 c0       	rjmp	.+0      	; 0x1162 <_Z5upbtnv+0x14>
    1162:	00 00       	nop
		_delay_ms(50);
		if ((set == 1) & (currentscreenset1==0)){
    1164:	40 91 d7 07 	lds	r20, 0x07D7	; 0x8007d7 <set>
    1168:	50 91 d8 07 	lds	r21, 0x07D8	; 0x8007d8 <set+0x1>
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	41 30       	cpi	r20, 0x01	; 1
    1170:	51 05       	cpc	r21, r1
    1172:	09 f0       	breq	.+2      	; 0x1176 <_Z5upbtnv+0x28>
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	20 91 d5 07 	lds	r18, 0x07D5	; 0x8007d5 <currentscreenset1>
    117a:	30 91 d6 07 	lds	r19, 0x07D6	; 0x8007d6 <currentscreenset1+0x1>
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	21 15       	cp	r18, r1
    1182:	31 05       	cpc	r19, r1
    1184:	09 f0       	breq	.+2      	; 0x1188 <_Z5upbtnv+0x3a>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	99 23       	and	r25, r25
    118a:	59 f0       	breq	.+22     	; 0x11a2 <_Z5upbtnv+0x54>
    118c:	88 23       	and	r24, r24
    118e:	49 f0       	breq	.+18     	; 0x11a2 <_Z5upbtnv+0x54>
			currentscreenset1=numofscreens1-1;
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	90 93 d6 07 	sts	0x07D6, r25	; 0x8007d6 <currentscreenset1+0x1>
    1198:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <currentscreenset1>
			display();
    119c:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    11a0:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 0)){
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	21 15       	cp	r18, r1
    11a6:	31 05       	cpc	r19, r1
    11a8:	09 f4       	brne	.+2      	; 0x11ac <_Z5upbtnv+0x5e>
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	66 23       	and	r22, r22
    11ae:	59 f0       	breq	.+22     	; 0x11c6 <_Z5upbtnv+0x78>
    11b0:	99 23       	and	r25, r25
    11b2:	49 f0       	breq	.+18     	; 0x11c6 <_Z5upbtnv+0x78>
			currentscreenset1 -= 1;
    11b4:	21 50       	subi	r18, 0x01	; 1
    11b6:	31 09       	sbc	r19, r1
    11b8:	30 93 d6 07 	sts	0x07D6, r19	; 0x8007d6 <currentscreenset1+0x1>
    11bc:	20 93 d5 07 	sts	0x07D5, r18	; 0x8007d5 <currentscreenset1>
			display();
    11c0:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    11c4:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==0) & (currentscreenset21 == 0)){
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	42 30       	cpi	r20, 0x02	; 2
    11ca:	51 05       	cpc	r21, r1
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <_Z5upbtnv+0x82>
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	89 23       	and	r24, r25
    11d2:	40 91 d3 07 	lds	r20, 0x07D3	; 0x8007d3 <currentscreenset21>
    11d6:	50 91 d4 07 	lds	r21, 0x07D4	; 0x8007d4 <currentscreenset21+0x1>
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	41 15       	cp	r20, r1
    11de:	51 05       	cpc	r21, r1
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <_Z5upbtnv+0x96>
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	88 23       	and	r24, r24
    11e6:	49 f0       	breq	.+18     	; 0x11fa <_Z5upbtnv+0xac>
    11e8:	66 23       	and	r22, r22
    11ea:	39 f0       	breq	.+14     	; 0x11fa <_Z5upbtnv+0xac>
			currentscreenset21=numofscreens21-1;
    11ec:	10 92 d4 07 	sts	0x07D4, r1	; 0x8007d4 <currentscreenset21+0x1>
    11f0:	10 92 d3 07 	sts	0x07D3, r1	; 0x8007d3 <currentscreenset21>
			display();
    11f4:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    11f8:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==0) & (currentscreenset21 != 0)){
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	41 15       	cp	r20, r1
    11fe:	51 05       	cpc	r21, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <_Z5upbtnv+0xb6>
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	88 23       	and	r24, r24
    1206:	59 f0       	breq	.+22     	; 0x121e <_Z5upbtnv+0xd0>
    1208:	66 23       	and	r22, r22
    120a:	49 f0       	breq	.+18     	; 0x121e <_Z5upbtnv+0xd0>
			currentscreenset21 -= 1;
    120c:	41 50       	subi	r20, 0x01	; 1
    120e:	51 09       	sbc	r21, r1
    1210:	50 93 d4 07 	sts	0x07D4, r21	; 0x8007d4 <currentscreenset21+0x1>
    1214:	40 93 d3 07 	sts	0x07D3, r20	; 0x8007d3 <currentscreenset21>
			display();
    1218:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    121c:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==2) & (currentscreenset23 == 0)){
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	09 f0       	breq	.+2      	; 0x1228 <_Z5upbtnv+0xda>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	98 23       	and	r25, r24
    122a:	20 91 d1 07 	lds	r18, 0x07D1	; 0x8007d1 <currentscreenset23>
    122e:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <currentscreenset23+0x1>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	21 15       	cp	r18, r1
    1236:	31 05       	cpc	r19, r1
    1238:	09 f0       	breq	.+2      	; 0x123c <_Z5upbtnv+0xee>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	99 23       	and	r25, r25
    123e:	49 f0       	breq	.+18     	; 0x1252 <_Z5upbtnv+0x104>
    1240:	88 23       	and	r24, r24
    1242:	39 f0       	breq	.+14     	; 0x1252 <_Z5upbtnv+0x104>
			currentscreenset23=numofscreens21-1;
    1244:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <currentscreenset23+0x1>
    1248:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <currentscreenset23>
			display();
    124c:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    1250:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==2) & (currentscreenset23 != 0)){
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	21 15       	cp	r18, r1
    1256:	31 05       	cpc	r19, r1
    1258:	09 f4       	brne	.+2      	; 0x125c <_Z5upbtnv+0x10e>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	99 23       	and	r25, r25
    125e:	51 f0       	breq	.+20     	; 0x1274 <_Z5upbtnv+0x126>
    1260:	88 23       	and	r24, r24
    1262:	41 f0       	breq	.+16     	; 0x1274 <_Z5upbtnv+0x126>
			currentscreenset23 -= 1;
    1264:	21 50       	subi	r18, 0x01	; 1
    1266:	31 09       	sbc	r19, r1
    1268:	30 93 d2 07 	sts	0x07D2, r19	; 0x8007d2 <currentscreenset23+0x1>
    126c:	20 93 d1 07 	sts	0x07D1, r18	; 0x8007d1 <currentscreenset23>
			display();
    1270:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    1274:	08 95       	ret

00001276 <_Z6dwnbtnv>:
		}
	}
}

void dwnbtn(){
	if (!(PINC &(1<<Down))){
    1276:	31 99       	sbic	0x06, 1	; 6
    1278:	96 c0       	rjmp	.+300    	; 0x13a6 <_Z6dwnbtnv+0x130>
    127a:	2f e7       	ldi	r18, 0x7F	; 127
    127c:	88 e3       	ldi	r24, 0x38	; 56
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	21 50       	subi	r18, 0x01	; 1
    1282:	80 40       	sbci	r24, 0x00	; 0
    1284:	90 40       	sbci	r25, 0x00	; 0
    1286:	e1 f7       	brne	.-8      	; 0x1280 <_Z6dwnbtnv+0xa>
    1288:	00 c0       	rjmp	.+0      	; 0x128a <_Z6dwnbtnv+0x14>
    128a:	00 00       	nop
		_delay_ms(50);
		if ((set == 1) & (currentscreenset1==3)){
    128c:	40 91 d7 07 	lds	r20, 0x07D7	; 0x8007d7 <set>
    1290:	50 91 d8 07 	lds	r21, 0x07D8	; 0x8007d8 <set+0x1>
    1294:	21 e0       	ldi	r18, 0x01	; 1
    1296:	41 30       	cpi	r20, 0x01	; 1
    1298:	51 05       	cpc	r21, r1
    129a:	09 f0       	breq	.+2      	; 0x129e <_Z6dwnbtnv+0x28>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <currentscreenset1>
    12a2:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <currentscreenset1+0x1>
    12a6:	31 e0       	ldi	r19, 0x01	; 1
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <_Z6dwnbtnv+0x3a>
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	33 23       	and	r19, r19
    12b2:	49 f0       	breq	.+18     	; 0x12c6 <_Z6dwnbtnv+0x50>
    12b4:	22 23       	and	r18, r18
    12b6:	39 f0       	breq	.+14     	; 0x12c6 <_Z6dwnbtnv+0x50>
			currentscreenset1=0;
    12b8:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <currentscreenset1+0x1>
    12bc:	10 92 d5 07 	sts	0x07D5, r1	; 0x8007d5 <currentscreenset1>
			display();
    12c0:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    12c4:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 3)){
    12c6:	31 e0       	ldi	r19, 0x01	; 1
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <_Z6dwnbtnv+0x5a>
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	33 23       	and	r19, r19
    12d2:	a1 f0       	breq	.+40     	; 0x12fc <_Z6dwnbtnv+0x86>
    12d4:	22 23       	and	r18, r18
    12d6:	91 f0       	breq	.+36     	; 0x12fc <_Z6dwnbtnv+0x86>
    12d8:	8f e1       	ldi	r24, 0x1F	; 31
    12da:	9e e4       	ldi	r25, 0x4E	; 78
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <_Z6dwnbtnv+0x66>
    12e0:	00 c0       	rjmp	.+0      	; 0x12e2 <_Z6dwnbtnv+0x6c>
    12e2:	00 00       	nop
			_delay_ms(10);
			currentscreenset1 += 1;
    12e4:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <currentscreenset1>
    12e8:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <currentscreenset1+0x1>
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	90 93 d6 07 	sts	0x07D6, r25	; 0x8007d6 <currentscreenset1+0x1>
    12f2:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <currentscreenset1>
			display();
    12f6:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    12fa:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==0) & (currentscreenset21 == 4)){
    12fc:	31 e0       	ldi	r19, 0x01	; 1
    12fe:	42 30       	cpi	r20, 0x02	; 2
    1300:	51 05       	cpc	r21, r1
    1302:	09 f0       	breq	.+2      	; 0x1306 <_Z6dwnbtnv+0x90>
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	09 f0       	breq	.+2      	; 0x130e <_Z6dwnbtnv+0x98>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	23 23       	and	r18, r19
    1310:	60 91 d3 07 	lds	r22, 0x07D3	; 0x8007d3 <currentscreenset21>
    1314:	70 91 d4 07 	lds	r23, 0x07D4	; 0x8007d4 <currentscreenset21+0x1>
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	64 30       	cpi	r22, 0x04	; 4
    131c:	71 05       	cpc	r23, r1
    131e:	09 f0       	breq	.+2      	; 0x1322 <_Z6dwnbtnv+0xac>
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	22 23       	and	r18, r18
    1324:	49 f0       	breq	.+18     	; 0x1338 <_Z6dwnbtnv+0xc2>
    1326:	44 23       	and	r20, r20
    1328:	39 f0       	breq	.+14     	; 0x1338 <_Z6dwnbtnv+0xc2>
			currentscreenset21=0;
    132a:	10 92 d4 07 	sts	0x07D4, r1	; 0x8007d4 <currentscreenset21+0x1>
    132e:	10 92 d3 07 	sts	0x07D3, r1	; 0x8007d3 <currentscreenset21>
			display();
    1332:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    1336:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==0) & (currentscreenset23 != 4)){
    1338:	40 91 d1 07 	lds	r20, 0x07D1	; 0x8007d1 <currentscreenset23>
    133c:	50 91 d2 07 	lds	r21, 0x07D2	; 0x8007d2 <currentscreenset23+0x1>
    1340:	e1 e0       	ldi	r30, 0x01	; 1
    1342:	44 30       	cpi	r20, 0x04	; 4
    1344:	51 05       	cpc	r21, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <_Z6dwnbtnv+0xd4>
    1348:	e0 e0       	ldi	r30, 0x00	; 0
    134a:	22 23       	and	r18, r18
    134c:	59 f0       	breq	.+22     	; 0x1364 <_Z6dwnbtnv+0xee>
    134e:	ee 23       	and	r30, r30
    1350:	49 f0       	breq	.+18     	; 0x1364 <_Z6dwnbtnv+0xee>
			currentscreenset21 += 1;
    1352:	6f 5f       	subi	r22, 0xFF	; 255
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	70 93 d4 07 	sts	0x07D4, r23	; 0x8007d4 <currentscreenset21+0x1>
    135a:	60 93 d3 07 	sts	0x07D3, r22	; 0x8007d3 <currentscreenset21>
			display();
    135e:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    1362:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==2) & (currentscreenset23 == 4)){
    1364:	21 e0       	ldi	r18, 0x01	; 1
    1366:	02 97       	sbiw	r24, 0x02	; 2
    1368:	09 f0       	breq	.+2      	; 0x136c <_Z6dwnbtnv+0xf6>
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	32 23       	and	r19, r18
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	44 30       	cpi	r20, 0x04	; 4
    1372:	51 05       	cpc	r21, r1
    1374:	09 f0       	breq	.+2      	; 0x1378 <_Z6dwnbtnv+0x102>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	33 23       	and	r19, r19
    137a:	49 f0       	breq	.+18     	; 0x138e <_Z6dwnbtnv+0x118>
    137c:	88 23       	and	r24, r24
    137e:	39 f0       	breq	.+14     	; 0x138e <_Z6dwnbtnv+0x118>
			currentscreenset23 = 0;
    1380:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <currentscreenset23+0x1>
    1384:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <currentscreenset23>
			display();
    1388:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    138c:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==2) & (currentscreenset23 != 4)){
    138e:	ee 23       	and	r30, r30
    1390:	51 f0       	breq	.+20     	; 0x13a6 <_Z6dwnbtnv+0x130>
    1392:	33 23       	and	r19, r19
    1394:	41 f0       	breq	.+16     	; 0x13a6 <_Z6dwnbtnv+0x130>
			currentscreenset23 += 1;
    1396:	4f 5f       	subi	r20, 0xFF	; 255
    1398:	5f 4f       	sbci	r21, 0xFF	; 255
    139a:	50 93 d2 07 	sts	0x07D2, r21	; 0x8007d2 <currentscreenset23+0x1>
    139e:	40 93 d1 07 	sts	0x07D1, r20	; 0x8007d1 <currentscreenset23>
			display();
    13a2:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    13a6:	08 95       	ret

000013a8 <_Z5okbtnv>:
	}
}

void okbtn(){
	
	if (!(PINC & (1<<Ok))){	
    13a8:	32 99       	sbic	0x06, 2	; 6
    13aa:	1e c0       	rjmp	.+60     	; 0x13e8 <_Z5okbtnv+0x40>
    13ac:	2f ef       	ldi	r18, 0xFF	; 255
    13ae:	81 ee       	ldi	r24, 0xE1	; 225
    13b0:	94 e0       	ldi	r25, 0x04	; 4
    13b2:	21 50       	subi	r18, 0x01	; 1
    13b4:	80 40       	sbci	r24, 0x00	; 0
    13b6:	90 40       	sbci	r25, 0x00	; 0
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <_Z5okbtnv+0xa>
    13ba:	00 c0       	rjmp	.+0      	; 0x13bc <_Z5okbtnv+0x14>
    13bc:	00 00       	nop
		_delay_ms(200);
		if (set==3){
    13be:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <set>
    13c2:	90 91 d8 07 	lds	r25, 0x07D8	; 0x8007d8 <set+0x1>
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	39 f4       	brne	.+14     	; 0x13da <_Z5okbtnv+0x32>
			set = 0;
    13cc:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <set+0x1>
    13d0:	10 92 d7 07 	sts	0x07D7, r1	; 0x8007d7 <set>
		display();}
    13d4:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    13d8:	08 95       	ret
		else {
			set+= 1;
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	90 93 d8 07 	sts	0x07D8, r25	; 0x8007d8 <set+0x1>
    13e0:	80 93 d7 07 	sts	0x07D7, r24	; 0x8007d7 <set>
		display();}
    13e4:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    13e8:	08 95       	ret

000013ea <_Z7backbtnv>:
	}
}

void backbtn(){
	
	if (!(PINC &(1<<Back))){
    13ea:	33 99       	sbic	0x06, 3	; 6
    13ec:	1d c0       	rjmp	.+58     	; 0x1428 <_Z7backbtnv+0x3e>
    13ee:	2f e7       	ldi	r18, 0x7F	; 127
    13f0:	88 e3       	ldi	r24, 0x38	; 56
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	21 50       	subi	r18, 0x01	; 1
    13f6:	80 40       	sbci	r24, 0x00	; 0
    13f8:	90 40       	sbci	r25, 0x00	; 0
    13fa:	e1 f7       	brne	.-8      	; 0x13f4 <_Z7backbtnv+0xa>
    13fc:	00 c0       	rjmp	.+0      	; 0x13fe <_Z7backbtnv+0x14>
    13fe:	00 00       	nop
		_delay_ms(50);
		if (set == 0){
    1400:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <set>
    1404:	90 91 d8 07 	lds	r25, 0x07D8	; 0x8007d8 <set+0x1>
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	39 f4       	brne	.+14     	; 0x141a <_Z7backbtnv+0x30>
			set = 0;
    140c:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <set+0x1>
    1410:	10 92 d7 07 	sts	0x07D7, r1	; 0x8007d7 <set>
			display();
    1414:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    1418:	08 95       	ret
		}
		else {
			set-= 1;
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	90 93 d8 07 	sts	0x07D8, r25	; 0x8007d8 <set+0x1>
    1420:	80 93 d7 07 	sts	0x07D7, r24	; 0x8007d7 <set>
			display();
    1424:	0e 94 56 07 	call	0xeac	; 0xeac <_Z7displayv>
    1428:	08 95       	ret

0000142a <main>:
int alarmCount = 0;
bool stop = false;	


int main(void)
{
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	27 97       	sbiw	r28, 0x07	; 7
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
	DDRD = (1<<PORTD7);
    143e:	80 e8       	ldi	r24, 0x80	; 128
    1440:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (1<<PORTC0) | (1<<PORTC1) | (1<<PORTC2) | (1<<PORTC3);
    1442:	88 b1       	in	r24, 0x08	; 8
    1444:	8f 60       	ori	r24, 0x0F	; 15
    1446:	88 b9       	out	0x08, r24	; 8
	ds1307::rtc_t rtc;

	//Setting time to the RTC
	rtc.seconds =  0x00; 
    1448:	19 82       	std	Y+1, r1	; 0x01
	rtc.minute =  0x00;
    144a:	1a 82       	std	Y+2, r1	; 0x02
	rtc.hour = 0x10;	//Initial Time set to 10:00:00 
    144c:	80 e1       	ldi	r24, 0x10	; 16
    144e:	8b 83       	std	Y+3, r24	; 0x03
	rtc.weekDay = 0x02;
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x06;
    1454:	86 e0       	ldi	r24, 0x06	; 6
    1456:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x08;
    1458:	88 e0       	ldi	r24, 0x08	; 8
    145a:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21; //10th Aug 2021 Tue
    145c:	81 e2       	ldi	r24, 0x21	; 33
    145e:	8f 83       	std	Y+7, r24	; 0x07
	DS1307.set_time(&rtc);
    1460:	be 01       	movw	r22, r28
    1462:	6f 5f       	subi	r22, 0xFF	; 255
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	8e ee       	ldi	r24, 0xEE	; 238
    1468:	97 e0       	ldi	r25, 0x07	; 7
    146a:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN6ds13078set_timeEPNS_5rtc_tE>

	lcd.LCD_Initializer();	//initialize the display to PORTB
    146e:	88 ee       	ldi	r24, 0xE8	; 232
    1470:	97 e0       	ldi	r25, 0x07	; 7
    1472:	0e 94 ce 03 	call	0x79c	; 0x79c <_ZN11LCD_Display15LCD_InitializerEv>

	while (1)
	{
		
		if (set==0){alarmclock.displayTime(); checkAlarm();}
    1476:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <set>
    147a:	90 91 d8 07 	lds	r25, 0x07D8	; 0x8007d8 <set+0x1>
    147e:	89 2b       	or	r24, r25
    1480:	31 f4       	brne	.+12     	; 0x148e <main+0x64>
    1482:	85 ee       	ldi	r24, 0xE5	; 229
    1484:	97 e0       	ldi	r25, 0x07	; 7
    1486:	0e 94 7b 00 	call	0xf6	; 0xf6 <_ZN10AlarmClock11displayTimeEv>
    148a:	0e 94 83 04 	call	0x906	; 0x906 <_Z10checkAlarmv>
		okbtn();
    148e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <_Z5okbtnv>
		upbtn();
    1492:	0e 94 a7 08 	call	0x114e	; 0x114e <_Z5upbtnv>
		dwnbtn();
    1496:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z6dwnbtnv>
		backbtn();
    149a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_Z7backbtnv>
	rtc.year = 0x21; //10th Aug 2021 Tue
	DS1307.set_time(&rtc);

	lcd.LCD_Initializer();	//initialize the display to PORTB

	while (1)
    149e:	eb cf       	rjmp	.-42     	; 0x1476 <main+0x4c>

<<<<<<< HEAD
000014a0 <_ZN15music_notations11playthenoteEff>:
int sizeofstarwars = sizeof(StarWars)/sizeof(StarWars[0]);
int sizeofcoffindance = sizeof(CoffinDance)/sizeof(CoffinDance[0]);
int sizeoftakeonme = sizeof(TakeOnMe)/sizeof(TakeOnMe[0]);

void music_notations::playthenote(float frequency, float duration)
{
    14a0:	4f 92       	push	r4
    14a2:	5f 92       	push	r5
    14a4:	6f 92       	push	r6
    14a6:	7f 92       	push	r7
    14a8:	8f 92       	push	r8
    14aa:	9f 92       	push	r9
    14ac:	af 92       	push	r10
    14ae:	bf 92       	push	r11
    14b0:	cf 92       	push	r12
    14b2:	df 92       	push	r13
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <_ZN15music_notations11playthenoteEff+0x22>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <_ZN15music_notations11playthenoteEff+0x24>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	6a 01       	movw	r12, r20
    14ca:	7b 01       	movw	r14, r22
    14cc:	48 01       	movw	r8, r16
    14ce:	59 01       	movw	r10, r18
	float period;
	
	// "period" is the wavelength calculated from frequency using the formula "period" = 1 / f.
	// We output 5 V for a length of time determined by half period (period/2), and then output 0 V, for the same length of time.
	
	if (frequency != 0){
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	a9 01       	movw	r20, r18
    14d6:	c7 01       	movw	r24, r14
    14d8:	b6 01       	movw	r22, r12
    14da:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__cmpsf2>
    14de:	88 23       	and	r24, r24
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <_ZN15music_notations11playthenoteEff+0x44>
    14e2:	b0 c0       	rjmp	.+352    	; 0x1644 <_ZN15music_notations11playthenoteEff+0x1a4>
		period=(1/frequency)*1000;  // period in mile seconds
    14e4:	a7 01       	movw	r20, r14
    14e6:	96 01       	movw	r18, r12
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	80 e8       	ldi	r24, 0x80	; 128
    14ee:	9f e3       	ldi	r25, 0x3F	; 63
    14f0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__divsf3>
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	4a e7       	ldi	r20, 0x7A	; 122
    14fa:	54 e4       	ldi	r21, 0x44	; 68
    14fc:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__mulsf3>
    1500:	6b 01       	movw	r12, r22
    1502:	7c 01       	movw	r14, r24
		cycles=duration/period;
    1504:	9b 01       	movw	r18, r22
    1506:	ac 01       	movw	r20, r24
    1508:	c5 01       	movw	r24, r10
    150a:	b4 01       	movw	r22, r8
    150c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__divsf3>
    1510:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__fixsfsi>
    1514:	2b 01       	movw	r4, r22
    1516:	3c 01       	movw	r6, r24
		half_period = period/2;
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	c7 01       	movw	r24, r14
    1522:	b6 01       	movw	r22, r12
    1524:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__mulsf3>
    1528:	69 83       	std	Y+1, r22	; 0x01
    152a:	7a 83       	std	Y+2, r23	; 0x02
    152c:	8b 83       	std	Y+3, r24	; 0x03
    152e:	9c 83       	std	Y+4, r25	; 0x04
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);
    1530:	8a b1       	in	r24, 0x0a	; 10
    1532:	80 68       	ori	r24, 0x80	; 128
    1534:	8a b9       	out	0x0a, r24	; 10

		for (i=0;i<cycles;i++)
    1536:	81 2c       	mov	r8, r1
    1538:	91 2c       	mov	r9, r1
    153a:	54 01       	movw	r10, r8
    153c:	84 14       	cp	r8, r4
    153e:	95 04       	cpc	r9, r5
    1540:	a6 04       	cpc	r10, r6
    1542:	b7 04       	cpc	r11, r7
    1544:	0c f0       	brlt	.+2      	; 0x1548 <_ZN15music_notations11playthenoteEff+0xa8>
    1546:	b8 c0       	rjmp	.+368    	; 0x16b8 <_ZN15music_notations11playthenoteEff+0x218>
=======
00001456 <_ZN15music_notations11playthenoteEff>:
    1456:	4f 92       	push	r4
    1458:	5f 92       	push	r5
    145a:	6f 92       	push	r6
    145c:	7f 92       	push	r7
    145e:	8f 92       	push	r8
    1460:	9f 92       	push	r9
    1462:	af 92       	push	r10
    1464:	bf 92       	push	r11
    1466:	cf 92       	push	r12
    1468:	df 92       	push	r13
    146a:	ef 92       	push	r14
    146c:	ff 92       	push	r15
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	00 d0       	rcall	.+0      	; 0x1478 <_ZN15music_notations11playthenoteEff+0x22>
    1478:	00 d0       	rcall	.+0      	; 0x147a <_ZN15music_notations11playthenoteEff+0x24>
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	6a 01       	movw	r12, r20
    1480:	7b 01       	movw	r14, r22
    1482:	48 01       	movw	r8, r16
    1484:	59 01       	movw	r10, r18
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	a9 01       	movw	r20, r18
    148c:	c7 01       	movw	r24, r14
    148e:	b6 01       	movw	r22, r12
    1490:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__cmpsf2>
    1494:	88 23       	and	r24, r24
    1496:	09 f4       	brne	.+2      	; 0x149a <_ZN15music_notations11playthenoteEff+0x44>
    1498:	b0 c0       	rjmp	.+352    	; 0x15fa <_ZN15music_notations11playthenoteEff+0x1a4>
    149a:	a7 01       	movw	r20, r14
    149c:	96 01       	movw	r18, r12
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	80 e8       	ldi	r24, 0x80	; 128
    14a4:	9f e3       	ldi	r25, 0x3F	; 63
    14a6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__divsf3>
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	4a e7       	ldi	r20, 0x7A	; 122
    14b0:	54 e4       	ldi	r21, 0x44	; 68
    14b2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__mulsf3>
    14b6:	6b 01       	movw	r12, r22
    14b8:	7c 01       	movw	r14, r24
    14ba:	9b 01       	movw	r18, r22
    14bc:	ac 01       	movw	r20, r24
    14be:	c5 01       	movw	r24, r10
    14c0:	b4 01       	movw	r22, r8
    14c2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__divsf3>
    14c6:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__fixsfsi>
    14ca:	2b 01       	movw	r4, r22
    14cc:	3c 01       	movw	r6, r24
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	5f e3       	ldi	r21, 0x3F	; 63
    14d6:	c7 01       	movw	r24, r14
    14d8:	b6 01       	movw	r22, r12
    14da:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__mulsf3>
    14de:	69 83       	std	Y+1, r22	; 0x01
    14e0:	7a 83       	std	Y+2, r23	; 0x02
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    14e4:	9c 83       	std	Y+4, r25	; 0x04
    14e6:	8a b1       	in	r24, 0x0a	; 10
    14e8:	80 68       	ori	r24, 0x80	; 128
    14ea:	8a b9       	out	0x0a, r24	; 10
    14ec:	81 2c       	mov	r8, r1
    14ee:	91 2c       	mov	r9, r1
    14f0:	54 01       	movw	r10, r8
    14f2:	84 14       	cp	r8, r4
    14f4:	95 04       	cpc	r9, r5
    14f6:	a6 04       	cpc	r10, r6
    14f8:	b7 04       	cpc	r11, r7
    14fa:	0c f0       	brlt	.+2      	; 0x14fe <_ZN15music_notations11playthenoteEff+0xa8>
    14fc:	b8 c0       	rjmp	.+368    	; 0x166e <_ZN15music_notations11playthenoteEff+0x218>
>>>>>>> master

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	4a ef       	ldi	r20, 0xFA	; 250
    154e:	54 e4       	ldi	r21, 0x44	; 68
    1550:	69 81       	ldd	r22, Y+1	; 0x01
    1552:	7a 81       	ldd	r23, Y+2	; 0x02
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__mulsf3>
    155c:	6b 01       	movw	r12, r22
    155e:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__cmpsf2>
    156c:	88 23       	and	r24, r24
    156e:	2c f1       	brlt	.+74     	; 0x15ba <_ZN15music_notations11playthenoteEff+0x11a>
		__ticks = 1;
	else if (__tmp > 65535)
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	c7 01       	movw	r24, r14
    157a:	b6 01       	movw	r22, r12
    157c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gesf2>
    1580:	18 16       	cp	r1, r24
    1582:	b4 f4       	brge	.+44     	; 0x15b0 <_ZN15music_notations11playthenoteEff+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e2       	ldi	r20, 0x20	; 32
    158a:	51 e4       	ldi	r21, 0x41	; 65
    158c:	69 81       	ldd	r22, Y+1	; 0x01
    158e:	7a 81       	ldd	r23, Y+2	; 0x02
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__mulsf3>
    1598:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
		while(__ticks)
    159c:	61 15       	cp	r22, r1
    159e:	71 05       	cpc	r23, r1
    15a0:	89 f0       	breq	.+34     	; 0x15c4 <_ZN15music_notations11playthenoteEff+0x124>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    15a2:	88 ec       	ldi	r24, 0xC8	; 200
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <_ZN15music_notations11playthenoteEff+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15aa:	61 50       	subi	r22, 0x01	; 1
    15ac:	71 09       	sbc	r23, r1
    15ae:	f6 cf       	rjmp	.-20     	; 0x159c <_ZN15music_notations11playthenoteEff+0xfc>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b0:	c7 01       	movw	r24, r14
    15b2:	b6 01       	movw	r22, r12
    15b4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <_ZN15music_notations11playthenoteEff+0x11e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
<<<<<<< HEAD
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	cb 01       	movw	r24, r22
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <_ZN15music_notations11playthenoteEff+0x120>
		{
			_delay_ms(half_period);
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
    15c4:	8b b1       	in	r24, 0x0b	; 11
    15c6:	80 68       	ori	r24, 0x80	; 128
    15c8:	8b b9       	out	0x0b, r24	; 11
=======
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	cb 01       	movw	r24, r22
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <_ZN15music_notations11playthenoteEff+0x120>
    157a:	8b b1       	in	r24, 0x0b	; 11
    157c:	80 68       	ori	r24, 0x80	; 128
    157e:	8b b9       	out	0x0b, r24	; 11
>>>>>>> master
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	c7 01       	movw	r24, r14
    15d4:	b6 01       	movw	r22, r12
    15d6:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__cmpsf2>
    15da:	88 23       	and	r24, r24
    15dc:	2c f1       	brlt	.+74     	; 0x1628 <_ZN15music_notations11playthenoteEff+0x188>
		__ticks = 1;
	else if (__tmp > 65535)
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	57 e4       	ldi	r21, 0x47	; 71
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	b4 f4       	brge	.+44     	; 0x161e <_ZN15music_notations11playthenoteEff+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e2       	ldi	r20, 0x20	; 32
    15f8:	51 e4       	ldi	r21, 0x41	; 65
    15fa:	69 81       	ldd	r22, Y+1	; 0x01
    15fc:	7a 81       	ldd	r23, Y+2	; 0x02
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__mulsf3>
    1606:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
		while(__ticks)
    160a:	61 15       	cp	r22, r1
    160c:	71 05       	cpc	r23, r1
    160e:	89 f0       	breq	.+34     	; 0x1632 <_ZN15music_notations11playthenoteEff+0x192>
    1610:	88 ec       	ldi	r24, 0xC8	; 200
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <_ZN15music_notations11playthenoteEff+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1618:	61 50       	subi	r22, 0x01	; 1
    161a:	71 09       	sbc	r23, r1
    161c:	f6 cf       	rjmp	.-20     	; 0x160a <_ZN15music_notations11playthenoteEff+0x16a>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	c7 01       	movw	r24, r14
    1620:	b6 01       	movw	r22, r12
    1622:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
    1626:	02 c0       	rjmp	.+4      	; 0x162c <_ZN15music_notations11playthenoteEff+0x18c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
<<<<<<< HEAD
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	cb 01       	movw	r24, r22
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <_ZN15music_notations11playthenoteEff+0x18e>
			_delay_ms(half_period);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
    1632:	8b b1       	in	r24, 0x0b	; 11
    1634:	8f 77       	andi	r24, 0x7F	; 127
    1636:	8b b9       	out	0x0b, r24	; 11
		cycles=duration/period;
		half_period = period/2;
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);

		for (i=0;i<cycles;i++)
    1638:	8f ef       	ldi	r24, 0xFF	; 255
    163a:	88 1a       	sub	r8, r24
    163c:	98 0a       	sbc	r9, r24
    163e:	a8 0a       	sbc	r10, r24
    1640:	b8 0a       	sbc	r11, r24
    1642:	7c cf       	rjmp	.-264    	; 0x153c <_ZN15music_notations11playthenoteEff+0x9c>
=======
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	cb 01       	movw	r24, r22
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <_ZN15music_notations11playthenoteEff+0x18e>
    15e8:	8b b1       	in	r24, 0x0b	; 11
    15ea:	8f 77       	andi	r24, 0x7F	; 127
    15ec:	8b b9       	out	0x0b, r24	; 11
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	88 1a       	sub	r8, r24
    15f2:	98 0a       	sbc	r9, r24
    15f4:	a8 0a       	sbc	r10, r24
    15f6:	b8 0a       	sbc	r11, r24
    15f8:	7c cf       	rjmp	.-264    	; 0x14f2 <_ZN15music_notations11playthenoteEff+0x9c>
>>>>>>> master

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4a ef       	ldi	r20, 0xFA	; 250
    164a:	54 e4       	ldi	r21, 0x44	; 68
    164c:	c5 01       	movw	r24, r10
    164e:	b4 01       	movw	r22, r8
    1650:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__mulsf3>
    1654:	6b 01       	movw	r12, r22
    1656:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e8       	ldi	r20, 0x80	; 128
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__cmpsf2>
    1664:	88 23       	and	r24, r24
    1666:	1c f1       	brlt	.+70     	; 0x16ae <_ZN15music_notations11playthenoteEff+0x20e>
		__ticks = 1;
	else if (__tmp > 65535)
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	3f ef       	ldi	r19, 0xFF	; 255
    166c:	4f e7       	ldi	r20, 0x7F	; 127
    166e:	57 e4       	ldi	r21, 0x47	; 71
    1670:	c7 01       	movw	r24, r14
    1672:	b6 01       	movw	r22, r12
    1674:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gesf2>
    1678:	18 16       	cp	r1, r24
    167a:	a4 f4       	brge	.+40     	; 0x16a4 <_ZN15music_notations11playthenoteEff+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e2       	ldi	r20, 0x20	; 32
    1682:	51 e4       	ldi	r21, 0x41	; 65
    1684:	c5 01       	movw	r24, r10
    1686:	b4 01       	movw	r22, r8
    1688:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__mulsf3>
    168c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
		while(__ticks)
    1690:	61 15       	cp	r22, r1
    1692:	71 05       	cpc	r23, r1
    1694:	89 f0       	breq	.+34     	; 0x16b8 <_ZN15music_notations11playthenoteEff+0x218>
    1696:	88 ec       	ldi	r24, 0xC8	; 200
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	f1 f7       	brne	.-4      	; 0x169a <_ZN15music_notations11playthenoteEff+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169e:	61 50       	subi	r22, 0x01	; 1
    16a0:	71 09       	sbc	r23, r1
    16a2:	f6 cf       	rjmp	.-20     	; 0x1690 <_ZN15music_notations11playthenoteEff+0x1f0>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a4:	c7 01       	movw	r24, r14
    16a6:	b6 01       	movw	r22, r12
    16a8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <_ZN15music_notations11playthenoteEff+0x212>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
<<<<<<< HEAD
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	cb 01       	movw	r24, r22
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <_ZN15music_notations11playthenoteEff+0x214>
	else {
		_delay_ms(duration);   // rest
	}

	return;
}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	bf 90       	pop	r11
    16d2:	af 90       	pop	r10
    16d4:	9f 90       	pop	r9
    16d6:	8f 90       	pop	r8
    16d8:	7f 90       	pop	r7
    16da:	6f 90       	pop	r6
    16dc:	5f 90       	pop	r5
    16de:	4f 90       	pop	r4
    16e0:	08 95       	ret

000016e2 <_ZN15music_notations13playthemelodyEPiS0_i>:
void music_notations::playthemelody(int Melody[], int MelodyDuration[], int size)
{
    16e2:	2f 92       	push	r2
    16e4:	3f 92       	push	r3
    16e6:	4f 92       	push	r4
    16e8:	5f 92       	push	r5
    16ea:	6f 92       	push	r6
    16ec:	7f 92       	push	r7
    16ee:	8f 92       	push	r8
    16f0:	9f 92       	push	r9
    16f2:	af 92       	push	r10
    16f4:	bf 92       	push	r11
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	29 97       	sbiw	r28, 0x09	; 9
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	9f 83       	std	Y+7, r25	; 0x07
    1718:	8e 83       	std	Y+6, r24	; 0x06
    171a:	2b 01       	movw	r4, r22
    171c:	1a 01       	movw	r2, r20
    171e:	39 01       	movw	r6, r18
	// melody will play until the stop button is pressed.
	//int still_playing = 1;
	//while(still_playing){
	for (int x=0; x<size; x++){
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	99 87       	std	Y+9, r25	; 0x09
    1726:	88 87       	std	Y+8, r24	; 0x08
    1728:	e8 85       	ldd	r30, Y+8	; 0x08
    172a:	f9 85       	ldd	r31, Y+9	; 0x09
    172c:	e6 15       	cp	r30, r6
    172e:	f7 05       	cpc	r31, r7
    1730:	0c f0       	brlt	.+2      	; 0x1734 <_ZN15music_notations13playthemelodyEPiS0_i+0x52>
    1732:	d5 c0       	rjmp	.+426    	; 0x18de <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
		playthenote(Melody[x],MelodyDuration[x]);
    1734:	7f 01       	movw	r14, r30
    1736:	ee 0c       	add	r14, r14
    1738:	ff 1c       	adc	r15, r15
    173a:	61 01       	movw	r12, r2
    173c:	ce 0c       	add	r12, r14
    173e:	df 1c       	adc	r13, r15
    1740:	f6 01       	movw	r30, r12
    1742:	60 81       	ld	r22, Z
    1744:	71 81       	ldd	r23, Z+1	; 0x01
    1746:	07 2e       	mov	r0, r23
    1748:	00 0c       	add	r0, r0
    174a:	88 0b       	sbc	r24, r24
    174c:	99 0b       	sbc	r25, r25
    174e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__floatsisf>
    1752:	4b 01       	movw	r8, r22
    1754:	5c 01       	movw	r10, r24
    1756:	f2 01       	movw	r30, r4
    1758:	ee 0d       	add	r30, r14
    175a:	ff 1d       	adc	r31, r15
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	07 2e       	mov	r0, r23
    1762:	00 0c       	add	r0, r0
    1764:	88 0b       	sbc	r24, r24
    1766:	99 0b       	sbc	r25, r25
    1768:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__floatsisf>
    176c:	ab 01       	movw	r20, r22
    176e:	bc 01       	movw	r22, r24
    1770:	95 01       	movw	r18, r10
    1772:	84 01       	movw	r16, r8
    1774:	8e 81       	ldd	r24, Y+6	; 0x06
    1776:	9f 81       	ldd	r25, Y+7	; 0x07
    1778:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN15music_notations11playthenoteEff>
		_delay_us(MelodyDuration[x]);
    177c:	f6 01       	movw	r30, r12
    177e:	60 81       	ld	r22, Z
    1780:	71 81       	ldd	r23, Z+1	; 0x01
    1782:	07 2e       	mov	r0, r23
    1784:	00 0c       	add	r0, r0
    1786:	88 0b       	sbc	r24, r24
    1788:	99 0b       	sbc	r25, r25
    178a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__floatsisf>
    178e:	6b 01       	movw	r12, r22
    1790:	7c 01       	movw	r14, r24
=======
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	cb 01       	movw	r24, r22
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <_ZN15music_notations11playthenoteEff+0x214>
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	7f 90       	pop	r7
    1690:	6f 90       	pop	r6
    1692:	5f 90       	pop	r5
    1694:	4f 90       	pop	r4
    1696:	08 95       	ret

00001698 <_ZN15music_notations13playthemelodyEPiS0_i>:
    1698:	2f 92       	push	r2
    169a:	3f 92       	push	r3
    169c:	4f 92       	push	r4
    169e:	5f 92       	push	r5
    16a0:	6f 92       	push	r6
    16a2:	7f 92       	push	r7
    16a4:	8f 92       	push	r8
    16a6:	9f 92       	push	r9
    16a8:	af 92       	push	r10
    16aa:	bf 92       	push	r11
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	29 97       	sbiw	r28, 0x09	; 9
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	9f 83       	std	Y+7, r25	; 0x07
    16ce:	8e 83       	std	Y+6, r24	; 0x06
    16d0:	2b 01       	movw	r4, r22
    16d2:	1a 01       	movw	r2, r20
    16d4:	39 01       	movw	r6, r18
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	99 87       	std	Y+9, r25	; 0x09
    16dc:	88 87       	std	Y+8, r24	; 0x08
    16de:	e8 85       	ldd	r30, Y+8	; 0x08
    16e0:	f9 85       	ldd	r31, Y+9	; 0x09
    16e2:	e6 15       	cp	r30, r6
    16e4:	f7 05       	cpc	r31, r7
    16e6:	0c f0       	brlt	.+2      	; 0x16ea <_ZN15music_notations13playthemelodyEPiS0_i+0x52>
    16e8:	d5 c0       	rjmp	.+426    	; 0x1894 <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
    16ea:	7f 01       	movw	r14, r30
    16ec:	ee 0c       	add	r14, r14
    16ee:	ff 1c       	adc	r15, r15
    16f0:	61 01       	movw	r12, r2
    16f2:	ce 0c       	add	r12, r14
    16f4:	df 1c       	adc	r13, r15
    16f6:	f6 01       	movw	r30, r12
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	07 2e       	mov	r0, r23
    16fe:	00 0c       	add	r0, r0
    1700:	88 0b       	sbc	r24, r24
    1702:	99 0b       	sbc	r25, r25
    1704:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__floatsisf>
    1708:	4b 01       	movw	r8, r22
    170a:	5c 01       	movw	r10, r24
    170c:	f2 01       	movw	r30, r4
    170e:	ee 0d       	add	r30, r14
    1710:	ff 1d       	adc	r31, r15
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	07 2e       	mov	r0, r23
    1718:	00 0c       	add	r0, r0
    171a:	88 0b       	sbc	r24, r24
    171c:	99 0b       	sbc	r25, r25
    171e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__floatsisf>
    1722:	ab 01       	movw	r20, r22
    1724:	bc 01       	movw	r22, r24
    1726:	95 01       	movw	r18, r10
    1728:	84 01       	movw	r16, r8
    172a:	8e 81       	ldd	r24, Y+6	; 0x06
    172c:	9f 81       	ldd	r25, Y+7	; 0x07
    172e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <_ZN15music_notations11playthenoteEff>
    1732:	f6 01       	movw	r30, r12
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	07 2e       	mov	r0, r23
    173a:	00 0c       	add	r0, r0
    173c:	88 0b       	sbc	r24, r24
    173e:	99 0b       	sbc	r25, r25
    1740:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__floatsisf>
    1744:	6b 01       	movw	r12, r22
    1746:	7c 01       	movw	r14, r24
>>>>>>> master
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1792:	2b ea       	ldi	r18, 0xAB	; 171
    1794:	3a ea       	ldi	r19, 0xAA	; 170
    1796:	4a e2       	ldi	r20, 0x2A	; 42
    1798:	50 e4       	ldi	r21, 0x40	; 64
    179a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__mulsf3>
    179e:	4b 01       	movw	r8, r22
    17a0:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    17a2:	a7 01       	movw	r20, r14
    17a4:	96 01       	movw	r18, r12
    17a6:	c7 01       	movw	r24, r14
    17a8:	b6 01       	movw	r22, r12
    17aa:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__addsf3>
    17ae:	69 83       	std	Y+1, r22	; 0x01
    17b0:	7a 83       	std	Y+2, r23	; 0x02
    17b2:	8b 83       	std	Y+3, r24	; 0x03
    17b4:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	c5 01       	movw	r24, r10
    17c0:	b4 01       	movw	r22, r8
    17c2:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__cmpsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	0c f4       	brge	.+2      	; 0x17cc <_ZN15music_notations13playthemelodyEPiS0_i+0xea>
    17ca:	6a c0       	rjmp	.+212    	; 0x18a0 <_ZN15music_notations13playthemelodyEPiS0_i+0x1be>
		__ticks = 1;
	else if (__tmp2 > 65535)
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	69 81       	ldd	r22, Y+1	; 0x01
    17d6:	7a 81       	ldd	r23, Y+2	; 0x02
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gesf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <_ZN15music_notations13playthemelodyEPiS0_i+0x104>
    17e4:	43 c0       	rjmp	.+134    	; 0x186c <_ZN15music_notations13playthemelodyEPiS0_i+0x18a>
	{
		_delay_ms(__us / 1000.0);
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a e7       	ldi	r20, 0x7A	; 122
    17ec:	54 e4       	ldi	r21, 0x44	; 68
    17ee:	c7 01       	movw	r24, r14
    17f0:	b6 01       	movw	r22, r12
    17f2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__divsf3>
    17f6:	4b 01       	movw	r8, r22
    17f8:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	4a ef       	ldi	r20, 0xFA	; 250
    1800:	54 e4       	ldi	r21, 0x44	; 68
    1802:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__mulsf3>
    1806:	6b 01       	movw	r12, r22
    1808:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e8       	ldi	r20, 0x80	; 128
    1810:	5f e3       	ldi	r21, 0x3F	; 63
    1812:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__cmpsf2>
    1816:	88 23       	and	r24, r24
    1818:	1c f1       	brlt	.+70     	; 0x1860 <_ZN15music_notations13playthemelodyEPiS0_i+0x17e>
		__ticks = 1;
	else if (__tmp > 65535)
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	3f ef       	ldi	r19, 0xFF	; 255
    181e:	4f e7       	ldi	r20, 0x7F	; 127
    1820:	57 e4       	ldi	r21, 0x47	; 71
    1822:	c7 01       	movw	r24, r14
    1824:	b6 01       	movw	r22, r12
    1826:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gesf2>
    182a:	18 16       	cp	r1, r24
    182c:	a4 f4       	brge	.+40     	; 0x1856 <_ZN15music_notations13playthemelodyEPiS0_i+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e2       	ldi	r20, 0x20	; 32
    1834:	51 e4       	ldi	r21, 0x41	; 65
    1836:	c5 01       	movw	r24, r10
    1838:	b4 01       	movw	r22, r8
    183a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__mulsf3>
    183e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
		while(__ticks)
    1842:	61 15       	cp	r22, r1
    1844:	71 05       	cpc	r23, r1
    1846:	79 f1       	breq	.+94     	; 0x18a6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <_ZN15music_notations13playthemelodyEPiS0_i+0x16a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	61 50       	subi	r22, 0x01	; 1
    1852:	71 09       	sbc	r23, r1
    1854:	f6 cf       	rjmp	.-20     	; 0x1842 <_ZN15music_notations13playthemelodyEPiS0_i+0x160>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	c7 01       	movw	r24, r14
    1858:	b6 01       	movw	r22, r12
    185a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <_ZN15music_notations13playthemelodyEPiS0_i+0x182>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	cb 01       	movw	r24, r22
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <_ZN15music_notations13playthemelodyEPiS0_i+0x184>
    186a:	1d c0       	rjmp	.+58     	; 0x18a6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4f e7       	ldi	r20, 0x7F	; 127
    1872:	53 e4       	ldi	r21, 0x43	; 67
    1874:	c5 01       	movw	r24, r10
    1876:	b4 01       	movw	r22, r8
    1878:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__gesf2>
    187c:	18 16       	cp	r1, r24
    187e:	54 f4       	brge	.+20     	; 0x1894 <_ZN15music_notations13playthemelodyEPiS0_i+0x1b2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1880:	69 81       	ldd	r22, Y+1	; 0x01
    1882:	7a 81       	ldd	r23, Y+2	; 0x02
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
    188c:	cb 01       	movw	r24, r22
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <_ZN15music_notations13playthemelodyEPiS0_i+0x1ac>
    1892:	0c c0       	rjmp	.+24     	; 0x18ac <_ZN15music_notations13playthemelodyEPiS0_i+0x1ca>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1894:	c5 01       	movw	r24, r10
    1896:	b4 01       	movw	r22, r8
    1898:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
    189c:	6d 83       	std	Y+5, r22	; 0x05
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	9d 83       	std	Y+5, r25	; 0x05
    18a4:	00 c0       	rjmp	.+0      	; 0x18a6 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
<<<<<<< HEAD
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	8a 95       	dec	r24
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c6>
		if ((!(PINC &(1<<Ok))) || (!(PINC &(1<<Up))) || (!(PINC &(1<<Down))) || (!(PINC &(1<<Back)))){
    18ac:	32 9b       	sbis	0x06, 2	; 6
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <_ZN15music_notations13playthemelodyEPiS0_i+0x1de>
    18b0:	30 9b       	sbis	0x06, 0	; 6
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <_ZN15music_notations13playthemelodyEPiS0_i+0x1e2>
    18b4:	31 9b       	sbis	0x06, 1	; 6
    18b6:	08 c0       	rjmp	.+16     	; 0x18c8 <_ZN15music_notations13playthemelodyEPiS0_i+0x1e6>
    18b8:	33 99       	sbic	0x06, 3	; 6
    18ba:	08 c0       	rjmp	.+16     	; 0x18cc <_ZN15music_notations13playthemelodyEPiS0_i+0x1ea>
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	07 c0       	rjmp	.+14     	; 0x18ce <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	05 c0       	rjmp	.+10     	; 0x18ce <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	81 11       	cpse	r24, r1
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
void music_notations::playthemelody(int Melody[], int MelodyDuration[], int size)
{
	// melody will play until the stop button is pressed.
	//int still_playing = 1;
	//while(still_playing){
	for (int x=0; x<size; x++){
    18d2:	88 85       	ldd	r24, Y+8	; 0x08
    18d4:	99 85       	ldd	r25, Y+9	; 0x09
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	99 87       	std	Y+9, r25	; 0x09
    18da:	88 87       	std	Y+8, r24	; 0x08
    18dc:	25 cf       	rjmp	.-438    	; 0x1728 <_ZN15music_notations13playthemelodyEPiS0_i+0x46>
		}
		
	}
	
	
}
    18de:	29 96       	adiw	r28, 0x09	; 9
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	bf 90       	pop	r11
    18fc:	af 90       	pop	r10
    18fe:	9f 90       	pop	r9
    1900:	8f 90       	pop	r8
    1902:	7f 90       	pop	r7
    1904:	6f 90       	pop	r6
    1906:	5f 90       	pop	r5
    1908:	4f 90       	pop	r4
    190a:	3f 90       	pop	r3
    190c:	2f 90       	pop	r2
    190e:	08 95       	ret

00001910 <_ZN15music_notations4toneEi>:
void music_notations::tone(int x){
	if (x==0){
    1910:	61 15       	cp	r22, r1
    1912:	71 05       	cpc	r23, r1
    1914:	59 f4       	brne	.+22     	; 0x192c <_ZN15music_notations4toneEi+0x1c>
		playthemelody(GOT,GOTDurations,sizeofgot);
    1916:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <sizeofgot>
    191a:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <sizeofgot+0x1>
    191e:	42 e9       	ldi	r20, 0x92	; 146
    1920:	56 e0       	ldi	r21, 0x06	; 6
    1922:	66 eb       	ldi	r22, 0xB6	; 182
    1924:	76 e0       	ldi	r23, 0x06	; 6
    1926:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_ZN15music_notations13playthemelodyEPiS0_i>
    192a:	08 95       	ret
	}
	else if (x==1){
    192c:	61 30       	cpi	r22, 0x01	; 1
    192e:	71 05       	cpc	r23, r1
    1930:	59 f4       	brne	.+22     	; 0x1948 <_ZN15music_notations4toneEi+0x38>
		playthemelody(Pirates,PiratesDurations,sizeofpirates);
    1932:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <sizeofpirates>
    1936:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <sizeofpirates+0x1>
    193a:	42 e6       	ldi	r20, 0x62	; 98
    193c:	55 e0       	ldi	r21, 0x05	; 5
    193e:	6a ef       	ldi	r22, 0xFA	; 250
    1940:	75 e0       	ldi	r23, 0x05	; 5
    1942:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_ZN15music_notations13playthemelodyEPiS0_i>
    1946:	08 95       	ret
	}
	else if (x==2){
    1948:	62 30       	cpi	r22, 0x02	; 2
    194a:	71 05       	cpc	r23, r1
    194c:	59 f4       	brne	.+22     	; 0x1964 <_ZN15music_notations4toneEi+0x54>
		playthemelody(StarWars,StarWarsDurations,sizeofstarwars);
    194e:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <sizeofstarwars>
    1952:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <sizeofstarwars+0x1>
    1956:	4a ec       	ldi	r20, 0xCA	; 202
    1958:	54 e0       	ldi	r21, 0x04	; 4
    195a:	66 e1       	ldi	r22, 0x16	; 22
    195c:	75 e0       	ldi	r23, 0x05	; 5
    195e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_ZN15music_notations13playthemelodyEPiS0_i>
    1962:	08 95       	ret
	}
	else if (x==3){
    1964:	63 30       	cpi	r22, 0x03	; 3
    1966:	71 05       	cpc	r23, r1
    1968:	59 f4       	brne	.+22     	; 0x1980 <_ZN15music_notations4toneEi+0x70>
		playthemelody(CoffinDance,CoffinDanceDurations,sizeofcoffindance);
    196a:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <sizeofcoffindance>
    196e:	30 91 d3 02 	lds	r19, 0x02D3	; 0x8002d3 <sizeofcoffindance+0x1>
    1972:	4a e3       	ldi	r20, 0x3A	; 58
    1974:	53 e0       	ldi	r21, 0x03	; 3
    1976:	62 e0       	ldi	r22, 0x02	; 2
    1978:	74 e0       	ldi	r23, 0x04	; 4
    197a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_ZN15music_notations13playthemelodyEPiS0_i>
    197e:	08 95       	ret
	}
	else{
		playthemelody(TakeOnMe,TakeOnMeDurations,sizeoftakeonme);
    1980:	20 91 d0 02 	lds	r18, 0x02D0	; 0x8002d0 <sizeoftakeonme>
    1984:	30 91 d1 02 	lds	r19, 0x02D1	; 0x8002d1 <sizeoftakeonme+0x1>
    1988:	4a ed       	ldi	r20, 0xDA	; 218
    198a:	52 e0       	ldi	r21, 0x02	; 2
    198c:	6a e0       	ldi	r22, 0x0A	; 10
    198e:	73 e0       	ldi	r23, 0x03	; 3
    1990:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_ZN15music_notations13playthemelodyEPiS0_i>
    1994:	08 95       	ret

00001996 <__subsf3>:
    1996:	50 58       	subi	r21, 0x80	; 128

00001998 <__addsf3>:
    1998:	bb 27       	eor	r27, r27
    199a:	aa 27       	eor	r26, r26
    199c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__addsf3x>
    19a0:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__fp_round>
    19a4:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__fp_pscA>
    19a8:	38 f0       	brcs	.+14     	; 0x19b8 <__addsf3+0x20>
    19aa:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__fp_pscB>
    19ae:	20 f0       	brcs	.+8      	; 0x19b8 <__addsf3+0x20>
    19b0:	39 f4       	brne	.+14     	; 0x19c0 <__addsf3+0x28>
    19b2:	9f 3f       	cpi	r25, 0xFF	; 255
    19b4:	19 f4       	brne	.+6      	; 0x19bc <__addsf3+0x24>
    19b6:	26 f4       	brtc	.+8      	; 0x19c0 <__addsf3+0x28>
    19b8:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__fp_nan>
    19bc:	0e f4       	brtc	.+2      	; 0x19c0 <__addsf3+0x28>
    19be:	e0 95       	com	r30
    19c0:	e7 fb       	bst	r30, 7
    19c2:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__fp_inf>

000019c6 <__addsf3x>:
    19c6:	e9 2f       	mov	r30, r25
    19c8:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__fp_split3>
    19cc:	58 f3       	brcs	.-42     	; 0x19a4 <__addsf3+0xc>
    19ce:	ba 17       	cp	r27, r26
    19d0:	62 07       	cpc	r22, r18
    19d2:	73 07       	cpc	r23, r19
    19d4:	84 07       	cpc	r24, r20
    19d6:	95 07       	cpc	r25, r21
    19d8:	20 f0       	brcs	.+8      	; 0x19e2 <__addsf3x+0x1c>
    19da:	79 f4       	brne	.+30     	; 0x19fa <__addsf3x+0x34>
    19dc:	a6 f5       	brtc	.+104    	; 0x1a46 <__addsf3x+0x80>
    19de:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__fp_zero>
    19e2:	0e f4       	brtc	.+2      	; 0x19e6 <__addsf3x+0x20>
    19e4:	e0 95       	com	r30
    19e6:	0b 2e       	mov	r0, r27
    19e8:	ba 2f       	mov	r27, r26
    19ea:	a0 2d       	mov	r26, r0
    19ec:	0b 01       	movw	r0, r22
    19ee:	b9 01       	movw	r22, r18
    19f0:	90 01       	movw	r18, r0
    19f2:	0c 01       	movw	r0, r24
    19f4:	ca 01       	movw	r24, r20
    19f6:	a0 01       	movw	r20, r0
    19f8:	11 24       	eor	r1, r1
    19fa:	ff 27       	eor	r31, r31
    19fc:	59 1b       	sub	r21, r25
    19fe:	99 f0       	breq	.+38     	; 0x1a26 <__addsf3x+0x60>
    1a00:	59 3f       	cpi	r21, 0xF9	; 249
    1a02:	50 f4       	brcc	.+20     	; 0x1a18 <__addsf3x+0x52>
    1a04:	50 3e       	cpi	r21, 0xE0	; 224
    1a06:	68 f1       	brcs	.+90     	; 0x1a62 <__addsf3x+0x9c>
    1a08:	1a 16       	cp	r1, r26
    1a0a:	f0 40       	sbci	r31, 0x00	; 0
    1a0c:	a2 2f       	mov	r26, r18
    1a0e:	23 2f       	mov	r18, r19
    1a10:	34 2f       	mov	r19, r20
    1a12:	44 27       	eor	r20, r20
    1a14:	58 5f       	subi	r21, 0xF8	; 248
    1a16:	f3 cf       	rjmp	.-26     	; 0x19fe <__addsf3x+0x38>
    1a18:	46 95       	lsr	r20
    1a1a:	37 95       	ror	r19
    1a1c:	27 95       	ror	r18
    1a1e:	a7 95       	ror	r26
    1a20:	f0 40       	sbci	r31, 0x00	; 0
    1a22:	53 95       	inc	r21
    1a24:	c9 f7       	brne	.-14     	; 0x1a18 <__addsf3x+0x52>
    1a26:	7e f4       	brtc	.+30     	; 0x1a46 <__addsf3x+0x80>
    1a28:	1f 16       	cp	r1, r31
    1a2a:	ba 0b       	sbc	r27, r26
    1a2c:	62 0b       	sbc	r22, r18
    1a2e:	73 0b       	sbc	r23, r19
    1a30:	84 0b       	sbc	r24, r20
    1a32:	ba f0       	brmi	.+46     	; 0x1a62 <__addsf3x+0x9c>
    1a34:	91 50       	subi	r25, 0x01	; 1
    1a36:	a1 f0       	breq	.+40     	; 0x1a60 <__addsf3x+0x9a>
    1a38:	ff 0f       	add	r31, r31
    1a3a:	bb 1f       	adc	r27, r27
    1a3c:	66 1f       	adc	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	c2 f7       	brpl	.-16     	; 0x1a34 <__addsf3x+0x6e>
    1a44:	0e c0       	rjmp	.+28     	; 0x1a62 <__addsf3x+0x9c>
    1a46:	ba 0f       	add	r27, r26
    1a48:	62 1f       	adc	r22, r18
    1a4a:	73 1f       	adc	r23, r19
    1a4c:	84 1f       	adc	r24, r20
    1a4e:	48 f4       	brcc	.+18     	; 0x1a62 <__addsf3x+0x9c>
    1a50:	87 95       	ror	r24
    1a52:	77 95       	ror	r23
    1a54:	67 95       	ror	r22
    1a56:	b7 95       	ror	r27
    1a58:	f7 95       	ror	r31
    1a5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a5c:	08 f0       	brcs	.+2      	; 0x1a60 <__addsf3x+0x9a>
    1a5e:	b0 cf       	rjmp	.-160    	; 0x19c0 <__addsf3+0x28>
    1a60:	93 95       	inc	r25
    1a62:	88 0f       	add	r24, r24
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <__addsf3x+0xa2>
    1a66:	99 27       	eor	r25, r25
    1a68:	ee 0f       	add	r30, r30
    1a6a:	97 95       	ror	r25
    1a6c:	87 95       	ror	r24
    1a6e:	08 95       	ret

00001a70 <__cmpsf2>:
    1a70:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__fp_cmp>
    1a74:	08 f4       	brcc	.+2      	; 0x1a78 <__cmpsf2+0x8>
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	08 95       	ret

00001a7a <__divsf3>:
    1a7a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divsf3x>
    1a7e:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__fp_round>
    1a82:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__fp_pscB>
    1a86:	58 f0       	brcs	.+22     	; 0x1a9e <__divsf3+0x24>
    1a88:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__fp_pscA>
    1a8c:	40 f0       	brcs	.+16     	; 0x1a9e <__divsf3+0x24>
    1a8e:	29 f4       	brne	.+10     	; 0x1a9a <__divsf3+0x20>
    1a90:	5f 3f       	cpi	r21, 0xFF	; 255
    1a92:	29 f0       	breq	.+10     	; 0x1a9e <__divsf3+0x24>
    1a94:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__fp_inf>
    1a98:	51 11       	cpse	r21, r1
    1a9a:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__fp_szero>
    1a9e:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__fp_nan>

00001aa2 <__divsf3x>:
    1aa2:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__fp_split3>
    1aa6:	68 f3       	brcs	.-38     	; 0x1a82 <__divsf3+0x8>

00001aa8 <__divsf3_pse>:
    1aa8:	99 23       	and	r25, r25
    1aaa:	b1 f3       	breq	.-20     	; 0x1a98 <__divsf3+0x1e>
    1aac:	55 23       	and	r21, r21
    1aae:	91 f3       	breq	.-28     	; 0x1a94 <__divsf3+0x1a>
    1ab0:	95 1b       	sub	r25, r21
    1ab2:	55 0b       	sbc	r21, r21
    1ab4:	bb 27       	eor	r27, r27
    1ab6:	aa 27       	eor	r26, r26
    1ab8:	62 17       	cp	r22, r18
    1aba:	73 07       	cpc	r23, r19
    1abc:	84 07       	cpc	r24, r20
    1abe:	38 f0       	brcs	.+14     	; 0x1ace <__divsf3_pse+0x26>
    1ac0:	9f 5f       	subi	r25, 0xFF	; 255
    1ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac4:	22 0f       	add	r18, r18
    1ac6:	33 1f       	adc	r19, r19
    1ac8:	44 1f       	adc	r20, r20
    1aca:	aa 1f       	adc	r26, r26
    1acc:	a9 f3       	breq	.-22     	; 0x1ab8 <__divsf3_pse+0x10>
    1ace:	35 d0       	rcall	.+106    	; 0x1b3a <__divsf3_pse+0x92>
    1ad0:	0e 2e       	mov	r0, r30
    1ad2:	3a f0       	brmi	.+14     	; 0x1ae2 <__divsf3_pse+0x3a>
    1ad4:	e0 e8       	ldi	r30, 0x80	; 128
    1ad6:	32 d0       	rcall	.+100    	; 0x1b3c <__divsf3_pse+0x94>
    1ad8:	91 50       	subi	r25, 0x01	; 1
    1ada:	50 40       	sbci	r21, 0x00	; 0
    1adc:	e6 95       	lsr	r30
    1ade:	00 1c       	adc	r0, r0
    1ae0:	ca f7       	brpl	.-14     	; 0x1ad4 <__divsf3_pse+0x2c>
    1ae2:	2b d0       	rcall	.+86     	; 0x1b3a <__divsf3_pse+0x92>
    1ae4:	fe 2f       	mov	r31, r30
    1ae6:	29 d0       	rcall	.+82     	; 0x1b3a <__divsf3_pse+0x92>
    1ae8:	66 0f       	add	r22, r22
    1aea:	77 1f       	adc	r23, r23
    1aec:	88 1f       	adc	r24, r24
    1aee:	bb 1f       	adc	r27, r27
    1af0:	26 17       	cp	r18, r22
    1af2:	37 07       	cpc	r19, r23
    1af4:	48 07       	cpc	r20, r24
    1af6:	ab 07       	cpc	r26, r27
    1af8:	b0 e8       	ldi	r27, 0x80	; 128
    1afa:	09 f0       	breq	.+2      	; 0x1afe <__divsf3_pse+0x56>
    1afc:	bb 0b       	sbc	r27, r27
    1afe:	80 2d       	mov	r24, r0
    1b00:	bf 01       	movw	r22, r30
    1b02:	ff 27       	eor	r31, r31
    1b04:	93 58       	subi	r25, 0x83	; 131
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	3a f0       	brmi	.+14     	; 0x1b18 <__divsf3_pse+0x70>
    1b0a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b0c:	51 05       	cpc	r21, r1
    1b0e:	78 f0       	brcs	.+30     	; 0x1b2e <__divsf3_pse+0x86>
    1b10:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__fp_inf>
    1b14:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__fp_szero>
    1b18:	5f 3f       	cpi	r21, 0xFF	; 255
    1b1a:	e4 f3       	brlt	.-8      	; 0x1b14 <__divsf3_pse+0x6c>
    1b1c:	98 3e       	cpi	r25, 0xE8	; 232
    1b1e:	d4 f3       	brlt	.-12     	; 0x1b14 <__divsf3_pse+0x6c>
    1b20:	86 95       	lsr	r24
    1b22:	77 95       	ror	r23
    1b24:	67 95       	ror	r22
    1b26:	b7 95       	ror	r27
    1b28:	f7 95       	ror	r31
    1b2a:	9f 5f       	subi	r25, 0xFF	; 255
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__divsf3_pse+0x78>
    1b2e:	88 0f       	add	r24, r24
    1b30:	91 1d       	adc	r25, r1
    1b32:	96 95       	lsr	r25
    1b34:	87 95       	ror	r24
    1b36:	97 f9       	bld	r25, 7
    1b38:	08 95       	ret
    1b3a:	e1 e0       	ldi	r30, 0x01	; 1
    1b3c:	66 0f       	add	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	88 1f       	adc	r24, r24
    1b42:	bb 1f       	adc	r27, r27
    1b44:	62 17       	cp	r22, r18
    1b46:	73 07       	cpc	r23, r19
    1b48:	84 07       	cpc	r24, r20
    1b4a:	ba 07       	cpc	r27, r26
    1b4c:	20 f0       	brcs	.+8      	; 0x1b56 <__divsf3_pse+0xae>
    1b4e:	62 1b       	sub	r22, r18
    1b50:	73 0b       	sbc	r23, r19
    1b52:	84 0b       	sbc	r24, r20
    1b54:	ba 0b       	sbc	r27, r26
    1b56:	ee 1f       	adc	r30, r30
    1b58:	88 f7       	brcc	.-30     	; 0x1b3c <__divsf3_pse+0x94>
    1b5a:	e0 95       	com	r30
    1b5c:	08 95       	ret

00001b5e <__fixsfsi>:
    1b5e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__fixunssfsi>
    1b62:	68 94       	set
    1b64:	b1 11       	cpse	r27, r1
    1b66:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__fp_szero>
    1b6a:	08 95       	ret

00001b6c <__fixunssfsi>:
    1b6c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__fp_splitA>
    1b70:	88 f0       	brcs	.+34     	; 0x1b94 <__fixunssfsi+0x28>
    1b72:	9f 57       	subi	r25, 0x7F	; 127
    1b74:	98 f0       	brcs	.+38     	; 0x1b9c <__fixunssfsi+0x30>
    1b76:	b9 2f       	mov	r27, r25
    1b78:	99 27       	eor	r25, r25
    1b7a:	b7 51       	subi	r27, 0x17	; 23
    1b7c:	b0 f0       	brcs	.+44     	; 0x1baa <__fixunssfsi+0x3e>
    1b7e:	e1 f0       	breq	.+56     	; 0x1bb8 <__fixunssfsi+0x4c>
    1b80:	66 0f       	add	r22, r22
    1b82:	77 1f       	adc	r23, r23
    1b84:	88 1f       	adc	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	1a f0       	brmi	.+6      	; 0x1b90 <__fixunssfsi+0x24>
    1b8a:	ba 95       	dec	r27
    1b8c:	c9 f7       	brne	.-14     	; 0x1b80 <__fixunssfsi+0x14>
    1b8e:	14 c0       	rjmp	.+40     	; 0x1bb8 <__fixunssfsi+0x4c>
    1b90:	b1 30       	cpi	r27, 0x01	; 1
    1b92:	91 f0       	breq	.+36     	; 0x1bb8 <__fixunssfsi+0x4c>
    1b94:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_zero>
    1b98:	b1 e0       	ldi	r27, 0x01	; 1
    1b9a:	08 95       	ret
    1b9c:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__fp_zero>
    1ba0:	67 2f       	mov	r22, r23
    1ba2:	78 2f       	mov	r23, r24
    1ba4:	88 27       	eor	r24, r24
    1ba6:	b8 5f       	subi	r27, 0xF8	; 248
    1ba8:	39 f0       	breq	.+14     	; 0x1bb8 <__fixunssfsi+0x4c>
    1baa:	b9 3f       	cpi	r27, 0xF9	; 249
    1bac:	cc f3       	brlt	.-14     	; 0x1ba0 <__fixunssfsi+0x34>
    1bae:	86 95       	lsr	r24
    1bb0:	77 95       	ror	r23
    1bb2:	67 95       	ror	r22
    1bb4:	b3 95       	inc	r27
    1bb6:	d9 f7       	brne	.-10     	; 0x1bae <__fixunssfsi+0x42>
    1bb8:	3e f4       	brtc	.+14     	; 0x1bc8 <__fixunssfsi+0x5c>
    1bba:	90 95       	com	r25
    1bbc:	80 95       	com	r24
    1bbe:	70 95       	com	r23
    1bc0:	61 95       	neg	r22
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	08 95       	ret

00001bca <__floatunsisf>:
    1bca:	e8 94       	clt
    1bcc:	09 c0       	rjmp	.+18     	; 0x1be0 <__floatsisf+0x12>

00001bce <__floatsisf>:
    1bce:	97 fb       	bst	r25, 7
    1bd0:	3e f4       	brtc	.+14     	; 0x1be0 <__floatsisf+0x12>
    1bd2:	90 95       	com	r25
    1bd4:	80 95       	com	r24
    1bd6:	70 95       	com	r23
    1bd8:	61 95       	neg	r22
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	99 23       	and	r25, r25
    1be2:	a9 f0       	breq	.+42     	; 0x1c0e <__floatsisf+0x40>
    1be4:	f9 2f       	mov	r31, r25
    1be6:	96 e9       	ldi	r25, 0x96	; 150
    1be8:	bb 27       	eor	r27, r27
    1bea:	93 95       	inc	r25
    1bec:	f6 95       	lsr	r31
    1bee:	87 95       	ror	r24
    1bf0:	77 95       	ror	r23
    1bf2:	67 95       	ror	r22
    1bf4:	b7 95       	ror	r27
    1bf6:	f1 11       	cpse	r31, r1
    1bf8:	f8 cf       	rjmp	.-16     	; 0x1bea <__floatsisf+0x1c>
    1bfa:	fa f4       	brpl	.+62     	; 0x1c3a <__floatsisf+0x6c>
    1bfc:	bb 0f       	add	r27, r27
    1bfe:	11 f4       	brne	.+4      	; 0x1c04 <__floatsisf+0x36>
    1c00:	60 ff       	sbrs	r22, 0
    1c02:	1b c0       	rjmp	.+54     	; 0x1c3a <__floatsisf+0x6c>
    1c04:	6f 5f       	subi	r22, 0xFF	; 255
    1c06:	7f 4f       	sbci	r23, 0xFF	; 255
    1c08:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0c:	16 c0       	rjmp	.+44     	; 0x1c3a <__floatsisf+0x6c>
    1c0e:	88 23       	and	r24, r24
    1c10:	11 f0       	breq	.+4      	; 0x1c16 <__floatsisf+0x48>
    1c12:	96 e9       	ldi	r25, 0x96	; 150
    1c14:	11 c0       	rjmp	.+34     	; 0x1c38 <__floatsisf+0x6a>
    1c16:	77 23       	and	r23, r23
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <__floatsisf+0x54>
    1c1a:	9e e8       	ldi	r25, 0x8E	; 142
    1c1c:	87 2f       	mov	r24, r23
    1c1e:	76 2f       	mov	r23, r22
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <__floatsisf+0x5e>
    1c22:	66 23       	and	r22, r22
    1c24:	71 f0       	breq	.+28     	; 0x1c42 <__floatsisf+0x74>
    1c26:	96 e8       	ldi	r25, 0x86	; 134
    1c28:	86 2f       	mov	r24, r22
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	2a f0       	brmi	.+10     	; 0x1c3a <__floatsisf+0x6c>
    1c30:	9a 95       	dec	r25
    1c32:	66 0f       	add	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	88 1f       	adc	r24, r24
    1c38:	da f7       	brpl	.-10     	; 0x1c30 <__floatsisf+0x62>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	96 95       	lsr	r25
    1c3e:	87 95       	ror	r24
    1c40:	97 f9       	bld	r25, 7
    1c42:	08 95       	ret

00001c44 <__fp_cmp>:
    1c44:	99 0f       	add	r25, r25
    1c46:	00 08       	sbc	r0, r0
    1c48:	55 0f       	add	r21, r21
    1c4a:	aa 0b       	sbc	r26, r26
    1c4c:	e0 e8       	ldi	r30, 0x80	; 128
    1c4e:	fe ef       	ldi	r31, 0xFE	; 254
    1c50:	16 16       	cp	r1, r22
    1c52:	17 06       	cpc	r1, r23
    1c54:	e8 07       	cpc	r30, r24
    1c56:	f9 07       	cpc	r31, r25
    1c58:	c0 f0       	brcs	.+48     	; 0x1c8a <__fp_cmp+0x46>
    1c5a:	12 16       	cp	r1, r18
    1c5c:	13 06       	cpc	r1, r19
    1c5e:	e4 07       	cpc	r30, r20
    1c60:	f5 07       	cpc	r31, r21
    1c62:	98 f0       	brcs	.+38     	; 0x1c8a <__fp_cmp+0x46>
    1c64:	62 1b       	sub	r22, r18
    1c66:	73 0b       	sbc	r23, r19
    1c68:	84 0b       	sbc	r24, r20
    1c6a:	95 0b       	sbc	r25, r21
    1c6c:	39 f4       	brne	.+14     	; 0x1c7c <__fp_cmp+0x38>
    1c6e:	0a 26       	eor	r0, r26
    1c70:	61 f0       	breq	.+24     	; 0x1c8a <__fp_cmp+0x46>
    1c72:	23 2b       	or	r18, r19
    1c74:	24 2b       	or	r18, r20
    1c76:	25 2b       	or	r18, r21
    1c78:	21 f4       	brne	.+8      	; 0x1c82 <__fp_cmp+0x3e>
    1c7a:	08 95       	ret
    1c7c:	0a 26       	eor	r0, r26
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <__fp_cmp+0x3e>
    1c80:	a1 40       	sbci	r26, 0x01	; 1
    1c82:	a6 95       	lsr	r26
    1c84:	8f ef       	ldi	r24, 0xFF	; 255
    1c86:	81 1d       	adc	r24, r1
    1c88:	81 1d       	adc	r24, r1
    1c8a:	08 95       	ret

00001c8c <__fp_inf>:
    1c8c:	97 f9       	bld	r25, 7
    1c8e:	9f 67       	ori	r25, 0x7F	; 127
    1c90:	80 e8       	ldi	r24, 0x80	; 128
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	08 95       	ret

00001c98 <__fp_nan>:
    1c98:	9f ef       	ldi	r25, 0xFF	; 255
    1c9a:	80 ec       	ldi	r24, 0xC0	; 192
    1c9c:	08 95       	ret

00001c9e <__fp_pscA>:
    1c9e:	00 24       	eor	r0, r0
    1ca0:	0a 94       	dec	r0
    1ca2:	16 16       	cp	r1, r22
    1ca4:	17 06       	cpc	r1, r23
    1ca6:	18 06       	cpc	r1, r24
    1ca8:	09 06       	cpc	r0, r25
    1caa:	08 95       	ret

00001cac <__fp_pscB>:
    1cac:	00 24       	eor	r0, r0
    1cae:	0a 94       	dec	r0
    1cb0:	12 16       	cp	r1, r18
    1cb2:	13 06       	cpc	r1, r19
    1cb4:	14 06       	cpc	r1, r20
    1cb6:	05 06       	cpc	r0, r21
    1cb8:	08 95       	ret

00001cba <__fp_round>:
    1cba:	09 2e       	mov	r0, r25
    1cbc:	03 94       	inc	r0
    1cbe:	00 0c       	add	r0, r0
    1cc0:	11 f4       	brne	.+4      	; 0x1cc6 <__fp_round+0xc>
    1cc2:	88 23       	and	r24, r24
    1cc4:	52 f0       	brmi	.+20     	; 0x1cda <__fp_round+0x20>
    1cc6:	bb 0f       	add	r27, r27
    1cc8:	40 f4       	brcc	.+16     	; 0x1cda <__fp_round+0x20>
    1cca:	bf 2b       	or	r27, r31
    1ccc:	11 f4       	brne	.+4      	; 0x1cd2 <__fp_round+0x18>
    1cce:	60 ff       	sbrs	r22, 0
    1cd0:	04 c0       	rjmp	.+8      	; 0x1cda <__fp_round+0x20>
    1cd2:	6f 5f       	subi	r22, 0xFF	; 255
    1cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cda:	08 95       	ret

00001cdc <__fp_split3>:
    1cdc:	57 fd       	sbrc	r21, 7
    1cde:	90 58       	subi	r25, 0x80	; 128
    1ce0:	44 0f       	add	r20, r20
    1ce2:	55 1f       	adc	r21, r21
    1ce4:	59 f0       	breq	.+22     	; 0x1cfc <__fp_splitA+0x10>
    1ce6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce8:	71 f0       	breq	.+28     	; 0x1d06 <__fp_splitA+0x1a>
    1cea:	47 95       	ror	r20

00001cec <__fp_splitA>:
    1cec:	88 0f       	add	r24, r24
    1cee:	97 fb       	bst	r25, 7
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	61 f0       	breq	.+24     	; 0x1d0c <__fp_splitA+0x20>
    1cf4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cf6:	79 f0       	breq	.+30     	; 0x1d16 <__fp_splitA+0x2a>
    1cf8:	87 95       	ror	r24
    1cfa:	08 95       	ret
    1cfc:	12 16       	cp	r1, r18
    1cfe:	13 06       	cpc	r1, r19
    1d00:	14 06       	cpc	r1, r20
    1d02:	55 1f       	adc	r21, r21
    1d04:	f2 cf       	rjmp	.-28     	; 0x1cea <__fp_split3+0xe>
    1d06:	46 95       	lsr	r20
    1d08:	f1 df       	rcall	.-30     	; 0x1cec <__fp_splitA>
    1d0a:	08 c0       	rjmp	.+16     	; 0x1d1c <__fp_splitA+0x30>
    1d0c:	16 16       	cp	r1, r22
    1d0e:	17 06       	cpc	r1, r23
    1d10:	18 06       	cpc	r1, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	f1 cf       	rjmp	.-30     	; 0x1cf8 <__fp_splitA+0xc>
    1d16:	86 95       	lsr	r24
    1d18:	71 05       	cpc	r23, r1
    1d1a:	61 05       	cpc	r22, r1
    1d1c:	08 94       	sec
    1d1e:	08 95       	ret

00001d20 <__fp_zero>:
    1d20:	e8 94       	clt

00001d22 <__fp_szero>:
    1d22:	bb 27       	eor	r27, r27
    1d24:	66 27       	eor	r22, r22
    1d26:	77 27       	eor	r23, r23
    1d28:	cb 01       	movw	r24, r22
    1d2a:	97 f9       	bld	r25, 7
    1d2c:	08 95       	ret

00001d2e <__gesf2>:
    1d2e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__fp_cmp>
    1d32:	08 f4       	brcc	.+2      	; 0x1d36 <__gesf2+0x8>
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	08 95       	ret

00001d38 <__mulsf3>:
    1d38:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__mulsf3x>
    1d3c:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__fp_round>
    1d40:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__fp_pscA>
    1d44:	38 f0       	brcs	.+14     	; 0x1d54 <__mulsf3+0x1c>
    1d46:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__fp_pscB>
    1d4a:	20 f0       	brcs	.+8      	; 0x1d54 <__mulsf3+0x1c>
    1d4c:	95 23       	and	r25, r21
    1d4e:	11 f0       	breq	.+4      	; 0x1d54 <__mulsf3+0x1c>
    1d50:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__fp_inf>
    1d54:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__fp_nan>
    1d58:	11 24       	eor	r1, r1
    1d5a:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__fp_szero>

00001d5e <__mulsf3x>:
    1d5e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__fp_split3>
    1d62:	70 f3       	brcs	.-36     	; 0x1d40 <__mulsf3+0x8>

00001d64 <__mulsf3_pse>:
    1d64:	95 9f       	mul	r25, r21
    1d66:	c1 f3       	breq	.-16     	; 0x1d58 <__mulsf3+0x20>
    1d68:	95 0f       	add	r25, r21
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	55 1f       	adc	r21, r21
    1d6e:	62 9f       	mul	r22, r18
    1d70:	f0 01       	movw	r30, r0
    1d72:	72 9f       	mul	r23, r18
    1d74:	bb 27       	eor	r27, r27
    1d76:	f0 0d       	add	r31, r0
    1d78:	b1 1d       	adc	r27, r1
    1d7a:	63 9f       	mul	r22, r19
    1d7c:	aa 27       	eor	r26, r26
    1d7e:	f0 0d       	add	r31, r0
    1d80:	b1 1d       	adc	r27, r1
    1d82:	aa 1f       	adc	r26, r26
    1d84:	64 9f       	mul	r22, r20
    1d86:	66 27       	eor	r22, r22
    1d88:	b0 0d       	add	r27, r0
    1d8a:	a1 1d       	adc	r26, r1
    1d8c:	66 1f       	adc	r22, r22
    1d8e:	82 9f       	mul	r24, r18
    1d90:	22 27       	eor	r18, r18
    1d92:	b0 0d       	add	r27, r0
    1d94:	a1 1d       	adc	r26, r1
    1d96:	62 1f       	adc	r22, r18
    1d98:	73 9f       	mul	r23, r19
    1d9a:	b0 0d       	add	r27, r0
    1d9c:	a1 1d       	adc	r26, r1
    1d9e:	62 1f       	adc	r22, r18
    1da0:	83 9f       	mul	r24, r19
    1da2:	a0 0d       	add	r26, r0
    1da4:	61 1d       	adc	r22, r1
    1da6:	22 1f       	adc	r18, r18
    1da8:	74 9f       	mul	r23, r20
    1daa:	33 27       	eor	r19, r19
    1dac:	a0 0d       	add	r26, r0
    1dae:	61 1d       	adc	r22, r1
    1db0:	23 1f       	adc	r18, r19
    1db2:	84 9f       	mul	r24, r20
    1db4:	60 0d       	add	r22, r0
    1db6:	21 1d       	adc	r18, r1
    1db8:	82 2f       	mov	r24, r18
    1dba:	76 2f       	mov	r23, r22
    1dbc:	6a 2f       	mov	r22, r26
    1dbe:	11 24       	eor	r1, r1
    1dc0:	9f 57       	subi	r25, 0x7F	; 127
    1dc2:	50 40       	sbci	r21, 0x00	; 0
    1dc4:	9a f0       	brmi	.+38     	; 0x1dec <__mulsf3_pse+0x88>
    1dc6:	f1 f0       	breq	.+60     	; 0x1e04 <__mulsf3_pse+0xa0>
    1dc8:	88 23       	and	r24, r24
    1dca:	4a f0       	brmi	.+18     	; 0x1dde <__mulsf3_pse+0x7a>
    1dcc:	ee 0f       	add	r30, r30
    1dce:	ff 1f       	adc	r31, r31
    1dd0:	bb 1f       	adc	r27, r27
    1dd2:	66 1f       	adc	r22, r22
    1dd4:	77 1f       	adc	r23, r23
    1dd6:	88 1f       	adc	r24, r24
    1dd8:	91 50       	subi	r25, 0x01	; 1
    1dda:	50 40       	sbci	r21, 0x00	; 0
    1ddc:	a9 f7       	brne	.-22     	; 0x1dc8 <__mulsf3_pse+0x64>
    1dde:	9e 3f       	cpi	r25, 0xFE	; 254
    1de0:	51 05       	cpc	r21, r1
    1de2:	80 f0       	brcs	.+32     	; 0x1e04 <__mulsf3_pse+0xa0>
    1de4:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__fp_inf>
    1de8:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__fp_szero>
    1dec:	5f 3f       	cpi	r21, 0xFF	; 255
    1dee:	e4 f3       	brlt	.-8      	; 0x1de8 <__mulsf3_pse+0x84>
    1df0:	98 3e       	cpi	r25, 0xE8	; 232
    1df2:	d4 f3       	brlt	.-12     	; 0x1de8 <__mulsf3_pse+0x84>
    1df4:	86 95       	lsr	r24
    1df6:	77 95       	ror	r23
    1df8:	67 95       	ror	r22
    1dfa:	b7 95       	ror	r27
    1dfc:	f7 95       	ror	r31
    1dfe:	e7 95       	ror	r30
    1e00:	9f 5f       	subi	r25, 0xFF	; 255
    1e02:	c1 f7       	brne	.-16     	; 0x1df4 <__mulsf3_pse+0x90>
    1e04:	fe 2b       	or	r31, r30
    1e06:	88 0f       	add	r24, r24
    1e08:	91 1d       	adc	r25, r1
    1e0a:	96 95       	lsr	r25
    1e0c:	87 95       	ror	r24
    1e0e:	97 f9       	bld	r25, 7
    1e10:	08 95       	ret

00001e12 <__divmodhi4>:
    1e12:	97 fb       	bst	r25, 7
    1e14:	07 2e       	mov	r0, r23
    1e16:	16 f4       	brtc	.+4      	; 0x1e1c <__divmodhi4+0xa>
    1e18:	00 94       	com	r0
    1e1a:	07 d0       	rcall	.+14     	; 0x1e2a <__divmodhi4_neg1>
    1e1c:	77 fd       	sbrc	r23, 7
    1e1e:	09 d0       	rcall	.+18     	; 0x1e32 <__divmodhi4_neg2>
    1e20:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__udivmodhi4>
    1e24:	07 fc       	sbrc	r0, 7
    1e26:	05 d0       	rcall	.+10     	; 0x1e32 <__divmodhi4_neg2>
    1e28:	3e f4       	brtc	.+14     	; 0x1e38 <__divmodhi4_exit>

00001e2a <__divmodhi4_neg1>:
    1e2a:	90 95       	com	r25
    1e2c:	81 95       	neg	r24
    1e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e30:	08 95       	ret

00001e32 <__divmodhi4_neg2>:
    1e32:	70 95       	com	r23
    1e34:	61 95       	neg	r22
    1e36:	7f 4f       	sbci	r23, 0xFF	; 255

00001e38 <__divmodhi4_exit>:
    1e38:	08 95       	ret

00001e3a <__udivmodhi4>:
    1e3a:	aa 1b       	sub	r26, r26
    1e3c:	bb 1b       	sub	r27, r27
    1e3e:	51 e1       	ldi	r21, 0x11	; 17
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <__udivmodhi4_ep>

00001e42 <__udivmodhi4_loop>:
    1e42:	aa 1f       	adc	r26, r26
    1e44:	bb 1f       	adc	r27, r27
    1e46:	a6 17       	cp	r26, r22
    1e48:	b7 07       	cpc	r27, r23
    1e4a:	10 f0       	brcs	.+4      	; 0x1e50 <__udivmodhi4_ep>
    1e4c:	a6 1b       	sub	r26, r22
    1e4e:	b7 0b       	sbc	r27, r23

00001e50 <__udivmodhi4_ep>:
    1e50:	88 1f       	adc	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	5a 95       	dec	r21
    1e56:	a9 f7       	brne	.-22     	; 0x1e42 <__udivmodhi4_loop>
    1e58:	80 95       	com	r24
    1e5a:	90 95       	com	r25
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	08 95       	ret

00001e62 <_exit>:
    1e62:	f8 94       	cli

00001e64 <__stop_program>:
    1e64:	ff cf       	rjmp	.-2      	; 0x1e64 <__stop_program>
=======
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	8a 95       	dec	r24
    1860:	f1 f7       	brne	.-4      	; 0x185e <_ZN15music_notations13playthemelodyEPiS0_i+0x1c6>
    1862:	32 9b       	sbis	0x06, 2	; 6
    1864:	08 c0       	rjmp	.+16     	; 0x1876 <_ZN15music_notations13playthemelodyEPiS0_i+0x1de>
    1866:	30 9b       	sbis	0x06, 0	; 6
    1868:	08 c0       	rjmp	.+16     	; 0x187a <_ZN15music_notations13playthemelodyEPiS0_i+0x1e2>
    186a:	31 9b       	sbis	0x06, 1	; 6
    186c:	08 c0       	rjmp	.+16     	; 0x187e <_ZN15music_notations13playthemelodyEPiS0_i+0x1e6>
    186e:	33 99       	sbic	0x06, 3	; 6
    1870:	08 c0       	rjmp	.+16     	; 0x1882 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ea>
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	07 c0       	rjmp	.+14     	; 0x1884 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	05 c0       	rjmp	.+10     	; 0x1884 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	81 11       	cpse	r24, r1
    1886:	06 c0       	rjmp	.+12     	; 0x1894 <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
    1888:	88 85       	ldd	r24, Y+8	; 0x08
    188a:	99 85       	ldd	r25, Y+9	; 0x09
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	99 87       	std	Y+9, r25	; 0x09
    1890:	88 87       	std	Y+8, r24	; 0x08
    1892:	25 cf       	rjmp	.-438    	; 0x16de <_ZN15music_notations13playthemelodyEPiS0_i+0x46>
    1894:	29 96       	adiw	r28, 0x09	; 9
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	df 90       	pop	r13
    18ae:	cf 90       	pop	r12
    18b0:	bf 90       	pop	r11
    18b2:	af 90       	pop	r10
    18b4:	9f 90       	pop	r9
    18b6:	8f 90       	pop	r8
    18b8:	7f 90       	pop	r7
    18ba:	6f 90       	pop	r6
    18bc:	5f 90       	pop	r5
    18be:	4f 90       	pop	r4
    18c0:	3f 90       	pop	r3
    18c2:	2f 90       	pop	r2
    18c4:	08 95       	ret

000018c6 <_ZN15music_notations4toneEi>:
    18c6:	61 15       	cp	r22, r1
    18c8:	71 05       	cpc	r23, r1
    18ca:	59 f4       	brne	.+22     	; 0x18e2 <_ZN15music_notations4toneEi+0x1c>
    18cc:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <sizeofgot>
    18d0:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <sizeofgot+0x1>
    18d4:	42 e9       	ldi	r20, 0x92	; 146
    18d6:	56 e0       	ldi	r21, 0x06	; 6
    18d8:	66 eb       	ldi	r22, 0xB6	; 182
    18da:	76 e0       	ldi	r23, 0x06	; 6
    18dc:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_ZN15music_notations13playthemelodyEPiS0_i>
    18e0:	08 95       	ret
    18e2:	61 30       	cpi	r22, 0x01	; 1
    18e4:	71 05       	cpc	r23, r1
    18e6:	59 f4       	brne	.+22     	; 0x18fe <_ZN15music_notations4toneEi+0x38>
    18e8:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <sizeofpirates>
    18ec:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <sizeofpirates+0x1>
    18f0:	42 e6       	ldi	r20, 0x62	; 98
    18f2:	55 e0       	ldi	r21, 0x05	; 5
    18f4:	6a ef       	ldi	r22, 0xFA	; 250
    18f6:	75 e0       	ldi	r23, 0x05	; 5
    18f8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_ZN15music_notations13playthemelodyEPiS0_i>
    18fc:	08 95       	ret
    18fe:	62 30       	cpi	r22, 0x02	; 2
    1900:	71 05       	cpc	r23, r1
    1902:	59 f4       	brne	.+22     	; 0x191a <_ZN15music_notations4toneEi+0x54>
    1904:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <sizeofstarwars>
    1908:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <sizeofstarwars+0x1>
    190c:	4a ec       	ldi	r20, 0xCA	; 202
    190e:	54 e0       	ldi	r21, 0x04	; 4
    1910:	66 e1       	ldi	r22, 0x16	; 22
    1912:	75 e0       	ldi	r23, 0x05	; 5
    1914:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_ZN15music_notations13playthemelodyEPiS0_i>
    1918:	08 95       	ret
    191a:	63 30       	cpi	r22, 0x03	; 3
    191c:	71 05       	cpc	r23, r1
    191e:	59 f4       	brne	.+22     	; 0x1936 <_ZN15music_notations4toneEi+0x70>
    1920:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <sizeofcoffindance>
    1924:	30 91 d3 02 	lds	r19, 0x02D3	; 0x8002d3 <sizeofcoffindance+0x1>
    1928:	4a e3       	ldi	r20, 0x3A	; 58
    192a:	53 e0       	ldi	r21, 0x03	; 3
    192c:	62 e0       	ldi	r22, 0x02	; 2
    192e:	74 e0       	ldi	r23, 0x04	; 4
    1930:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_ZN15music_notations13playthemelodyEPiS0_i>
    1934:	08 95       	ret
    1936:	20 91 d0 02 	lds	r18, 0x02D0	; 0x8002d0 <sizeoftakeonme>
    193a:	30 91 d1 02 	lds	r19, 0x02D1	; 0x8002d1 <sizeoftakeonme+0x1>
    193e:	4a ed       	ldi	r20, 0xDA	; 218
    1940:	52 e0       	ldi	r21, 0x02	; 2
    1942:	6a e0       	ldi	r22, 0x0A	; 10
    1944:	73 e0       	ldi	r23, 0x03	; 3
    1946:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_ZN15music_notations13playthemelodyEPiS0_i>
    194a:	08 95       	ret

0000194c <__subsf3>:
    194c:	50 58       	subi	r21, 0x80	; 128

0000194e <__addsf3>:
    194e:	bb 27       	eor	r27, r27
    1950:	aa 27       	eor	r26, r26
    1952:	0e 94 be 0c 	call	0x197c	; 0x197c <__addsf3x>
    1956:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__fp_round>
    195a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_pscA>
    195e:	38 f0       	brcs	.+14     	; 0x196e <__addsf3+0x20>
    1960:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__fp_pscB>
    1964:	20 f0       	brcs	.+8      	; 0x196e <__addsf3+0x20>
    1966:	39 f4       	brne	.+14     	; 0x1976 <__addsf3+0x28>
    1968:	9f 3f       	cpi	r25, 0xFF	; 255
    196a:	19 f4       	brne	.+6      	; 0x1972 <__addsf3+0x24>
    196c:	26 f4       	brtc	.+8      	; 0x1976 <__addsf3+0x28>
    196e:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__fp_nan>
    1972:	0e f4       	brtc	.+2      	; 0x1976 <__addsf3+0x28>
    1974:	e0 95       	com	r30
    1976:	e7 fb       	bst	r30, 7
    1978:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__fp_inf>

0000197c <__addsf3x>:
    197c:	e9 2f       	mov	r30, r25
    197e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__fp_split3>
    1982:	58 f3       	brcs	.-42     	; 0x195a <__addsf3+0xc>
    1984:	ba 17       	cp	r27, r26
    1986:	62 07       	cpc	r22, r18
    1988:	73 07       	cpc	r23, r19
    198a:	84 07       	cpc	r24, r20
    198c:	95 07       	cpc	r25, r21
    198e:	20 f0       	brcs	.+8      	; 0x1998 <__addsf3x+0x1c>
    1990:	79 f4       	brne	.+30     	; 0x19b0 <__addsf3x+0x34>
    1992:	a6 f5       	brtc	.+104    	; 0x19fc <__addsf3x+0x80>
    1994:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__fp_zero>
    1998:	0e f4       	brtc	.+2      	; 0x199c <__addsf3x+0x20>
    199a:	e0 95       	com	r30
    199c:	0b 2e       	mov	r0, r27
    199e:	ba 2f       	mov	r27, r26
    19a0:	a0 2d       	mov	r26, r0
    19a2:	0b 01       	movw	r0, r22
    19a4:	b9 01       	movw	r22, r18
    19a6:	90 01       	movw	r18, r0
    19a8:	0c 01       	movw	r0, r24
    19aa:	ca 01       	movw	r24, r20
    19ac:	a0 01       	movw	r20, r0
    19ae:	11 24       	eor	r1, r1
    19b0:	ff 27       	eor	r31, r31
    19b2:	59 1b       	sub	r21, r25
    19b4:	99 f0       	breq	.+38     	; 0x19dc <__addsf3x+0x60>
    19b6:	59 3f       	cpi	r21, 0xF9	; 249
    19b8:	50 f4       	brcc	.+20     	; 0x19ce <__addsf3x+0x52>
    19ba:	50 3e       	cpi	r21, 0xE0	; 224
    19bc:	68 f1       	brcs	.+90     	; 0x1a18 <__addsf3x+0x9c>
    19be:	1a 16       	cp	r1, r26
    19c0:	f0 40       	sbci	r31, 0x00	; 0
    19c2:	a2 2f       	mov	r26, r18
    19c4:	23 2f       	mov	r18, r19
    19c6:	34 2f       	mov	r19, r20
    19c8:	44 27       	eor	r20, r20
    19ca:	58 5f       	subi	r21, 0xF8	; 248
    19cc:	f3 cf       	rjmp	.-26     	; 0x19b4 <__addsf3x+0x38>
    19ce:	46 95       	lsr	r20
    19d0:	37 95       	ror	r19
    19d2:	27 95       	ror	r18
    19d4:	a7 95       	ror	r26
    19d6:	f0 40       	sbci	r31, 0x00	; 0
    19d8:	53 95       	inc	r21
    19da:	c9 f7       	brne	.-14     	; 0x19ce <__addsf3x+0x52>
    19dc:	7e f4       	brtc	.+30     	; 0x19fc <__addsf3x+0x80>
    19de:	1f 16       	cp	r1, r31
    19e0:	ba 0b       	sbc	r27, r26
    19e2:	62 0b       	sbc	r22, r18
    19e4:	73 0b       	sbc	r23, r19
    19e6:	84 0b       	sbc	r24, r20
    19e8:	ba f0       	brmi	.+46     	; 0x1a18 <__addsf3x+0x9c>
    19ea:	91 50       	subi	r25, 0x01	; 1
    19ec:	a1 f0       	breq	.+40     	; 0x1a16 <__addsf3x+0x9a>
    19ee:	ff 0f       	add	r31, r31
    19f0:	bb 1f       	adc	r27, r27
    19f2:	66 1f       	adc	r22, r22
    19f4:	77 1f       	adc	r23, r23
    19f6:	88 1f       	adc	r24, r24
    19f8:	c2 f7       	brpl	.-16     	; 0x19ea <__addsf3x+0x6e>
    19fa:	0e c0       	rjmp	.+28     	; 0x1a18 <__addsf3x+0x9c>
    19fc:	ba 0f       	add	r27, r26
    19fe:	62 1f       	adc	r22, r18
    1a00:	73 1f       	adc	r23, r19
    1a02:	84 1f       	adc	r24, r20
    1a04:	48 f4       	brcc	.+18     	; 0x1a18 <__addsf3x+0x9c>
    1a06:	87 95       	ror	r24
    1a08:	77 95       	ror	r23
    1a0a:	67 95       	ror	r22
    1a0c:	b7 95       	ror	r27
    1a0e:	f7 95       	ror	r31
    1a10:	9e 3f       	cpi	r25, 0xFE	; 254
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <__addsf3x+0x9a>
    1a14:	b0 cf       	rjmp	.-160    	; 0x1976 <__addsf3+0x28>
    1a16:	93 95       	inc	r25
    1a18:	88 0f       	add	r24, r24
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <__addsf3x+0xa2>
    1a1c:	99 27       	eor	r25, r25
    1a1e:	ee 0f       	add	r30, r30
    1a20:	97 95       	ror	r25
    1a22:	87 95       	ror	r24
    1a24:	08 95       	ret

00001a26 <__cmpsf2>:
    1a26:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__fp_cmp>
    1a2a:	08 f4       	brcc	.+2      	; 0x1a2e <__cmpsf2+0x8>
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	08 95       	ret

00001a30 <__divsf3>:
    1a30:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__divsf3x>
    1a34:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__fp_round>
    1a38:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__fp_pscB>
    1a3c:	58 f0       	brcs	.+22     	; 0x1a54 <__divsf3+0x24>
    1a3e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_pscA>
    1a42:	40 f0       	brcs	.+16     	; 0x1a54 <__divsf3+0x24>
    1a44:	29 f4       	brne	.+10     	; 0x1a50 <__divsf3+0x20>
    1a46:	5f 3f       	cpi	r21, 0xFF	; 255
    1a48:	29 f0       	breq	.+10     	; 0x1a54 <__divsf3+0x24>
    1a4a:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__fp_inf>
    1a4e:	51 11       	cpse	r21, r1
    1a50:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__fp_szero>
    1a54:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__fp_nan>

00001a58 <__divsf3x>:
    1a58:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__fp_split3>
    1a5c:	68 f3       	brcs	.-38     	; 0x1a38 <__divsf3+0x8>

00001a5e <__divsf3_pse>:
    1a5e:	99 23       	and	r25, r25
    1a60:	b1 f3       	breq	.-20     	; 0x1a4e <__divsf3+0x1e>
    1a62:	55 23       	and	r21, r21
    1a64:	91 f3       	breq	.-28     	; 0x1a4a <__divsf3+0x1a>
    1a66:	95 1b       	sub	r25, r21
    1a68:	55 0b       	sbc	r21, r21
    1a6a:	bb 27       	eor	r27, r27
    1a6c:	aa 27       	eor	r26, r26
    1a6e:	62 17       	cp	r22, r18
    1a70:	73 07       	cpc	r23, r19
    1a72:	84 07       	cpc	r24, r20
    1a74:	38 f0       	brcs	.+14     	; 0x1a84 <__divsf3_pse+0x26>
    1a76:	9f 5f       	subi	r25, 0xFF	; 255
    1a78:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7a:	22 0f       	add	r18, r18
    1a7c:	33 1f       	adc	r19, r19
    1a7e:	44 1f       	adc	r20, r20
    1a80:	aa 1f       	adc	r26, r26
    1a82:	a9 f3       	breq	.-22     	; 0x1a6e <__divsf3_pse+0x10>
    1a84:	35 d0       	rcall	.+106    	; 0x1af0 <__divsf3_pse+0x92>
    1a86:	0e 2e       	mov	r0, r30
    1a88:	3a f0       	brmi	.+14     	; 0x1a98 <__divsf3_pse+0x3a>
    1a8a:	e0 e8       	ldi	r30, 0x80	; 128
    1a8c:	32 d0       	rcall	.+100    	; 0x1af2 <__divsf3_pse+0x94>
    1a8e:	91 50       	subi	r25, 0x01	; 1
    1a90:	50 40       	sbci	r21, 0x00	; 0
    1a92:	e6 95       	lsr	r30
    1a94:	00 1c       	adc	r0, r0
    1a96:	ca f7       	brpl	.-14     	; 0x1a8a <__divsf3_pse+0x2c>
    1a98:	2b d0       	rcall	.+86     	; 0x1af0 <__divsf3_pse+0x92>
    1a9a:	fe 2f       	mov	r31, r30
    1a9c:	29 d0       	rcall	.+82     	; 0x1af0 <__divsf3_pse+0x92>
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	bb 1f       	adc	r27, r27
    1aa6:	26 17       	cp	r18, r22
    1aa8:	37 07       	cpc	r19, r23
    1aaa:	48 07       	cpc	r20, r24
    1aac:	ab 07       	cpc	r26, r27
    1aae:	b0 e8       	ldi	r27, 0x80	; 128
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <__divsf3_pse+0x56>
    1ab2:	bb 0b       	sbc	r27, r27
    1ab4:	80 2d       	mov	r24, r0
    1ab6:	bf 01       	movw	r22, r30
    1ab8:	ff 27       	eor	r31, r31
    1aba:	93 58       	subi	r25, 0x83	; 131
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	3a f0       	brmi	.+14     	; 0x1ace <__divsf3_pse+0x70>
    1ac0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ac2:	51 05       	cpc	r21, r1
    1ac4:	78 f0       	brcs	.+30     	; 0x1ae4 <__divsf3_pse+0x86>
    1ac6:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__fp_inf>
    1aca:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__fp_szero>
    1ace:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad0:	e4 f3       	brlt	.-8      	; 0x1aca <__divsf3_pse+0x6c>
    1ad2:	98 3e       	cpi	r25, 0xE8	; 232
    1ad4:	d4 f3       	brlt	.-12     	; 0x1aca <__divsf3_pse+0x6c>
    1ad6:	86 95       	lsr	r24
    1ad8:	77 95       	ror	r23
    1ada:	67 95       	ror	r22
    1adc:	b7 95       	ror	r27
    1ade:	f7 95       	ror	r31
    1ae0:	9f 5f       	subi	r25, 0xFF	; 255
    1ae2:	c9 f7       	brne	.-14     	; 0x1ad6 <__divsf3_pse+0x78>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	91 1d       	adc	r25, r1
    1ae8:	96 95       	lsr	r25
    1aea:	87 95       	ror	r24
    1aec:	97 f9       	bld	r25, 7
    1aee:	08 95       	ret
    1af0:	e1 e0       	ldi	r30, 0x01	; 1
    1af2:	66 0f       	add	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	88 1f       	adc	r24, r24
    1af8:	bb 1f       	adc	r27, r27
    1afa:	62 17       	cp	r22, r18
    1afc:	73 07       	cpc	r23, r19
    1afe:	84 07       	cpc	r24, r20
    1b00:	ba 07       	cpc	r27, r26
    1b02:	20 f0       	brcs	.+8      	; 0x1b0c <__divsf3_pse+0xae>
    1b04:	62 1b       	sub	r22, r18
    1b06:	73 0b       	sbc	r23, r19
    1b08:	84 0b       	sbc	r24, r20
    1b0a:	ba 0b       	sbc	r27, r26
    1b0c:	ee 1f       	adc	r30, r30
    1b0e:	88 f7       	brcc	.-30     	; 0x1af2 <__divsf3_pse+0x94>
    1b10:	e0 95       	com	r30
    1b12:	08 95       	ret

00001b14 <__fixsfsi>:
    1b14:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__fixunssfsi>
    1b18:	68 94       	set
    1b1a:	b1 11       	cpse	r27, r1
    1b1c:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__fp_szero>
    1b20:	08 95       	ret

00001b22 <__fixunssfsi>:
    1b22:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__fp_splitA>
    1b26:	88 f0       	brcs	.+34     	; 0x1b4a <__fixunssfsi+0x28>
    1b28:	9f 57       	subi	r25, 0x7F	; 127
    1b2a:	98 f0       	brcs	.+38     	; 0x1b52 <__fixunssfsi+0x30>
    1b2c:	b9 2f       	mov	r27, r25
    1b2e:	99 27       	eor	r25, r25
    1b30:	b7 51       	subi	r27, 0x17	; 23
    1b32:	b0 f0       	brcs	.+44     	; 0x1b60 <__fixunssfsi+0x3e>
    1b34:	e1 f0       	breq	.+56     	; 0x1b6e <__fixunssfsi+0x4c>
    1b36:	66 0f       	add	r22, r22
    1b38:	77 1f       	adc	r23, r23
    1b3a:	88 1f       	adc	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	1a f0       	brmi	.+6      	; 0x1b46 <__fixunssfsi+0x24>
    1b40:	ba 95       	dec	r27
    1b42:	c9 f7       	brne	.-14     	; 0x1b36 <__fixunssfsi+0x14>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <__fixunssfsi+0x4c>
    1b46:	b1 30       	cpi	r27, 0x01	; 1
    1b48:	91 f0       	breq	.+36     	; 0x1b6e <__fixunssfsi+0x4c>
    1b4a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__fp_zero>
    1b4e:	b1 e0       	ldi	r27, 0x01	; 1
    1b50:	08 95       	ret
    1b52:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__fp_zero>
    1b56:	67 2f       	mov	r22, r23
    1b58:	78 2f       	mov	r23, r24
    1b5a:	88 27       	eor	r24, r24
    1b5c:	b8 5f       	subi	r27, 0xF8	; 248
    1b5e:	39 f0       	breq	.+14     	; 0x1b6e <__fixunssfsi+0x4c>
    1b60:	b9 3f       	cpi	r27, 0xF9	; 249
    1b62:	cc f3       	brlt	.-14     	; 0x1b56 <__fixunssfsi+0x34>
    1b64:	86 95       	lsr	r24
    1b66:	77 95       	ror	r23
    1b68:	67 95       	ror	r22
    1b6a:	b3 95       	inc	r27
    1b6c:	d9 f7       	brne	.-10     	; 0x1b64 <__fixunssfsi+0x42>
    1b6e:	3e f4       	brtc	.+14     	; 0x1b7e <__fixunssfsi+0x5c>
    1b70:	90 95       	com	r25
    1b72:	80 95       	com	r24
    1b74:	70 95       	com	r23
    1b76:	61 95       	neg	r22
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	08 95       	ret

00001b80 <__floatunsisf>:
    1b80:	e8 94       	clt
    1b82:	09 c0       	rjmp	.+18     	; 0x1b96 <__floatsisf+0x12>

00001b84 <__floatsisf>:
    1b84:	97 fb       	bst	r25, 7
    1b86:	3e f4       	brtc	.+14     	; 0x1b96 <__floatsisf+0x12>
    1b88:	90 95       	com	r25
    1b8a:	80 95       	com	r24
    1b8c:	70 95       	com	r23
    1b8e:	61 95       	neg	r22
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255
    1b92:	8f 4f       	sbci	r24, 0xFF	; 255
    1b94:	9f 4f       	sbci	r25, 0xFF	; 255
    1b96:	99 23       	and	r25, r25
    1b98:	a9 f0       	breq	.+42     	; 0x1bc4 <__floatsisf+0x40>
    1b9a:	f9 2f       	mov	r31, r25
    1b9c:	96 e9       	ldi	r25, 0x96	; 150
    1b9e:	bb 27       	eor	r27, r27
    1ba0:	93 95       	inc	r25
    1ba2:	f6 95       	lsr	r31
    1ba4:	87 95       	ror	r24
    1ba6:	77 95       	ror	r23
    1ba8:	67 95       	ror	r22
    1baa:	b7 95       	ror	r27
    1bac:	f1 11       	cpse	r31, r1
    1bae:	f8 cf       	rjmp	.-16     	; 0x1ba0 <__floatsisf+0x1c>
    1bb0:	fa f4       	brpl	.+62     	; 0x1bf0 <__floatsisf+0x6c>
    1bb2:	bb 0f       	add	r27, r27
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <__floatsisf+0x36>
    1bb6:	60 ff       	sbrs	r22, 0
    1bb8:	1b c0       	rjmp	.+54     	; 0x1bf0 <__floatsisf+0x6c>
    1bba:	6f 5f       	subi	r22, 0xFF	; 255
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	16 c0       	rjmp	.+44     	; 0x1bf0 <__floatsisf+0x6c>
    1bc4:	88 23       	and	r24, r24
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <__floatsisf+0x48>
    1bc8:	96 e9       	ldi	r25, 0x96	; 150
    1bca:	11 c0       	rjmp	.+34     	; 0x1bee <__floatsisf+0x6a>
    1bcc:	77 23       	and	r23, r23
    1bce:	21 f0       	breq	.+8      	; 0x1bd8 <__floatsisf+0x54>
    1bd0:	9e e8       	ldi	r25, 0x8E	; 142
    1bd2:	87 2f       	mov	r24, r23
    1bd4:	76 2f       	mov	r23, r22
    1bd6:	05 c0       	rjmp	.+10     	; 0x1be2 <__floatsisf+0x5e>
    1bd8:	66 23       	and	r22, r22
    1bda:	71 f0       	breq	.+28     	; 0x1bf8 <__floatsisf+0x74>
    1bdc:	96 e8       	ldi	r25, 0x86	; 134
    1bde:	86 2f       	mov	r24, r22
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	2a f0       	brmi	.+10     	; 0x1bf0 <__floatsisf+0x6c>
    1be6:	9a 95       	dec	r25
    1be8:	66 0f       	add	r22, r22
    1bea:	77 1f       	adc	r23, r23
    1bec:	88 1f       	adc	r24, r24
    1bee:	da f7       	brpl	.-10     	; 0x1be6 <__floatsisf+0x62>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	96 95       	lsr	r25
    1bf4:	87 95       	ror	r24
    1bf6:	97 f9       	bld	r25, 7
    1bf8:	08 95       	ret

00001bfa <__fp_cmp>:
    1bfa:	99 0f       	add	r25, r25
    1bfc:	00 08       	sbc	r0, r0
    1bfe:	55 0f       	add	r21, r21
    1c00:	aa 0b       	sbc	r26, r26
    1c02:	e0 e8       	ldi	r30, 0x80	; 128
    1c04:	fe ef       	ldi	r31, 0xFE	; 254
    1c06:	16 16       	cp	r1, r22
    1c08:	17 06       	cpc	r1, r23
    1c0a:	e8 07       	cpc	r30, r24
    1c0c:	f9 07       	cpc	r31, r25
    1c0e:	c0 f0       	brcs	.+48     	; 0x1c40 <__fp_cmp+0x46>
    1c10:	12 16       	cp	r1, r18
    1c12:	13 06       	cpc	r1, r19
    1c14:	e4 07       	cpc	r30, r20
    1c16:	f5 07       	cpc	r31, r21
    1c18:	98 f0       	brcs	.+38     	; 0x1c40 <__fp_cmp+0x46>
    1c1a:	62 1b       	sub	r22, r18
    1c1c:	73 0b       	sbc	r23, r19
    1c1e:	84 0b       	sbc	r24, r20
    1c20:	95 0b       	sbc	r25, r21
    1c22:	39 f4       	brne	.+14     	; 0x1c32 <__fp_cmp+0x38>
    1c24:	0a 26       	eor	r0, r26
    1c26:	61 f0       	breq	.+24     	; 0x1c40 <__fp_cmp+0x46>
    1c28:	23 2b       	or	r18, r19
    1c2a:	24 2b       	or	r18, r20
    1c2c:	25 2b       	or	r18, r21
    1c2e:	21 f4       	brne	.+8      	; 0x1c38 <__fp_cmp+0x3e>
    1c30:	08 95       	ret
    1c32:	0a 26       	eor	r0, r26
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <__fp_cmp+0x3e>
    1c36:	a1 40       	sbci	r26, 0x01	; 1
    1c38:	a6 95       	lsr	r26
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	81 1d       	adc	r24, r1
    1c3e:	81 1d       	adc	r24, r1
    1c40:	08 95       	ret

00001c42 <__fp_inf>:
    1c42:	97 f9       	bld	r25, 7
    1c44:	9f 67       	ori	r25, 0x7F	; 127
    1c46:	80 e8       	ldi	r24, 0x80	; 128
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	08 95       	ret

00001c4e <__fp_nan>:
    1c4e:	9f ef       	ldi	r25, 0xFF	; 255
    1c50:	80 ec       	ldi	r24, 0xC0	; 192
    1c52:	08 95       	ret

00001c54 <__fp_pscA>:
    1c54:	00 24       	eor	r0, r0
    1c56:	0a 94       	dec	r0
    1c58:	16 16       	cp	r1, r22
    1c5a:	17 06       	cpc	r1, r23
    1c5c:	18 06       	cpc	r1, r24
    1c5e:	09 06       	cpc	r0, r25
    1c60:	08 95       	ret

00001c62 <__fp_pscB>:
    1c62:	00 24       	eor	r0, r0
    1c64:	0a 94       	dec	r0
    1c66:	12 16       	cp	r1, r18
    1c68:	13 06       	cpc	r1, r19
    1c6a:	14 06       	cpc	r1, r20
    1c6c:	05 06       	cpc	r0, r21
    1c6e:	08 95       	ret

00001c70 <__fp_round>:
    1c70:	09 2e       	mov	r0, r25
    1c72:	03 94       	inc	r0
    1c74:	00 0c       	add	r0, r0
    1c76:	11 f4       	brne	.+4      	; 0x1c7c <__fp_round+0xc>
    1c78:	88 23       	and	r24, r24
    1c7a:	52 f0       	brmi	.+20     	; 0x1c90 <__fp_round+0x20>
    1c7c:	bb 0f       	add	r27, r27
    1c7e:	40 f4       	brcc	.+16     	; 0x1c90 <__fp_round+0x20>
    1c80:	bf 2b       	or	r27, r31
    1c82:	11 f4       	brne	.+4      	; 0x1c88 <__fp_round+0x18>
    1c84:	60 ff       	sbrs	r22, 0
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <__fp_round+0x20>
    1c88:	6f 5f       	subi	r22, 0xFF	; 255
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	08 95       	ret

00001c92 <__fp_split3>:
    1c92:	57 fd       	sbrc	r21, 7
    1c94:	90 58       	subi	r25, 0x80	; 128
    1c96:	44 0f       	add	r20, r20
    1c98:	55 1f       	adc	r21, r21
    1c9a:	59 f0       	breq	.+22     	; 0x1cb2 <__fp_splitA+0x10>
    1c9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c9e:	71 f0       	breq	.+28     	; 0x1cbc <__fp_splitA+0x1a>
    1ca0:	47 95       	ror	r20

00001ca2 <__fp_splitA>:
    1ca2:	88 0f       	add	r24, r24
    1ca4:	97 fb       	bst	r25, 7
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	61 f0       	breq	.+24     	; 0x1cc2 <__fp_splitA+0x20>
    1caa:	9f 3f       	cpi	r25, 0xFF	; 255
    1cac:	79 f0       	breq	.+30     	; 0x1ccc <__fp_splitA+0x2a>
    1cae:	87 95       	ror	r24
    1cb0:	08 95       	ret
    1cb2:	12 16       	cp	r1, r18
    1cb4:	13 06       	cpc	r1, r19
    1cb6:	14 06       	cpc	r1, r20
    1cb8:	55 1f       	adc	r21, r21
    1cba:	f2 cf       	rjmp	.-28     	; 0x1ca0 <__fp_split3+0xe>
    1cbc:	46 95       	lsr	r20
    1cbe:	f1 df       	rcall	.-30     	; 0x1ca2 <__fp_splitA>
    1cc0:	08 c0       	rjmp	.+16     	; 0x1cd2 <__fp_splitA+0x30>
    1cc2:	16 16       	cp	r1, r22
    1cc4:	17 06       	cpc	r1, r23
    1cc6:	18 06       	cpc	r1, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	f1 cf       	rjmp	.-30     	; 0x1cae <__fp_splitA+0xc>
    1ccc:	86 95       	lsr	r24
    1cce:	71 05       	cpc	r23, r1
    1cd0:	61 05       	cpc	r22, r1
    1cd2:	08 94       	sec
    1cd4:	08 95       	ret

00001cd6 <__fp_zero>:
    1cd6:	e8 94       	clt

00001cd8 <__fp_szero>:
    1cd8:	bb 27       	eor	r27, r27
    1cda:	66 27       	eor	r22, r22
    1cdc:	77 27       	eor	r23, r23
    1cde:	cb 01       	movw	r24, r22
    1ce0:	97 f9       	bld	r25, 7
    1ce2:	08 95       	ret

00001ce4 <__gesf2>:
    1ce4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__fp_cmp>
    1ce8:	08 f4       	brcc	.+2      	; 0x1cec <__gesf2+0x8>
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	08 95       	ret

00001cee <__mulsf3>:
    1cee:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__mulsf3x>
    1cf2:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__fp_round>
    1cf6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_pscA>
    1cfa:	38 f0       	brcs	.+14     	; 0x1d0a <__mulsf3+0x1c>
    1cfc:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__fp_pscB>
    1d00:	20 f0       	brcs	.+8      	; 0x1d0a <__mulsf3+0x1c>
    1d02:	95 23       	and	r25, r21
    1d04:	11 f0       	breq	.+4      	; 0x1d0a <__mulsf3+0x1c>
    1d06:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__fp_inf>
    1d0a:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__fp_nan>
    1d0e:	11 24       	eor	r1, r1
    1d10:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__fp_szero>

00001d14 <__mulsf3x>:
    1d14:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__fp_split3>
    1d18:	70 f3       	brcs	.-36     	; 0x1cf6 <__mulsf3+0x8>

00001d1a <__mulsf3_pse>:
    1d1a:	95 9f       	mul	r25, r21
    1d1c:	c1 f3       	breq	.-16     	; 0x1d0e <__mulsf3+0x20>
    1d1e:	95 0f       	add	r25, r21
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	55 1f       	adc	r21, r21
    1d24:	62 9f       	mul	r22, r18
    1d26:	f0 01       	movw	r30, r0
    1d28:	72 9f       	mul	r23, r18
    1d2a:	bb 27       	eor	r27, r27
    1d2c:	f0 0d       	add	r31, r0
    1d2e:	b1 1d       	adc	r27, r1
    1d30:	63 9f       	mul	r22, r19
    1d32:	aa 27       	eor	r26, r26
    1d34:	f0 0d       	add	r31, r0
    1d36:	b1 1d       	adc	r27, r1
    1d38:	aa 1f       	adc	r26, r26
    1d3a:	64 9f       	mul	r22, r20
    1d3c:	66 27       	eor	r22, r22
    1d3e:	b0 0d       	add	r27, r0
    1d40:	a1 1d       	adc	r26, r1
    1d42:	66 1f       	adc	r22, r22
    1d44:	82 9f       	mul	r24, r18
    1d46:	22 27       	eor	r18, r18
    1d48:	b0 0d       	add	r27, r0
    1d4a:	a1 1d       	adc	r26, r1
    1d4c:	62 1f       	adc	r22, r18
    1d4e:	73 9f       	mul	r23, r19
    1d50:	b0 0d       	add	r27, r0
    1d52:	a1 1d       	adc	r26, r1
    1d54:	62 1f       	adc	r22, r18
    1d56:	83 9f       	mul	r24, r19
    1d58:	a0 0d       	add	r26, r0
    1d5a:	61 1d       	adc	r22, r1
    1d5c:	22 1f       	adc	r18, r18
    1d5e:	74 9f       	mul	r23, r20
    1d60:	33 27       	eor	r19, r19
    1d62:	a0 0d       	add	r26, r0
    1d64:	61 1d       	adc	r22, r1
    1d66:	23 1f       	adc	r18, r19
    1d68:	84 9f       	mul	r24, r20
    1d6a:	60 0d       	add	r22, r0
    1d6c:	21 1d       	adc	r18, r1
    1d6e:	82 2f       	mov	r24, r18
    1d70:	76 2f       	mov	r23, r22
    1d72:	6a 2f       	mov	r22, r26
    1d74:	11 24       	eor	r1, r1
    1d76:	9f 57       	subi	r25, 0x7F	; 127
    1d78:	50 40       	sbci	r21, 0x00	; 0
    1d7a:	9a f0       	brmi	.+38     	; 0x1da2 <__mulsf3_pse+0x88>
    1d7c:	f1 f0       	breq	.+60     	; 0x1dba <__mulsf3_pse+0xa0>
    1d7e:	88 23       	and	r24, r24
    1d80:	4a f0       	brmi	.+18     	; 0x1d94 <__mulsf3_pse+0x7a>
    1d82:	ee 0f       	add	r30, r30
    1d84:	ff 1f       	adc	r31, r31
    1d86:	bb 1f       	adc	r27, r27
    1d88:	66 1f       	adc	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	91 50       	subi	r25, 0x01	; 1
    1d90:	50 40       	sbci	r21, 0x00	; 0
    1d92:	a9 f7       	brne	.-22     	; 0x1d7e <__mulsf3_pse+0x64>
    1d94:	9e 3f       	cpi	r25, 0xFE	; 254
    1d96:	51 05       	cpc	r21, r1
    1d98:	80 f0       	brcs	.+32     	; 0x1dba <__mulsf3_pse+0xa0>
    1d9a:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__fp_inf>
    1d9e:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__fp_szero>
    1da2:	5f 3f       	cpi	r21, 0xFF	; 255
    1da4:	e4 f3       	brlt	.-8      	; 0x1d9e <__mulsf3_pse+0x84>
    1da6:	98 3e       	cpi	r25, 0xE8	; 232
    1da8:	d4 f3       	brlt	.-12     	; 0x1d9e <__mulsf3_pse+0x84>
    1daa:	86 95       	lsr	r24
    1dac:	77 95       	ror	r23
    1dae:	67 95       	ror	r22
    1db0:	b7 95       	ror	r27
    1db2:	f7 95       	ror	r31
    1db4:	e7 95       	ror	r30
    1db6:	9f 5f       	subi	r25, 0xFF	; 255
    1db8:	c1 f7       	brne	.-16     	; 0x1daa <__mulsf3_pse+0x90>
    1dba:	fe 2b       	or	r31, r30
    1dbc:	88 0f       	add	r24, r24
    1dbe:	91 1d       	adc	r25, r1
    1dc0:	96 95       	lsr	r25
    1dc2:	87 95       	ror	r24
    1dc4:	97 f9       	bld	r25, 7
    1dc6:	08 95       	ret

00001dc8 <__divmodhi4>:
    1dc8:	97 fb       	bst	r25, 7
    1dca:	07 2e       	mov	r0, r23
    1dcc:	16 f4       	brtc	.+4      	; 0x1dd2 <__divmodhi4+0xa>
    1dce:	00 94       	com	r0
    1dd0:	07 d0       	rcall	.+14     	; 0x1de0 <__divmodhi4_neg1>
    1dd2:	77 fd       	sbrc	r23, 7
    1dd4:	09 d0       	rcall	.+18     	; 0x1de8 <__divmodhi4_neg2>
    1dd6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__udivmodhi4>
    1dda:	07 fc       	sbrc	r0, 7
    1ddc:	05 d0       	rcall	.+10     	; 0x1de8 <__divmodhi4_neg2>
    1dde:	3e f4       	brtc	.+14     	; 0x1dee <__divmodhi4_exit>

00001de0 <__divmodhi4_neg1>:
    1de0:	90 95       	com	r25
    1de2:	81 95       	neg	r24
    1de4:	9f 4f       	sbci	r25, 0xFF	; 255
    1de6:	08 95       	ret

00001de8 <__divmodhi4_neg2>:
    1de8:	70 95       	com	r23
    1dea:	61 95       	neg	r22
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255

00001dee <__divmodhi4_exit>:
    1dee:	08 95       	ret

00001df0 <__udivmodhi4>:
    1df0:	aa 1b       	sub	r26, r26
    1df2:	bb 1b       	sub	r27, r27
    1df4:	51 e1       	ldi	r21, 0x11	; 17
    1df6:	07 c0       	rjmp	.+14     	; 0x1e06 <__udivmodhi4_ep>

00001df8 <__udivmodhi4_loop>:
    1df8:	aa 1f       	adc	r26, r26
    1dfa:	bb 1f       	adc	r27, r27
    1dfc:	a6 17       	cp	r26, r22
    1dfe:	b7 07       	cpc	r27, r23
    1e00:	10 f0       	brcs	.+4      	; 0x1e06 <__udivmodhi4_ep>
    1e02:	a6 1b       	sub	r26, r22
    1e04:	b7 0b       	sbc	r27, r23

00001e06 <__udivmodhi4_ep>:
    1e06:	88 1f       	adc	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	5a 95       	dec	r21
    1e0c:	a9 f7       	brne	.-22     	; 0x1df8 <__udivmodhi4_loop>
    1e0e:	80 95       	com	r24
    1e10:	90 95       	com	r25
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	08 95       	ret

00001e18 <_exit>:
    1e18:	f8 94       	cli

00001e1a <__stop_program>:
    1e1a:	ff cf       	rjmp	.-2      	; 0x1e1a <__stop_program>
>>>>>>> master
