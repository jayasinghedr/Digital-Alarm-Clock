
alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000688  00800100  00001f32  00001fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800788  00800788  0000264e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000264e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043a4  00000000  00000000  00002860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001198  00000000  00000000  00006c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019d1  00000000  00000000  00007d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000500  00000000  00000000  00009770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce7  00000000  00000000  00009c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000248e  00000000  00000000  0000a957  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000cde5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	17 e0       	ldi	r17, 0x07	; 7
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e3       	ldi	r30, 0x32	; 50
      7c:	ff e1       	ldi	r31, 0x1F	; 31
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 38       	cpi	r26, 0x88	; 136
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a8 e8       	ldi	r26, 0x88	; 136
      8e:	b7 e0       	ldi	r27, 0x07	; 7
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3d       	cpi	r26, 0xDF	; 223
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <main>
      9e:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN10AlarmClock11int_to_charEi>:
 
 ds1307 ds1307_1;
 LCD_Display lcd_1;
 Get_key keypad_1;

 char* AlarmClock::int_to_char(int num){
      a6:	9b 01       	movw	r18, r22
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
      a8:	6a 30       	cpi	r22, 0x0A	; 10
      aa:	71 05       	cpc	r23, r1
      ac:	ec f0       	brlt	.+58     	; 0xe8 <_ZN10AlarmClock11int_to_charEi+0x42>
		 chArr = "__";
		 x = num / 10;
      ae:	cb 01       	movw	r24, r22
      b0:	6a e0       	ldi	r22, 0x0A	; 10
      b2:	70 e0       	ldi	r23, 0x00	; 0
      b4:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
		 div = x + 48;
      b8:	ab 01       	movw	r20, r22
      ba:	40 5d       	subi	r20, 0xD0	; 208
      bc:	5f 4f       	sbci	r21, 0xFF	; 255
		 rem = (num % (10 * x)) + 48;
      be:	cb 01       	movw	r24, r22
      c0:	88 0f       	add	r24, r24
      c2:	99 1f       	adc	r25, r25
      c4:	66 0f       	add	r22, r22
      c6:	77 1f       	adc	r23, r23
      c8:	66 0f       	add	r22, r22
      ca:	77 1f       	adc	r23, r23
      cc:	66 0f       	add	r22, r22
      ce:	77 1f       	adc	r23, r23
      d0:	68 0f       	add	r22, r24
      d2:	79 1f       	adc	r23, r25
      d4:	c9 01       	movw	r24, r18
      d6:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
      da:	c0 96       	adiw	r24, 0x30	; 48
		 char ch1 = div;
		 char ch2 = rem;
		 chArr[0] = ch1;
      dc:	e6 ed       	ldi	r30, 0xD6	; 214
      de:	f6 e0       	ldi	r31, 0x06	; 6
      e0:	40 83       	st	Z, r20
		 chArr[1] = ch2;
      e2:	81 83       	std	Z+1, r24	; 0x01

 char* AlarmClock::int_to_char(int num){
	 int temp, div, rem, x;
	 char* chArr;
	 if (num > 9){
		 chArr = "__";
      e4:	cf 01       	movw	r24, r30
      e6:	08 95       	ret
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
		 temp = num + 48;
      e8:	20 5d       	subi	r18, 0xD0	; 208
      ea:	3f 4f       	sbci	r19, 0xFF	; 255
		 char ch = temp;
		 chArr[1] = ch;
      ec:	20 93 da 06 	sts	0x06DA, r18	; 0x8006da <GOT+0x34>
		 char ch2 = rem;
		 chArr[0] = ch1;
		 chArr[1] = ch2;
	 }
	 else{
		 chArr = "0_";
      f0:	89 ed       	ldi	r24, 0xD9	; 217
      f2:	96 e0       	ldi	r25, 0x06	; 6
		 temp = num + 48;
		 char ch = temp;
		 chArr[1] = ch;
	 }
	 return chArr;
 }
      f4:	08 95       	ret

000000f6 <_ZN10AlarmClock11displayTimeEv>:

 void AlarmClock::displayTime(){
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	8c 01       	movw	r16, r24

	 char* time1 = "    00:00:00     ";
	 int sec, min, hr;
	 //uint8_t sec_bcd, min_bcd, hr_bcd;

	 sec = ds1307_1.read_time(0x00);	//read from seconds reg
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	8f e8       	ldi	r24, 0x8F	; 143
     10c:	97 e0       	ldi	r25, 0x07	; 7
     10e:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
     112:	7c 01       	movw	r14, r24
	 min = ds1307_1.read_time(0x01);	//read from minutes reg
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	8f e8       	ldi	r24, 0x8F	; 143
     118:	97 e0       	ldi	r25, 0x07	; 7
     11a:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
     11e:	6c 01       	movw	r12, r24
	 hr = ds1307_1.read_time(0x02);		//read from hours reg
     120:	62 e0       	ldi	r22, 0x02	; 2
     122:	8f e8       	ldi	r24, 0x8F	; 143
     124:	97 e0       	ldi	r25, 0x07	; 7
     126:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
	 
	 str_hr = int_to_char(hr);
     12a:	bc 01       	movw	r22, r24
     12c:	c8 01       	movw	r24, r16
     12e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[4] = str_hr[0];
     132:	fc 01       	movw	r30, r24
     134:	20 81       	ld	r18, Z
     136:	cc ed       	ldi	r28, 0xDC	; 220
     138:	d6 e0       	ldi	r29, 0x06	; 6
     13a:	2c 83       	std	Y+4, r18	; 0x04
	 time1[5] = str_hr[1];
     13c:	81 81       	ldd	r24, Z+1	; 0x01
     13e:	8d 83       	std	Y+5, r24	; 0x05
	 
	 str_min = int_to_char(min);
     140:	b6 01       	movw	r22, r12
     142:	c8 01       	movw	r24, r16
     144:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[7] = str_min[0];
     148:	fc 01       	movw	r30, r24
     14a:	20 81       	ld	r18, Z
     14c:	2f 83       	std	Y+7, r18	; 0x07
	 time1[8] = str_min[1];
     14e:	81 81       	ldd	r24, Z+1	; 0x01
     150:	88 87       	std	Y+8, r24	; 0x08
	 
	 str_sec = int_to_char(sec);
     152:	b7 01       	movw	r22, r14
     154:	c8 01       	movw	r24, r16
     156:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
	 time1[10] = str_sec[0];
     15a:	fc 01       	movw	r30, r24
     15c:	20 81       	ld	r18, Z
     15e:	2a 87       	std	Y+10, r18	; 0x0a
	 time1[11] = str_sec[1];
     160:	81 81       	ldd	r24, Z+1	; 0x01
     162:	8b 87       	std	Y+11, r24	; 0x0b
	 
	 lcd_1.LCD_String_xy(0, 0, time1);       //Write string on 1st line of LCD
     164:	9e 01       	movw	r18, r28
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	89 e8       	ldi	r24, 0x89	; 137
     16c:	97 e0       	ldi	r25, 0x07	; 7
     16e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	 lcd_1.LCD_String_xy(1, 0, "MENU            ");		//Write string on 2nd line
     172:	2e ee       	ldi	r18, 0xEE	; 238
     174:	36 e0       	ldi	r19, 0x06	; 6
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	89 e8       	ldi	r24, 0x89	; 137
     17c:	97 e0       	ldi	r25, 0x07	; 7
     17e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     182:	ff ef       	ldi	r31, 0xFF	; 255
     184:	29 e6       	ldi	r18, 0x69	; 105
     186:	88 e1       	ldi	r24, 0x18	; 24
     188:	f1 50       	subi	r31, 0x01	; 1
     18a:	20 40       	sbci	r18, 0x00	; 0
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	e1 f7       	brne	.-8      	; 0x188 <_ZN10AlarmClock11displayTimeEv+0x92>
     190:	00 c0       	rjmp	.+0      	; 0x192 <_ZN10AlarmClock11displayTimeEv+0x9c>
     192:	00 00       	nop
	 _delay_ms(1000);
}
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	cf 90       	pop	r12
     1a4:	08 95       	ret

000001a6 <_ZN10AlarmClock12setTimetoRTCEv>:

 bool AlarmClock::setTimetoRTC(){
     1a6:	9f 92       	push	r9
     1a8:	af 92       	push	r10
     1aa:	bf 92       	push	r11
     1ac:	cf 92       	push	r12
     1ae:	df 92       	push	r13
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	63 97       	sbiw	r28, 0x13	; 19
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	cd bf       	out	0x3d, r28	; 61
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
	bool goBack = false;
	int n[6] = {4, 5, 7, 8, 10, 11};
     1cc:	8c e0       	ldi	r24, 0x0C	; 12
     1ce:	ea ec       	ldi	r30, 0xCA	; 202
     1d0:	f6 e0       	ldi	r31, 0x06	; 6
     1d2:	de 01       	movw	r26, r28
     1d4:	18 96       	adiw	r26, 0x08	; 8
     1d6:	01 90       	ld	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	8a 95       	dec	r24
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <_ZN10AlarmClock12setTimetoRTCEv+0x30>
	lcd_1.LCD_Clear();
     1de:	89 e8       	ldi	r24, 0x89	; 137
     1e0:	97 e0       	ldi	r25, 0x07	; 7
     1e2:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
	lcd_1.LCD_String_xy(0, 4, time);
     1e6:	2f ef       	ldi	r18, 0xFF	; 255
     1e8:	36 e0       	ldi	r19, 0x06	; 6
     1ea:	44 e0       	ldi	r20, 0x04	; 4
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	89 e8       	ldi	r24, 0x89	; 137
     1f0:	97 e0       	ldi	r25, 0x07	; 7
     1f2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	lcd_1.LCD_String_xy(1, 0,"OK        CANCLE");
     1f6:	28 e0       	ldi	r18, 0x08	; 8
     1f8:	37 e0       	ldi	r19, 0x07	; 7
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	89 e8       	ldi	r24, 0x89	; 137
     200:	97 e0       	ldi	r25, 0x07	; 7
     202:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>

	for(uint8_t i=0;i<7;i++)
     206:	00 e0       	ldi	r16, 0x00	; 0
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
	bool goBack = false;
     208:	91 2c       	mov	r9, r1
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
	hr=0;
     20a:	e1 2c       	mov	r14, r1
     20c:	f1 2c       	mov	r15, r1
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
	min=0;
     20e:	a1 2c       	mov	r10, r1
     210:	b1 2c       	mov	r11, r1
	
	ds1307::rtc_t rtc;
	uint8_t hour, seconds, minutes, key;
	char* time = "00:00:00";
	int sec, min, hr;
	sec=0;
     212:	c1 2c       	mov	r12, r1
     214:	d1 2c       	mov	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	lcd_1.LCD_String_xy(1, 0,"OK        CANCLE");

	for(uint8_t i=0;i<7;i++)
     216:	07 30       	cpi	r16, 0x07	; 7
     218:	08 f0       	brcs	.+2      	; 0x21c <_ZN10AlarmClock12setTimetoRTCEv+0x76>
     21a:	2c c1       	rjmp	.+600    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
			}
			else{
				lcd_1.LCD_String_xy(1, 0,"OK              ");
			}*/

			key = keypad_1.GetKey();
     21c:	88 e8       	ldi	r24, 0x88	; 136
     21e:	97 e0       	ldi	r25, 0x07	; 7
     220:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7Get_key6GetKeyEv>
     224:	18 2f       	mov	r17, r24
			if (key == 1) {lcd_1.LCD_String_xy(0,n[i],"1");break;}
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	99 f4       	brne	.+38     	; 0x250 <_ZN10AlarmClock12setTimetoRTCEv+0xaa>
     22a:	e0 2f       	mov	r30, r16
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	ee 0f       	add	r30, r30
     230:	ff 1f       	adc	r31, r31
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	8c 0f       	add	r24, r28
     238:	9d 1f       	adc	r25, r29
     23a:	e8 0f       	add	r30, r24
     23c:	f9 1f       	adc	r31, r25
     23e:	47 81       	ldd	r20, Z+7	; 0x07
     240:	29 e1       	ldi	r18, 0x19	; 25
     242:	37 e0       	ldi	r19, 0x07	; 7
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	89 e8       	ldi	r24, 0x89	; 137
     248:	97 e0       	ldi	r25, 0x07	; 7
     24a:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     24e:	d1 c0       	rjmp	.+418    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 2) {lcd_1.LCD_String_xy(0,n[i],"2");break;}
     250:	82 30       	cpi	r24, 0x02	; 2
     252:	99 f4       	brne	.+38     	; 0x27a <_ZN10AlarmClock12setTimetoRTCEv+0xd4>
     254:	e0 2f       	mov	r30, r16
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ee 0f       	add	r30, r30
     25a:	ff 1f       	adc	r31, r31
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	8c 0f       	add	r24, r28
     262:	9d 1f       	adc	r25, r29
     264:	e8 0f       	add	r30, r24
     266:	f9 1f       	adc	r31, r25
     268:	47 81       	ldd	r20, Z+7	; 0x07
     26a:	2b e1       	ldi	r18, 0x1B	; 27
     26c:	37 e0       	ldi	r19, 0x07	; 7
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	89 e8       	ldi	r24, 0x89	; 137
     272:	97 e0       	ldi	r25, 0x07	; 7
     274:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     278:	bc c0       	rjmp	.+376    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 3) {lcd_1.LCD_String_xy(0,n[i],"3");break;}
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	99 f4       	brne	.+38     	; 0x2a4 <_ZN10AlarmClock12setTimetoRTCEv+0xfe>
     27e:	e0 2f       	mov	r30, r16
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	8c 0f       	add	r24, r28
     28c:	9d 1f       	adc	r25, r29
     28e:	e8 0f       	add	r30, r24
     290:	f9 1f       	adc	r31, r25
     292:	47 81       	ldd	r20, Z+7	; 0x07
     294:	2d e1       	ldi	r18, 0x1D	; 29
     296:	37 e0       	ldi	r19, 0x07	; 7
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	89 e8       	ldi	r24, 0x89	; 137
     29c:	97 e0       	ldi	r25, 0x07	; 7
     29e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     2a2:	a7 c0       	rjmp	.+334    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 4) {lcd_1.LCD_String_xy(0,n[i],"4");break;}
     2a4:	84 30       	cpi	r24, 0x04	; 4
     2a6:	99 f4       	brne	.+38     	; 0x2ce <_ZN10AlarmClock12setTimetoRTCEv+0x128>
     2a8:	e0 2f       	mov	r30, r16
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	ee 0f       	add	r30, r30
     2ae:	ff 1f       	adc	r31, r31
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8c 0f       	add	r24, r28
     2b6:	9d 1f       	adc	r25, r29
     2b8:	e8 0f       	add	r30, r24
     2ba:	f9 1f       	adc	r31, r25
     2bc:	47 81       	ldd	r20, Z+7	; 0x07
     2be:	2f e1       	ldi	r18, 0x1F	; 31
     2c0:	37 e0       	ldi	r19, 0x07	; 7
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	89 e8       	ldi	r24, 0x89	; 137
     2c6:	97 e0       	ldi	r25, 0x07	; 7
     2c8:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     2cc:	92 c0       	rjmp	.+292    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 5) {lcd_1.LCD_String_xy(0,n[i],"5");break;}
     2ce:	85 30       	cpi	r24, 0x05	; 5
     2d0:	99 f4       	brne	.+38     	; 0x2f8 <_ZN10AlarmClock12setTimetoRTCEv+0x152>
     2d2:	e0 2f       	mov	r30, r16
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	ee 0f       	add	r30, r30
     2d8:	ff 1f       	adc	r31, r31
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 0f       	add	r24, r28
     2e0:	9d 1f       	adc	r25, r29
     2e2:	e8 0f       	add	r30, r24
     2e4:	f9 1f       	adc	r31, r25
     2e6:	47 81       	ldd	r20, Z+7	; 0x07
     2e8:	21 e2       	ldi	r18, 0x21	; 33
     2ea:	37 e0       	ldi	r19, 0x07	; 7
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	89 e8       	ldi	r24, 0x89	; 137
     2f0:	97 e0       	ldi	r25, 0x07	; 7
     2f2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     2f6:	7d c0       	rjmp	.+250    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
     2f8:	86 30       	cpi	r24, 0x06	; 6
     2fa:	99 f4       	brne	.+38     	; 0x322 <_ZN10AlarmClock12setTimetoRTCEv+0x17c>
     2fc:	e0 2f       	mov	r30, r16
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	ee 0f       	add	r30, r30
     302:	ff 1f       	adc	r31, r31
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	8c 0f       	add	r24, r28
     30a:	9d 1f       	adc	r25, r29
     30c:	e8 0f       	add	r30, r24
     30e:	f9 1f       	adc	r31, r25
     310:	47 81       	ldd	r20, Z+7	; 0x07
     312:	23 e2       	ldi	r18, 0x23	; 35
     314:	37 e0       	ldi	r19, 0x07	; 7
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	89 e8       	ldi	r24, 0x89	; 137
     31a:	97 e0       	ldi	r25, 0x07	; 7
     31c:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     320:	68 c0       	rjmp	.+208    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
     322:	87 30       	cpi	r24, 0x07	; 7
     324:	99 f4       	brne	.+38     	; 0x34c <_ZN10AlarmClock12setTimetoRTCEv+0x1a6>
     326:	e0 2f       	mov	r30, r16
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	ee 0f       	add	r30, r30
     32c:	ff 1f       	adc	r31, r31
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	8c 0f       	add	r24, r28
     334:	9d 1f       	adc	r25, r29
     336:	e8 0f       	add	r30, r24
     338:	f9 1f       	adc	r31, r25
     33a:	47 81       	ldd	r20, Z+7	; 0x07
     33c:	25 e2       	ldi	r18, 0x25	; 37
     33e:	37 e0       	ldi	r19, 0x07	; 7
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	89 e8       	ldi	r24, 0x89	; 137
     344:	97 e0       	ldi	r25, 0x07	; 7
     346:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     34a:	53 c0       	rjmp	.+166    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
     34c:	88 30       	cpi	r24, 0x08	; 8
     34e:	99 f4       	brne	.+38     	; 0x376 <_ZN10AlarmClock12setTimetoRTCEv+0x1d0>
     350:	e0 2f       	mov	r30, r16
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	8c 0f       	add	r24, r28
     35e:	9d 1f       	adc	r25, r29
     360:	e8 0f       	add	r30, r24
     362:	f9 1f       	adc	r31, r25
     364:	47 81       	ldd	r20, Z+7	; 0x07
     366:	27 e2       	ldi	r18, 0x27	; 39
     368:	37 e0       	ldi	r19, 0x07	; 7
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	89 e8       	ldi	r24, 0x89	; 137
     36e:	97 e0       	ldi	r25, 0x07	; 7
     370:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     374:	3e c0       	rjmp	.+124    	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
     376:	89 30       	cpi	r24, 0x09	; 9
     378:	99 f4       	brne	.+38     	; 0x3a0 <_ZN10AlarmClock12setTimetoRTCEv+0x1fa>
     37a:	e0 2f       	mov	r30, r16
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	8c 0f       	add	r24, r28
     388:	9d 1f       	adc	r25, r29
     38a:	e8 0f       	add	r30, r24
     38c:	f9 1f       	adc	r31, r25
     38e:	47 81       	ldd	r20, Z+7	; 0x07
     390:	29 e2       	ldi	r18, 0x29	; 41
     392:	37 e0       	ldi	r19, 0x07	; 7
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	89 e8       	ldi	r24, 0x89	; 137
     398:	97 e0       	ldi	r25, 0x07	; 7
     39a:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     39e:	29 c0       	rjmp	.+82     	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
     3a0:	8b 30       	cpi	r24, 0x0B	; 11
     3a2:	a1 f4       	brne	.+40     	; 0x3cc <_ZN10AlarmClock12setTimetoRTCEv+0x226>
     3a4:	e0 2f       	mov	r30, r16
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	8c 0f       	add	r24, r28
     3b2:	9d 1f       	adc	r25, r29
     3b4:	e8 0f       	add	r30, r24
     3b6:	f9 1f       	adc	r31, r25
     3b8:	47 81       	ldd	r20, Z+7	; 0x07
     3ba:	26 e0       	ldi	r18, 0x06	; 6
     3bc:	37 e0       	ldi	r19, 0x07	; 7
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	89 e8       	ldi	r24, 0x89	; 137
     3c2:	97 e0       	ldi	r25, 0x07	; 7
     3c4:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     3c8:	10 e0       	ldi	r17, 0x00	; 0
     3ca:	13 c0       	rjmp	.+38     	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if(!(PINC & (1<<Back))){goBack=true;i=8;break;}
     3cc:	33 9b       	sbis	0x06, 3	; 6
     3ce:	0c c0       	rjmp	.+24     	; 0x3e8 <_ZN10AlarmClock12setTimetoRTCEv+0x242>
			if (!(PINC & (1<<Ok))){i=8; break;}
     3d0:	32 9b       	sbis	0x06, 2	; 6
     3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <_ZN10AlarmClock12setTimetoRTCEv+0x24a>
     3d4:	9f ef       	ldi	r25, 0xFF	; 255
     3d6:	21 ee       	ldi	r18, 0xE1	; 225
     3d8:	84 e0       	ldi	r24, 0x04	; 4
     3da:	91 50       	subi	r25, 0x01	; 1
     3dc:	20 40       	sbci	r18, 0x00	; 0
     3de:	80 40       	sbci	r24, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <_ZN10AlarmClock12setTimetoRTCEv+0x234>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <_ZN10AlarmClock12setTimetoRTCEv+0x23e>
     3e4:	00 00       	nop
     3e6:	1a cf       	rjmp	.-460    	; 0x21c <_ZN10AlarmClock12setTimetoRTCEv+0x76>
			if (key == 6) {lcd_1.LCD_String_xy(0,n[i],"6");break;}
			if (key == 7) {lcd_1.LCD_String_xy(0,n[i],"7");break;}
			if (key == 8) {lcd_1.LCD_String_xy(0,n[i],"8");break;}
			if (key == 9) {lcd_1.LCD_String_xy(0,n[i],"9");break;}
			if (key == 11) {lcd_1.LCD_String_xy(0,n[i],"0");key=0;break;}
			if(!(PINC & (1<<Back))){goBack=true;i=8;break;}
     3e8:	08 e0       	ldi	r16, 0x08	; 8
     3ea:	99 24       	eor	r9, r9
     3ec:	93 94       	inc	r9
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <_ZN10AlarmClock12setTimetoRTCEv+0x24c>
			if (!(PINC & (1<<Ok))){i=8; break;}
     3f0:	08 e0       	ldi	r16, 0x08	; 8

			_delay_ms(200);
		}

		if (i == 0){hr+=key*10;}
     3f2:	01 11       	cpse	r16, r1
     3f4:	0f c0       	rjmp	.+30     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     3f6:	81 2f       	mov	r24, r17
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	9c 01       	movw	r18, r24
     3fc:	22 0f       	add	r18, r18
     3fe:	33 1f       	adc	r19, r19
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	82 0f       	add	r24, r18
     40e:	93 1f       	adc	r25, r19
     410:	e8 0e       	add	r14, r24
     412:	f9 1e       	adc	r15, r25
		if (i == 1){hr+=key;}
     414:	01 30       	cpi	r16, 0x01	; 1
     416:	11 f4       	brne	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     418:	e1 0e       	add	r14, r17
     41a:	f1 1c       	adc	r15, r1
		if (i == 2){min+=key*10;}
     41c:	02 30       	cpi	r16, 0x02	; 2
     41e:	79 f4       	brne	.+30     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     420:	81 2f       	mov	r24, r17
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	9c 01       	movw	r18, r24
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	82 0f       	add	r24, r18
     438:	93 1f       	adc	r25, r19
     43a:	a8 0e       	add	r10, r24
     43c:	b9 1e       	adc	r11, r25
		if (i == 3){min+=key;}
     43e:	03 30       	cpi	r16, 0x03	; 3
     440:	11 f4       	brne	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     442:	a1 0e       	add	r10, r17
     444:	b1 1c       	adc	r11, r1
		if (i == 4){sec+=key*10;}
     446:	04 30       	cpi	r16, 0x04	; 4
     448:	79 f4       	brne	.+30     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     44a:	81 2f       	mov	r24, r17
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	9c 01       	movw	r18, r24
     450:	22 0f       	add	r18, r18
     452:	33 1f       	adc	r19, r19
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	82 0f       	add	r24, r18
     462:	93 1f       	adc	r25, r19
     464:	c8 0e       	add	r12, r24
     466:	d9 1e       	adc	r13, r25
		if (i == 5){sec+=key;}
     468:	05 30       	cpi	r16, 0x05	; 5
     46a:	11 f4       	brne	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     46c:	c1 0e       	add	r12, r17
     46e:	d1 1c       	adc	r13, r1
	int n[6] = {4, 5, 7, 8, 10, 11};
	lcd_1.LCD_Clear();
	lcd_1.LCD_String_xy(0, 4, time);
	lcd_1.LCD_String_xy(1, 0,"OK        CANCLE");

	for(uint8_t i=0;i<7;i++)
     470:	0f 5f       	subi	r16, 0xFF	; 255
     472:	d1 ce       	rjmp	.-606    	; 0x216 <_ZN10AlarmClock12setTimetoRTCEv+0x70>
		if (i == 3){min+=key;}
		if (i == 4){sec+=key*10;}
		if (i == 5){sec+=key;}

	}
	if (!(goBack)){
     474:	91 10       	cpse	r9, r1
     476:	37 c0       	rjmp	.+110    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
		hour = ds1307_1.dec_to_bcd(hr);
     478:	b7 01       	movw	r22, r14
     47a:	8f e8       	ldi	r24, 0x8F	; 143
     47c:	97 e0       	ldi	r25, 0x07	; 7
     47e:	0e 94 34 03 	call	0x668	; 0x668 <_ZN6ds130710dec_to_bcdEi>
     482:	18 2f       	mov	r17, r24
		minutes = ds1307_1.dec_to_bcd(min);
     484:	b5 01       	movw	r22, r10
     486:	8f e8       	ldi	r24, 0x8F	; 143
     488:	97 e0       	ldi	r25, 0x07	; 7
     48a:	0e 94 34 03 	call	0x668	; 0x668 <_ZN6ds130710dec_to_bcdEi>
     48e:	08 2f       	mov	r16, r24
		seconds = ds1307_1.dec_to_bcd(sec);
     490:	b6 01       	movw	r22, r12
     492:	8f e8       	ldi	r24, 0x8F	; 143
     494:	97 e0       	ldi	r25, 0x07	; 7
     496:	0e 94 34 03 	call	0x668	; 0x668 <_ZN6ds130710dec_to_bcdEi>

		// Setting time to the RTC
		rtc.seconds =  seconds;
     49a:	89 83       	std	Y+1, r24	; 0x01
		rtc.minute =  minutes;
     49c:	0a 83       	std	Y+2, r16	; 0x02
		rtc.hour = hour;
     49e:	1b 83       	std	Y+3, r17	; 0x03
		rtc.weekDay = 0x07;
     4a0:	87 e0       	ldi	r24, 0x07	; 7
     4a2:	8c 83       	std	Y+4, r24	; 0x04
		rtc.date = 0x20;
     4a4:	80 e2       	ldi	r24, 0x20	; 32
     4a6:	8d 83       	std	Y+5, r24	; 0x05
		rtc.month = 0x06;
     4a8:	86 e0       	ldi	r24, 0x06	; 6
     4aa:	8e 83       	std	Y+6, r24	; 0x06
		rtc.year = 0x21;
     4ac:	81 e2       	ldi	r24, 0x21	; 33
     4ae:	8f 83       	std	Y+7, r24	; 0x07
		lcd_1.LCD_Clear();
     4b0:	89 e8       	ldi	r24, 0x89	; 137
     4b2:	97 e0       	ldi	r25, 0x07	; 7
     4b4:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		ds1307_1.set_time(&rtc);
     4b8:	be 01       	movw	r22, r28
     4ba:	6f 5f       	subi	r22, 0xFF	; 255
     4bc:	7f 4f       	sbci	r23, 0xFF	; 255
     4be:	8f e8       	ldi	r24, 0x8F	; 143
     4c0:	97 e0       	ldi	r25, 0x07	; 7
     4c2:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN6ds13078set_timeEPNS_5rtc_tE>
		lcd_1.LCD_String_xy(0, 4, "Time Set");
     4c6:	2b e2       	ldi	r18, 0x2B	; 43
     4c8:	37 e0       	ldi	r19, 0x07	; 7
     4ca:	44 e0       	ldi	r20, 0x04	; 4
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	89 e8       	ldi	r24, 0x89	; 137
     4d0:	97 e0       	ldi	r25, 0x07	; 7
     4d2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
		lcd_1.LCD_String_xy(1, 0, "OK");
     4d6:	24 e3       	ldi	r18, 0x34	; 52
     4d8:	37 e0       	ldi	r19, 0x07	; 7
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	89 e8       	ldi	r24, 0x89	; 137
     4e0:	97 e0       	ldi	r25, 0x07	; 7
     4e2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	}
	return goBack;
 }
     4e6:	89 2d       	mov	r24, r9
     4e8:	63 96       	adiw	r28, 0x13	; 19
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	bf 90       	pop	r11
     506:	af 90       	pop	r10
     508:	9f 90       	pop	r9
     50a:	08 95       	ret

0000050c <_ZN6ds13078twi_initEv>:
     50c:	88 e4       	ldi	r24, 0x48	; 72
     50e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     512:	84 e0       	ldi	r24, 0x04	; 4
     514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     518:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     51c:	08 95       	ret

0000051e <_ZN6ds13079twi_startEv>:
     51e:	84 ea       	ldi	r24, 0xA4	; 164
     520:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     524:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     528:	88 23       	and	r24, r24
     52a:	e4 f7       	brge	.-8      	; 0x524 <_ZN6ds13079twi_startEv+0x6>
     52c:	08 95       	ret

0000052e <_ZN6ds13079twi_SLA_WEv>:
     52e:	80 ed       	ldi	r24, 0xD0	; 208
     530:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     534:	84 e8       	ldi	r24, 0x84	; 132
     536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     53a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     53e:	88 23       	and	r24, r24
     540:	e4 f7       	brge	.-8      	; 0x53a <_ZN6ds13079twi_SLA_WEv+0xc>
     542:	08 95       	ret

00000544 <_ZN6ds13079twi_SLA_REv>:
     544:	81 ed       	ldi	r24, 0xD1	; 209
     546:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     54a:	84 e8       	ldi	r24, 0x84	; 132
     54c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     550:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     554:	88 23       	and	r24, r24
     556:	e4 f7       	brge	.-8      	; 0x550 <_ZN6ds13079twi_SLA_REv+0xc>
     558:	08 95       	ret

0000055a <_ZN6ds13079twi_writeEh>:
     55a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     55e:	84 e8       	ldi	r24, 0x84	; 132
     560:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     564:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     568:	88 23       	and	r24, r24
     56a:	e4 f7       	brge	.-8      	; 0x564 <_ZN6ds13079twi_writeEh+0xa>
     56c:	08 95       	ret

0000056e <_ZN6ds13078twi_readEv>:
     56e:	84 e8       	ldi	r24, 0x84	; 132
     570:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     574:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     578:	88 23       	and	r24, r24
     57a:	e4 f7       	brge	.-8      	; 0x574 <_ZN6ds13078twi_readEv+0x6>
     57c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     580:	08 95       	ret

00000582 <_ZN6ds13078twi_stopEv>:
     582:	84 e9       	ldi	r24, 0x94	; 148
     584:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     588:	08 95       	ret

0000058a <_ZN6ds13078set_timeEPNS_5rtc_tE>:
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	8c 01       	movw	r16, r24
     594:	eb 01       	movw	r28, r22
     596:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN6ds13078twi_initEv>
     59a:	c8 01       	movw	r24, r16
     59c:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN6ds13079twi_startEv>
     5a0:	c8 01       	movw	r24, r16
     5a2:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6ds13079twi_SLA_WEv>
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	c8 01       	movw	r24, r16
     5aa:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
     5ae:	68 81       	ld	r22, Y
     5b0:	c8 01       	movw	r24, r16
     5b2:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
     5b6:	69 81       	ldd	r22, Y+1	; 0x01
     5b8:	c8 01       	movw	r24, r16
     5ba:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
     5be:	6a 81       	ldd	r22, Y+2	; 0x02
     5c0:	c8 01       	movw	r24, r16
     5c2:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
     5c6:	6b 81       	ldd	r22, Y+3	; 0x03
     5c8:	c8 01       	movw	r24, r16
     5ca:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
     5ce:	6c 81       	ldd	r22, Y+4	; 0x04
     5d0:	c8 01       	movw	r24, r16
     5d2:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
     5d6:	6d 81       	ldd	r22, Y+5	; 0x05
     5d8:	c8 01       	movw	r24, r16
     5da:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
     5de:	6e 81       	ldd	r22, Y+6	; 0x06
     5e0:	c8 01       	movw	r24, r16
     5e2:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
     5e6:	c8 01       	movw	r24, r16
     5e8:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN6ds13078twi_stopEv>
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	08 95       	ret

000005f6 <_ZN6ds130710bcd_to_decEh>:
     5f6:	26 2f       	mov	r18, r22
     5f8:	2f 70       	andi	r18, 0x0F	; 15
     5fa:	62 95       	swap	r22
     5fc:	6f 70       	andi	r22, 0x0F	; 15
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	cb 01       	movw	r24, r22
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	66 0f       	add	r22, r22
     608:	77 1f       	adc	r23, r23
     60a:	66 0f       	add	r22, r22
     60c:	77 1f       	adc	r23, r23
     60e:	66 0f       	add	r22, r22
     610:	77 1f       	adc	r23, r23
     612:	86 0f       	add	r24, r22
     614:	97 1f       	adc	r25, r23
     616:	82 0f       	add	r24, r18
     618:	91 1d       	adc	r25, r1
     61a:	08 95       	ret

0000061c <_ZN6ds13079read_timeEh>:
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	ec 01       	movw	r28, r24
     624:	16 2f       	mov	r17, r22
     626:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN6ds13079twi_startEv>
     62a:	ce 01       	movw	r24, r28
     62c:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6ds13079twi_SLA_WEv>
     630:	61 2f       	mov	r22, r17
     632:	ce 01       	movw	r24, r28
     634:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN6ds13079twi_writeEh>
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN6ds13078twi_stopEv>
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN6ds13079twi_startEv>
     644:	ce 01       	movw	r24, r28
     646:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN6ds13079twi_SLA_REv>
     64a:	ce 01       	movw	r24, r28
     64c:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN6ds13078twi_readEv>
     650:	18 2f       	mov	r17, r24
     652:	ce 01       	movw	r24, r28
     654:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN6ds13078twi_stopEv>
     658:	61 2f       	mov	r22, r17
     65a:	ce 01       	movw	r24, r28
     65c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN6ds130710bcd_to_decEh>
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	08 95       	ret

00000668 <_ZN6ds130710dec_to_bcdEi>:
     668:	9b 01       	movw	r18, r22
     66a:	6a 30       	cpi	r22, 0x0A	; 10
     66c:	71 05       	cpc	r23, r1
     66e:	c4 f0       	brlt	.+48     	; 0x6a0 <_ZN6ds130710dec_to_bcdEi+0x38>
     670:	cb 01       	movw	r24, r22
     672:	6a e0       	ldi	r22, 0x0A	; 10
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     67a:	46 2f       	mov	r20, r22
     67c:	42 95       	swap	r20
     67e:	40 7f       	andi	r20, 0xF0	; 240
     680:	86 2f       	mov	r24, r22
     682:	97 2f       	mov	r25, r23
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	bc 01       	movw	r22, r24
     68a:	66 0f       	add	r22, r22
     68c:	77 1f       	adc	r23, r23
     68e:	66 0f       	add	r22, r22
     690:	77 1f       	adc	r23, r23
     692:	68 0f       	add	r22, r24
     694:	79 1f       	adc	r23, r25
     696:	c9 01       	movw	r24, r18
     698:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     69c:	84 2b       	or	r24, r20
     69e:	08 95       	ret
     6a0:	86 2f       	mov	r24, r22
     6a2:	08 95       	ret

000006a4 <_ZN7Get_key6GetKeyEv>:
     6a4:	8b b1       	in	r24, 0x0b	; 11
     6a6:	8f 60       	ori	r24, 0x0F	; 15
     6a8:	8b b9       	out	0x0b, r24	; 11
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	83 30       	cpi	r24, 0x03	; 3
     6ae:	80 f5       	brcc	.+96     	; 0x710 <_ZN7Get_key6GetKeyEv+0x6c>
     6b0:	9a b1       	in	r25, 0x0a	; 10
     6b2:	90 78       	andi	r25, 0x80	; 128
     6b4:	9a b9       	out	0x0a, r25	; 10
     6b6:	9a b1       	in	r25, 0x0a	; 10
     6b8:	20 e4       	ldi	r18, 0x40	; 64
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	08 2e       	mov	r0, r24
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <_ZN7Get_key6GetKeyEv+0x20>
     6c0:	35 95       	asr	r19
     6c2:	27 95       	ror	r18
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <_ZN7Get_key6GetKeyEv+0x1c>
     6c8:	29 2b       	or	r18, r25
     6ca:	2a b9       	out	0x0a, r18	; 10
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	94 30       	cpi	r25, 0x04	; 4
     6d0:	e8 f4       	brcc	.+58     	; 0x70c <_ZN7Get_key6GetKeyEv+0x68>
     6d2:	29 b1       	in	r18, 0x09	; 9
     6d4:	48 e0       	ldi	r20, 0x08	; 8
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	09 2e       	mov	r0, r25
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <_ZN7Get_key6GetKeyEv+0x3c>
     6dc:	55 95       	asr	r21
     6de:	47 95       	ror	r20
     6e0:	0a 94       	dec	r0
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <_ZN7Get_key6GetKeyEv+0x38>
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	24 23       	and	r18, r20
     6e8:	35 23       	and	r19, r21
     6ea:	23 2b       	or	r18, r19
     6ec:	69 f4       	brne	.+26     	; 0x708 <_ZN7Get_key6GetKeyEv+0x64>
     6ee:	29 b1       	in	r18, 0x09	; 9
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	24 23       	and	r18, r20
     6f4:	35 23       	and	r19, r21
     6f6:	23 2b       	or	r18, r19
     6f8:	d1 f3       	breq	.-12     	; 0x6ee <_ZN7Get_key6GetKeyEv+0x4a>
     6fa:	29 2f       	mov	r18, r25
     6fc:	22 0f       	add	r18, r18
     6fe:	92 0f       	add	r25, r18
     700:	98 0f       	add	r25, r24
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	89 0f       	add	r24, r25
     706:	08 95       	ret
     708:	9f 5f       	subi	r25, 0xFF	; 255
     70a:	e1 cf       	rjmp	.-62     	; 0x6ce <_ZN7Get_key6GetKeyEv+0x2a>
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	ce cf       	rjmp	.-100    	; 0x6ac <_ZN7Get_key6GetKeyEv+0x8>
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	08 95       	ret

00000714 <_ZN11LCD_Display16LCD_CommandgiverEh>:
     714:	25 b1       	in	r18, 0x05	; 5
     716:	96 2f       	mov	r25, r22
     718:	90 7f       	andi	r25, 0xF0	; 240
     71a:	89 2f       	mov	r24, r25
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	95 95       	asr	r25
     720:	87 95       	ror	r24
     722:	95 95       	asr	r25
     724:	87 95       	ror	r24
     726:	92 2f       	mov	r25, r18
     728:	93 7c       	andi	r25, 0xC3	; 195
     72a:	89 2b       	or	r24, r25
     72c:	85 b9       	out	0x05, r24	; 5
     72e:	85 b1       	in	r24, 0x05	; 5
     730:	8e 7f       	andi	r24, 0xFE	; 254
     732:	85 b9       	out	0x05, r24	; 5
     734:	85 b1       	in	r24, 0x05	; 5
     736:	82 60       	ori	r24, 0x02	; 2
     738:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73a:	85 e0       	ldi	r24, 0x05	; 5
     73c:	8a 95       	dec	r24
     73e:	f1 f7       	brne	.-4      	; 0x73c <_ZN11LCD_Display16LCD_CommandgiverEh+0x28>
     740:	00 00       	nop
     742:	85 b1       	in	r24, 0x05	; 5
     744:	8d 7f       	andi	r24, 0xFD	; 253
     746:	85 b9       	out	0x05, r24	; 5
     748:	8f e8       	ldi	r24, 0x8F	; 143
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	f1 f7       	brne	.-4      	; 0x74c <_ZN11LCD_Display16LCD_CommandgiverEh+0x38>
     750:	00 c0       	rjmp	.+0      	; 0x752 <_ZN11LCD_Display16LCD_CommandgiverEh+0x3e>
     752:	00 00       	nop
     754:	85 b1       	in	r24, 0x05	; 5
     756:	6f 70       	andi	r22, 0x0F	; 15
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	66 0f       	add	r22, r22
     75c:	77 1f       	adc	r23, r23
     75e:	66 0f       	add	r22, r22
     760:	77 1f       	adc	r23, r23
     762:	83 7c       	andi	r24, 0xC3	; 195
     764:	68 2b       	or	r22, r24
     766:	65 b9       	out	0x05, r22	; 5
     768:	85 b1       	in	r24, 0x05	; 5
     76a:	82 60       	ori	r24, 0x02	; 2
     76c:	85 b9       	out	0x05, r24	; 5
     76e:	95 e0       	ldi	r25, 0x05	; 5
     770:	9a 95       	dec	r25
     772:	f1 f7       	brne	.-4      	; 0x770 <_ZN11LCD_Display16LCD_CommandgiverEh+0x5c>
     774:	00 00       	nop
     776:	85 b1       	in	r24, 0x05	; 5
     778:	8d 7f       	andi	r24, 0xFD	; 253
     77a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77c:	8f e9       	ldi	r24, 0x9F	; 159
     77e:	9f e0       	ldi	r25, 0x0F	; 15
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <_ZN11LCD_Display16LCD_CommandgiverEh+0x6c>
     784:	00 c0       	rjmp	.+0      	; 0x786 <_ZN11LCD_Display16LCD_CommandgiverEh+0x72>
     786:	00 00       	nop
     788:	08 95       	ret

0000078a <_ZN11LCD_Display15LCD_InitializerEv>:
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	84 b9       	out	0x04, r24	; 4
     794:	8f e3       	ldi	r24, 0x3F	; 63
     796:	9c e9       	ldi	r25, 0x9C	; 156
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <_ZN11LCD_Display15LCD_InitializerEv+0xe>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <_ZN11LCD_Display15LCD_InitializerEv+0x14>
     79e:	00 00       	nop
     7a0:	62 e0       	ldi	r22, 0x02	; 2
     7a2:	ce 01       	movw	r24, r28
     7a4:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7a8:	68 e2       	ldi	r22, 0x28	; 40
     7aa:	ce 01       	movw	r24, r28
     7ac:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7b0:	6c e0       	ldi	r22, 0x0C	; 12
     7b2:	ce 01       	movw	r24, r28
     7b4:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7b8:	66 e0       	ldi	r22, 0x06	; 6
     7ba:	ce 01       	movw	r24, r28
     7bc:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	ce 01       	movw	r24, r28
     7c4:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     7c8:	8f e9       	ldi	r24, 0x9F	; 159
     7ca:	9f e0       	ldi	r25, 0x0F	; 15
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <_ZN11LCD_Display15LCD_InitializerEv+0x42>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <_ZN11LCD_Display15LCD_InitializerEv+0x48>
     7d2:	00 00       	nop
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <_ZN11LCD_Display13LCD_CharacterEh>:
     7da:	25 b1       	in	r18, 0x05	; 5
     7dc:	96 2f       	mov	r25, r22
     7de:	90 7f       	andi	r25, 0xF0	; 240
     7e0:	89 2f       	mov	r24, r25
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	95 95       	asr	r25
     7e6:	87 95       	ror	r24
     7e8:	95 95       	asr	r25
     7ea:	87 95       	ror	r24
     7ec:	92 2f       	mov	r25, r18
     7ee:	93 7c       	andi	r25, 0xC3	; 195
     7f0:	89 2b       	or	r24, r25
     7f2:	85 b9       	out	0x05, r24	; 5
     7f4:	85 b1       	in	r24, 0x05	; 5
     7f6:	81 60       	ori	r24, 0x01	; 1
     7f8:	85 b9       	out	0x05, r24	; 5
     7fa:	85 b1       	in	r24, 0x05	; 5
     7fc:	82 60       	ori	r24, 0x02	; 2
     7fe:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	8a 95       	dec	r24
     804:	f1 f7       	brne	.-4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     808:	85 b1       	in	r24, 0x05	; 5
     80a:	8d 7f       	andi	r24, 0xFD	; 253
     80c:	85 b9       	out	0x05, r24	; 5
     80e:	8f e8       	ldi	r24, 0x8F	; 143
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     816:	00 c0       	rjmp	.+0      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     818:	00 00       	nop
     81a:	85 b1       	in	r24, 0x05	; 5
     81c:	6f 70       	andi	r22, 0x0F	; 15
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	66 0f       	add	r22, r22
     822:	77 1f       	adc	r23, r23
     824:	66 0f       	add	r22, r22
     826:	77 1f       	adc	r23, r23
     828:	83 7c       	andi	r24, 0xC3	; 195
     82a:	68 2b       	or	r22, r24
     82c:	65 b9       	out	0x05, r22	; 5
     82e:	85 b1       	in	r24, 0x05	; 5
     830:	82 60       	ori	r24, 0x02	; 2
     832:	85 b9       	out	0x05, r24	; 5
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	9a 95       	dec	r25
     838:	f1 f7       	brne	.-4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     83c:	85 b1       	in	r24, 0x05	; 5
     83e:	8d 7f       	andi	r24, 0xFD	; 253
     840:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     842:	8f e9       	ldi	r24, 0x9F	; 159
     844:	9f e0       	ldi	r25, 0x0F	; 15
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     84c:	00 00       	nop
     84e:	08 95       	ret

00000850 <_ZN11LCD_Display10LCD_StringEPc>:
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	7c 01       	movw	r14, r24
     85e:	8b 01       	movw	r16, r22
     860:	c0 e0       	ldi	r28, 0x00	; 0
     862:	d0 e0       	ldi	r29, 0x00	; 0
     864:	f8 01       	movw	r30, r16
     866:	ec 0f       	add	r30, r28
     868:	fd 1f       	adc	r31, r29
     86a:	60 81       	ld	r22, Z
     86c:	66 23       	and	r22, r22
     86e:	29 f0       	breq	.+10     	; 0x87a <_ZN11LCD_Display10LCD_StringEPc+0x2a>
     870:	c7 01       	movw	r24, r14
     872:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN11LCD_Display13LCD_CharacterEh>
     876:	21 96       	adiw	r28, 0x01	; 1
     878:	f5 cf       	rjmp	.-22     	; 0x864 <_ZN11LCD_Display10LCD_StringEPc+0x14>
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	08 95       	ret

00000888 <_ZN11LCD_Display9LCD_ClearEv>:
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	ec 01       	movw	r28, r24
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     894:	8f e9       	ldi	r24, 0x9F	; 159
     896:	9f e0       	ldi	r25, 0x0F	; 15
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <_ZN11LCD_Display9LCD_ClearEv+0x10>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <_ZN11LCD_Display9LCD_ClearEv+0x16>
     89e:	00 00       	nop
     8a0:	60 e8       	ldi	r22, 0x80	; 128
     8a2:	ce 01       	movw	r24, r28
     8a4:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <_ZN11LCD_Display13LCD_String_xyEccPc>:
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	8c 01       	movw	r16, r24
     8b8:	e9 01       	movw	r28, r18
     8ba:	61 11       	cpse	r22, r1
     8bc:	08 c0       	rjmp	.+16     	; 0x8ce <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     8be:	40 31       	cpi	r20, 0x10	; 16
     8c0:	30 f4       	brcc	.+12     	; 0x8ce <_ZN11LCD_Display13LCD_String_xyEccPc+0x20>
     8c2:	4f 70       	andi	r20, 0x0F	; 15
     8c4:	64 2f       	mov	r22, r20
     8c6:	60 68       	ori	r22, 0x80	; 128
     8c8:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     8cc:	0a c0       	rjmp	.+20     	; 0x8e2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     8ce:	61 30       	cpi	r22, 0x01	; 1
     8d0:	41 f4       	brne	.+16     	; 0x8e2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     8d2:	40 31       	cpi	r20, 0x10	; 16
     8d4:	30 f4       	brcc	.+12     	; 0x8e2 <_ZN11LCD_Display13LCD_String_xyEccPc+0x34>
     8d6:	4f 70       	andi	r20, 0x0F	; 15
     8d8:	64 2f       	mov	r22, r20
     8da:	60 6c       	ori	r22, 0xC0	; 192
     8dc:	c8 01       	movw	r24, r16
     8de:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
     8e2:	be 01       	movw	r22, r28
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	08 95       	ret

000008f4 <_Z10checkAlarmv>:
			display();
		}
	}
}

void checkAlarm(){
     8f4:	7f 92       	push	r7
     8f6:	8f 92       	push	r8
     8f8:	9f 92       	push	r9
     8fa:	af 92       	push	r10
     8fc:	bf 92       	push	r11
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
	int currentHr, currentMin, alarmHr, alarmMin, alarmCheck, alOnOff;
	bool alarm;
	//checking time and ringing an alarm
	for (int i=0; i<5;i++){
     90e:	00 e0       	ldi	r16, 0x00	; 0
     910:	10 e0       	ldi	r17, 0x00	; 0
     912:	05 30       	cpi	r16, 0x05	; 5
     914:	11 05       	cpc	r17, r1
     916:	0c f0       	brlt	.+2      	; 0x91a <__stack+0x1b>
     918:	a7 c0       	rjmp	.+334    	; 0xa68 <__stack+0x169>
		alarmHr = allAlarms[i][0];
     91a:	f8 01       	movw	r30, r16
     91c:	ee 0f       	add	r30, r30
     91e:	ff 1f       	adc	r31, r31
     920:	ee 0f       	add	r30, r30
     922:	ff 1f       	adc	r31, r31
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	eb 56       	subi	r30, 0x6B	; 107
     92a:	f8 4f       	sbci	r31, 0xF8	; 248
     92c:	e0 80       	ld	r14, Z
     92e:	f1 80       	ldd	r15, Z+1	; 0x01
		alarmMin = allAlarms[i][1];
     930:	c2 80       	ldd	r12, Z+2	; 0x02
     932:	d3 80       	ldd	r13, Z+3	; 0x03
		alarmCheck = allAlarms[i][2]; //only used within this loop to check of the alarm was turned on
     934:	84 80       	ldd	r8, Z+4	; 0x04
     936:	95 80       	ldd	r9, Z+5	; 0x05
		alOnOff = allAlarms[i][3]; //this value will be 1 if alarm is ON and 0 if OFF
     938:	a6 80       	ldd	r10, Z+6	; 0x06
     93a:	b7 80       	ldd	r11, Z+7	; 0x07

		currentHr = DS1307.read_time(02);
     93c:	62 e0       	ldi	r22, 0x02	; 2
     93e:	8a ed       	ldi	r24, 0xDA	; 218
     940:	97 e0       	ldi	r25, 0x07	; 7
     942:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
     946:	ec 01       	movw	r28, r24
		currentMin = DS1307.read_time(01);
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	8a ed       	ldi	r24, 0xDA	; 218
     94c:	97 e0       	ldi	r25, 0x07	; 7
     94e:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>

		if (((currentHr != alarmHr) || (currentMin != alarmMin))){
     952:	ec 16       	cp	r14, r28
     954:	fd 06       	cpc	r15, r29
     956:	19 f4       	brne	.+6      	; 0x95e <__stack+0x5f>
     958:	c8 16       	cp	r12, r24
     95a:	d9 06       	cpc	r13, r25
     95c:	79 f0       	breq	.+30     	; 0x97c <__stack+0x7d>
			allAlarms[i][2] = 1;
     95e:	f8 01       	movw	r30, r16
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	eb 56       	subi	r30, 0x6B	; 107
     96e:	f8 4f       	sbci	r31, 0xF8	; 248
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	95 83       	std	Z+5, r25	; 0x05
     976:	84 83       	std	Z+4, r24	; 0x04
			stop = false;
     978:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <stop>
		}
		
		while (1){
			currentHr = DS1307.read_time(02);
     97c:	62 e0       	ldi	r22, 0x02	; 2
     97e:	8a ed       	ldi	r24, 0xDA	; 218
     980:	97 e0       	ldi	r25, 0x07	; 7
     982:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
     986:	ec 01       	movw	r28, r24
			currentMin = DS1307.read_time(01);
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	8a ed       	ldi	r24, 0xDA	; 218
     98c:	97 e0       	ldi	r25, 0x07	; 7
     98e:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN6ds13079read_timeEh>
     992:	ac 01       	movw	r20, r24
			if ((currentHr == alarmHr) & (currentMin == alarmMin)  & ~(stop) & (alarmCheck==1) & (alOnOff==1)){
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	ec 16       	cp	r14, r28
     998:	fd 06       	cpc	r15, r29
     99a:	09 f0       	breq	.+2      	; 0x99e <__stack+0x9f>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	c4 16       	cp	r12, r20
     9a2:	d5 06       	cpc	r13, r21
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <__stack+0xa9>
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	92 23       	and	r25, r18
     9aa:	29 2f       	mov	r18, r25
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <stop>
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	80 95       	com	r24
     9b6:	90 95       	com	r25
     9b8:	82 23       	and	r24, r18
     9ba:	93 23       	and	r25, r19
     9bc:	21 e0       	ldi	r18, 0x01	; 1
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	41 e0       	ldi	r20, 0x01	; 1
     9c2:	84 16       	cp	r8, r20
     9c4:	91 04       	cpc	r9, r1
     9c6:	11 f0       	breq	.+4      	; 0x9cc <__stack+0xcd>
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	82 23       	and	r24, r18
     9ce:	93 23       	and	r25, r19
     9d0:	21 e0       	ldi	r18, 0x01	; 1
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	41 e0       	ldi	r20, 0x01	; 1
     9d6:	a4 16       	cp	r10, r20
     9d8:	b1 04       	cpc	r11, r1
     9da:	11 f0       	breq	.+4      	; 0x9e0 <__stack+0xe1>
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	28 23       	and	r18, r24
     9e2:	39 23       	and	r19, r25
     9e4:	23 2b       	or	r18, r19
     9e6:	41 f1       	breq	.+80     	; 0xa38 <__stack+0x139>
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
     9e8:	27 e3       	ldi	r18, 0x37	; 55
     9ea:	37 e0       	ldi	r19, 0x07	; 7
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	84 ed       	ldi	r24, 0xD4	; 212
     9f2:	97 e0       	ldi	r25, 0x07	; 7
     9f4:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
				lcd.LCD_String_xy(1, 0, "STOP            ");
     9f8:	28 e4       	ldi	r18, 0x48	; 72
     9fa:	37 e0       	ldi	r19, 0x07	; 7
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	84 ed       	ldi	r24, 0xD4	; 212
     a02:	97 e0       	ldi	r25, 0x07	; 7
     a04:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
				music.tone(currentscreenset23);
     a08:	60 91 bd 07 	lds	r22, 0x07BD	; 0x8007bd <currentscreenset23>
     a0c:	70 91 be 07 	lds	r23, 0x07BE	; 0x8007be <currentscreenset23+0x1>
     a10:	85 ec       	ldi	r24, 0xC5	; 197
     a12:	97 e0       	ldi	r25, 0x07	; 7
     a14:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN15music_notations4toneEi>
				allAlarms[i][2] = 0;
     a18:	f8 01       	movw	r30, r16
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	eb 56       	subi	r30, 0x6B	; 107
     a28:	f8 4f       	sbci	r31, 0xF8	; 248
     a2a:	15 82       	std	Z+5, r1	; 0x05
     a2c:	14 82       	std	Z+4, r1	; 0x04
				alarm = true;
     a2e:	77 24       	eor	r7, r7
     a30:	73 94       	inc	r7
			else{
				if(alarm){lcd.LCD_Clear();alarm=false;set=0;}
				break;
			}
			
			if (!(PINC & (1<<Ok))){
     a32:	32 99       	sbic	0x06, 2	; 6
     a34:	a3 cf       	rjmp	.-186    	; 0x97c <__stack+0x7d>
     a36:	0c c0       	rjmp	.+24     	; 0xa50 <__stack+0x151>
				music.tone(currentscreenset23);
				allAlarms[i][2] = 0;
				alarm = true;
			}
			else{
				if(alarm){lcd.LCD_Clear();alarm=false;set=0;}
     a38:	77 20       	and	r7, r7
     a3a:	99 f0       	breq	.+38     	; 0xa62 <__stack+0x163>
     a3c:	84 ed       	ldi	r24, 0xD4	; 212
     a3e:	97 e0       	ldi	r25, 0x07	; 7
     a40:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
     a44:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <set+0x1>
     a48:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <set>
     a4c:	71 2c       	mov	r7, r1
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__stack+0x163>
				break;
			}
			
			if (!(PINC & (1<<Ok))){
				lcd.LCD_Clear();
     a50:	84 ed       	ldi	r24, 0xD4	; 212
     a52:	97 e0       	ldi	r25, 0x07	; 7
     a54:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
				stop = true;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <stop>
			if ((currentHr == alarmHr) & (currentMin == alarmMin)  & ~(stop) & (alarmCheck==1) & (alOnOff==1)){
				lcd.LCD_String_xy(0, 0, "     Alarm      ");
				lcd.LCD_String_xy(1, 0, "STOP            ");
				music.tone(currentscreenset23);
				allAlarms[i][2] = 0;
				alarm = true;
     a5e:	77 24       	eor	r7, r7
     a60:	73 94       	inc	r7

void checkAlarm(){
	int currentHr, currentMin, alarmHr, alarmMin, alarmCheck, alOnOff;
	bool alarm;
	//checking time and ringing an alarm
	for (int i=0; i<5;i++){
     a62:	0f 5f       	subi	r16, 0xFF	; 255
     a64:	1f 4f       	sbci	r17, 0xFF	; 255
     a66:	55 cf       	rjmp	.-342    	; 0x912 <__stack+0x13>
				stop = true;
				break;
			}
		}
	}
} 
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	ff 90       	pop	r15
     a72:	ef 90       	pop	r14
     a74:	df 90       	pop	r13
     a76:	cf 90       	pop	r12
     a78:	bf 90       	pop	r11
     a7a:	af 90       	pop	r10
     a7c:	9f 90       	pop	r9
     a7e:	8f 90       	pop	r8
     a80:	7f 90       	pop	r7
     a82:	08 95       	ret

00000a84 <_Z11changeAlarmi>:

bool changeAlarm(int alPos){
     a84:	8f 92       	push	r8
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	2c 97       	sbiw	r28, 0x0c	; 12
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	5c 01       	movw	r10, r24
	bool noChange = false;
	bool backToMenu = false;
	uint8_t key;
	
	int min_al=0, hr_al=0;
	int n[6] = {6, 7, 9, 10};
     aae:	fe 01       	movw	r30, r28
     ab0:	31 96       	adiw	r30, 0x01	; 1
     ab2:	8c e0       	ldi	r24, 0x0C	; 12
     ab4:	df 01       	movw	r26, r30
     ab6:	1d 92       	st	X+, r1
     ab8:	8a 95       	dec	r24
     aba:	e9 f7       	brne	.-6      	; 0xab6 <_Z11changeAlarmi+0x32>
     abc:	86 e0       	ldi	r24, 0x06	; 6
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	87 e0       	ldi	r24, 0x07	; 7
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	89 e0       	ldi	r24, 0x09	; 9
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	9e 83       	std	Y+6, r25	; 0x06
     ad2:	8d 83       	std	Y+5, r24	; 0x05
     ad4:	8a e0       	ldi	r24, 0x0A	; 10
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	98 87       	std	Y+8, r25	; 0x08
     ada:	8f 83       	std	Y+7, r24	; 0x07
	static int alarm[2];
	
	lcd.LCD_Clear();
     adc:	84 ed       	ldi	r24, 0xD4	; 212
     ade:	97 e0       	ldi	r25, 0x07	; 7
     ae0:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
     ae4:	95 01       	movw	r18, r10
     ae6:	22 95       	swap	r18
     ae8:	32 95       	swap	r19
     aea:	30 7f       	andi	r19, 0xF0	; 240
     aec:	32 27       	eor	r19, r18
     aee:	20 7f       	andi	r18, 0xF0	; 240
     af0:	32 27       	eor	r19, r18
     af2:	20 56       	subi	r18, 0x60	; 96
     af4:	3e 4f       	sbci	r19, 0xFE	; 254
     af6:	46 e0       	ldi	r20, 0x06	; 6
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	84 ed       	ldi	r24, 0xD4	; 212
     afc:	97 e0       	ldi	r25, 0x07	; 7
     afe:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
     b02:	29 e5       	ldi	r18, 0x59	; 89
     b04:	37 e0       	ldi	r19, 0x07	; 7
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	84 ed       	ldi	r24, 0xD4	; 212
     b0c:	97 e0       	ldi	r25, 0x07	; 7
     b0e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     b12:	bf ef       	ldi	r27, 0xFF	; 255
     b14:	e1 ee       	ldi	r30, 0xE1	; 225
     b16:	f4 e0       	ldi	r31, 0x04	; 4
     b18:	b1 50       	subi	r27, 0x01	; 1
     b1a:	e0 40       	sbci	r30, 0x00	; 0
     b1c:	f0 40       	sbci	r31, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <_Z11changeAlarmi+0x94>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <_Z11changeAlarmi+0x9e>
     b22:	00 00       	nop
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     b24:	00 e0       	ldi	r16, 0x00	; 0
	bool delAlarm = false;
	bool noChange = false;
	bool backToMenu = false;
	uint8_t key;
	
	int min_al=0, hr_al=0;
     b26:	e1 2c       	mov	r14, r1
     b28:	f1 2c       	mov	r15, r1
     b2a:	c1 2c       	mov	r12, r1
     b2c:	d1 2c       	mov	r13, r1

bool changeAlarm(int alPos){
	//alPos takes the position of the alarm that needs to be changed
	//--------------------Changing Alarms---------------------------
	bool delAlarm = false;
	bool noChange = false;
     b2e:	81 2c       	mov	r8, r1
} 

bool changeAlarm(int alPos){
	//alPos takes the position of the alarm that needs to be changed
	//--------------------Changing Alarms---------------------------
	bool delAlarm = false;
     b30:	91 2c       	mov	r9, r1
	
	lcd.LCD_Clear();
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     b32:	05 30       	cpi	r16, 0x05	; 5
     b34:	08 f0       	brcs	.+2      	; 0xb38 <_Z11changeAlarmi+0xb4>
     b36:	53 c1       	rjmp	.+678    	; 0xdde <_Z11changeAlarmi+0x35a>
	{
		while(1)
		{
			key = keypad.GetKey();
     b38:	83 ed       	ldi	r24, 0xD3	; 211
     b3a:	97 e0       	ldi	r25, 0x07	; 7
     b3c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN7Get_key6GetKeyEv>
     b40:	18 2f       	mov	r17, r24
			if (key == 1) {lcd.LCD_String_xy(0,n[i],"1");break;}
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	99 f4       	brne	.+38     	; 0xb6c <_Z11changeAlarmi+0xe8>
     b46:	e0 2f       	mov	r30, r16
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	21 e0       	ldi	r18, 0x01	; 1
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	2c 0f       	add	r18, r28
     b54:	3d 1f       	adc	r19, r29
     b56:	e2 0f       	add	r30, r18
     b58:	f3 1f       	adc	r31, r19
     b5a:	40 81       	ld	r20, Z
     b5c:	29 e1       	ldi	r18, 0x19	; 25
     b5e:	37 e0       	ldi	r19, 0x07	; 7
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	84 ed       	ldi	r24, 0xD4	; 212
     b64:	97 e0       	ldi	r25, 0x07	; 7
     b66:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     b6a:	0d c1       	rjmp	.+538    	; 0xd86 <_Z11changeAlarmi+0x302>
			if (key == 2) {lcd.LCD_String_xy(0,n[i],"2");break;}
     b6c:	82 30       	cpi	r24, 0x02	; 2
     b6e:	99 f4       	brne	.+38     	; 0xb96 <_Z11changeAlarmi+0x112>
     b70:	e0 2f       	mov	r30, r16
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	8c 0f       	add	r24, r28
     b7e:	9d 1f       	adc	r25, r29
     b80:	e8 0f       	add	r30, r24
     b82:	f9 1f       	adc	r31, r25
     b84:	40 81       	ld	r20, Z
     b86:	2b e1       	ldi	r18, 0x1B	; 27
     b88:	37 e0       	ldi	r19, 0x07	; 7
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	84 ed       	ldi	r24, 0xD4	; 212
     b8e:	97 e0       	ldi	r25, 0x07	; 7
     b90:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     b94:	f8 c0       	rjmp	.+496    	; 0xd86 <_Z11changeAlarmi+0x302>
			if (key == 3) {lcd.LCD_String_xy(0,n[i],"3");break;}
     b96:	83 30       	cpi	r24, 0x03	; 3
     b98:	99 f4       	brne	.+38     	; 0xbc0 <_Z11changeAlarmi+0x13c>
     b9a:	e0 2f       	mov	r30, r16
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	ee 0f       	add	r30, r30
     ba0:	ff 1f       	adc	r31, r31
     ba2:	a1 e0       	ldi	r26, 0x01	; 1
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	ac 0f       	add	r26, r28
     ba8:	bd 1f       	adc	r27, r29
     baa:	ea 0f       	add	r30, r26
     bac:	fb 1f       	adc	r31, r27
     bae:	40 81       	ld	r20, Z
     bb0:	2d e1       	ldi	r18, 0x1D	; 29
     bb2:	37 e0       	ldi	r19, 0x07	; 7
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	84 ed       	ldi	r24, 0xD4	; 212
     bb8:	97 e0       	ldi	r25, 0x07	; 7
     bba:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     bbe:	e3 c0       	rjmp	.+454    	; 0xd86 <_Z11changeAlarmi+0x302>
			if (key == 4) {lcd.LCD_String_xy(0,n[i],"4");break;}
     bc0:	84 30       	cpi	r24, 0x04	; 4
     bc2:	99 f4       	brne	.+38     	; 0xbea <_Z11changeAlarmi+0x166>
     bc4:	e0 2f       	mov	r30, r16
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	21 e0       	ldi	r18, 0x01	; 1
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	2c 0f       	add	r18, r28
     bd2:	3d 1f       	adc	r19, r29
     bd4:	e2 0f       	add	r30, r18
     bd6:	f3 1f       	adc	r31, r19
     bd8:	40 81       	ld	r20, Z
     bda:	2f e1       	ldi	r18, 0x1F	; 31
     bdc:	37 e0       	ldi	r19, 0x07	; 7
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	84 ed       	ldi	r24, 0xD4	; 212
     be2:	97 e0       	ldi	r25, 0x07	; 7
     be4:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     be8:	ce c0       	rjmp	.+412    	; 0xd86 <_Z11changeAlarmi+0x302>
			if (key == 5) {lcd.LCD_String_xy(0,n[i],"5");break;}
     bea:	85 30       	cpi	r24, 0x05	; 5
     bec:	99 f4       	brne	.+38     	; 0xc14 <_Z11changeAlarmi+0x190>
     bee:	e0 2f       	mov	r30, r16
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	8c 0f       	add	r24, r28
     bfc:	9d 1f       	adc	r25, r29
     bfe:	e8 0f       	add	r30, r24
     c00:	f9 1f       	adc	r31, r25
     c02:	40 81       	ld	r20, Z
     c04:	21 e2       	ldi	r18, 0x21	; 33
     c06:	37 e0       	ldi	r19, 0x07	; 7
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	84 ed       	ldi	r24, 0xD4	; 212
     c0c:	97 e0       	ldi	r25, 0x07	; 7
     c0e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     c12:	b9 c0       	rjmp	.+370    	; 0xd86 <_Z11changeAlarmi+0x302>
			if (key == 6) {lcd.LCD_String_xy(0,n[i],"6");break;}
     c14:	86 30       	cpi	r24, 0x06	; 6
     c16:	99 f4       	brne	.+38     	; 0xc3e <_Z11changeAlarmi+0x1ba>
     c18:	e0 2f       	mov	r30, r16
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	ee 0f       	add	r30, r30
     c1e:	ff 1f       	adc	r31, r31
     c20:	a1 e0       	ldi	r26, 0x01	; 1
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ac 0f       	add	r26, r28
     c26:	bd 1f       	adc	r27, r29
     c28:	ea 0f       	add	r30, r26
     c2a:	fb 1f       	adc	r31, r27
     c2c:	40 81       	ld	r20, Z
     c2e:	23 e2       	ldi	r18, 0x23	; 35
     c30:	37 e0       	ldi	r19, 0x07	; 7
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	84 ed       	ldi	r24, 0xD4	; 212
     c36:	97 e0       	ldi	r25, 0x07	; 7
     c38:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     c3c:	a4 c0       	rjmp	.+328    	; 0xd86 <_Z11changeAlarmi+0x302>
			if (key == 7) {lcd.LCD_String_xy(0,n[i],"7");break;} 
     c3e:	87 30       	cpi	r24, 0x07	; 7
     c40:	99 f4       	brne	.+38     	; 0xc68 <_Z11changeAlarmi+0x1e4>
     c42:	e0 2f       	mov	r30, r16
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	ee 0f       	add	r30, r30
     c48:	ff 1f       	adc	r31, r31
     c4a:	21 e0       	ldi	r18, 0x01	; 1
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	2c 0f       	add	r18, r28
     c50:	3d 1f       	adc	r19, r29
     c52:	e2 0f       	add	r30, r18
     c54:	f3 1f       	adc	r31, r19
     c56:	40 81       	ld	r20, Z
     c58:	25 e2       	ldi	r18, 0x25	; 37
     c5a:	37 e0       	ldi	r19, 0x07	; 7
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	84 ed       	ldi	r24, 0xD4	; 212
     c60:	97 e0       	ldi	r25, 0x07	; 7
     c62:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     c66:	8f c0       	rjmp	.+286    	; 0xd86 <_Z11changeAlarmi+0x302>
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
     c68:	88 30       	cpi	r24, 0x08	; 8
     c6a:	99 f4       	brne	.+38     	; 0xc92 <_Z11changeAlarmi+0x20e>
     c6c:	e0 2f       	mov	r30, r16
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	8c 0f       	add	r24, r28
     c7a:	9d 1f       	adc	r25, r29
     c7c:	e8 0f       	add	r30, r24
     c7e:	f9 1f       	adc	r31, r25
     c80:	40 81       	ld	r20, Z
     c82:	27 e2       	ldi	r18, 0x27	; 39
     c84:	37 e0       	ldi	r19, 0x07	; 7
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	84 ed       	ldi	r24, 0xD4	; 212
     c8a:	97 e0       	ldi	r25, 0x07	; 7
     c8c:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     c90:	7a c0       	rjmp	.+244    	; 0xd86 <_Z11changeAlarmi+0x302>
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
     c92:	89 30       	cpi	r24, 0x09	; 9
     c94:	99 f4       	brne	.+38     	; 0xcbc <_Z11changeAlarmi+0x238>
     c96:	e0 2f       	mov	r30, r16
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	a1 e0       	ldi	r26, 0x01	; 1
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	ac 0f       	add	r26, r28
     ca4:	bd 1f       	adc	r27, r29
     ca6:	ea 0f       	add	r30, r26
     ca8:	fb 1f       	adc	r31, r27
     caa:	40 81       	ld	r20, Z
     cac:	29 e2       	ldi	r18, 0x29	; 41
     cae:	37 e0       	ldi	r19, 0x07	; 7
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	84 ed       	ldi	r24, 0xD4	; 212
     cb4:	97 e0       	ldi	r25, 0x07	; 7
     cb6:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     cba:	65 c0       	rjmp	.+202    	; 0xd86 <_Z11changeAlarmi+0x302>
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
     cbc:	8b 30       	cpi	r24, 0x0B	; 11
     cbe:	a1 f4       	brne	.+40     	; 0xce8 <_Z11changeAlarmi+0x264>
     cc0:	e0 2f       	mov	r30, r16
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	2c 0f       	add	r18, r28
     cce:	3d 1f       	adc	r19, r29
     cd0:	e2 0f       	add	r30, r18
     cd2:	f3 1f       	adc	r31, r19
     cd4:	40 81       	ld	r20, Z
     cd6:	26 e0       	ldi	r18, 0x06	; 6
     cd8:	37 e0       	ldi	r19, 0x07	; 7
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	84 ed       	ldi	r24, 0xD4	; 212
     cde:	97 e0       	ldi	r25, 0x07	; 7
     ce0:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	4f c0       	rjmp	.+158    	; 0xd86 <_Z11changeAlarmi+0x302>
			if (!(PINC & (1<<Ok))){
     ce8:	32 99       	sbic	0x06, 2	; 6
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <_Z11changeAlarmi+0x270>
				if (i==0){noChange=true;}
     cec:	00 23       	and	r16, r16
     cee:	09 f4       	brne	.+2      	; 0xcf2 <_Z11changeAlarmi+0x26e>
     cf0:	47 c0       	rjmp	.+142    	; 0xd80 <_Z11changeAlarmi+0x2fc>
     cf2:	44 c0       	rjmp	.+136    	; 0xd7c <_Z11changeAlarmi+0x2f8>
				i=8; 
				break;
			}
			if (!(PINC & (1<<Back))){
     cf4:	33 99       	sbic	0x06, 3	; 6
     cf6:	38 c0       	rjmp	.+112    	; 0xd68 <_Z11changeAlarmi+0x2e4>
				//deleting alarm
				allAlarms[alPos][0] = 0;
     cf8:	f5 01       	movw	r30, r10
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	eb 56       	subi	r30, 0x6B	; 107
     d08:	f8 4f       	sbci	r31, 0xF8	; 248
     d0a:	11 82       	std	Z+1, r1	; 0x01
     d0c:	10 82       	st	Z, r1
				allAlarms[alPos][1] = 0;
     d0e:	13 82       	std	Z+3, r1	; 0x03
     d10:	12 82       	std	Z+2, r1	; 0x02
				allAlarms[alPos][2] = 0;
     d12:	15 82       	std	Z+5, r1	; 0x05
     d14:	14 82       	std	Z+4, r1	; 0x04
				allAlarms[alPos][3] = 0; //set alarm state as OFF
     d16:	17 82       	std	Z+7, r1	; 0x07
     d18:	16 82       	std	Z+6, r1	; 0x06

				allAlarmsMenu[alPos][7] = '_'; 
     d1a:	f5 01       	movw	r30, r10
     d1c:	e2 95       	swap	r30
     d1e:	f2 95       	swap	r31
     d20:	f0 7f       	andi	r31, 0xF0	; 240
     d22:	fe 27       	eor	r31, r30
     d24:	e0 7f       	andi	r30, 0xF0	; 240
     d26:	fe 27       	eor	r31, r30
     d28:	df 01       	movw	r26, r30
     d2a:	a0 51       	subi	r26, 0x10	; 16
     d2c:	be 4f       	sbci	r27, 0xFE	; 254
     d2e:	8f e5       	ldi	r24, 0x5F	; 95
     d30:	17 96       	adiw	r26, 0x07	; 7
     d32:	8c 93       	st	X, r24
     d34:	17 97       	sbiw	r26, 0x07	; 7
				allAlarmsMenu[alPos][8] = '_'; 
     d36:	18 96       	adiw	r26, 0x08	; 8
     d38:	8c 93       	st	X, r24
     d3a:	18 97       	sbiw	r26, 0x08	; 8
				allAlarmsMenu[alPos][10] = '_';
     d3c:	1a 96       	adiw	r26, 0x0a	; 10
     d3e:	8c 93       	st	X, r24
     d40:	1a 97       	sbiw	r26, 0x0a	; 10
				allAlarmsMenu[alPos][11] = '_';
     d42:	1b 96       	adiw	r26, 0x0b	; 11
     d44:	8c 93       	st	X, r24
 
				alarmChangeList[alPos][0] = '0'; 
     d46:	e0 56       	subi	r30, 0x60	; 96
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
     d4a:	80 e3       	ldi	r24, 0x30	; 48
     d4c:	80 83       	st	Z, r24
				alarmChangeList[alPos][1] = '0'; 
     d4e:	81 83       	std	Z+1, r24	; 0x01
				alarmChangeList[alPos][3] = '0'; 
     d50:	83 83       	std	Z+3, r24	; 0x03
				alarmChangeList[alPos][4] = '0'; 
     d52:	84 83       	std	Z+4, r24	; 0x04
				
				i = 8;
				delAlarm = true;
				set=3;
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <set+0x1>
     d5c:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <set>
				alarmChangeList[alPos][0] = '0'; 
				alarmChangeList[alPos][1] = '0'; 
				alarmChangeList[alPos][3] = '0'; 
				alarmChangeList[alPos][4] = '0'; 
				
				i = 8;
     d60:	08 e0       	ldi	r16, 0x08	; 8
				delAlarm = true;
     d62:	99 24       	eor	r9, r9
     d64:	93 94       	inc	r9
				set=3;
				break;	
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <_Z11changeAlarmi+0x302>
     d68:	3f ef       	ldi	r19, 0xFF	; 255
     d6a:	81 ee       	ldi	r24, 0xE1	; 225
     d6c:	94 e0       	ldi	r25, 0x04	; 4
     d6e:	31 50       	subi	r19, 0x01	; 1
     d70:	80 40       	sbci	r24, 0x00	; 0
     d72:	90 40       	sbci	r25, 0x00	; 0
     d74:	e1 f7       	brne	.-8      	; 0xd6e <_Z11changeAlarmi+0x2ea>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <_Z11changeAlarmi+0x2f4>
     d78:	00 00       	nop
     d7a:	de ce       	rjmp	.-580    	; 0xb38 <_Z11changeAlarmi+0xb4>
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
			if (!(PINC & (1<<Ok))){
				if (i==0){noChange=true;}
				i=8; 
     d7c:	08 e0       	ldi	r16, 0x08	; 8
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <_Z11changeAlarmi+0x302>
     d80:	08 e0       	ldi	r16, 0x08	; 8
			if (key == 7) {lcd.LCD_String_xy(0,n[i],"7");break;} 
			if (key == 8) {lcd.LCD_String_xy(0,n[i],"8");break;}
			if (key == 9) {lcd.LCD_String_xy(0,n[i],"9");break;}
			if (key == 11) {lcd.LCD_String_xy(0,n[i],"0");key=0;break;}
			if (!(PINC & (1<<Ok))){
				if (i==0){noChange=true;}
     d82:	88 24       	eor	r8, r8
     d84:	83 94       	inc	r8
				break;	
			}
			_delay_ms(200);
		}

		if (i == 0){hr_al+=key*10;}
     d86:	01 11       	cpse	r16, r1
     d88:	0f c0       	rjmp	.+30     	; 0xda8 <_Z11changeAlarmi+0x324>
     d8a:	81 2f       	mov	r24, r17
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9c 01       	movw	r18, r24
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	e8 0e       	add	r14, r24
     da6:	f9 1e       	adc	r15, r25
		if (i == 1){hr_al+=key;}
     da8:	01 30       	cpi	r16, 0x01	; 1
     daa:	11 f4       	brne	.+4      	; 0xdb0 <_Z11changeAlarmi+0x32c>
     dac:	e1 0e       	add	r14, r17
     dae:	f1 1c       	adc	r15, r1
		if (i == 2){min_al+=key*10;}
     db0:	02 30       	cpi	r16, 0x02	; 2
     db2:	79 f4       	brne	.+30     	; 0xdd2 <_Z11changeAlarmi+0x34e>
     db4:	81 2f       	mov	r24, r17
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	9c 01       	movw	r18, r24
     dba:	22 0f       	add	r18, r18
     dbc:	33 1f       	adc	r19, r19
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	82 0f       	add	r24, r18
     dcc:	93 1f       	adc	r25, r19
     dce:	c8 0e       	add	r12, r24
     dd0:	d9 1e       	adc	r13, r25
		if (i == 3){min_al+=key;}
     dd2:	03 30       	cpi	r16, 0x03	; 3
     dd4:	11 f4       	brne	.+4      	; 0xdda <_Z11changeAlarmi+0x356>
     dd6:	c1 0e       	add	r12, r17
     dd8:	d1 1c       	adc	r13, r1
	
	lcd.LCD_Clear();
	lcd.LCD_String_xy(0, 6, alarmChangeList[alPos]);
	lcd.LCD_String_xy(1, 0, "OK       DELETE");
	_delay_ms(200);
	for(uint8_t i=0;i<5;i++)
     dda:	0f 5f       	subi	r16, 0xFF	; 255
     ddc:	aa ce       	rjmp	.-684    	; 0xb32 <_Z11changeAlarmi+0xae>
		if (i == 1){hr_al+=key;}
		if (i == 2){min_al+=key*10;}
		if (i == 3){min_al+=key;}
	}
	//updating the lists with new alarm Hour and Min
	if (!(delAlarm || noChange)){
     dde:	91 10       	cpse	r9, r1
     de0:	4d c0       	rjmp	.+154    	; 0xe7c <_Z11changeAlarmi+0x3f8>
     de2:	81 10       	cpse	r8, r1
     de4:	4d c0       	rjmp	.+154    	; 0xe80 <_Z11changeAlarmi+0x3fc>
		char* txtHr;
		char* txtMin;
		allAlarms[alPos][0] = hr_al;
     de6:	f5 01       	movw	r30, r10
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	ee 0f       	add	r30, r30
     dee:	ff 1f       	adc	r31, r31
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	eb 56       	subi	r30, 0x6B	; 107
     df6:	f8 4f       	sbci	r31, 0xF8	; 248
     df8:	f1 82       	std	Z+1, r15	; 0x01
     dfa:	e0 82       	st	Z, r14
		allAlarms[alPos][1] = min_al;
     dfc:	d3 82       	std	Z+3, r13	; 0x03
     dfe:	c2 82       	std	Z+2, r12	; 0x02
		allAlarms[alPos][2] = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	95 83       	std	Z+5, r25	; 0x05
     e06:	84 83       	std	Z+4, r24	; 0x04
		allAlarms[alPos][3] = 1;
     e08:	97 83       	std	Z+7, r25	; 0x07
     e0a:	86 83       	std	Z+6, r24	; 0x06

		txtHr = alarmclock.int_to_char(hr_al);
     e0c:	b7 01       	movw	r22, r14
     e0e:	81 ed       	ldi	r24, 0xD1	; 209
     e10:	97 e0       	ldi	r25, 0x07	; 7
     e12:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     e16:	fc 01       	movw	r30, r24
		allAlarmsMenu[alPos][7] = txtHr[0];
     e18:	80 81       	ld	r24, Z
     e1a:	85 01       	movw	r16, r10
     e1c:	02 95       	swap	r16
     e1e:	12 95       	swap	r17
     e20:	10 7f       	andi	r17, 0xF0	; 240
     e22:	10 27       	eor	r17, r16
     e24:	00 7f       	andi	r16, 0xF0	; 240
     e26:	10 27       	eor	r17, r16
     e28:	d8 01       	movw	r26, r16
     e2a:	a0 51       	subi	r26, 0x10	; 16
     e2c:	be 4f       	sbci	r27, 0xFE	; 254
     e2e:	7d 01       	movw	r14, r26
     e30:	17 96       	adiw	r26, 0x07	; 7
     e32:	8c 93       	st	X, r24
     e34:	17 97       	sbiw	r26, 0x07	; 7
		allAlarmsMenu[alPos][8] = txtHr[1]; 
     e36:	81 81       	ldd	r24, Z+1	; 0x01
     e38:	18 96       	adiw	r26, 0x08	; 8
     e3a:	8c 93       	st	X, r24

		alarmChangeList[alPos][0] = txtHr[0];
     e3c:	80 81       	ld	r24, Z
     e3e:	00 56       	subi	r16, 0x60	; 96
     e40:	1e 4f       	sbci	r17, 0xFE	; 254
     e42:	d8 01       	movw	r26, r16
     e44:	8c 93       	st	X, r24
		alarmChangeList[alPos][1] = txtHr[1];
     e46:	81 81       	ldd	r24, Z+1	; 0x01
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	8c 93       	st	X, r24

		txtMin = alarmclock.int_to_char(min_al);
     e4c:	b6 01       	movw	r22, r12
     e4e:	81 ed       	ldi	r24, 0xD1	; 209
     e50:	97 e0       	ldi	r25, 0x07	; 7
     e52:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN10AlarmClock11int_to_charEi>
     e56:	fc 01       	movw	r30, r24

		alarmChangeList[alPos][3] = txtMin[0];
     e58:	80 81       	ld	r24, Z
     e5a:	d8 01       	movw	r26, r16
     e5c:	13 96       	adiw	r26, 0x03	; 3
     e5e:	8c 93       	st	X, r24
     e60:	13 97       	sbiw	r26, 0x03	; 3
		alarmChangeList[alPos][4] = txtMin[1];	
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	14 96       	adiw	r26, 0x04	; 4
     e66:	8c 93       	st	X, r24

		allAlarmsMenu[alPos][10] = txtMin[0];
     e68:	80 81       	ld	r24, Z
     e6a:	d7 01       	movw	r26, r14
     e6c:	1a 96       	adiw	r26, 0x0a	; 10
     e6e:	8c 93       	st	X, r24
     e70:	1a 97       	sbiw	r26, 0x0a	; 10
		allAlarmsMenu[alPos][11] = txtMin[1];
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	1b 96       	adiw	r26, 0x0b	; 11
     e76:	8c 93       	st	X, r24

		backToMenu = true;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <_Z11changeAlarmi+0x3fe>
bool changeAlarm(int alPos){
	//alPos takes the position of the alarm that needs to be changed
	//--------------------Changing Alarms---------------------------
	bool delAlarm = false;
	bool noChange = false;
	bool backToMenu = false;
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <_Z11changeAlarmi+0x3fe>
     e80:	80 e0       	ldi	r24, 0x00	; 0
		allAlarmsMenu[alPos][11] = txtMin[1];

		backToMenu = true;
	} 
	return backToMenu;
}
     e82:	2c 96       	adiw	r28, 0x0c	; 12
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	bf 90       	pop	r11
     ea0:	af 90       	pop	r10
     ea2:	9f 90       	pop	r9
     ea4:	8f 90       	pop	r8
     ea6:	08 95       	ret

00000ea8 <_Z8resetAllv>:

void resetAll(){
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	27 97       	sbiw	r28, 0x07	; 7
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
	lcd.LCD_String_xy(0, 0, "Resetting All");
     ebc:	29 e6       	ldi	r18, 0x69	; 105
     ebe:	37 e0       	ldi	r19, 0x07	; 7
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	84 ed       	ldi	r24, 0xD4	; 212
     ec6:	97 e0       	ldi	r25, 0x07	; 7
     ec8:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN11LCD_Display13LCD_String_xyEccPc>
	for (int i=0; i<5; i++){
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	85 30       	cpi	r24, 0x05	; 5
     ed2:	91 05       	cpc	r25, r1
     ed4:	84 f5       	brge	.+96     	; 0xf36 <_Z8resetAllv+0x8e>
		allAlarms[i][0] = 0;
     ed6:	fc 01       	movw	r30, r24
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	ee 0f       	add	r30, r30
     ede:	ff 1f       	adc	r31, r31
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	eb 56       	subi	r30, 0x6B	; 107
     ee6:	f8 4f       	sbci	r31, 0xF8	; 248
     ee8:	11 82       	std	Z+1, r1	; 0x01
     eea:	10 82       	st	Z, r1
		allAlarms[i][1] = 0;
     eec:	13 82       	std	Z+3, r1	; 0x03
     eee:	12 82       	std	Z+2, r1	; 0x02
		allAlarms[i][2] = 0;
     ef0:	15 82       	std	Z+5, r1	; 0x05
     ef2:	14 82       	std	Z+4, r1	; 0x04
		allAlarms[i][3] = 0; //set alarm state as OFF
     ef4:	17 82       	std	Z+7, r1	; 0x07
     ef6:	16 82       	std	Z+6, r1	; 0x06

		allAlarmsMenu[i][7] = '_'; 
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 95       	swap	r30
     efc:	f2 95       	swap	r31
     efe:	f0 7f       	andi	r31, 0xF0	; 240
     f00:	fe 27       	eor	r31, r30
     f02:	e0 7f       	andi	r30, 0xF0	; 240
     f04:	fe 27       	eor	r31, r30
     f06:	df 01       	movw	r26, r30
     f08:	a0 51       	subi	r26, 0x10	; 16
     f0a:	be 4f       	sbci	r27, 0xFE	; 254
     f0c:	2f e5       	ldi	r18, 0x5F	; 95
     f0e:	17 96       	adiw	r26, 0x07	; 7
     f10:	2c 93       	st	X, r18
     f12:	17 97       	sbiw	r26, 0x07	; 7
		allAlarmsMenu[i][8] = '_';
     f14:	18 96       	adiw	r26, 0x08	; 8
     f16:	2c 93       	st	X, r18
     f18:	18 97       	sbiw	r26, 0x08	; 8
		allAlarmsMenu[i][10] = '_';
     f1a:	1a 96       	adiw	r26, 0x0a	; 10
     f1c:	2c 93       	st	X, r18
     f1e:	1a 97       	sbiw	r26, 0x0a	; 10
		allAlarmsMenu[i][11] = '_';
     f20:	1b 96       	adiw	r26, 0x0b	; 11
     f22:	2c 93       	st	X, r18
	
		alarmChangeList[i][0] = '0';
     f24:	e0 56       	subi	r30, 0x60	; 96
     f26:	fe 4f       	sbci	r31, 0xFE	; 254
     f28:	20 e3       	ldi	r18, 0x30	; 48
     f2a:	20 83       	st	Z, r18
		alarmChangeList[i][1] = '0';
     f2c:	21 83       	std	Z+1, r18	; 0x01
		alarmChangeList[i][3] = '0';
     f2e:	23 83       	std	Z+3, r18	; 0x03
		alarmChangeList[i][4] = '0';
     f30:	24 83       	std	Z+4, r18	; 0x04
	return backToMenu;
}

void resetAll(){
	lcd.LCD_String_xy(0, 0, "Resetting All");
	for (int i=0; i<5; i++){
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	cd cf       	rjmp	.-102    	; 0xed0 <_Z8resetAllv+0x28>
	}

	ds1307::rtc_t rtc;

	//Setting time to the RTC
	rtc.seconds =  0x00;
     f36:	19 82       	std	Y+1, r1	; 0x01
	rtc.minute =  0x00;
     f38:	1a 82       	std	Y+2, r1	; 0x02
	rtc.hour = 0x00;	//Initial Time set to 10:00:00
     f3a:	1b 82       	std	Y+3, r1	; 0x03
	rtc.weekDay = 0x01;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x06;
     f40:	86 e0       	ldi	r24, 0x06	; 6
     f42:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x08;
     f44:	88 e0       	ldi	r24, 0x08	; 8
     f46:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21; //10th Aug 2021 Tue
     f48:	81 e2       	ldi	r24, 0x21	; 33
     f4a:	8f 83       	std	Y+7, r24	; 0x07
	DS1307.set_time(&rtc);
     f4c:	be 01       	movw	r22, r28
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	8a ed       	ldi	r24, 0xDA	; 218
     f54:	97 e0       	ldi	r25, 0x07	; 7
     f56:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN6ds13078set_timeEPNS_5rtc_tE>
     f5a:	2f ef       	ldi	r18, 0xFF	; 255
     f5c:	84 e3       	ldi	r24, 0x34	; 52
     f5e:	9c e0       	ldi	r25, 0x0C	; 12
     f60:	21 50       	subi	r18, 0x01	; 1
     f62:	80 40       	sbci	r24, 0x00	; 0
     f64:	90 40       	sbci	r25, 0x00	; 0
     f66:	e1 f7       	brne	.-8      	; 0xf60 <_Z8resetAllv+0xb8>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <_Z8resetAllv+0xc2>
     f6a:	00 00       	nop
	_delay_ms(500);
	//lcd.LCD_Clear();
}
     f6c:	27 96       	adiw	r28, 0x07	; 7
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	08 95       	ret

00000f7e <_Z7displayv>:
	}
}

void display(){

	if (set == 1){
     f7e:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <set>
     f82:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <set+0x1>
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	b9 f5       	brne	.+110    	; 0xffa <_Z7displayv+0x7c>
		lcd.LCD_Clear();
     f8c:	84 ed       	ldi	r24, 0xD4	; 212
     f8e:	97 e0       	ldi	r25, 0x07	; 7
     f90:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(Menu[currentscreenset1][0]);        
     f94:	60 91 c1 07 	lds	r22, 0x07C1	; 0x8007c1 <currentscreenset1>
     f98:	70 91 c2 07 	lds	r23, 0x07C2	; 0x8007c2 <currentscreenset1+0x1>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	62 95       	swap	r22
     fa2:	72 95       	swap	r23
     fa4:	70 7f       	andi	r23, 0xF0	; 240
     fa6:	76 27       	eor	r23, r22
     fa8:	60 7f       	andi	r22, 0xF0	; 240
     faa:	76 27       	eor	r23, r22
     fac:	60 5c       	subi	r22, 0xC0	; 192
     fae:	7d 4f       	sbci	r23, 0xFD	; 253
     fb0:	84 ed       	ldi	r24, 0xD4	; 212
     fb2:	97 e0       	ldi	r25, 0x07	; 7
     fb4:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        
     fb8:	60 ec       	ldi	r22, 0xC0	; 192
     fba:	84 ed       	ldi	r24, 0xD4	; 212
     fbc:	97 e0       	ldi	r25, 0x07	; 7
     fbe:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(Menu[currentscreenset1][1]);
     fc2:	60 91 c1 07 	lds	r22, 0x07C1	; 0x8007c1 <currentscreenset1>
     fc6:	70 91 c2 07 	lds	r23, 0x07C2	; 0x8007c2 <currentscreenset1+0x1>
     fca:	66 0f       	add	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	62 95       	swap	r22
     fd0:	72 95       	swap	r23
     fd2:	70 7f       	andi	r23, 0xF0	; 240
     fd4:	76 27       	eor	r23, r22
     fd6:	60 7f       	andi	r22, 0xF0	; 240
     fd8:	76 27       	eor	r23, r22
     fda:	60 5b       	subi	r22, 0xB0	; 176
     fdc:	7d 4f       	sbci	r23, 0xFD	; 253
     fde:	84 ed       	ldi	r24, 0xD4	; 212
     fe0:	97 e0       	ldi	r25, 0x07	; 7
     fe2:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
     fe6:	2f ef       	ldi	r18, 0xFF	; 255
     fe8:	84 e3       	ldi	r24, 0x34	; 52
     fea:	9c e0       	ldi	r25, 0x0C	; 12
     fec:	21 50       	subi	r18, 0x01	; 1
     fee:	80 40       	sbci	r24, 0x00	; 0
     ff0:	90 40       	sbci	r25, 0x00	; 0
     ff2:	e1 f7       	brne	.-8      	; 0xfec <_Z7displayv+0x6e>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <_Z7displayv+0x78>
     ff6:	00 00       	nop
     ff8:	08 95       	ret
		_delay_ms(500);
	}
	
	else if ((set == 2) & (currentscreenset1 == 0)){
     ffa:	21 e0       	ldi	r18, 0x01	; 1
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f0       	breq	.+2      	; 0x1004 <_Z7displayv+0x86>
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	40 91 c1 07 	lds	r20, 0x07C1	; 0x8007c1 <currentscreenset1>
    1008:	50 91 c2 07 	lds	r21, 0x07C2	; 0x8007c2 <currentscreenset1+0x1>
    100c:	31 e0       	ldi	r19, 0x01	; 1
    100e:	41 15       	cp	r20, r1
    1010:	51 05       	cpc	r21, r1
    1012:	09 f0       	breq	.+2      	; 0x1016 <_Z7displayv+0x98>
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	22 23       	and	r18, r18
    1018:	59 f1       	breq	.+86     	; 0x1070 <_Z7displayv+0xf2>
    101a:	33 23       	and	r19, r19
    101c:	49 f1       	breq	.+82     	; 0x1070 <_Z7displayv+0xf2>
		//All alarms menu
		lcd.LCD_Clear();
    101e:	84 ed       	ldi	r24, 0xD4	; 212
    1020:	97 e0       	ldi	r25, 0x07	; 7
    1022:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(allAlarmsMenu[currentscreenset21]);  
    1026:	60 91 bf 07 	lds	r22, 0x07BF	; 0x8007bf <currentscreenset21>
    102a:	70 91 c0 07 	lds	r23, 0x07C0	; 0x8007c0 <currentscreenset21+0x1>
    102e:	62 95       	swap	r22
    1030:	72 95       	swap	r23
    1032:	70 7f       	andi	r23, 0xF0	; 240
    1034:	76 27       	eor	r23, r22
    1036:	60 7f       	andi	r22, 0xF0	; 240
    1038:	76 27       	eor	r23, r22
    103a:	60 51       	subi	r22, 0x10	; 16
    103c:	7e 4f       	sbci	r23, 0xFE	; 254
    103e:	84 ed       	ldi	r24, 0xD4	; 212
    1040:	97 e0       	ldi	r25, 0x07	; 7
    1042:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        
    1046:	60 ec       	ldi	r22, 0xC0	; 192
    1048:	84 ed       	ldi	r24, 0xD4	; 212
    104a:	97 e0       	ldi	r25, 0x07	; 7
    104c:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String("CHANGE     BACK");
    1050:	67 e7       	ldi	r22, 0x77	; 119
    1052:	77 e0       	ldi	r23, 0x07	; 7
    1054:	84 ed       	ldi	r24, 0xD4	; 212
    1056:	97 e0       	ldi	r25, 0x07	; 7
    1058:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
    105c:	2f ef       	ldi	r18, 0xFF	; 255
    105e:	84 e3       	ldi	r24, 0x34	; 52
    1060:	9c e0       	ldi	r25, 0x0C	; 12
    1062:	21 50       	subi	r18, 0x01	; 1
    1064:	80 40       	sbci	r24, 0x00	; 0
    1066:	90 40       	sbci	r25, 0x00	; 0
    1068:	e1 f7       	brne	.-8      	; 0x1062 <_Z7displayv+0xe4>
    106a:	00 c0       	rjmp	.+0      	; 0x106c <_Z7displayv+0xee>
    106c:	00 00       	nop
    106e:	08 95       	ret

		_delay_ms(500);
	}
	else if ((set==3) & (currentscreenset1==0) ){//& (currentscreenset21 == 0 or 1 or 2 or 3 or 4)){
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	03 97       	sbiw	r24, 0x03	; 3
    1074:	09 f0       	breq	.+2      	; 0x1078 <_Z7displayv+0xfa>
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	66 23       	and	r22, r22
    107a:	f1 f0       	breq	.+60     	; 0x10b8 <_Z7displayv+0x13a>
    107c:	33 23       	and	r19, r19
    107e:	e1 f0       	breq	.+56     	; 0x10b8 <_Z7displayv+0x13a>
		bool g = false;
		lcd.LCD_Clear();
    1080:	84 ed       	ldi	r24, 0xD4	; 212
    1082:	97 e0       	ldi	r25, 0x07	; 7
    1084:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		g = changeAlarm(currentscreenset21);
    1088:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <currentscreenset21>
    108c:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <currentscreenset21+0x1>
    1090:	0e 94 42 05 	call	0xa84	; 0xa84 <_Z11changeAlarmi>
		if (g) {set=1;}
    1094:	88 23       	and	r24, r24
    1096:	31 f0       	breq	.+12     	; 0x10a4 <_Z7displayv+0x126>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <set+0x1>
    10a0:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <set>
    10a4:	2f ef       	ldi	r18, 0xFF	; 255
    10a6:	84 e3       	ldi	r24, 0x34	; 52
    10a8:	9c e0       	ldi	r25, 0x0C	; 12
    10aa:	21 50       	subi	r18, 0x01	; 1
    10ac:	80 40       	sbci	r24, 0x00	; 0
    10ae:	90 40       	sbci	r25, 0x00	; 0
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <_Z7displayv+0x12c>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <_Z7displayv+0x136>
    10b4:	00 00       	nop
    10b6:	08 95       	ret
		_delay_ms(500);
	}
	else if ((set == 2) & (currentscreenset1 == 1)){
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	41 30       	cpi	r20, 0x01	; 1
    10bc:	51 05       	cpc	r21, r1
    10be:	09 f0       	breq	.+2      	; 0x10c2 <_Z7displayv+0x144>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	88 23       	and	r24, r24
    10c4:	c1 f0       	breq	.+48     	; 0x10f6 <_Z7displayv+0x178>
    10c6:	22 23       	and	r18, r18
    10c8:	b1 f0       	breq	.+44     	; 0x10f6 <_Z7displayv+0x178>
		bool go;
		go = alarmclock.setTimetoRTC();
    10ca:	81 ed       	ldi	r24, 0xD1	; 209
    10cc:	97 e0       	ldi	r25, 0x07	; 7
    10ce:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN10AlarmClock12setTimetoRTCEv>
		if (go) {set=2;}
    10d2:	88 23       	and	r24, r24
    10d4:	31 f0       	breq	.+12     	; 0x10e2 <_Z7displayv+0x164>
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <set+0x1>
    10de:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <set>
    10e2:	2f ef       	ldi	r18, 0xFF	; 255
    10e4:	84 e3       	ldi	r24, 0x34	; 52
    10e6:	9c e0       	ldi	r25, 0x0C	; 12
    10e8:	21 50       	subi	r18, 0x01	; 1
    10ea:	80 40       	sbci	r24, 0x00	; 0
    10ec:	90 40       	sbci	r25, 0x00	; 0
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <_Z7displayv+0x16a>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <_Z7displayv+0x174>
    10f2:	00 00       	nop
    10f4:	08 95       	ret
		_delay_ms(500);
	}
	else if ((set == 2) & (currentscreenset1 == 2)){
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	42 30       	cpi	r20, 0x02	; 2
    10fa:	51 05       	cpc	r21, r1
    10fc:	09 f0       	breq	.+2      	; 0x1100 <_Z7displayv+0x182>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	88 23       	and	r24, r24
    1102:	09 f4       	brne	.+2      	; 0x1106 <_Z7displayv+0x188>
    1104:	6d c0       	rjmp	.+218    	; 0x11e0 <_Z7displayv+0x262>
    1106:	22 23       	and	r18, r18
    1108:	09 f4       	brne	.+2      	; 0x110c <_Z7displayv+0x18e>
    110a:	6a c0       	rjmp	.+212    	; 0x11e0 <_Z7displayv+0x262>
		lcd.LCD_Clear();
    110c:	84 ed       	ldi	r24, 0xD4	; 212
    110e:	97 e0       	ldi	r25, 0x07	; 7
    1110:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		lcd.LCD_String(alarmtone[currentscreenset23][0]);                //Write string on 1st line of LCD
    1114:	60 91 bd 07 	lds	r22, 0x07BD	; 0x8007bd <currentscreenset23>
    1118:	70 91 be 07 	lds	r23, 0x07BE	; 0x8007be <currentscreenset23+0x1>
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	62 95       	swap	r22
    1122:	72 95       	swap	r23
    1124:	70 7f       	andi	r23, 0xF0	; 240
    1126:	76 27       	eor	r23, r22
    1128:	60 7f       	andi	r22, 0xF0	; 240
    112a:	76 27       	eor	r23, r22
    112c:	60 50       	subi	r22, 0x00	; 0
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	84 ed       	ldi	r24, 0xD4	; 212
    1132:	97 e0       	ldi	r25, 0x07	; 7
    1134:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
		lcd.LCD_Commandgiver(0xC0);                        //Go to 2nd line
    1138:	60 ec       	ldi	r22, 0xC0	; 192
    113a:	84 ed       	ldi	r24, 0xD4	; 212
    113c:	97 e0       	ldi	r25, 0x07	; 7
    113e:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN11LCD_Display16LCD_CommandgiverEh>
		lcd.LCD_String(alarmtone[currentscreenset23][1]);
    1142:	60 91 bd 07 	lds	r22, 0x07BD	; 0x8007bd <currentscreenset23>
    1146:	70 91 be 07 	lds	r23, 0x07BE	; 0x8007be <currentscreenset23+0x1>
    114a:	66 0f       	add	r22, r22
    114c:	77 1f       	adc	r23, r23
    114e:	62 95       	swap	r22
    1150:	72 95       	swap	r23
    1152:	70 7f       	andi	r23, 0xF0	; 240
    1154:	76 27       	eor	r23, r22
    1156:	60 7f       	andi	r22, 0xF0	; 240
    1158:	76 27       	eor	r23, r22
    115a:	60 5f       	subi	r22, 0xF0	; 240
    115c:	7e 4f       	sbci	r23, 0xFE	; 254
    115e:	84 ed       	ldi	r24, 0xD4	; 212
    1160:	97 e0       	ldi	r25, 0x07	; 7
    1162:	0e 94 28 04 	call	0x850	; 0x850 <_ZN11LCD_Display10LCD_StringEPc>
    1166:	2f ef       	ldi	r18, 0xFF	; 255
    1168:	89 e6       	ldi	r24, 0x69	; 105
    116a:	98 e1       	ldi	r25, 0x18	; 24
    116c:	21 50       	subi	r18, 0x01	; 1
    116e:	80 40       	sbci	r24, 0x00	; 0
    1170:	90 40       	sbci	r25, 0x00	; 0
    1172:	e1 f7       	brne	.-8      	; 0x116c <_Z7displayv+0x1ee>
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <_Z7displayv+0x1f8>
    1176:	00 00       	nop
		_delay_ms(1000);
		if (currentscreenset23==0){
    1178:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <currentscreenset23>
    117c:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <currentscreenset23+0x1>
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	39 f4       	brne	.+14     	; 0x1192 <_Z7displayv+0x214>
			music.tone(0);
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	85 ec       	ldi	r24, 0xC5	; 197
    118a:	97 e0       	ldi	r25, 0x07	; 7
    118c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN15music_notations4toneEi>
    1190:	08 95       	ret
		}
		else if (currentscreenset23==1){
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	91 05       	cpc	r25, r1
    1196:	39 f4       	brne	.+14     	; 0x11a6 <_Z7displayv+0x228>
			music.tone(1);
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	85 ec       	ldi	r24, 0xC5	; 197
    119e:	97 e0       	ldi	r25, 0x07	; 7
    11a0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN15music_notations4toneEi>
    11a4:	08 95       	ret
		}
		else if (currentscreenset23==2){
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	91 05       	cpc	r25, r1
    11aa:	39 f4       	brne	.+14     	; 0x11ba <_Z7displayv+0x23c>
			music.tone(2);
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	85 ec       	ldi	r24, 0xC5	; 197
    11b2:	97 e0       	ldi	r25, 0x07	; 7
    11b4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN15music_notations4toneEi>
    11b8:	08 95       	ret
		}
		else if (currentscreenset23==3){
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	39 f4       	brne	.+14     	; 0x11ce <_Z7displayv+0x250>
			music.tone(3);
    11c0:	63 e0       	ldi	r22, 0x03	; 3
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	85 ec       	ldi	r24, 0xC5	; 197
    11c6:	97 e0       	ldi	r25, 0x07	; 7
    11c8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN15music_notations4toneEi>
    11cc:	08 95       	ret
		}
		else if (currentscreenset23==4){
    11ce:	04 97       	sbiw	r24, 0x04	; 4
    11d0:	19 f5       	brne	.+70     	; 0x1218 <_Z7displayv+0x29a>
			music.tone(4);
    11d2:	64 e0       	ldi	r22, 0x04	; 4
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	85 ec       	ldi	r24, 0xC5	; 197
    11d8:	97 e0       	ldi	r25, 0x07	; 7
    11da:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN15music_notations4toneEi>
    11de:	08 95       	ret
		}
	}
	else if ((set == 2) & (currentscreenset1 == 3)){
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	43 30       	cpi	r20, 0x03	; 3
    11e4:	51 05       	cpc	r21, r1
    11e6:	09 f0       	breq	.+2      	; 0x11ea <_Z7displayv+0x26c>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	88 23       	and	r24, r24
    11ec:	a9 f0       	breq	.+42     	; 0x1218 <_Z7displayv+0x29a>
    11ee:	22 23       	and	r18, r18
    11f0:	99 f0       	breq	.+38     	; 0x1218 <_Z7displayv+0x29a>
		lcd.LCD_Clear();
    11f2:	84 ed       	ldi	r24, 0xD4	; 212
    11f4:	97 e0       	ldi	r25, 0x07	; 7
    11f6:	0e 94 44 04 	call	0x888	; 0x888 <_ZN11LCD_Display9LCD_ClearEv>
		//lcd.LCD_String(reset[0]);                //Write string on 1st line of LCD
		//lcd.LCD_Commandgiver(0xC0);              //Go to 2nd line
		//lcd.LCD_String(reset[0]);
		resetAll();
    11fa:	0e 94 54 07 	call	0xea8	; 0xea8 <_Z8resetAllv>
    11fe:	2f ef       	ldi	r18, 0xFF	; 255
    1200:	84 e3       	ldi	r24, 0x34	; 52
    1202:	9c e0       	ldi	r25, 0x0C	; 12
    1204:	21 50       	subi	r18, 0x01	; 1
    1206:	80 40       	sbci	r24, 0x00	; 0
    1208:	90 40       	sbci	r25, 0x00	; 0
    120a:	e1 f7       	brne	.-8      	; 0x1204 <_Z7displayv+0x286>
    120c:	00 c0       	rjmp	.+0      	; 0x120e <_Z7displayv+0x290>
    120e:	00 00       	nop
		_delay_ms(500);
		set = 0;
    1210:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <set+0x1>
    1214:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <set>
    1218:	08 95       	ret

0000121a <_Z5upbtnv>:
	}
}

void upbtn(){
	if (!(PINC &(1<<Up))){
    121a:	30 99       	sbic	0x06, 0	; 6
    121c:	91 c0       	rjmp	.+290    	; 0x1340 <_Z5upbtnv+0x126>
    121e:	2f e7       	ldi	r18, 0x7F	; 127
    1220:	88 e3       	ldi	r24, 0x38	; 56
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	21 50       	subi	r18, 0x01	; 1
    1226:	80 40       	sbci	r24, 0x00	; 0
    1228:	90 40       	sbci	r25, 0x00	; 0
    122a:	e1 f7       	brne	.-8      	; 0x1224 <_Z5upbtnv+0xa>
    122c:	00 c0       	rjmp	.+0      	; 0x122e <_Z5upbtnv+0x14>
    122e:	00 00       	nop
		_delay_ms(50);
		if ((set == 1) & (currentscreenset1==0)){
    1230:	40 91 c3 07 	lds	r20, 0x07C3	; 0x8007c3 <set>
    1234:	50 91 c4 07 	lds	r21, 0x07C4	; 0x8007c4 <set+0x1>
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	41 30       	cpi	r20, 0x01	; 1
    123c:	51 05       	cpc	r21, r1
    123e:	09 f0       	breq	.+2      	; 0x1242 <_Z5upbtnv+0x28>
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	20 91 c1 07 	lds	r18, 0x07C1	; 0x8007c1 <currentscreenset1>
    1246:	30 91 c2 07 	lds	r19, 0x07C2	; 0x8007c2 <currentscreenset1+0x1>
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	21 15       	cp	r18, r1
    124e:	31 05       	cpc	r19, r1
    1250:	09 f0       	breq	.+2      	; 0x1254 <_Z5upbtnv+0x3a>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	99 23       	and	r25, r25
    1256:	59 f0       	breq	.+22     	; 0x126e <_Z5upbtnv+0x54>
    1258:	88 23       	and	r24, r24
    125a:	49 f0       	breq	.+18     	; 0x126e <_Z5upbtnv+0x54>
			currentscreenset1=numofscreens1-1;
    125c:	83 e0       	ldi	r24, 0x03	; 3
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <currentscreenset1+0x1>
    1264:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <currentscreenset1>
			display();
    1268:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    126c:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 0)){
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	21 15       	cp	r18, r1
    1272:	31 05       	cpc	r19, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <_Z5upbtnv+0x5e>
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	66 23       	and	r22, r22
    127a:	59 f0       	breq	.+22     	; 0x1292 <_Z5upbtnv+0x78>
    127c:	99 23       	and	r25, r25
    127e:	49 f0       	breq	.+18     	; 0x1292 <_Z5upbtnv+0x78>
			currentscreenset1 -= 1;
    1280:	21 50       	subi	r18, 0x01	; 1
    1282:	31 09       	sbc	r19, r1
    1284:	30 93 c2 07 	sts	0x07C2, r19	; 0x8007c2 <currentscreenset1+0x1>
    1288:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <currentscreenset1>
			display();
    128c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    1290:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==0) & (currentscreenset21 == 0)){
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	42 30       	cpi	r20, 0x02	; 2
    1296:	51 05       	cpc	r21, r1
    1298:	09 f0       	breq	.+2      	; 0x129c <_Z5upbtnv+0x82>
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	89 23       	and	r24, r25
    129e:	40 91 bf 07 	lds	r20, 0x07BF	; 0x8007bf <currentscreenset21>
    12a2:	50 91 c0 07 	lds	r21, 0x07C0	; 0x8007c0 <currentscreenset21+0x1>
    12a6:	61 e0       	ldi	r22, 0x01	; 1
    12a8:	41 15       	cp	r20, r1
    12aa:	51 05       	cpc	r21, r1
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <_Z5upbtnv+0x96>
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	88 23       	and	r24, r24
    12b2:	49 f0       	breq	.+18     	; 0x12c6 <_Z5upbtnv+0xac>
    12b4:	66 23       	and	r22, r22
    12b6:	39 f0       	breq	.+14     	; 0x12c6 <_Z5upbtnv+0xac>
			currentscreenset21=numofscreens21-1;
    12b8:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <currentscreenset21+0x1>
    12bc:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <currentscreenset21>
			display();
    12c0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    12c4:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==0) & (currentscreenset21 != 0)){
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	41 15       	cp	r20, r1
    12ca:	51 05       	cpc	r21, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <_Z5upbtnv+0xb6>
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	88 23       	and	r24, r24
    12d2:	59 f0       	breq	.+22     	; 0x12ea <_Z5upbtnv+0xd0>
    12d4:	66 23       	and	r22, r22
    12d6:	49 f0       	breq	.+18     	; 0x12ea <_Z5upbtnv+0xd0>
			currentscreenset21 -= 1;
    12d8:	41 50       	subi	r20, 0x01	; 1
    12da:	51 09       	sbc	r21, r1
    12dc:	50 93 c0 07 	sts	0x07C0, r21	; 0x8007c0 <currentscreenset21+0x1>
    12e0:	40 93 bf 07 	sts	0x07BF, r20	; 0x8007bf <currentscreenset21>
			display();
    12e4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    12e8:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==2) & (currentscreenset23 == 0)){
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <_Z5upbtnv+0xda>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	98 23       	and	r25, r24
    12f6:	20 91 bd 07 	lds	r18, 0x07BD	; 0x8007bd <currentscreenset23>
    12fa:	30 91 be 07 	lds	r19, 0x07BE	; 0x8007be <currentscreenset23+0x1>
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	21 15       	cp	r18, r1
    1302:	31 05       	cpc	r19, r1
    1304:	09 f0       	breq	.+2      	; 0x1308 <_Z5upbtnv+0xee>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	99 23       	and	r25, r25
    130a:	49 f0       	breq	.+18     	; 0x131e <_Z5upbtnv+0x104>
    130c:	88 23       	and	r24, r24
    130e:	39 f0       	breq	.+14     	; 0x131e <_Z5upbtnv+0x104>
			currentscreenset23=numofscreens21-1;
    1310:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <currentscreenset23+0x1>
    1314:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <currentscreenset23>
			display();
    1318:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    131c:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==2) & (currentscreenset23 != 0)){
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	21 15       	cp	r18, r1
    1322:	31 05       	cpc	r19, r1
    1324:	09 f4       	brne	.+2      	; 0x1328 <_Z5upbtnv+0x10e>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	99 23       	and	r25, r25
    132a:	51 f0       	breq	.+20     	; 0x1340 <_Z5upbtnv+0x126>
    132c:	88 23       	and	r24, r24
    132e:	41 f0       	breq	.+16     	; 0x1340 <_Z5upbtnv+0x126>
			currentscreenset23 -= 1;
    1330:	21 50       	subi	r18, 0x01	; 1
    1332:	31 09       	sbc	r19, r1
    1334:	30 93 be 07 	sts	0x07BE, r19	; 0x8007be <currentscreenset23+0x1>
    1338:	20 93 bd 07 	sts	0x07BD, r18	; 0x8007bd <currentscreenset23>
			display();
    133c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    1340:	08 95       	ret

00001342 <_Z6dwnbtnv>:
		}
	}
}

void dwnbtn(){
	if (!(PINC &(1<<Down))){
    1342:	31 99       	sbic	0x06, 1	; 6
    1344:	96 c0       	rjmp	.+300    	; 0x1472 <_Z6dwnbtnv+0x130>
    1346:	2f e7       	ldi	r18, 0x7F	; 127
    1348:	88 e3       	ldi	r24, 0x38	; 56
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	21 50       	subi	r18, 0x01	; 1
    134e:	80 40       	sbci	r24, 0x00	; 0
    1350:	90 40       	sbci	r25, 0x00	; 0
    1352:	e1 f7       	brne	.-8      	; 0x134c <_Z6dwnbtnv+0xa>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <_Z6dwnbtnv+0x14>
    1356:	00 00       	nop
		_delay_ms(50);
		if ((set == 1) & (currentscreenset1==3)){
    1358:	40 91 c3 07 	lds	r20, 0x07C3	; 0x8007c3 <set>
    135c:	50 91 c4 07 	lds	r21, 0x07C4	; 0x8007c4 <set+0x1>
    1360:	21 e0       	ldi	r18, 0x01	; 1
    1362:	41 30       	cpi	r20, 0x01	; 1
    1364:	51 05       	cpc	r21, r1
    1366:	09 f0       	breq	.+2      	; 0x136a <_Z6dwnbtnv+0x28>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <currentscreenset1>
    136e:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <currentscreenset1+0x1>
    1372:	31 e0       	ldi	r19, 0x01	; 1
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	09 f0       	breq	.+2      	; 0x137c <_Z6dwnbtnv+0x3a>
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	33 23       	and	r19, r19
    137e:	49 f0       	breq	.+18     	; 0x1392 <_Z6dwnbtnv+0x50>
    1380:	22 23       	and	r18, r18
    1382:	39 f0       	breq	.+14     	; 0x1392 <_Z6dwnbtnv+0x50>
			currentscreenset1=0;
    1384:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <currentscreenset1+0x1>
    1388:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <currentscreenset1>
			display();
    138c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    1390:	08 95       	ret
		}
		else if ((set == 1) & (currentscreenset1 != 3)){
    1392:	31 e0       	ldi	r19, 0x01	; 1
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <_Z6dwnbtnv+0x5a>
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	33 23       	and	r19, r19
    139e:	a1 f0       	breq	.+40     	; 0x13c8 <_Z6dwnbtnv+0x86>
    13a0:	22 23       	and	r18, r18
    13a2:	91 f0       	breq	.+36     	; 0x13c8 <_Z6dwnbtnv+0x86>
    13a4:	8f e1       	ldi	r24, 0x1F	; 31
    13a6:	9e e4       	ldi	r25, 0x4E	; 78
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <_Z6dwnbtnv+0x66>
    13ac:	00 c0       	rjmp	.+0      	; 0x13ae <_Z6dwnbtnv+0x6c>
    13ae:	00 00       	nop
			_delay_ms(10);
			currentscreenset1 += 1;
    13b0:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <currentscreenset1>
    13b4:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <currentscreenset1+0x1>
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <currentscreenset1+0x1>
    13be:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <currentscreenset1>
			display();
    13c2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    13c6:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==0) & (currentscreenset21 == 4)){
    13c8:	31 e0       	ldi	r19, 0x01	; 1
    13ca:	42 30       	cpi	r20, 0x02	; 2
    13cc:	51 05       	cpc	r21, r1
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <_Z6dwnbtnv+0x90>
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	21 e0       	ldi	r18, 0x01	; 1
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	09 f0       	breq	.+2      	; 0x13da <_Z6dwnbtnv+0x98>
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	23 23       	and	r18, r19
    13dc:	60 91 bf 07 	lds	r22, 0x07BF	; 0x8007bf <currentscreenset21>
    13e0:	70 91 c0 07 	lds	r23, 0x07C0	; 0x8007c0 <currentscreenset21+0x1>
    13e4:	41 e0       	ldi	r20, 0x01	; 1
    13e6:	64 30       	cpi	r22, 0x04	; 4
    13e8:	71 05       	cpc	r23, r1
    13ea:	09 f0       	breq	.+2      	; 0x13ee <_Z6dwnbtnv+0xac>
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	22 23       	and	r18, r18
    13f0:	49 f0       	breq	.+18     	; 0x1404 <_Z6dwnbtnv+0xc2>
    13f2:	44 23       	and	r20, r20
    13f4:	39 f0       	breq	.+14     	; 0x1404 <_Z6dwnbtnv+0xc2>
			currentscreenset21=0;
    13f6:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <currentscreenset21+0x1>
    13fa:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <currentscreenset21>
			display();
    13fe:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    1402:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==0) & (currentscreenset23 != 4)){
    1404:	40 91 bd 07 	lds	r20, 0x07BD	; 0x8007bd <currentscreenset23>
    1408:	50 91 be 07 	lds	r21, 0x07BE	; 0x8007be <currentscreenset23+0x1>
    140c:	e1 e0       	ldi	r30, 0x01	; 1
    140e:	44 30       	cpi	r20, 0x04	; 4
    1410:	51 05       	cpc	r21, r1
    1412:	09 f4       	brne	.+2      	; 0x1416 <_Z6dwnbtnv+0xd4>
    1414:	e0 e0       	ldi	r30, 0x00	; 0
    1416:	22 23       	and	r18, r18
    1418:	59 f0       	breq	.+22     	; 0x1430 <_Z6dwnbtnv+0xee>
    141a:	ee 23       	and	r30, r30
    141c:	49 f0       	breq	.+18     	; 0x1430 <_Z6dwnbtnv+0xee>
			currentscreenset21 += 1;
    141e:	6f 5f       	subi	r22, 0xFF	; 255
    1420:	7f 4f       	sbci	r23, 0xFF	; 255
    1422:	70 93 c0 07 	sts	0x07C0, r23	; 0x8007c0 <currentscreenset21+0x1>
    1426:	60 93 bf 07 	sts	0x07BF, r22	; 0x8007bf <currentscreenset21>
			display();
    142a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    142e:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==2) & (currentscreenset23 == 4)){
    1430:	21 e0       	ldi	r18, 0x01	; 1
    1432:	02 97       	sbiw	r24, 0x02	; 2
    1434:	09 f0       	breq	.+2      	; 0x1438 <_Z6dwnbtnv+0xf6>
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	32 23       	and	r19, r18
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	44 30       	cpi	r20, 0x04	; 4
    143e:	51 05       	cpc	r21, r1
    1440:	09 f0       	breq	.+2      	; 0x1444 <_Z6dwnbtnv+0x102>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	33 23       	and	r19, r19
    1446:	49 f0       	breq	.+18     	; 0x145a <_Z6dwnbtnv+0x118>
    1448:	88 23       	and	r24, r24
    144a:	39 f0       	breq	.+14     	; 0x145a <_Z6dwnbtnv+0x118>
			currentscreenset23 = 0;
    144c:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <currentscreenset23+0x1>
    1450:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <currentscreenset23>
			display();
    1454:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    1458:	08 95       	ret
		}
		else if ((set == 2) & (currentscreenset1==2) & (currentscreenset23 != 4)){
    145a:	ee 23       	and	r30, r30
    145c:	51 f0       	breq	.+20     	; 0x1472 <_Z6dwnbtnv+0x130>
    145e:	33 23       	and	r19, r19
    1460:	41 f0       	breq	.+16     	; 0x1472 <_Z6dwnbtnv+0x130>
			currentscreenset23 += 1;
    1462:	4f 5f       	subi	r20, 0xFF	; 255
    1464:	5f 4f       	sbci	r21, 0xFF	; 255
    1466:	50 93 be 07 	sts	0x07BE, r21	; 0x8007be <currentscreenset23+0x1>
    146a:	40 93 bd 07 	sts	0x07BD, r20	; 0x8007bd <currentscreenset23>
			display();
    146e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    1472:	08 95       	ret

00001474 <_Z5okbtnv>:
	}
}

void okbtn(){
	
	if (!(PINC & (1<<Ok))){	
    1474:	32 99       	sbic	0x06, 2	; 6
    1476:	1e c0       	rjmp	.+60     	; 0x14b4 <_Z5okbtnv+0x40>
    1478:	2f ef       	ldi	r18, 0xFF	; 255
    147a:	81 ee       	ldi	r24, 0xE1	; 225
    147c:	94 e0       	ldi	r25, 0x04	; 4
    147e:	21 50       	subi	r18, 0x01	; 1
    1480:	80 40       	sbci	r24, 0x00	; 0
    1482:	90 40       	sbci	r25, 0x00	; 0
    1484:	e1 f7       	brne	.-8      	; 0x147e <_Z5okbtnv+0xa>
    1486:	00 c0       	rjmp	.+0      	; 0x1488 <_Z5okbtnv+0x14>
    1488:	00 00       	nop
		_delay_ms(200);
		if (set==3){
    148a:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <set>
    148e:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <set+0x1>
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	91 05       	cpc	r25, r1
    1496:	39 f4       	brne	.+14     	; 0x14a6 <_Z5okbtnv+0x32>
			set = 0;
    1498:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <set+0x1>
    149c:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <set>
		display();}
    14a0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    14a4:	08 95       	ret
		else {
			set+= 1;
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <set+0x1>
    14ac:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <set>
		display();}
    14b0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    14b4:	08 95       	ret

000014b6 <_Z7backbtnv>:
	}
}

void backbtn(){
	
	if (!(PINC &(1<<Back))){
    14b6:	33 99       	sbic	0x06, 3	; 6
    14b8:	1d c0       	rjmp	.+58     	; 0x14f4 <_Z7backbtnv+0x3e>
    14ba:	2f e7       	ldi	r18, 0x7F	; 127
    14bc:	88 e3       	ldi	r24, 0x38	; 56
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	21 50       	subi	r18, 0x01	; 1
    14c2:	80 40       	sbci	r24, 0x00	; 0
    14c4:	90 40       	sbci	r25, 0x00	; 0
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <_Z7backbtnv+0xa>
    14c8:	00 c0       	rjmp	.+0      	; 0x14ca <_Z7backbtnv+0x14>
    14ca:	00 00       	nop
		_delay_ms(50);
		if (set == 0){
    14cc:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <set>
    14d0:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <set+0x1>
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	39 f4       	brne	.+14     	; 0x14e6 <_Z7backbtnv+0x30>
			set = 0;
    14d8:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <set+0x1>
    14dc:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <set>
			display();
    14e0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    14e4:	08 95       	ret
		}
		else {
			set-= 1;
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <set+0x1>
    14ec:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <set>
			display();
    14f0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z7displayv>
    14f4:	08 95       	ret

000014f6 <main>:
int alarmCount = 0;
bool stop = false;	


int main(void)
{
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	27 97       	sbiw	r28, 0x07	; 7
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
	DDRD = (1<<PORTD7);
    150a:	80 e8       	ldi	r24, 0x80	; 128
    150c:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (1<<PORTC0) | (1<<PORTC1) | (1<<PORTC2) | (1<<PORTC3);
    150e:	88 b1       	in	r24, 0x08	; 8
    1510:	8f 60       	ori	r24, 0x0F	; 15
    1512:	88 b9       	out	0x08, r24	; 8
	ds1307::rtc_t rtc;

	//Setting time to the RTC
	rtc.seconds =  0x00; 
    1514:	19 82       	std	Y+1, r1	; 0x01
	rtc.minute =  0x00;
    1516:	1a 82       	std	Y+2, r1	; 0x02
	rtc.hour = 0x10;	//Initial Time set to 10:00:00 
    1518:	80 e1       	ldi	r24, 0x10	; 16
    151a:	8b 83       	std	Y+3, r24	; 0x03
	rtc.weekDay = 0x02;
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	8c 83       	std	Y+4, r24	; 0x04
	rtc.date = 0x06;
    1520:	86 e0       	ldi	r24, 0x06	; 6
    1522:	8d 83       	std	Y+5, r24	; 0x05
	rtc.month = 0x08;
    1524:	88 e0       	ldi	r24, 0x08	; 8
    1526:	8e 83       	std	Y+6, r24	; 0x06
	rtc.year = 0x21; //10th Aug 2021 Tue
    1528:	81 e2       	ldi	r24, 0x21	; 33
    152a:	8f 83       	std	Y+7, r24	; 0x07
	DS1307.set_time(&rtc);
    152c:	be 01       	movw	r22, r28
    152e:	6f 5f       	subi	r22, 0xFF	; 255
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	8a ed       	ldi	r24, 0xDA	; 218
    1534:	97 e0       	ldi	r25, 0x07	; 7
    1536:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN6ds13078set_timeEPNS_5rtc_tE>

	lcd.LCD_Initializer();	//initialize the display to PORTB
    153a:	84 ed       	ldi	r24, 0xD4	; 212
    153c:	97 e0       	ldi	r25, 0x07	; 7
    153e:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN11LCD_Display15LCD_InitializerEv>

	while (1)
	{
		
		if (set==0){alarmclock.displayTime(); checkAlarm();}
    1542:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <set>
    1546:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <set+0x1>
    154a:	89 2b       	or	r24, r25
    154c:	31 f4       	brne	.+12     	; 0x155a <main+0x64>
    154e:	81 ed       	ldi	r24, 0xD1	; 209
    1550:	97 e0       	ldi	r25, 0x07	; 7
    1552:	0e 94 7b 00 	call	0xf6	; 0xf6 <_ZN10AlarmClock11displayTimeEv>
    1556:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_Z10checkAlarmv>
		okbtn();
    155a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <_Z5okbtnv>
		upbtn();
    155e:	0e 94 0d 09 	call	0x121a	; 0x121a <_Z5upbtnv>
		dwnbtn();
    1562:	0e 94 a1 09 	call	0x1342	; 0x1342 <_Z6dwnbtnv>
		backbtn();
    1566:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_Z7backbtnv>
	rtc.year = 0x21; //10th Aug 2021 Tue
	DS1307.set_time(&rtc);

	lcd.LCD_Initializer();	//initialize the display to PORTB

	while (1)
    156a:	eb cf       	rjmp	.-42     	; 0x1542 <main+0x4c>

0000156c <_ZN15music_notations11playthenoteEff>:
int sizeofstarwars = sizeof(StarWars)/sizeof(StarWars[0]);
int sizeofcoffindance = sizeof(CoffinDance)/sizeof(CoffinDance[0]);
int sizeoftakeonme = sizeof(TakeOnMe)/sizeof(TakeOnMe[0]);

void music_notations::playthenote(float frequency, float duration)
{
    156c:	4f 92       	push	r4
    156e:	5f 92       	push	r5
    1570:	6f 92       	push	r6
    1572:	7f 92       	push	r7
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	00 d0       	rcall	.+0      	; 0x158e <_ZN15music_notations11playthenoteEff+0x22>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <_ZN15music_notations11playthenoteEff+0x24>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	6a 01       	movw	r12, r20
    1596:	7b 01       	movw	r14, r22
    1598:	48 01       	movw	r8, r16
    159a:	59 01       	movw	r10, r18
	float period;
	
	// "period" is the wavelength calculated from frequency using the formula "period" = 1 / f.
	// We output 5 V for a length of time determined by half period (period/2), and then output 0 V, for the same length of time.
	
	if (frequency != 0){
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	a9 01       	movw	r20, r18
    15a2:	c7 01       	movw	r24, r14
    15a4:	b6 01       	movw	r22, r12
    15a6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__cmpsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <_ZN15music_notations11playthenoteEff+0x44>
    15ae:	b0 c0       	rjmp	.+352    	; 0x1710 <_ZN15music_notations11playthenoteEff+0x1a4>
		period=(1/frequency)*1000;  // period in mile seconds
    15b0:	a7 01       	movw	r20, r14
    15b2:	96 01       	movw	r18, r12
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	80 e8       	ldi	r24, 0x80	; 128
    15ba:	9f e3       	ldi	r25, 0x3F	; 63
    15bc:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__divsf3>
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	4a e7       	ldi	r20, 0x7A	; 122
    15c6:	54 e4       	ldi	r21, 0x44	; 68
    15c8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3>
    15cc:	6b 01       	movw	r12, r22
    15ce:	7c 01       	movw	r14, r24
		cycles=duration/period;
    15d0:	9b 01       	movw	r18, r22
    15d2:	ac 01       	movw	r20, r24
    15d4:	c5 01       	movw	r24, r10
    15d6:	b4 01       	movw	r22, r8
    15d8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__divsf3>
    15dc:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__fixsfsi>
    15e0:	2b 01       	movw	r4, r22
    15e2:	3c 01       	movw	r6, r24
		half_period = period/2;
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	c7 01       	movw	r24, r14
    15ee:	b6 01       	movw	r22, r12
    15f0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3>
    15f4:	69 83       	std	Y+1, r22	; 0x01
    15f6:	7a 83       	std	Y+2, r23	; 0x02
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	9c 83       	std	Y+4, r25	; 0x04
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);
    15fc:	8a b1       	in	r24, 0x0a	; 10
    15fe:	80 68       	ori	r24, 0x80	; 128
    1600:	8a b9       	out	0x0a, r24	; 10

		for (i=0;i<cycles;i++)
    1602:	81 2c       	mov	r8, r1
    1604:	91 2c       	mov	r9, r1
    1606:	54 01       	movw	r10, r8
    1608:	84 14       	cp	r8, r4
    160a:	95 04       	cpc	r9, r5
    160c:	a6 04       	cpc	r10, r6
    160e:	b7 04       	cpc	r11, r7
    1610:	0c f0       	brlt	.+2      	; 0x1614 <_ZN15music_notations11playthenoteEff+0xa8>
    1612:	b8 c0       	rjmp	.+368    	; 0x1784 <_ZN15music_notations11playthenoteEff+0x218>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	4a ef       	ldi	r20, 0xFA	; 250
    161a:	54 e4       	ldi	r21, 0x44	; 68
    161c:	69 81       	ldd	r22, Y+1	; 0x01
    161e:	7a 81       	ldd	r23, Y+2	; 0x02
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3>
    1628:	6b 01       	movw	r12, r22
    162a:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e8       	ldi	r20, 0x80	; 128
    1632:	5f e3       	ldi	r21, 0x3F	; 63
    1634:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__cmpsf2>
    1638:	88 23       	and	r24, r24
    163a:	2c f1       	brlt	.+74     	; 0x1686 <_ZN15music_notations11playthenoteEff+0x11a>
		__ticks = 1;
	else if (__tmp > 65535)
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	3f ef       	ldi	r19, 0xFF	; 255
    1640:	4f e7       	ldi	r20, 0x7F	; 127
    1642:	57 e4       	ldi	r21, 0x47	; 71
    1644:	c7 01       	movw	r24, r14
    1646:	b6 01       	movw	r22, r12
    1648:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__gesf2>
    164c:	18 16       	cp	r1, r24
    164e:	b4 f4       	brge	.+44     	; 0x167c <_ZN15music_notations11playthenoteEff+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e2       	ldi	r20, 0x20	; 32
    1656:	51 e4       	ldi	r21, 0x41	; 65
    1658:	69 81       	ldd	r22, Y+1	; 0x01
    165a:	7a 81       	ldd	r23, Y+2	; 0x02
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3>
    1664:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
		while(__ticks)
    1668:	61 15       	cp	r22, r1
    166a:	71 05       	cpc	r23, r1
    166c:	89 f0       	breq	.+34     	; 0x1690 <_ZN15music_notations11playthenoteEff+0x124>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    166e:	88 ec       	ldi	r24, 0xC8	; 200
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <_ZN15music_notations11playthenoteEff+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1676:	61 50       	subi	r22, 0x01	; 1
    1678:	71 09       	sbc	r23, r1
    167a:	f6 cf       	rjmp	.-20     	; 0x1668 <_ZN15music_notations11playthenoteEff+0xfc>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167c:	c7 01       	movw	r24, r14
    167e:	b6 01       	movw	r22, r12
    1680:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
    1684:	02 c0       	rjmp	.+4      	; 0x168a <_ZN15music_notations11playthenoteEff+0x11e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	cb 01       	movw	r24, r22
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <_ZN15music_notations11playthenoteEff+0x120>
		{
			_delay_ms(half_period);
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
    1690:	8b b1       	in	r24, 0x0b	; 11
    1692:	80 68       	ori	r24, 0x80	; 128
    1694:	8b b9       	out	0x0b, r24	; 11
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	c7 01       	movw	r24, r14
    16a0:	b6 01       	movw	r22, r12
    16a2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__cmpsf2>
    16a6:	88 23       	and	r24, r24
    16a8:	2c f1       	brlt	.+74     	; 0x16f4 <_ZN15music_notations11playthenoteEff+0x188>
		__ticks = 1;
	else if (__tmp > 65535)
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f e7       	ldi	r20, 0x7F	; 127
    16b0:	57 e4       	ldi	r21, 0x47	; 71
    16b2:	c7 01       	movw	r24, r14
    16b4:	b6 01       	movw	r22, r12
    16b6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__gesf2>
    16ba:	18 16       	cp	r1, r24
    16bc:	b4 f4       	brge	.+44     	; 0x16ea <_ZN15music_notations11playthenoteEff+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e2       	ldi	r20, 0x20	; 32
    16c4:	51 e4       	ldi	r21, 0x41	; 65
    16c6:	69 81       	ldd	r22, Y+1	; 0x01
    16c8:	7a 81       	ldd	r23, Y+2	; 0x02
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3>
    16d2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
		while(__ticks)
    16d6:	61 15       	cp	r22, r1
    16d8:	71 05       	cpc	r23, r1
    16da:	89 f0       	breq	.+34     	; 0x16fe <_ZN15music_notations11playthenoteEff+0x192>
    16dc:	88 ec       	ldi	r24, 0xC8	; 200
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <_ZN15music_notations11playthenoteEff+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e4:	61 50       	subi	r22, 0x01	; 1
    16e6:	71 09       	sbc	r23, r1
    16e8:	f6 cf       	rjmp	.-20     	; 0x16d6 <_ZN15music_notations11playthenoteEff+0x16a>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ea:	c7 01       	movw	r24, r14
    16ec:	b6 01       	movw	r22, r12
    16ee:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <_ZN15music_notations11playthenoteEff+0x18c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	cb 01       	movw	r24, r22
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <_ZN15music_notations11playthenoteEff+0x18e>
			_delay_ms(half_period);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
    16fe:	8b b1       	in	r24, 0x0b	; 11
    1700:	8f 77       	andi	r24, 0x7F	; 127
    1702:	8b b9       	out	0x0b, r24	; 11
		cycles=duration/period;
		half_period = period/2;
		
		SPEAKER_DDR |= (1 << SPEAKER_PIN);

		for (i=0;i<cycles;i++)
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	88 1a       	sub	r8, r24
    1708:	98 0a       	sbc	r9, r24
    170a:	a8 0a       	sbc	r10, r24
    170c:	b8 0a       	sbc	r11, r24
    170e:	7c cf       	rjmp	.-264    	; 0x1608 <_ZN15music_notations11playthenoteEff+0x9c>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a ef       	ldi	r20, 0xFA	; 250
    1716:	54 e4       	ldi	r21, 0x44	; 68
    1718:	c5 01       	movw	r24, r10
    171a:	b4 01       	movw	r22, r8
    171c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3>
    1720:	6b 01       	movw	r12, r22
    1722:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e8       	ldi	r20, 0x80	; 128
    172a:	5f e3       	ldi	r21, 0x3F	; 63
    172c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__cmpsf2>
    1730:	88 23       	and	r24, r24
    1732:	1c f1       	brlt	.+70     	; 0x177a <_ZN15music_notations11playthenoteEff+0x20e>
		__ticks = 1;
	else if (__tmp > 65535)
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	c7 01       	movw	r24, r14
    173e:	b6 01       	movw	r22, r12
    1740:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__gesf2>
    1744:	18 16       	cp	r1, r24
    1746:	a4 f4       	brge	.+40     	; 0x1770 <_ZN15music_notations11playthenoteEff+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	c5 01       	movw	r24, r10
    1752:	b4 01       	movw	r22, r8
    1754:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3>
    1758:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
		while(__ticks)
    175c:	61 15       	cp	r22, r1
    175e:	71 05       	cpc	r23, r1
    1760:	89 f0       	breq	.+34     	; 0x1784 <_ZN15music_notations11playthenoteEff+0x218>
    1762:	88 ec       	ldi	r24, 0xC8	; 200
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <_ZN15music_notations11playthenoteEff+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176a:	61 50       	subi	r22, 0x01	; 1
    176c:	71 09       	sbc	r23, r1
    176e:	f6 cf       	rjmp	.-20     	; 0x175c <_ZN15music_notations11playthenoteEff+0x1f0>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1770:	c7 01       	movw	r24, r14
    1772:	b6 01       	movw	r22, r12
    1774:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
    1778:	02 c0       	rjmp	.+4      	; 0x177e <_ZN15music_notations11playthenoteEff+0x212>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	cb 01       	movw	r24, r22
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <_ZN15music_notations11playthenoteEff+0x214>
	else {
		_delay_ms(duration);   // rest
	}

	return;
}
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	9f 90       	pop	r9
    17a2:	8f 90       	pop	r8
    17a4:	7f 90       	pop	r7
    17a6:	6f 90       	pop	r6
    17a8:	5f 90       	pop	r5
    17aa:	4f 90       	pop	r4
    17ac:	08 95       	ret

000017ae <_ZN15music_notations13playthemelodyEPiS0_i>:
void music_notations::playthemelody(int Melody[], int MelodyDuration[], int size)
{
    17ae:	2f 92       	push	r2
    17b0:	3f 92       	push	r3
    17b2:	4f 92       	push	r4
    17b4:	5f 92       	push	r5
    17b6:	6f 92       	push	r6
    17b8:	7f 92       	push	r7
    17ba:	8f 92       	push	r8
    17bc:	9f 92       	push	r9
    17be:	af 92       	push	r10
    17c0:	bf 92       	push	r11
    17c2:	cf 92       	push	r12
    17c4:	df 92       	push	r13
    17c6:	ef 92       	push	r14
    17c8:	ff 92       	push	r15
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	29 97       	sbiw	r28, 0x09	; 9
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	9f 83       	std	Y+7, r25	; 0x07
    17e4:	8e 83       	std	Y+6, r24	; 0x06
    17e6:	2b 01       	movw	r4, r22
    17e8:	1a 01       	movw	r2, r20
    17ea:	39 01       	movw	r6, r18
	// melody will play until the stop button is pressed.
	//int still_playing = 1;
	//while(still_playing){
	for (int x=0; x<size; x++){
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	99 87       	std	Y+9, r25	; 0x09
    17f2:	88 87       	std	Y+8, r24	; 0x08
    17f4:	e8 85       	ldd	r30, Y+8	; 0x08
    17f6:	f9 85       	ldd	r31, Y+9	; 0x09
    17f8:	e6 15       	cp	r30, r6
    17fa:	f7 05       	cpc	r31, r7
    17fc:	0c f0       	brlt	.+2      	; 0x1800 <_ZN15music_notations13playthemelodyEPiS0_i+0x52>
    17fe:	d5 c0       	rjmp	.+426    	; 0x19aa <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
		playthenote(Melody[x],MelodyDuration[x]);
    1800:	7f 01       	movw	r14, r30
    1802:	ee 0c       	add	r14, r14
    1804:	ff 1c       	adc	r15, r15
    1806:	61 01       	movw	r12, r2
    1808:	ce 0c       	add	r12, r14
    180a:	df 1c       	adc	r13, r15
    180c:	f6 01       	movw	r30, r12
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	07 2e       	mov	r0, r23
    1814:	00 0c       	add	r0, r0
    1816:	88 0b       	sbc	r24, r24
    1818:	99 0b       	sbc	r25, r25
    181a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__floatsisf>
    181e:	4b 01       	movw	r8, r22
    1820:	5c 01       	movw	r10, r24
    1822:	f2 01       	movw	r30, r4
    1824:	ee 0d       	add	r30, r14
    1826:	ff 1d       	adc	r31, r15
    1828:	60 81       	ld	r22, Z
    182a:	71 81       	ldd	r23, Z+1	; 0x01
    182c:	07 2e       	mov	r0, r23
    182e:	00 0c       	add	r0, r0
    1830:	88 0b       	sbc	r24, r24
    1832:	99 0b       	sbc	r25, r25
    1834:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__floatsisf>
    1838:	ab 01       	movw	r20, r22
    183a:	bc 01       	movw	r22, r24
    183c:	95 01       	movw	r18, r10
    183e:	84 01       	movw	r16, r8
    1840:	8e 81       	ldd	r24, Y+6	; 0x06
    1842:	9f 81       	ldd	r25, Y+7	; 0x07
    1844:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN15music_notations11playthenoteEff>
		_delay_us(MelodyDuration[x]);
    1848:	f6 01       	movw	r30, r12
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	07 2e       	mov	r0, r23
    1850:	00 0c       	add	r0, r0
    1852:	88 0b       	sbc	r24, r24
    1854:	99 0b       	sbc	r25, r25
    1856:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__floatsisf>
    185a:	6b 01       	movw	r12, r22
    185c:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    185e:	2b ea       	ldi	r18, 0xAB	; 171
    1860:	3a ea       	ldi	r19, 0xAA	; 170
    1862:	4a e2       	ldi	r20, 0x2A	; 42
    1864:	50 e4       	ldi	r21, 0x40	; 64
    1866:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3>
    186a:	4b 01       	movw	r8, r22
    186c:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    186e:	a7 01       	movw	r20, r14
    1870:	96 01       	movw	r18, r12
    1872:	c7 01       	movw	r24, r14
    1874:	b6 01       	movw	r22, r12
    1876:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__addsf3>
    187a:	69 83       	std	Y+1, r22	; 0x01
    187c:	7a 83       	std	Y+2, r23	; 0x02
    187e:	8b 83       	std	Y+3, r24	; 0x03
    1880:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	5f e3       	ldi	r21, 0x3F	; 63
    188a:	c5 01       	movw	r24, r10
    188c:	b4 01       	movw	r22, r8
    188e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__cmpsf2>
    1892:	88 23       	and	r24, r24
    1894:	0c f4       	brge	.+2      	; 0x1898 <_ZN15music_notations13playthemelodyEPiS0_i+0xea>
    1896:	6a c0       	rjmp	.+212    	; 0x196c <_ZN15music_notations13playthemelodyEPiS0_i+0x1be>
		__ticks = 1;
	else if (__tmp2 > 65535)
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	3f ef       	ldi	r19, 0xFF	; 255
    189c:	4f e7       	ldi	r20, 0x7F	; 127
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	69 81       	ldd	r22, Y+1	; 0x01
    18a2:	7a 81       	ldd	r23, Y+2	; 0x02
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__gesf2>
    18ac:	18 16       	cp	r1, r24
    18ae:	0c f0       	brlt	.+2      	; 0x18b2 <_ZN15music_notations13playthemelodyEPiS0_i+0x104>
    18b0:	43 c0       	rjmp	.+134    	; 0x1938 <_ZN15music_notations13playthemelodyEPiS0_i+0x18a>
	{
		_delay_ms(__us / 1000.0);
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a e7       	ldi	r20, 0x7A	; 122
    18b8:	54 e4       	ldi	r21, 0x44	; 68
    18ba:	c7 01       	movw	r24, r14
    18bc:	b6 01       	movw	r22, r12
    18be:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__divsf3>
    18c2:	4b 01       	movw	r8, r22
    18c4:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a ef       	ldi	r20, 0xFA	; 250
    18cc:	54 e4       	ldi	r21, 0x44	; 68
    18ce:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3>
    18d2:	6b 01       	movw	r12, r22
    18d4:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__cmpsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	1c f1       	brlt	.+70     	; 0x192c <_ZN15music_notations13playthemelodyEPiS0_i+0x17e>
		__ticks = 1;
	else if (__tmp > 65535)
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	c7 01       	movw	r24, r14
    18f0:	b6 01       	movw	r22, r12
    18f2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__gesf2>
    18f6:	18 16       	cp	r1, r24
    18f8:	a4 f4       	brge	.+40     	; 0x1922 <_ZN15music_notations13playthemelodyEPiS0_i+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e2       	ldi	r20, 0x20	; 32
    1900:	51 e4       	ldi	r21, 0x41	; 65
    1902:	c5 01       	movw	r24, r10
    1904:	b4 01       	movw	r22, r8
    1906:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__mulsf3>
    190a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
		while(__ticks)
    190e:	61 15       	cp	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	79 f1       	breq	.+94     	; 0x1972 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
    1914:	88 ec       	ldi	r24, 0xC8	; 200
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <_ZN15music_notations13playthemelodyEPiS0_i+0x16a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	61 50       	subi	r22, 0x01	; 1
    191e:	71 09       	sbc	r23, r1
    1920:	f6 cf       	rjmp	.-20     	; 0x190e <_ZN15music_notations13playthemelodyEPiS0_i+0x160>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1922:	c7 01       	movw	r24, r14
    1924:	b6 01       	movw	r22, r12
    1926:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <_ZN15music_notations13playthemelodyEPiS0_i+0x182>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	cb 01       	movw	r24, r22
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <_ZN15music_notations13playthemelodyEPiS0_i+0x184>
    1936:	1d c0       	rjmp	.+58     	; 0x1972 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	53 e4       	ldi	r21, 0x43	; 67
    1940:	c5 01       	movw	r24, r10
    1942:	b4 01       	movw	r22, r8
    1944:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__gesf2>
    1948:	18 16       	cp	r1, r24
    194a:	54 f4       	brge	.+20     	; 0x1960 <_ZN15music_notations13playthemelodyEPiS0_i+0x1b2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    194c:	69 81       	ldd	r22, Y+1	; 0x01
    194e:	7a 81       	ldd	r23, Y+2	; 0x02
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
    1958:	cb 01       	movw	r24, r22
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <_ZN15music_notations13playthemelodyEPiS0_i+0x1ac>
    195e:	0c c0       	rjmp	.+24     	; 0x1978 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ca>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1960:	c5 01       	movw	r24, r10
    1962:	b4 01       	movw	r22, r8
    1964:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
    1968:	6d 83       	std	Y+5, r22	; 0x05
    196a:	03 c0       	rjmp	.+6      	; 0x1972 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	9d 83       	std	Y+5, r25	; 0x05
    1970:	00 c0       	rjmp	.+0      	; 0x1972 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c4>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	8a 95       	dec	r24
    1976:	f1 f7       	brne	.-4      	; 0x1974 <_ZN15music_notations13playthemelodyEPiS0_i+0x1c6>
		if ((!(PINC &(1<<Ok))) || (!(PINC &(1<<Up))) || (!(PINC &(1<<Down))) || (!(PINC &(1<<Back)))){
    1978:	32 9b       	sbis	0x06, 2	; 6
    197a:	08 c0       	rjmp	.+16     	; 0x198c <_ZN15music_notations13playthemelodyEPiS0_i+0x1de>
    197c:	30 9b       	sbis	0x06, 0	; 6
    197e:	08 c0       	rjmp	.+16     	; 0x1990 <_ZN15music_notations13playthemelodyEPiS0_i+0x1e2>
    1980:	31 9b       	sbis	0x06, 1	; 6
    1982:	08 c0       	rjmp	.+16     	; 0x1994 <_ZN15music_notations13playthemelodyEPiS0_i+0x1e6>
    1984:	33 99       	sbic	0x06, 3	; 6
    1986:	08 c0       	rjmp	.+16     	; 0x1998 <_ZN15music_notations13playthemelodyEPiS0_i+0x1ea>
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	07 c0       	rjmp	.+14     	; 0x199a <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	05 c0       	rjmp	.+10     	; 0x199a <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	03 c0       	rjmp	.+6      	; 0x199a <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	01 c0       	rjmp	.+2      	; 0x199a <_ZN15music_notations13playthemelodyEPiS0_i+0x1ec>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	81 11       	cpse	r24, r1
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <_ZN15music_notations13playthemelodyEPiS0_i+0x1fc>
void music_notations::playthemelody(int Melody[], int MelodyDuration[], int size)
{
	// melody will play until the stop button is pressed.
	//int still_playing = 1;
	//while(still_playing){
	for (int x=0; x<size; x++){
    199e:	88 85       	ldd	r24, Y+8	; 0x08
    19a0:	99 85       	ldd	r25, Y+9	; 0x09
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	99 87       	std	Y+9, r25	; 0x09
    19a6:	88 87       	std	Y+8, r24	; 0x08
    19a8:	25 cf       	rjmp	.-438    	; 0x17f4 <_ZN15music_notations13playthemelodyEPiS0_i+0x46>
		}
		
	}
	
	
}
    19aa:	29 96       	adiw	r28, 0x09	; 9
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	df 90       	pop	r13
    19c4:	cf 90       	pop	r12
    19c6:	bf 90       	pop	r11
    19c8:	af 90       	pop	r10
    19ca:	9f 90       	pop	r9
    19cc:	8f 90       	pop	r8
    19ce:	7f 90       	pop	r7
    19d0:	6f 90       	pop	r6
    19d2:	5f 90       	pop	r5
    19d4:	4f 90       	pop	r4
    19d6:	3f 90       	pop	r3
    19d8:	2f 90       	pop	r2
    19da:	08 95       	ret

000019dc <_ZN15music_notations4toneEi>:
void music_notations::tone(int x){
	if (x==0){
    19dc:	61 15       	cp	r22, r1
    19de:	71 05       	cpc	r23, r1
    19e0:	59 f4       	brne	.+22     	; 0x19f8 <_ZN15music_notations4toneEi+0x1c>
		playthemelody(GOT,GOTDurations,sizeofgot);
    19e2:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <sizeofgot>
    19e6:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <sizeofgot+0x1>
    19ea:	42 e8       	ldi	r20, 0x82	; 130
    19ec:	56 e0       	ldi	r21, 0x06	; 6
    19ee:	66 ea       	ldi	r22, 0xA6	; 166
    19f0:	76 e0       	ldi	r23, 0x06	; 6
    19f2:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN15music_notations13playthemelodyEPiS0_i>
    19f6:	08 95       	ret
	}
	else if (x==1){
    19f8:	61 30       	cpi	r22, 0x01	; 1
    19fa:	71 05       	cpc	r23, r1
    19fc:	59 f4       	brne	.+22     	; 0x1a14 <_ZN15music_notations4toneEi+0x38>
		playthemelody(Pirates,PiratesDurations,sizeofpirates);
    19fe:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <sizeofpirates>
    1a02:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <sizeofpirates+0x1>
    1a06:	42 e5       	ldi	r20, 0x52	; 82
    1a08:	55 e0       	ldi	r21, 0x05	; 5
    1a0a:	6a ee       	ldi	r22, 0xEA	; 234
    1a0c:	75 e0       	ldi	r23, 0x05	; 5
    1a0e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN15music_notations13playthemelodyEPiS0_i>
    1a12:	08 95       	ret
	}
	else if (x==2){
    1a14:	62 30       	cpi	r22, 0x02	; 2
    1a16:	71 05       	cpc	r23, r1
    1a18:	59 f4       	brne	.+22     	; 0x1a30 <_ZN15music_notations4toneEi+0x54>
		playthemelody(StarWars,StarWarsDurations,sizeofstarwars);
    1a1a:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <sizeofstarwars>
    1a1e:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <sizeofstarwars+0x1>
    1a22:	4a eb       	ldi	r20, 0xBA	; 186
    1a24:	54 e0       	ldi	r21, 0x04	; 4
    1a26:	66 e0       	ldi	r22, 0x06	; 6
    1a28:	75 e0       	ldi	r23, 0x05	; 5
    1a2a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN15music_notations13playthemelodyEPiS0_i>
    1a2e:	08 95       	ret
	}
	else if (x==3){
    1a30:	63 30       	cpi	r22, 0x03	; 3
    1a32:	71 05       	cpc	r23, r1
    1a34:	59 f4       	brne	.+22     	; 0x1a4c <_ZN15music_notations4toneEi+0x70>
		playthemelody(CoffinDance,CoffinDanceDurations,sizeofcoffindance);
    1a36:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <sizeofcoffindance>
    1a3a:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <sizeofcoffindance+0x1>
    1a3e:	4a e2       	ldi	r20, 0x2A	; 42
    1a40:	53 e0       	ldi	r21, 0x03	; 3
    1a42:	62 ef       	ldi	r22, 0xF2	; 242
    1a44:	73 e0       	ldi	r23, 0x03	; 3
    1a46:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN15music_notations13playthemelodyEPiS0_i>
    1a4a:	08 95       	ret
	}
	else{
		playthemelody(TakeOnMe,TakeOnMeDurations,sizeoftakeonme);
    1a4c:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <sizeoftakeonme>
    1a50:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <sizeoftakeonme+0x1>
    1a54:	4a ec       	ldi	r20, 0xCA	; 202
    1a56:	52 e0       	ldi	r21, 0x02	; 2
    1a58:	6a ef       	ldi	r22, 0xFA	; 250
    1a5a:	72 e0       	ldi	r23, 0x02	; 2
    1a5c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN15music_notations13playthemelodyEPiS0_i>
    1a60:	08 95       	ret

00001a62 <__subsf3>:
    1a62:	50 58       	subi	r21, 0x80	; 128

00001a64 <__addsf3>:
    1a64:	bb 27       	eor	r27, r27
    1a66:	aa 27       	eor	r26, r26
    1a68:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__addsf3x>
    1a6c:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__fp_round>
    1a70:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fp_pscA>
    1a74:	38 f0       	brcs	.+14     	; 0x1a84 <__addsf3+0x20>
    1a76:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fp_pscB>
    1a7a:	20 f0       	brcs	.+8      	; 0x1a84 <__addsf3+0x20>
    1a7c:	39 f4       	brne	.+14     	; 0x1a8c <__addsf3+0x28>
    1a7e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a80:	19 f4       	brne	.+6      	; 0x1a88 <__addsf3+0x24>
    1a82:	26 f4       	brtc	.+8      	; 0x1a8c <__addsf3+0x28>
    1a84:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__fp_nan>
    1a88:	0e f4       	brtc	.+2      	; 0x1a8c <__addsf3+0x28>
    1a8a:	e0 95       	com	r30
    1a8c:	e7 fb       	bst	r30, 7
    1a8e:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__fp_inf>

00001a92 <__addsf3x>:
    1a92:	e9 2f       	mov	r30, r25
    1a94:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__fp_split3>
    1a98:	58 f3       	brcs	.-42     	; 0x1a70 <__addsf3+0xc>
    1a9a:	ba 17       	cp	r27, r26
    1a9c:	62 07       	cpc	r22, r18
    1a9e:	73 07       	cpc	r23, r19
    1aa0:	84 07       	cpc	r24, r20
    1aa2:	95 07       	cpc	r25, r21
    1aa4:	20 f0       	brcs	.+8      	; 0x1aae <__addsf3x+0x1c>
    1aa6:	79 f4       	brne	.+30     	; 0x1ac6 <__addsf3x+0x34>
    1aa8:	a6 f5       	brtc	.+104    	; 0x1b12 <__addsf3x+0x80>
    1aaa:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_zero>
    1aae:	0e f4       	brtc	.+2      	; 0x1ab2 <__addsf3x+0x20>
    1ab0:	e0 95       	com	r30
    1ab2:	0b 2e       	mov	r0, r27
    1ab4:	ba 2f       	mov	r27, r26
    1ab6:	a0 2d       	mov	r26, r0
    1ab8:	0b 01       	movw	r0, r22
    1aba:	b9 01       	movw	r22, r18
    1abc:	90 01       	movw	r18, r0
    1abe:	0c 01       	movw	r0, r24
    1ac0:	ca 01       	movw	r24, r20
    1ac2:	a0 01       	movw	r20, r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	ff 27       	eor	r31, r31
    1ac8:	59 1b       	sub	r21, r25
    1aca:	99 f0       	breq	.+38     	; 0x1af2 <__addsf3x+0x60>
    1acc:	59 3f       	cpi	r21, 0xF9	; 249
    1ace:	50 f4       	brcc	.+20     	; 0x1ae4 <__addsf3x+0x52>
    1ad0:	50 3e       	cpi	r21, 0xE0	; 224
    1ad2:	68 f1       	brcs	.+90     	; 0x1b2e <__addsf3x+0x9c>
    1ad4:	1a 16       	cp	r1, r26
    1ad6:	f0 40       	sbci	r31, 0x00	; 0
    1ad8:	a2 2f       	mov	r26, r18
    1ada:	23 2f       	mov	r18, r19
    1adc:	34 2f       	mov	r19, r20
    1ade:	44 27       	eor	r20, r20
    1ae0:	58 5f       	subi	r21, 0xF8	; 248
    1ae2:	f3 cf       	rjmp	.-26     	; 0x1aca <__addsf3x+0x38>
    1ae4:	46 95       	lsr	r20
    1ae6:	37 95       	ror	r19
    1ae8:	27 95       	ror	r18
    1aea:	a7 95       	ror	r26
    1aec:	f0 40       	sbci	r31, 0x00	; 0
    1aee:	53 95       	inc	r21
    1af0:	c9 f7       	brne	.-14     	; 0x1ae4 <__addsf3x+0x52>
    1af2:	7e f4       	brtc	.+30     	; 0x1b12 <__addsf3x+0x80>
    1af4:	1f 16       	cp	r1, r31
    1af6:	ba 0b       	sbc	r27, r26
    1af8:	62 0b       	sbc	r22, r18
    1afa:	73 0b       	sbc	r23, r19
    1afc:	84 0b       	sbc	r24, r20
    1afe:	ba f0       	brmi	.+46     	; 0x1b2e <__addsf3x+0x9c>
    1b00:	91 50       	subi	r25, 0x01	; 1
    1b02:	a1 f0       	breq	.+40     	; 0x1b2c <__addsf3x+0x9a>
    1b04:	ff 0f       	add	r31, r31
    1b06:	bb 1f       	adc	r27, r27
    1b08:	66 1f       	adc	r22, r22
    1b0a:	77 1f       	adc	r23, r23
    1b0c:	88 1f       	adc	r24, r24
    1b0e:	c2 f7       	brpl	.-16     	; 0x1b00 <__addsf3x+0x6e>
    1b10:	0e c0       	rjmp	.+28     	; 0x1b2e <__addsf3x+0x9c>
    1b12:	ba 0f       	add	r27, r26
    1b14:	62 1f       	adc	r22, r18
    1b16:	73 1f       	adc	r23, r19
    1b18:	84 1f       	adc	r24, r20
    1b1a:	48 f4       	brcc	.+18     	; 0x1b2e <__addsf3x+0x9c>
    1b1c:	87 95       	ror	r24
    1b1e:	77 95       	ror	r23
    1b20:	67 95       	ror	r22
    1b22:	b7 95       	ror	r27
    1b24:	f7 95       	ror	r31
    1b26:	9e 3f       	cpi	r25, 0xFE	; 254
    1b28:	08 f0       	brcs	.+2      	; 0x1b2c <__addsf3x+0x9a>
    1b2a:	b0 cf       	rjmp	.-160    	; 0x1a8c <__addsf3+0x28>
    1b2c:	93 95       	inc	r25
    1b2e:	88 0f       	add	r24, r24
    1b30:	08 f0       	brcs	.+2      	; 0x1b34 <__addsf3x+0xa2>
    1b32:	99 27       	eor	r25, r25
    1b34:	ee 0f       	add	r30, r30
    1b36:	97 95       	ror	r25
    1b38:	87 95       	ror	r24
    1b3a:	08 95       	ret

00001b3c <__cmpsf2>:
    1b3c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fp_cmp>
    1b40:	08 f4       	brcc	.+2      	; 0x1b44 <__cmpsf2+0x8>
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	08 95       	ret

00001b46 <__divsf3>:
    1b46:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__divsf3x>
    1b4a:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__fp_round>
    1b4e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fp_pscB>
    1b52:	58 f0       	brcs	.+22     	; 0x1b6a <__divsf3+0x24>
    1b54:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fp_pscA>
    1b58:	40 f0       	brcs	.+16     	; 0x1b6a <__divsf3+0x24>
    1b5a:	29 f4       	brne	.+10     	; 0x1b66 <__divsf3+0x20>
    1b5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5e:	29 f0       	breq	.+10     	; 0x1b6a <__divsf3+0x24>
    1b60:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__fp_inf>
    1b64:	51 11       	cpse	r21, r1
    1b66:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__fp_szero>
    1b6a:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__fp_nan>

00001b6e <__divsf3x>:
    1b6e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__fp_split3>
    1b72:	68 f3       	brcs	.-38     	; 0x1b4e <__divsf3+0x8>

00001b74 <__divsf3_pse>:
    1b74:	99 23       	and	r25, r25
    1b76:	b1 f3       	breq	.-20     	; 0x1b64 <__divsf3+0x1e>
    1b78:	55 23       	and	r21, r21
    1b7a:	91 f3       	breq	.-28     	; 0x1b60 <__divsf3+0x1a>
    1b7c:	95 1b       	sub	r25, r21
    1b7e:	55 0b       	sbc	r21, r21
    1b80:	bb 27       	eor	r27, r27
    1b82:	aa 27       	eor	r26, r26
    1b84:	62 17       	cp	r22, r18
    1b86:	73 07       	cpc	r23, r19
    1b88:	84 07       	cpc	r24, r20
    1b8a:	38 f0       	brcs	.+14     	; 0x1b9a <__divsf3_pse+0x26>
    1b8c:	9f 5f       	subi	r25, 0xFF	; 255
    1b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b90:	22 0f       	add	r18, r18
    1b92:	33 1f       	adc	r19, r19
    1b94:	44 1f       	adc	r20, r20
    1b96:	aa 1f       	adc	r26, r26
    1b98:	a9 f3       	breq	.-22     	; 0x1b84 <__divsf3_pse+0x10>
    1b9a:	35 d0       	rcall	.+106    	; 0x1c06 <__divsf3_pse+0x92>
    1b9c:	0e 2e       	mov	r0, r30
    1b9e:	3a f0       	brmi	.+14     	; 0x1bae <__divsf3_pse+0x3a>
    1ba0:	e0 e8       	ldi	r30, 0x80	; 128
    1ba2:	32 d0       	rcall	.+100    	; 0x1c08 <__divsf3_pse+0x94>
    1ba4:	91 50       	subi	r25, 0x01	; 1
    1ba6:	50 40       	sbci	r21, 0x00	; 0
    1ba8:	e6 95       	lsr	r30
    1baa:	00 1c       	adc	r0, r0
    1bac:	ca f7       	brpl	.-14     	; 0x1ba0 <__divsf3_pse+0x2c>
    1bae:	2b d0       	rcall	.+86     	; 0x1c06 <__divsf3_pse+0x92>
    1bb0:	fe 2f       	mov	r31, r30
    1bb2:	29 d0       	rcall	.+82     	; 0x1c06 <__divsf3_pse+0x92>
    1bb4:	66 0f       	add	r22, r22
    1bb6:	77 1f       	adc	r23, r23
    1bb8:	88 1f       	adc	r24, r24
    1bba:	bb 1f       	adc	r27, r27
    1bbc:	26 17       	cp	r18, r22
    1bbe:	37 07       	cpc	r19, r23
    1bc0:	48 07       	cpc	r20, r24
    1bc2:	ab 07       	cpc	r26, r27
    1bc4:	b0 e8       	ldi	r27, 0x80	; 128
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <__divsf3_pse+0x56>
    1bc8:	bb 0b       	sbc	r27, r27
    1bca:	80 2d       	mov	r24, r0
    1bcc:	bf 01       	movw	r22, r30
    1bce:	ff 27       	eor	r31, r31
    1bd0:	93 58       	subi	r25, 0x83	; 131
    1bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd4:	3a f0       	brmi	.+14     	; 0x1be4 <__divsf3_pse+0x70>
    1bd6:	9e 3f       	cpi	r25, 0xFE	; 254
    1bd8:	51 05       	cpc	r21, r1
    1bda:	78 f0       	brcs	.+30     	; 0x1bfa <__divsf3_pse+0x86>
    1bdc:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__fp_inf>
    1be0:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__fp_szero>
    1be4:	5f 3f       	cpi	r21, 0xFF	; 255
    1be6:	e4 f3       	brlt	.-8      	; 0x1be0 <__divsf3_pse+0x6c>
    1be8:	98 3e       	cpi	r25, 0xE8	; 232
    1bea:	d4 f3       	brlt	.-12     	; 0x1be0 <__divsf3_pse+0x6c>
    1bec:	86 95       	lsr	r24
    1bee:	77 95       	ror	r23
    1bf0:	67 95       	ror	r22
    1bf2:	b7 95       	ror	r27
    1bf4:	f7 95       	ror	r31
    1bf6:	9f 5f       	subi	r25, 0xFF	; 255
    1bf8:	c9 f7       	brne	.-14     	; 0x1bec <__divsf3_pse+0x78>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	91 1d       	adc	r25, r1
    1bfe:	96 95       	lsr	r25
    1c00:	87 95       	ror	r24
    1c02:	97 f9       	bld	r25, 7
    1c04:	08 95       	ret
    1c06:	e1 e0       	ldi	r30, 0x01	; 1
    1c08:	66 0f       	add	r22, r22
    1c0a:	77 1f       	adc	r23, r23
    1c0c:	88 1f       	adc	r24, r24
    1c0e:	bb 1f       	adc	r27, r27
    1c10:	62 17       	cp	r22, r18
    1c12:	73 07       	cpc	r23, r19
    1c14:	84 07       	cpc	r24, r20
    1c16:	ba 07       	cpc	r27, r26
    1c18:	20 f0       	brcs	.+8      	; 0x1c22 <__divsf3_pse+0xae>
    1c1a:	62 1b       	sub	r22, r18
    1c1c:	73 0b       	sbc	r23, r19
    1c1e:	84 0b       	sbc	r24, r20
    1c20:	ba 0b       	sbc	r27, r26
    1c22:	ee 1f       	adc	r30, r30
    1c24:	88 f7       	brcc	.-30     	; 0x1c08 <__divsf3_pse+0x94>
    1c26:	e0 95       	com	r30
    1c28:	08 95       	ret

00001c2a <__fixsfsi>:
    1c2a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixunssfsi>
    1c2e:	68 94       	set
    1c30:	b1 11       	cpse	r27, r1
    1c32:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__fp_szero>
    1c36:	08 95       	ret

00001c38 <__fixunssfsi>:
    1c38:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__fp_splitA>
    1c3c:	88 f0       	brcs	.+34     	; 0x1c60 <__fixunssfsi+0x28>
    1c3e:	9f 57       	subi	r25, 0x7F	; 127
    1c40:	98 f0       	brcs	.+38     	; 0x1c68 <__fixunssfsi+0x30>
    1c42:	b9 2f       	mov	r27, r25
    1c44:	99 27       	eor	r25, r25
    1c46:	b7 51       	subi	r27, 0x17	; 23
    1c48:	b0 f0       	brcs	.+44     	; 0x1c76 <__fixunssfsi+0x3e>
    1c4a:	e1 f0       	breq	.+56     	; 0x1c84 <__fixunssfsi+0x4c>
    1c4c:	66 0f       	add	r22, r22
    1c4e:	77 1f       	adc	r23, r23
    1c50:	88 1f       	adc	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	1a f0       	brmi	.+6      	; 0x1c5c <__fixunssfsi+0x24>
    1c56:	ba 95       	dec	r27
    1c58:	c9 f7       	brne	.-14     	; 0x1c4c <__fixunssfsi+0x14>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <__fixunssfsi+0x4c>
    1c5c:	b1 30       	cpi	r27, 0x01	; 1
    1c5e:	91 f0       	breq	.+36     	; 0x1c84 <__fixunssfsi+0x4c>
    1c60:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fp_zero>
    1c64:	b1 e0       	ldi	r27, 0x01	; 1
    1c66:	08 95       	ret
    1c68:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_zero>
    1c6c:	67 2f       	mov	r22, r23
    1c6e:	78 2f       	mov	r23, r24
    1c70:	88 27       	eor	r24, r24
    1c72:	b8 5f       	subi	r27, 0xF8	; 248
    1c74:	39 f0       	breq	.+14     	; 0x1c84 <__fixunssfsi+0x4c>
    1c76:	b9 3f       	cpi	r27, 0xF9	; 249
    1c78:	cc f3       	brlt	.-14     	; 0x1c6c <__fixunssfsi+0x34>
    1c7a:	86 95       	lsr	r24
    1c7c:	77 95       	ror	r23
    1c7e:	67 95       	ror	r22
    1c80:	b3 95       	inc	r27
    1c82:	d9 f7       	brne	.-10     	; 0x1c7a <__fixunssfsi+0x42>
    1c84:	3e f4       	brtc	.+14     	; 0x1c94 <__fixunssfsi+0x5c>
    1c86:	90 95       	com	r25
    1c88:	80 95       	com	r24
    1c8a:	70 95       	com	r23
    1c8c:	61 95       	neg	r22
    1c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c90:	8f 4f       	sbci	r24, 0xFF	; 255
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	08 95       	ret

00001c96 <__floatunsisf>:
    1c96:	e8 94       	clt
    1c98:	09 c0       	rjmp	.+18     	; 0x1cac <__floatsisf+0x12>

00001c9a <__floatsisf>:
    1c9a:	97 fb       	bst	r25, 7
    1c9c:	3e f4       	brtc	.+14     	; 0x1cac <__floatsisf+0x12>
    1c9e:	90 95       	com	r25
    1ca0:	80 95       	com	r24
    1ca2:	70 95       	com	r23
    1ca4:	61 95       	neg	r22
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    1caa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cac:	99 23       	and	r25, r25
    1cae:	a9 f0       	breq	.+42     	; 0x1cda <__floatsisf+0x40>
    1cb0:	f9 2f       	mov	r31, r25
    1cb2:	96 e9       	ldi	r25, 0x96	; 150
    1cb4:	bb 27       	eor	r27, r27
    1cb6:	93 95       	inc	r25
    1cb8:	f6 95       	lsr	r31
    1cba:	87 95       	ror	r24
    1cbc:	77 95       	ror	r23
    1cbe:	67 95       	ror	r22
    1cc0:	b7 95       	ror	r27
    1cc2:	f1 11       	cpse	r31, r1
    1cc4:	f8 cf       	rjmp	.-16     	; 0x1cb6 <__floatsisf+0x1c>
    1cc6:	fa f4       	brpl	.+62     	; 0x1d06 <__floatsisf+0x6c>
    1cc8:	bb 0f       	add	r27, r27
    1cca:	11 f4       	brne	.+4      	; 0x1cd0 <__floatsisf+0x36>
    1ccc:	60 ff       	sbrs	r22, 0
    1cce:	1b c0       	rjmp	.+54     	; 0x1d06 <__floatsisf+0x6c>
    1cd0:	6f 5f       	subi	r22, 0xFF	; 255
    1cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	16 c0       	rjmp	.+44     	; 0x1d06 <__floatsisf+0x6c>
    1cda:	88 23       	and	r24, r24
    1cdc:	11 f0       	breq	.+4      	; 0x1ce2 <__floatsisf+0x48>
    1cde:	96 e9       	ldi	r25, 0x96	; 150
    1ce0:	11 c0       	rjmp	.+34     	; 0x1d04 <__floatsisf+0x6a>
    1ce2:	77 23       	and	r23, r23
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <__floatsisf+0x54>
    1ce6:	9e e8       	ldi	r25, 0x8E	; 142
    1ce8:	87 2f       	mov	r24, r23
    1cea:	76 2f       	mov	r23, r22
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <__floatsisf+0x5e>
    1cee:	66 23       	and	r22, r22
    1cf0:	71 f0       	breq	.+28     	; 0x1d0e <__floatsisf+0x74>
    1cf2:	96 e8       	ldi	r25, 0x86	; 134
    1cf4:	86 2f       	mov	r24, r22
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	2a f0       	brmi	.+10     	; 0x1d06 <__floatsisf+0x6c>
    1cfc:	9a 95       	dec	r25
    1cfe:	66 0f       	add	r22, r22
    1d00:	77 1f       	adc	r23, r23
    1d02:	88 1f       	adc	r24, r24
    1d04:	da f7       	brpl	.-10     	; 0x1cfc <__floatsisf+0x62>
    1d06:	88 0f       	add	r24, r24
    1d08:	96 95       	lsr	r25
    1d0a:	87 95       	ror	r24
    1d0c:	97 f9       	bld	r25, 7
    1d0e:	08 95       	ret

00001d10 <__fp_cmp>:
    1d10:	99 0f       	add	r25, r25
    1d12:	00 08       	sbc	r0, r0
    1d14:	55 0f       	add	r21, r21
    1d16:	aa 0b       	sbc	r26, r26
    1d18:	e0 e8       	ldi	r30, 0x80	; 128
    1d1a:	fe ef       	ldi	r31, 0xFE	; 254
    1d1c:	16 16       	cp	r1, r22
    1d1e:	17 06       	cpc	r1, r23
    1d20:	e8 07       	cpc	r30, r24
    1d22:	f9 07       	cpc	r31, r25
    1d24:	c0 f0       	brcs	.+48     	; 0x1d56 <__fp_cmp+0x46>
    1d26:	12 16       	cp	r1, r18
    1d28:	13 06       	cpc	r1, r19
    1d2a:	e4 07       	cpc	r30, r20
    1d2c:	f5 07       	cpc	r31, r21
    1d2e:	98 f0       	brcs	.+38     	; 0x1d56 <__fp_cmp+0x46>
    1d30:	62 1b       	sub	r22, r18
    1d32:	73 0b       	sbc	r23, r19
    1d34:	84 0b       	sbc	r24, r20
    1d36:	95 0b       	sbc	r25, r21
    1d38:	39 f4       	brne	.+14     	; 0x1d48 <__fp_cmp+0x38>
    1d3a:	0a 26       	eor	r0, r26
    1d3c:	61 f0       	breq	.+24     	; 0x1d56 <__fp_cmp+0x46>
    1d3e:	23 2b       	or	r18, r19
    1d40:	24 2b       	or	r18, r20
    1d42:	25 2b       	or	r18, r21
    1d44:	21 f4       	brne	.+8      	; 0x1d4e <__fp_cmp+0x3e>
    1d46:	08 95       	ret
    1d48:	0a 26       	eor	r0, r26
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <__fp_cmp+0x3e>
    1d4c:	a1 40       	sbci	r26, 0x01	; 1
    1d4e:	a6 95       	lsr	r26
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	81 1d       	adc	r24, r1
    1d54:	81 1d       	adc	r24, r1
    1d56:	08 95       	ret

00001d58 <__fp_inf>:
    1d58:	97 f9       	bld	r25, 7
    1d5a:	9f 67       	ori	r25, 0x7F	; 127
    1d5c:	80 e8       	ldi	r24, 0x80	; 128
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	08 95       	ret

00001d64 <__fp_nan>:
    1d64:	9f ef       	ldi	r25, 0xFF	; 255
    1d66:	80 ec       	ldi	r24, 0xC0	; 192
    1d68:	08 95       	ret

00001d6a <__fp_pscA>:
    1d6a:	00 24       	eor	r0, r0
    1d6c:	0a 94       	dec	r0
    1d6e:	16 16       	cp	r1, r22
    1d70:	17 06       	cpc	r1, r23
    1d72:	18 06       	cpc	r1, r24
    1d74:	09 06       	cpc	r0, r25
    1d76:	08 95       	ret

00001d78 <__fp_pscB>:
    1d78:	00 24       	eor	r0, r0
    1d7a:	0a 94       	dec	r0
    1d7c:	12 16       	cp	r1, r18
    1d7e:	13 06       	cpc	r1, r19
    1d80:	14 06       	cpc	r1, r20
    1d82:	05 06       	cpc	r0, r21
    1d84:	08 95       	ret

00001d86 <__fp_round>:
    1d86:	09 2e       	mov	r0, r25
    1d88:	03 94       	inc	r0
    1d8a:	00 0c       	add	r0, r0
    1d8c:	11 f4       	brne	.+4      	; 0x1d92 <__fp_round+0xc>
    1d8e:	88 23       	and	r24, r24
    1d90:	52 f0       	brmi	.+20     	; 0x1da6 <__fp_round+0x20>
    1d92:	bb 0f       	add	r27, r27
    1d94:	40 f4       	brcc	.+16     	; 0x1da6 <__fp_round+0x20>
    1d96:	bf 2b       	or	r27, r31
    1d98:	11 f4       	brne	.+4      	; 0x1d9e <__fp_round+0x18>
    1d9a:	60 ff       	sbrs	r22, 0
    1d9c:	04 c0       	rjmp	.+8      	; 0x1da6 <__fp_round+0x20>
    1d9e:	6f 5f       	subi	r22, 0xFF	; 255
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	8f 4f       	sbci	r24, 0xFF	; 255
    1da4:	9f 4f       	sbci	r25, 0xFF	; 255
    1da6:	08 95       	ret

00001da8 <__fp_split3>:
    1da8:	57 fd       	sbrc	r21, 7
    1daa:	90 58       	subi	r25, 0x80	; 128
    1dac:	44 0f       	add	r20, r20
    1dae:	55 1f       	adc	r21, r21
    1db0:	59 f0       	breq	.+22     	; 0x1dc8 <__fp_splitA+0x10>
    1db2:	5f 3f       	cpi	r21, 0xFF	; 255
    1db4:	71 f0       	breq	.+28     	; 0x1dd2 <__fp_splitA+0x1a>
    1db6:	47 95       	ror	r20

00001db8 <__fp_splitA>:
    1db8:	88 0f       	add	r24, r24
    1dba:	97 fb       	bst	r25, 7
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	61 f0       	breq	.+24     	; 0x1dd8 <__fp_splitA+0x20>
    1dc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc2:	79 f0       	breq	.+30     	; 0x1de2 <__fp_splitA+0x2a>
    1dc4:	87 95       	ror	r24
    1dc6:	08 95       	ret
    1dc8:	12 16       	cp	r1, r18
    1dca:	13 06       	cpc	r1, r19
    1dcc:	14 06       	cpc	r1, r20
    1dce:	55 1f       	adc	r21, r21
    1dd0:	f2 cf       	rjmp	.-28     	; 0x1db6 <__fp_split3+0xe>
    1dd2:	46 95       	lsr	r20
    1dd4:	f1 df       	rcall	.-30     	; 0x1db8 <__fp_splitA>
    1dd6:	08 c0       	rjmp	.+16     	; 0x1de8 <__fp_splitA+0x30>
    1dd8:	16 16       	cp	r1, r22
    1dda:	17 06       	cpc	r1, r23
    1ddc:	18 06       	cpc	r1, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	f1 cf       	rjmp	.-30     	; 0x1dc4 <__fp_splitA+0xc>
    1de2:	86 95       	lsr	r24
    1de4:	71 05       	cpc	r23, r1
    1de6:	61 05       	cpc	r22, r1
    1de8:	08 94       	sec
    1dea:	08 95       	ret

00001dec <__fp_zero>:
    1dec:	e8 94       	clt

00001dee <__fp_szero>:
    1dee:	bb 27       	eor	r27, r27
    1df0:	66 27       	eor	r22, r22
    1df2:	77 27       	eor	r23, r23
    1df4:	cb 01       	movw	r24, r22
    1df6:	97 f9       	bld	r25, 7
    1df8:	08 95       	ret

00001dfa <__gesf2>:
    1dfa:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fp_cmp>
    1dfe:	08 f4       	brcc	.+2      	; 0x1e02 <__gesf2+0x8>
    1e00:	8f ef       	ldi	r24, 0xFF	; 255
    1e02:	08 95       	ret

00001e04 <__mulsf3>:
    1e04:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__mulsf3x>
    1e08:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__fp_round>
    1e0c:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fp_pscA>
    1e10:	38 f0       	brcs	.+14     	; 0x1e20 <__mulsf3+0x1c>
    1e12:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fp_pscB>
    1e16:	20 f0       	brcs	.+8      	; 0x1e20 <__mulsf3+0x1c>
    1e18:	95 23       	and	r25, r21
    1e1a:	11 f0       	breq	.+4      	; 0x1e20 <__mulsf3+0x1c>
    1e1c:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__fp_inf>
    1e20:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__fp_nan>
    1e24:	11 24       	eor	r1, r1
    1e26:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__fp_szero>

00001e2a <__mulsf3x>:
    1e2a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__fp_split3>
    1e2e:	70 f3       	brcs	.-36     	; 0x1e0c <__mulsf3+0x8>

00001e30 <__mulsf3_pse>:
    1e30:	95 9f       	mul	r25, r21
    1e32:	c1 f3       	breq	.-16     	; 0x1e24 <__mulsf3+0x20>
    1e34:	95 0f       	add	r25, r21
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	55 1f       	adc	r21, r21
    1e3a:	62 9f       	mul	r22, r18
    1e3c:	f0 01       	movw	r30, r0
    1e3e:	72 9f       	mul	r23, r18
    1e40:	bb 27       	eor	r27, r27
    1e42:	f0 0d       	add	r31, r0
    1e44:	b1 1d       	adc	r27, r1
    1e46:	63 9f       	mul	r22, r19
    1e48:	aa 27       	eor	r26, r26
    1e4a:	f0 0d       	add	r31, r0
    1e4c:	b1 1d       	adc	r27, r1
    1e4e:	aa 1f       	adc	r26, r26
    1e50:	64 9f       	mul	r22, r20
    1e52:	66 27       	eor	r22, r22
    1e54:	b0 0d       	add	r27, r0
    1e56:	a1 1d       	adc	r26, r1
    1e58:	66 1f       	adc	r22, r22
    1e5a:	82 9f       	mul	r24, r18
    1e5c:	22 27       	eor	r18, r18
    1e5e:	b0 0d       	add	r27, r0
    1e60:	a1 1d       	adc	r26, r1
    1e62:	62 1f       	adc	r22, r18
    1e64:	73 9f       	mul	r23, r19
    1e66:	b0 0d       	add	r27, r0
    1e68:	a1 1d       	adc	r26, r1
    1e6a:	62 1f       	adc	r22, r18
    1e6c:	83 9f       	mul	r24, r19
    1e6e:	a0 0d       	add	r26, r0
    1e70:	61 1d       	adc	r22, r1
    1e72:	22 1f       	adc	r18, r18
    1e74:	74 9f       	mul	r23, r20
    1e76:	33 27       	eor	r19, r19
    1e78:	a0 0d       	add	r26, r0
    1e7a:	61 1d       	adc	r22, r1
    1e7c:	23 1f       	adc	r18, r19
    1e7e:	84 9f       	mul	r24, r20
    1e80:	60 0d       	add	r22, r0
    1e82:	21 1d       	adc	r18, r1
    1e84:	82 2f       	mov	r24, r18
    1e86:	76 2f       	mov	r23, r22
    1e88:	6a 2f       	mov	r22, r26
    1e8a:	11 24       	eor	r1, r1
    1e8c:	9f 57       	subi	r25, 0x7F	; 127
    1e8e:	50 40       	sbci	r21, 0x00	; 0
    1e90:	9a f0       	brmi	.+38     	; 0x1eb8 <__mulsf3_pse+0x88>
    1e92:	f1 f0       	breq	.+60     	; 0x1ed0 <__mulsf3_pse+0xa0>
    1e94:	88 23       	and	r24, r24
    1e96:	4a f0       	brmi	.+18     	; 0x1eaa <__mulsf3_pse+0x7a>
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	bb 1f       	adc	r27, r27
    1e9e:	66 1f       	adc	r22, r22
    1ea0:	77 1f       	adc	r23, r23
    1ea2:	88 1f       	adc	r24, r24
    1ea4:	91 50       	subi	r25, 0x01	; 1
    1ea6:	50 40       	sbci	r21, 0x00	; 0
    1ea8:	a9 f7       	brne	.-22     	; 0x1e94 <__mulsf3_pse+0x64>
    1eaa:	9e 3f       	cpi	r25, 0xFE	; 254
    1eac:	51 05       	cpc	r21, r1
    1eae:	80 f0       	brcs	.+32     	; 0x1ed0 <__mulsf3_pse+0xa0>
    1eb0:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__fp_inf>
    1eb4:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__fp_szero>
    1eb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eba:	e4 f3       	brlt	.-8      	; 0x1eb4 <__mulsf3_pse+0x84>
    1ebc:	98 3e       	cpi	r25, 0xE8	; 232
    1ebe:	d4 f3       	brlt	.-12     	; 0x1eb4 <__mulsf3_pse+0x84>
    1ec0:	86 95       	lsr	r24
    1ec2:	77 95       	ror	r23
    1ec4:	67 95       	ror	r22
    1ec6:	b7 95       	ror	r27
    1ec8:	f7 95       	ror	r31
    1eca:	e7 95       	ror	r30
    1ecc:	9f 5f       	subi	r25, 0xFF	; 255
    1ece:	c1 f7       	brne	.-16     	; 0x1ec0 <__mulsf3_pse+0x90>
    1ed0:	fe 2b       	or	r31, r30
    1ed2:	88 0f       	add	r24, r24
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	96 95       	lsr	r25
    1ed8:	87 95       	ror	r24
    1eda:	97 f9       	bld	r25, 7
    1edc:	08 95       	ret

00001ede <__divmodhi4>:
    1ede:	97 fb       	bst	r25, 7
    1ee0:	07 2e       	mov	r0, r23
    1ee2:	16 f4       	brtc	.+4      	; 0x1ee8 <__divmodhi4+0xa>
    1ee4:	00 94       	com	r0
    1ee6:	07 d0       	rcall	.+14     	; 0x1ef6 <__divmodhi4_neg1>
    1ee8:	77 fd       	sbrc	r23, 7
    1eea:	09 d0       	rcall	.+18     	; 0x1efe <__divmodhi4_neg2>
    1eec:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__udivmodhi4>
    1ef0:	07 fc       	sbrc	r0, 7
    1ef2:	05 d0       	rcall	.+10     	; 0x1efe <__divmodhi4_neg2>
    1ef4:	3e f4       	brtc	.+14     	; 0x1f04 <__divmodhi4_exit>

00001ef6 <__divmodhi4_neg1>:
    1ef6:	90 95       	com	r25
    1ef8:	81 95       	neg	r24
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	08 95       	ret

00001efe <__divmodhi4_neg2>:
    1efe:	70 95       	com	r23
    1f00:	61 95       	neg	r22
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255

00001f04 <__divmodhi4_exit>:
    1f04:	08 95       	ret

00001f06 <__udivmodhi4>:
    1f06:	aa 1b       	sub	r26, r26
    1f08:	bb 1b       	sub	r27, r27
    1f0a:	51 e1       	ldi	r21, 0x11	; 17
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <__udivmodhi4_ep>

00001f0e <__udivmodhi4_loop>:
    1f0e:	aa 1f       	adc	r26, r26
    1f10:	bb 1f       	adc	r27, r27
    1f12:	a6 17       	cp	r26, r22
    1f14:	b7 07       	cpc	r27, r23
    1f16:	10 f0       	brcs	.+4      	; 0x1f1c <__udivmodhi4_ep>
    1f18:	a6 1b       	sub	r26, r22
    1f1a:	b7 0b       	sbc	r27, r23

00001f1c <__udivmodhi4_ep>:
    1f1c:	88 1f       	adc	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	5a 95       	dec	r21
    1f22:	a9 f7       	brne	.-22     	; 0x1f0e <__udivmodhi4_loop>
    1f24:	80 95       	com	r24
    1f26:	90 95       	com	r25
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	08 95       	ret

00001f2e <_exit>:
    1f2e:	f8 94       	cli

00001f30 <__stop_program>:
    1f30:	ff cf       	rjmp	.-2      	; 0x1f30 <__stop_program>
